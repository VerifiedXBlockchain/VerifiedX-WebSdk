(function () { function r(e, n, t) { function o(i, f) { if (!n[i]) { if (!e[i]) { var c = "function" == typeof require && require; if (!f && c) return c(i, !0); if (u) return u(i, !0); var a = new Error("Cannot find module '" + i + "'"); throw a.code = "MODULE_NOT_FOUND", a } var p = n[i] = { exports: {} }; e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r) }, p, p.exports, r, e, n, t) } return n[i].exports } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)o(t[i]); return o } return r })()({
  1: [function (require, module, exports) {
    (function (process, global, Buffer, __argument0, __argument1, __argument2, __argument3, setImmediate) {
      (function () {
        "use strict";
        (() => {
          var __create = Object.create;
          var __defProp = Object.defineProperty;
          var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
          var __getOwnPropNames = Object.getOwnPropertyNames;
          var __getProtoOf = Object.getPrototypeOf;
          var __hasOwnProp = Object.prototype.hasOwnProperty;
          var __commonJS = (cb, mod) => function __require() {
            return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
          };
          var __export = (target, all3) => {
            for (var name in all3)
              __defProp(target, name, { get: all3[name], enumerable: true });
          };
          var __copyProps = (to, from, except, desc) => {
            if (from && typeof from === "object" || typeof from === "function") {
              for (let key of __getOwnPropNames(from))
                if (!__hasOwnProp.call(to, key) && key !== except)
                  __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
            }
            return to;
          };
          var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
            // If the importer is in node compatibility mode or this is not an ESM
            // file that has been converted to a CommonJS file using a Babel-
            // compatible transform (i.e. "__esModule" has not been set), then set
            // "default" to the CommonJS "module.exports" for node compatibility.
            isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
            mod
          ));
          var __async = (__this, __arguments, generator) => {
            return new Promise((resolve, reject) => {
              var fulfilled = (value) => {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              };
              var rejected = (value) => {
                try {
                  step(generator.throw(value));
                } catch (e) {
                  reject(e);
                }
              };
              var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
              step((generator = generator.apply(__this, __arguments)).next());
            });
          };

          // node_modules/crypto-js/core.js
          var require_core = __commonJS({
            "node_modules/crypto-js/core.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory();
                } else if (typeof define === "function" && define.amd) {
                  define([], factory);
                } else {
                  root.CryptoJS = factory();
                }
              })(exports, function () {
                var CryptoJS3 = CryptoJS3 || function (Math2, undefined2) {
                  var create = Object.create || function () {
                    function F() {
                    }
                    ;
                    return function (obj) {
                      var subtype;
                      F.prototype = obj;
                      subtype = new F();
                      F.prototype = null;
                      return subtype;
                    };
                  }();
                  var C = {};
                  var C_lib = C.lib = {};
                  var Base = C_lib.Base = function () {
                    return {
                      /**
                       * Creates a new object that inherits from this object.
                       *
                       * @param {Object} overrides Properties to copy into the new object.
                       *
                       * @return {Object} The new object.
                       *
                       * @static
                       *
                       * @example
                       *
                       *     var MyType = CryptoJS.lib.Base.extend({
                       *         field: 'value',
                       *
                       *         method: function () {
                       *         }
                       *     });
                       */
                      extend: function (overrides) {
                        var subtype = create(this);
                        if (overrides) {
                          subtype.mixIn(overrides);
                        }
                        if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                          subtype.init = function () {
                            subtype.$super.init.apply(this, arguments);
                          };
                        }
                        subtype.init.prototype = subtype;
                        subtype.$super = this;
                        return subtype;
                      },
                      /**
                       * Extends this object and runs the init method.
                       * Arguments to create() will be passed to init().
                       *
                       * @return {Object} The new object.
                       *
                       * @static
                       *
                       * @example
                       *
                       *     var instance = MyType.create();
                       */
                      create: function () {
                        var instance = this.extend();
                        instance.init.apply(instance, arguments);
                        return instance;
                      },
                      /**
                       * Initializes a newly created object.
                       * Override this method to add some logic when your objects are created.
                       *
                       * @example
                       *
                       *     var MyType = CryptoJS.lib.Base.extend({
                       *         init: function () {
                       *             // ...
                       *         }
                       *     });
                       */
                      init: function () {
                      },
                      /**
                       * Copies properties into this object.
                       *
                       * @param {Object} properties The properties to mix in.
                       *
                       * @example
                       *
                       *     MyType.mixIn({
                       *         field: 'value'
                       *     });
                       */
                      mixIn: function (properties) {
                        for (var propertyName in properties) {
                          if (properties.hasOwnProperty(propertyName)) {
                            this[propertyName] = properties[propertyName];
                          }
                        }
                        if (properties.hasOwnProperty("toString")) {
                          this.toString = properties.toString;
                        }
                      },
                      /**
                       * Creates a copy of this object.
                       *
                       * @return {Object} The clone.
                       *
                       * @example
                       *
                       *     var clone = instance.clone();
                       */
                      clone: function () {
                        return this.init.prototype.extend(this);
                      }
                    };
                  }();
                  var WordArray = C_lib.WordArray = Base.extend({
                    /**
                     * Initializes a newly created word array.
                     *
                     * @param {Array} words (Optional) An array of 32-bit words.
                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.lib.WordArray.create();
                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                     */
                    init: function (words, sigBytes) {
                      words = this.words = words || [];
                      if (sigBytes != undefined2) {
                        this.sigBytes = sigBytes;
                      } else {
                        this.sigBytes = words.length * 4;
                      }
                    },
                    /**
                     * Converts this word array to a string.
                     *
                     * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
                     *
                     * @return {string} The stringified word array.
                     *
                     * @example
                     *
                     *     var string = wordArray + '';
                     *     var string = wordArray.toString();
                     *     var string = wordArray.toString(CryptoJS.enc.Utf8);
                     */
                    toString: function (encoder) {
                      return (encoder || Hex).stringify(this);
                    },
                    /**
                     * Concatenates a word array to this word array.
                     *
                     * @param {WordArray} wordArray The word array to append.
                     *
                     * @return {WordArray} This word array.
                     *
                     * @example
                     *
                     *     wordArray1.concat(wordArray2);
                     */
                    concat: function (wordArray) {
                      var thisWords = this.words;
                      var thatWords = wordArray.words;
                      var thisSigBytes = this.sigBytes;
                      var thatSigBytes = wordArray.sigBytes;
                      this.clamp();
                      if (thisSigBytes % 4) {
                        for (var i = 0; i < thatSigBytes; i++) {
                          var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                          thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                        }
                      } else {
                        for (var i = 0; i < thatSigBytes; i += 4) {
                          thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
                        }
                      }
                      this.sigBytes += thatSigBytes;
                      return this;
                    },
                    /**
                     * Removes insignificant bits.
                     *
                     * @example
                     *
                     *     wordArray.clamp();
                     */
                    clamp: function () {
                      var words = this.words;
                      var sigBytes = this.sigBytes;
                      words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
                      words.length = Math2.ceil(sigBytes / 4);
                    },
                    /**
                     * Creates a copy of this word array.
                     *
                     * @return {WordArray} The clone.
                     *
                     * @example
                     *
                     *     var clone = wordArray.clone();
                     */
                    clone: function () {
                      var clone = Base.clone.call(this);
                      clone.words = this.words.slice(0);
                      return clone;
                    },
                    /**
                     * Creates a word array filled with random bytes.
                     *
                     * @param {number} nBytes The number of random bytes to generate.
                     *
                     * @return {WordArray} The random word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.lib.WordArray.random(16);
                     */
                    random: function (nBytes) {
                      var words = [];
                      var r = function (m_w) {
                        var m_w = m_w;
                        var m_z = 987654321;
                        var mask = 4294967295;
                        return function () {
                          m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                          m_w = 18e3 * (m_w & 65535) + (m_w >> 16) & mask;
                          var result = (m_z << 16) + m_w & mask;
                          result /= 4294967296;
                          result += 0.5;
                          return result * (Math2.random() > 0.5 ? 1 : -1);
                        };
                      };
                      for (var i = 0, rcache; i < nBytes; i += 4) {
                        var _r = r((rcache || Math2.random()) * 4294967296);
                        rcache = _r() * 987654071;
                        words.push(_r() * 4294967296 | 0);
                      }
                      return new WordArray.init(words, nBytes);
                    }
                  });
                  var C_enc = C.enc = {};
                  var Hex = C_enc.Hex = {
                    /**
                     * Converts a word array to a hex string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The hex string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      var words = wordArray.words;
                      var sigBytes = wordArray.sigBytes;
                      var hexChars = [];
                      for (var i = 0; i < sigBytes; i++) {
                        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                        hexChars.push((bite >>> 4).toString(16));
                        hexChars.push((bite & 15).toString(16));
                      }
                      return hexChars.join("");
                    },
                    /**
                     * Converts a hex string to a word array.
                     *
                     * @param {string} hexStr The hex string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
                     */
                    parse: function (hexStr) {
                      var hexStrLength = hexStr.length;
                      var words = [];
                      for (var i = 0; i < hexStrLength; i += 2) {
                        words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
                      }
                      return new WordArray.init(words, hexStrLength / 2);
                    }
                  };
                  var Latin1 = C_enc.Latin1 = {
                    /**
                     * Converts a word array to a Latin1 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The Latin1 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      var words = wordArray.words;
                      var sigBytes = wordArray.sigBytes;
                      var latin1Chars = [];
                      for (var i = 0; i < sigBytes; i++) {
                        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                        latin1Chars.push(String.fromCharCode(bite));
                      }
                      return latin1Chars.join("");
                    },
                    /**
                     * Converts a Latin1 string to a word array.
                     *
                     * @param {string} latin1Str The Latin1 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
                     */
                    parse: function (latin1Str) {
                      var latin1StrLength = latin1Str.length;
                      var words = [];
                      for (var i = 0; i < latin1StrLength; i++) {
                        words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
                      }
                      return new WordArray.init(words, latin1StrLength);
                    }
                  };
                  var Utf8 = C_enc.Utf8 = {
                    /**
                     * Converts a word array to a UTF-8 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The UTF-8 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      try {
                        return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                      } catch (e) {
                        throw new Error("Malformed UTF-8 data");
                      }
                    },
                    /**
                     * Converts a UTF-8 string to a word array.
                     *
                     * @param {string} utf8Str The UTF-8 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
                     */
                    parse: function (utf8Str) {
                      return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
                    }
                  };
                  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
                    /**
                     * Resets this block algorithm's data buffer to its initial state.
                     *
                     * @example
                     *
                     *     bufferedBlockAlgorithm.reset();
                     */
                    reset: function () {
                      this._data = new WordArray.init();
                      this._nDataBytes = 0;
                    },
                    /**
                     * Adds new data to this block algorithm's buffer.
                     *
                     * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
                     *
                     * @example
                     *
                     *     bufferedBlockAlgorithm._append('data');
                     *     bufferedBlockAlgorithm._append(wordArray);
                     */
                    _append: function (data) {
                      if (typeof data == "string") {
                        data = Utf8.parse(data);
                      }
                      this._data.concat(data);
                      this._nDataBytes += data.sigBytes;
                    },
                    /**
                     * Processes available data blocks.
                     *
                     * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
                     *
                     * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
                     *
                     * @return {WordArray} The processed data.
                     *
                     * @example
                     *
                     *     var processedData = bufferedBlockAlgorithm._process();
                     *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
                     */
                    _process: function (doFlush) {
                      var data = this._data;
                      var dataWords = data.words;
                      var dataSigBytes = data.sigBytes;
                      var blockSize = this.blockSize;
                      var blockSizeBytes = blockSize * 4;
                      var nBlocksReady = dataSigBytes / blockSizeBytes;
                      if (doFlush) {
                        nBlocksReady = Math2.ceil(nBlocksReady);
                      } else {
                        nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
                      }
                      var nWordsReady = nBlocksReady * blockSize;
                      var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
                      if (nWordsReady) {
                        for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                          this._doProcessBlock(dataWords, offset);
                        }
                        var processedWords = dataWords.splice(0, nWordsReady);
                        data.sigBytes -= nBytesReady;
                      }
                      return new WordArray.init(processedWords, nBytesReady);
                    },
                    /**
                     * Creates a copy of this object.
                     *
                     * @return {Object} The clone.
                     *
                     * @example
                     *
                     *     var clone = bufferedBlockAlgorithm.clone();
                     */
                    clone: function () {
                      var clone = Base.clone.call(this);
                      clone._data = this._data.clone();
                      return clone;
                    },
                    _minBufferSize: 0
                  });
                  var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
                    /**
                     * Configuration options.
                     */
                    cfg: Base.extend(),
                    /**
                     * Initializes a newly created hasher.
                     *
                     * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                     *
                     * @example
                     *
                     *     var hasher = CryptoJS.algo.SHA256.create();
                     */
                    init: function (cfg) {
                      this.cfg = this.cfg.extend(cfg);
                      this.reset();
                    },
                    /**
                     * Resets this hasher to its initial state.
                     *
                     * @example
                     *
                     *     hasher.reset();
                     */
                    reset: function () {
                      BufferedBlockAlgorithm.reset.call(this);
                      this._doReset();
                    },
                    /**
                     * Updates this hasher with a message.
                     *
                     * @param {WordArray|string} messageUpdate The message to append.
                     *
                     * @return {Hasher} This hasher.
                     *
                     * @example
                     *
                     *     hasher.update('message');
                     *     hasher.update(wordArray);
                     */
                    update: function (messageUpdate) {
                      this._append(messageUpdate);
                      this._process();
                      return this;
                    },
                    /**
                     * Finalizes the hash computation.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} messageUpdate (Optional) A final message update.
                     *
                     * @return {WordArray} The hash.
                     *
                     * @example
                     *
                     *     var hash = hasher.finalize();
                     *     var hash = hasher.finalize('message');
                     *     var hash = hasher.finalize(wordArray);
                     */
                    finalize: function (messageUpdate) {
                      if (messageUpdate) {
                        this._append(messageUpdate);
                      }
                      var hash = this._doFinalize();
                      return hash;
                    },
                    blockSize: 512 / 32,
                    /**
                     * Creates a shortcut function to a hasher's object interface.
                     *
                     * @param {Hasher} hasher The hasher to create a helper for.
                     *
                     * @return {Function} The shortcut function.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                     */
                    _createHelper: function (hasher) {
                      return function (message, cfg) {
                        return new hasher.init(cfg).finalize(message);
                      };
                    },
                    /**
                     * Creates a shortcut function to the HMAC's object interface.
                     *
                     * @param {Hasher} hasher The hasher to use in this HMAC helper.
                     *
                     * @return {Function} The shortcut function.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
                     */
                    _createHmacHelper: function (hasher) {
                      return function (message, key) {
                        return new C_algo.HMAC.init(hasher, key).finalize(message);
                      };
                    }
                  });
                  var C_algo = C.algo = {};
                  return C;
                }(Math);
                return CryptoJS3;
              });
            }
          });

          // node_modules/crypto-js/x64-core.js
          var require_x64_core = __commonJS({
            "node_modules/crypto-js/x64-core.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (undefined2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Base = C_lib.Base;
                  var X32WordArray = C_lib.WordArray;
                  var C_x64 = C.x64 = {};
                  var X64Word = C_x64.Word = Base.extend({
                    /**
                     * Initializes a newly created 64-bit word.
                     *
                     * @param {number} high The high 32 bits.
                     * @param {number} low The low 32 bits.
                     *
                     * @example
                     *
                     *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
                     */
                    init: function (high, low) {
                      this.high = high;
                      this.low = low;
                    }
                    /**
                     * Bitwise NOTs this word.
                     *
                     * @return {X64Word} A new x64-Word object after negating.
                     *
                     * @example
                     *
                     *     var negated = x64Word.not();
                     */
                    // not: function () {
                    // var high = ~this.high;
                    // var low = ~this.low;
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Bitwise ANDs this word with the passed word.
                     *
                     * @param {X64Word} word The x64-Word to AND with this word.
                     *
                     * @return {X64Word} A new x64-Word object after ANDing.
                     *
                     * @example
                     *
                     *     var anded = x64Word.and(anotherX64Word);
                     */
                    // and: function (word) {
                    // var high = this.high & word.high;
                    // var low = this.low & word.low;
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Bitwise ORs this word with the passed word.
                     *
                     * @param {X64Word} word The x64-Word to OR with this word.
                     *
                     * @return {X64Word} A new x64-Word object after ORing.
                     *
                     * @example
                     *
                     *     var ored = x64Word.or(anotherX64Word);
                     */
                    // or: function (word) {
                    // var high = this.high | word.high;
                    // var low = this.low | word.low;
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Bitwise XORs this word with the passed word.
                     *
                     * @param {X64Word} word The x64-Word to XOR with this word.
                     *
                     * @return {X64Word} A new x64-Word object after XORing.
                     *
                     * @example
                     *
                     *     var xored = x64Word.xor(anotherX64Word);
                     */
                    // xor: function (word) {
                    // var high = this.high ^ word.high;
                    // var low = this.low ^ word.low;
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Shifts this word n bits to the left.
                     *
                     * @param {number} n The number of bits to shift.
                     *
                     * @return {X64Word} A new x64-Word object after shifting.
                     *
                     * @example
                     *
                     *     var shifted = x64Word.shiftL(25);
                     */
                    // shiftL: function (n) {
                    // if (n < 32) {
                    // var high = (this.high << n) | (this.low >>> (32 - n));
                    // var low = this.low << n;
                    // } else {
                    // var high = this.low << (n - 32);
                    // var low = 0;
                    // }
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Shifts this word n bits to the right.
                     *
                     * @param {number} n The number of bits to shift.
                     *
                     * @return {X64Word} A new x64-Word object after shifting.
                     *
                     * @example
                     *
                     *     var shifted = x64Word.shiftR(7);
                     */
                    // shiftR: function (n) {
                    // if (n < 32) {
                    // var low = (this.low >>> n) | (this.high << (32 - n));
                    // var high = this.high >>> n;
                    // } else {
                    // var low = this.high >>> (n - 32);
                    // var high = 0;
                    // }
                    // return X64Word.create(high, low);
                    // },
                    /**
                     * Rotates this word n bits to the left.
                     *
                     * @param {number} n The number of bits to rotate.
                     *
                     * @return {X64Word} A new x64-Word object after rotating.
                     *
                     * @example
                     *
                     *     var rotated = x64Word.rotL(25);
                     */
                    // rotL: function (n) {
                    // return this.shiftL(n).or(this.shiftR(64 - n));
                    // },
                    /**
                     * Rotates this word n bits to the right.
                     *
                     * @param {number} n The number of bits to rotate.
                     *
                     * @return {X64Word} A new x64-Word object after rotating.
                     *
                     * @example
                     *
                     *     var rotated = x64Word.rotR(7);
                     */
                    // rotR: function (n) {
                    // return this.shiftR(n).or(this.shiftL(64 - n));
                    // },
                    /**
                     * Adds this word with the passed word.
                     *
                     * @param {X64Word} word The x64-Word to add with this word.
                     *
                     * @return {X64Word} A new x64-Word object after adding.
                     *
                     * @example
                     *
                     *     var added = x64Word.add(anotherX64Word);
                     */
                    // add: function (word) {
                    // var low = (this.low + word.low) | 0;
                    // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
                    // var high = (this.high + word.high + carry) | 0;
                    // return X64Word.create(high, low);
                    // }
                  });
                  var X64WordArray = C_x64.WordArray = Base.extend({
                    /**
                     * Initializes a newly created word array.
                     *
                     * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.x64.WordArray.create();
                     *
                     *     var wordArray = CryptoJS.x64.WordArray.create([
                     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                     *     ]);
                     *
                     *     var wordArray = CryptoJS.x64.WordArray.create([
                     *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                     *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                     *     ], 10);
                     */
                    init: function (words, sigBytes) {
                      words = this.words = words || [];
                      if (sigBytes != undefined2) {
                        this.sigBytes = sigBytes;
                      } else {
                        this.sigBytes = words.length * 8;
                      }
                    },
                    /**
                     * Converts this 64-bit word array to a 32-bit word array.
                     *
                     * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
                     *
                     * @example
                     *
                     *     var x32WordArray = x64WordArray.toX32();
                     */
                    toX32: function () {
                      var x64Words = this.words;
                      var x64WordsLength = x64Words.length;
                      var x32Words = [];
                      for (var i = 0; i < x64WordsLength; i++) {
                        var x64Word = x64Words[i];
                        x32Words.push(x64Word.high);
                        x32Words.push(x64Word.low);
                      }
                      return X32WordArray.create(x32Words, this.sigBytes);
                    },
                    /**
                     * Creates a copy of this word array.
                     *
                     * @return {X64WordArray} The clone.
                     *
                     * @example
                     *
                     *     var clone = x64WordArray.clone();
                     */
                    clone: function () {
                      var clone = Base.clone.call(this);
                      var words = clone.words = this.words.slice(0);
                      var wordsLength = words.length;
                      for (var i = 0; i < wordsLength; i++) {
                        words[i] = words[i].clone();
                      }
                      return clone;
                    }
                  });
                })();
                return CryptoJS3;
              });
            }
          });

          // node_modules/crypto-js/lib-typedarrays.js
          var require_lib_typedarrays = __commonJS({
            "node_modules/crypto-js/lib-typedarrays.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  if (typeof ArrayBuffer != "function") {
                    return;
                  }
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var superInit = WordArray.init;
                  var subInit = WordArray.init = function (typedArray) {
                    if (typedArray instanceof ArrayBuffer) {
                      typedArray = new Uint8Array(typedArray);
                    }
                    if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
                      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
                    }
                    if (typedArray instanceof Uint8Array) {
                      var typedArrayByteLength = typedArray.byteLength;
                      var words = [];
                      for (var i = 0; i < typedArrayByteLength; i++) {
                        words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
                      }
                      superInit.call(this, words, typedArrayByteLength);
                    } else {
                      superInit.apply(this, arguments);
                    }
                  };
                  subInit.prototype = WordArray;
                })();
                return CryptoJS3.lib.WordArray;
              });
            }
          });

          // node_modules/crypto-js/enc-utf16.js
          var require_enc_utf16 = __commonJS({
            "node_modules/crypto-js/enc-utf16.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var C_enc = C.enc;
                  var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
                    /**
                     * Converts a word array to a UTF-16 BE string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The UTF-16 BE string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      var words = wordArray.words;
                      var sigBytes = wordArray.sigBytes;
                      var utf16Chars = [];
                      for (var i = 0; i < sigBytes; i += 2) {
                        var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
                        utf16Chars.push(String.fromCharCode(codePoint));
                      }
                      return utf16Chars.join("");
                    },
                    /**
                     * Converts a UTF-16 BE string to a word array.
                     *
                     * @param {string} utf16Str The UTF-16 BE string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
                     */
                    parse: function (utf16Str) {
                      var utf16StrLength = utf16Str.length;
                      var words = [];
                      for (var i = 0; i < utf16StrLength; i++) {
                        words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
                      }
                      return WordArray.create(words, utf16StrLength * 2);
                    }
                  };
                  C_enc.Utf16LE = {
                    /**
                     * Converts a word array to a UTF-16 LE string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The UTF-16 LE string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      var words = wordArray.words;
                      var sigBytes = wordArray.sigBytes;
                      var utf16Chars = [];
                      for (var i = 0; i < sigBytes; i += 2) {
                        var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
                        utf16Chars.push(String.fromCharCode(codePoint));
                      }
                      return utf16Chars.join("");
                    },
                    /**
                     * Converts a UTF-16 LE string to a word array.
                     *
                     * @param {string} utf16Str The UTF-16 LE string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
                     */
                    parse: function (utf16Str) {
                      var utf16StrLength = utf16Str.length;
                      var words = [];
                      for (var i = 0; i < utf16StrLength; i++) {
                        words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
                      }
                      return WordArray.create(words, utf16StrLength * 2);
                    }
                  };
                  function swapEndian(word) {
                    return word << 8 & 4278255360 | word >>> 8 & 16711935;
                  }
                })();
                return CryptoJS3.enc.Utf16;
              });
            }
          });

          // node_modules/crypto-js/enc-base64.js
          var require_enc_base64 = __commonJS({
            "node_modules/crypto-js/enc-base64.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var C_enc = C.enc;
                  var Base64 = C_enc.Base64 = {
                    /**
                     * Converts a word array to a Base64 string.
                     *
                     * @param {WordArray} wordArray The word array.
                     *
                     * @return {string} The Base64 string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                     */
                    stringify: function (wordArray) {
                      var words = wordArray.words;
                      var sigBytes = wordArray.sigBytes;
                      var map = this._map;
                      wordArray.clamp();
                      var base64Chars = [];
                      for (var i = 0; i < sigBytes; i += 3) {
                        var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                        var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
                        var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
                        var triplet = byte1 << 16 | byte2 << 8 | byte3;
                        for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                          base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 63));
                        }
                      }
                      var paddingChar = map.charAt(64);
                      if (paddingChar) {
                        while (base64Chars.length % 4) {
                          base64Chars.push(paddingChar);
                        }
                      }
                      return base64Chars.join("");
                    },
                    /**
                     * Converts a Base64 string to a word array.
                     *
                     * @param {string} base64Str The Base64 string.
                     *
                     * @return {WordArray} The word array.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
                     */
                    parse: function (base64Str) {
                      var base64StrLength = base64Str.length;
                      var map = this._map;
                      var reverseMap = this._reverseMap;
                      if (!reverseMap) {
                        reverseMap = this._reverseMap = [];
                        for (var j = 0; j < map.length; j++) {
                          reverseMap[map.charCodeAt(j)] = j;
                        }
                      }
                      var paddingChar = map.charAt(64);
                      if (paddingChar) {
                        var paddingIndex = base64Str.indexOf(paddingChar);
                        if (paddingIndex !== -1) {
                          base64StrLength = paddingIndex;
                        }
                      }
                      return parseLoop(base64Str, base64StrLength, reverseMap);
                    },
                    _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
                  };
                  function parseLoop(base64Str, base64StrLength, reverseMap) {
                    var words = [];
                    var nBytes = 0;
                    for (var i = 0; i < base64StrLength; i++) {
                      if (i % 4) {
                        var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                        var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                        words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
                        nBytes++;
                      }
                    }
                    return WordArray.create(words, nBytes);
                  }
                })();
                return CryptoJS3.enc.Base64;
              });
            }
          });

          // node_modules/crypto-js/md5.js
          var require_md5 = __commonJS({
            "node_modules/crypto-js/md5.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (Math2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var Hasher = C_lib.Hasher;
                  var C_algo = C.algo;
                  var T = [];
                  (function () {
                    for (var i = 0; i < 64; i++) {
                      T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
                    }
                  })();
                  var MD5 = C_algo.MD5 = Hasher.extend({
                    _doReset: function () {
                      this._hash = new WordArray.init([
                        1732584193,
                        4023233417,
                        2562383102,
                        271733878
                      ]);
                    },
                    _doProcessBlock: function (M, offset) {
                      for (var i = 0; i < 16; i++) {
                        var offset_i = offset + i;
                        var M_offset_i = M[offset_i];
                        M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
                      }
                      var H = this._hash.words;
                      var M_offset_0 = M[offset + 0];
                      var M_offset_1 = M[offset + 1];
                      var M_offset_2 = M[offset + 2];
                      var M_offset_3 = M[offset + 3];
                      var M_offset_4 = M[offset + 4];
                      var M_offset_5 = M[offset + 5];
                      var M_offset_6 = M[offset + 6];
                      var M_offset_7 = M[offset + 7];
                      var M_offset_8 = M[offset + 8];
                      var M_offset_9 = M[offset + 9];
                      var M_offset_10 = M[offset + 10];
                      var M_offset_11 = M[offset + 11];
                      var M_offset_12 = M[offset + 12];
                      var M_offset_13 = M[offset + 13];
                      var M_offset_14 = M[offset + 14];
                      var M_offset_15 = M[offset + 15];
                      var a = H[0];
                      var b = H[1];
                      var c = H[2];
                      var d = H[3];
                      a = FF(a, b, c, d, M_offset_0, 7, T[0]);
                      d = FF(d, a, b, c, M_offset_1, 12, T[1]);
                      c = FF(c, d, a, b, M_offset_2, 17, T[2]);
                      b = FF(b, c, d, a, M_offset_3, 22, T[3]);
                      a = FF(a, b, c, d, M_offset_4, 7, T[4]);
                      d = FF(d, a, b, c, M_offset_5, 12, T[5]);
                      c = FF(c, d, a, b, M_offset_6, 17, T[6]);
                      b = FF(b, c, d, a, M_offset_7, 22, T[7]);
                      a = FF(a, b, c, d, M_offset_8, 7, T[8]);
                      d = FF(d, a, b, c, M_offset_9, 12, T[9]);
                      c = FF(c, d, a, b, M_offset_10, 17, T[10]);
                      b = FF(b, c, d, a, M_offset_11, 22, T[11]);
                      a = FF(a, b, c, d, M_offset_12, 7, T[12]);
                      d = FF(d, a, b, c, M_offset_13, 12, T[13]);
                      c = FF(c, d, a, b, M_offset_14, 17, T[14]);
                      b = FF(b, c, d, a, M_offset_15, 22, T[15]);
                      a = GG(a, b, c, d, M_offset_1, 5, T[16]);
                      d = GG(d, a, b, c, M_offset_6, 9, T[17]);
                      c = GG(c, d, a, b, M_offset_11, 14, T[18]);
                      b = GG(b, c, d, a, M_offset_0, 20, T[19]);
                      a = GG(a, b, c, d, M_offset_5, 5, T[20]);
                      d = GG(d, a, b, c, M_offset_10, 9, T[21]);
                      c = GG(c, d, a, b, M_offset_15, 14, T[22]);
                      b = GG(b, c, d, a, M_offset_4, 20, T[23]);
                      a = GG(a, b, c, d, M_offset_9, 5, T[24]);
                      d = GG(d, a, b, c, M_offset_14, 9, T[25]);
                      c = GG(c, d, a, b, M_offset_3, 14, T[26]);
                      b = GG(b, c, d, a, M_offset_8, 20, T[27]);
                      a = GG(a, b, c, d, M_offset_13, 5, T[28]);
                      d = GG(d, a, b, c, M_offset_2, 9, T[29]);
                      c = GG(c, d, a, b, M_offset_7, 14, T[30]);
                      b = GG(b, c, d, a, M_offset_12, 20, T[31]);
                      a = HH(a, b, c, d, M_offset_5, 4, T[32]);
                      d = HH(d, a, b, c, M_offset_8, 11, T[33]);
                      c = HH(c, d, a, b, M_offset_11, 16, T[34]);
                      b = HH(b, c, d, a, M_offset_14, 23, T[35]);
                      a = HH(a, b, c, d, M_offset_1, 4, T[36]);
                      d = HH(d, a, b, c, M_offset_4, 11, T[37]);
                      c = HH(c, d, a, b, M_offset_7, 16, T[38]);
                      b = HH(b, c, d, a, M_offset_10, 23, T[39]);
                      a = HH(a, b, c, d, M_offset_13, 4, T[40]);
                      d = HH(d, a, b, c, M_offset_0, 11, T[41]);
                      c = HH(c, d, a, b, M_offset_3, 16, T[42]);
                      b = HH(b, c, d, a, M_offset_6, 23, T[43]);
                      a = HH(a, b, c, d, M_offset_9, 4, T[44]);
                      d = HH(d, a, b, c, M_offset_12, 11, T[45]);
                      c = HH(c, d, a, b, M_offset_15, 16, T[46]);
                      b = HH(b, c, d, a, M_offset_2, 23, T[47]);
                      a = II(a, b, c, d, M_offset_0, 6, T[48]);
                      d = II(d, a, b, c, M_offset_7, 10, T[49]);
                      c = II(c, d, a, b, M_offset_14, 15, T[50]);
                      b = II(b, c, d, a, M_offset_5, 21, T[51]);
                      a = II(a, b, c, d, M_offset_12, 6, T[52]);
                      d = II(d, a, b, c, M_offset_3, 10, T[53]);
                      c = II(c, d, a, b, M_offset_10, 15, T[54]);
                      b = II(b, c, d, a, M_offset_1, 21, T[55]);
                      a = II(a, b, c, d, M_offset_8, 6, T[56]);
                      d = II(d, a, b, c, M_offset_15, 10, T[57]);
                      c = II(c, d, a, b, M_offset_6, 15, T[58]);
                      b = II(b, c, d, a, M_offset_13, 21, T[59]);
                      a = II(a, b, c, d, M_offset_4, 6, T[60]);
                      d = II(d, a, b, c, M_offset_11, 10, T[61]);
                      c = II(c, d, a, b, M_offset_2, 15, T[62]);
                      b = II(b, c, d, a, M_offset_9, 21, T[63]);
                      H[0] = H[0] + a | 0;
                      H[1] = H[1] + b | 0;
                      H[2] = H[2] + c | 0;
                      H[3] = H[3] + d | 0;
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                      var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
                      var nBitsTotalL = nBitsTotal;
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
                      data.sigBytes = (dataWords.length + 1) * 4;
                      this._process();
                      var hash = this._hash;
                      var H = hash.words;
                      for (var i = 0; i < 4; i++) {
                        var H_i = H[i];
                        H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
                      }
                      return hash;
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      clone._hash = this._hash.clone();
                      return clone;
                    }
                  });
                  function FF(a, b, c, d, x, s, t) {
                    var n = a + (b & c | ~b & d) + x + t;
                    return (n << s | n >>> 32 - s) + b;
                  }
                  function GG(a, b, c, d, x, s, t) {
                    var n = a + (b & d | c & ~d) + x + t;
                    return (n << s | n >>> 32 - s) + b;
                  }
                  function HH(a, b, c, d, x, s, t) {
                    var n = a + (b ^ c ^ d) + x + t;
                    return (n << s | n >>> 32 - s) + b;
                  }
                  function II(a, b, c, d, x, s, t) {
                    var n = a + (c ^ (b | ~d)) + x + t;
                    return (n << s | n >>> 32 - s) + b;
                  }
                  C.MD5 = Hasher._createHelper(MD5);
                  C.HmacMD5 = Hasher._createHmacHelper(MD5);
                })(Math);
                return CryptoJS3.MD5;
              });
            }
          });

          // node_modules/crypto-js/sha1.js
          var require_sha1 = __commonJS({
            "node_modules/crypto-js/sha1.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var Hasher = C_lib.Hasher;
                  var C_algo = C.algo;
                  var W = [];
                  var SHA1 = C_algo.SHA1 = Hasher.extend({
                    _doReset: function () {
                      this._hash = new WordArray.init([
                        1732584193,
                        4023233417,
                        2562383102,
                        271733878,
                        3285377520
                      ]);
                    },
                    _doProcessBlock: function (M, offset) {
                      var H = this._hash.words;
                      var a = H[0];
                      var b = H[1];
                      var c = H[2];
                      var d = H[3];
                      var e = H[4];
                      for (var i = 0; i < 80; i++) {
                        if (i < 16) {
                          W[i] = M[offset + i] | 0;
                        } else {
                          var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                          W[i] = n << 1 | n >>> 31;
                        }
                        var t = (a << 5 | a >>> 27) + e + W[i];
                        if (i < 20) {
                          t += (b & c | ~b & d) + 1518500249;
                        } else if (i < 40) {
                          t += (b ^ c ^ d) + 1859775393;
                        } else if (i < 60) {
                          t += (b & c | b & d | c & d) - 1894007588;
                        } else {
                          t += (b ^ c ^ d) - 899497514;
                        }
                        e = d;
                        d = c;
                        c = b << 30 | b >>> 2;
                        b = a;
                        a = t;
                      }
                      H[0] = H[0] + a | 0;
                      H[1] = H[1] + b | 0;
                      H[2] = H[2] + c | 0;
                      H[3] = H[3] + d | 0;
                      H[4] = H[4] + e | 0;
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                      data.sigBytes = dataWords.length * 4;
                      this._process();
                      return this._hash;
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      clone._hash = this._hash.clone();
                      return clone;
                    }
                  });
                  C.SHA1 = Hasher._createHelper(SHA1);
                  C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
                })();
                return CryptoJS3.SHA1;
              });
            }
          });

          // node_modules/crypto-js/sha256.js
          var require_sha256 = __commonJS({
            "node_modules/crypto-js/sha256.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (Math2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var Hasher = C_lib.Hasher;
                  var C_algo = C.algo;
                  var H = [];
                  var K = [];
                  (function () {
                    function isPrime(n2) {
                      var sqrtN = Math2.sqrt(n2);
                      for (var factor = 2; factor <= sqrtN; factor++) {
                        if (!(n2 % factor)) {
                          return false;
                        }
                      }
                      return true;
                    }
                    function getFractionalBits(n2) {
                      return (n2 - (n2 | 0)) * 4294967296 | 0;
                    }
                    var n = 2;
                    var nPrime = 0;
                    while (nPrime < 64) {
                      if (isPrime(n)) {
                        if (nPrime < 8) {
                          H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
                        }
                        K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
                        nPrime++;
                      }
                      n++;
                    }
                  })();
                  var W = [];
                  var SHA256 = C_algo.SHA256 = Hasher.extend({
                    _doReset: function () {
                      this._hash = new WordArray.init(H.slice(0));
                    },
                    _doProcessBlock: function (M, offset) {
                      var H2 = this._hash.words;
                      var a = H2[0];
                      var b = H2[1];
                      var c = H2[2];
                      var d = H2[3];
                      var e = H2[4];
                      var f = H2[5];
                      var g = H2[6];
                      var h = H2[7];
                      for (var i = 0; i < 64; i++) {
                        if (i < 16) {
                          W[i] = M[offset + i] | 0;
                        } else {
                          var gamma0x = W[i - 15];
                          var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                          var gamma1x = W[i - 2];
                          var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                          W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                        }
                        var ch = e & f ^ ~e & g;
                        var maj = a & b ^ a & c ^ b & c;
                        var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                        var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                        var t1 = h + sigma1 + ch + K[i] + W[i];
                        var t2 = sigma0 + maj;
                        h = g;
                        g = f;
                        f = e;
                        e = d + t1 | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = t1 + t2 | 0;
                      }
                      H2[0] = H2[0] + a | 0;
                      H2[1] = H2[1] + b | 0;
                      H2[2] = H2[2] + c | 0;
                      H2[3] = H2[3] + d | 0;
                      H2[4] = H2[4] + e | 0;
                      H2[5] = H2[5] + f | 0;
                      H2[6] = H2[6] + g | 0;
                      H2[7] = H2[7] + h | 0;
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                      data.sigBytes = dataWords.length * 4;
                      this._process();
                      return this._hash;
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      clone._hash = this._hash.clone();
                      return clone;
                    }
                  });
                  C.SHA256 = Hasher._createHelper(SHA256);
                  C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
                })(Math);
                return CryptoJS3.SHA256;
              });
            }
          });

          // node_modules/crypto-js/sha224.js
          var require_sha224 = __commonJS({
            "node_modules/crypto-js/sha224.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_sha256());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./sha256"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var C_algo = C.algo;
                  var SHA256 = C_algo.SHA256;
                  var SHA224 = C_algo.SHA224 = SHA256.extend({
                    _doReset: function () {
                      this._hash = new WordArray.init([
                        3238371032,
                        914150663,
                        812702999,
                        4144912697,
                        4290775857,
                        1750603025,
                        1694076839,
                        3204075428
                      ]);
                    },
                    _doFinalize: function () {
                      var hash = SHA256._doFinalize.call(this);
                      hash.sigBytes -= 4;
                      return hash;
                    }
                  });
                  C.SHA224 = SHA256._createHelper(SHA224);
                  C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
                })();
                return CryptoJS3.SHA224;
              });
            }
          });

          // node_modules/crypto-js/sha512.js
          var require_sha512 = __commonJS({
            "node_modules/crypto-js/sha512.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_x64_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./x64-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Hasher = C_lib.Hasher;
                  var C_x64 = C.x64;
                  var X64Word = C_x64.Word;
                  var X64WordArray = C_x64.WordArray;
                  var C_algo = C.algo;
                  function X64Word_create() {
                    return X64Word.create.apply(X64Word, arguments);
                  }
                  var K = [
                    X64Word_create(1116352408, 3609767458),
                    X64Word_create(1899447441, 602891725),
                    X64Word_create(3049323471, 3964484399),
                    X64Word_create(3921009573, 2173295548),
                    X64Word_create(961987163, 4081628472),
                    X64Word_create(1508970993, 3053834265),
                    X64Word_create(2453635748, 2937671579),
                    X64Word_create(2870763221, 3664609560),
                    X64Word_create(3624381080, 2734883394),
                    X64Word_create(310598401, 1164996542),
                    X64Word_create(607225278, 1323610764),
                    X64Word_create(1426881987, 3590304994),
                    X64Word_create(1925078388, 4068182383),
                    X64Word_create(2162078206, 991336113),
                    X64Word_create(2614888103, 633803317),
                    X64Word_create(3248222580, 3479774868),
                    X64Word_create(3835390401, 2666613458),
                    X64Word_create(4022224774, 944711139),
                    X64Word_create(264347078, 2341262773),
                    X64Word_create(604807628, 2007800933),
                    X64Word_create(770255983, 1495990901),
                    X64Word_create(1249150122, 1856431235),
                    X64Word_create(1555081692, 3175218132),
                    X64Word_create(1996064986, 2198950837),
                    X64Word_create(2554220882, 3999719339),
                    X64Word_create(2821834349, 766784016),
                    X64Word_create(2952996808, 2566594879),
                    X64Word_create(3210313671, 3203337956),
                    X64Word_create(3336571891, 1034457026),
                    X64Word_create(3584528711, 2466948901),
                    X64Word_create(113926993, 3758326383),
                    X64Word_create(338241895, 168717936),
                    X64Word_create(666307205, 1188179964),
                    X64Word_create(773529912, 1546045734),
                    X64Word_create(1294757372, 1522805485),
                    X64Word_create(1396182291, 2643833823),
                    X64Word_create(1695183700, 2343527390),
                    X64Word_create(1986661051, 1014477480),
                    X64Word_create(2177026350, 1206759142),
                    X64Word_create(2456956037, 344077627),
                    X64Word_create(2730485921, 1290863460),
                    X64Word_create(2820302411, 3158454273),
                    X64Word_create(3259730800, 3505952657),
                    X64Word_create(3345764771, 106217008),
                    X64Word_create(3516065817, 3606008344),
                    X64Word_create(3600352804, 1432725776),
                    X64Word_create(4094571909, 1467031594),
                    X64Word_create(275423344, 851169720),
                    X64Word_create(430227734, 3100823752),
                    X64Word_create(506948616, 1363258195),
                    X64Word_create(659060556, 3750685593),
                    X64Word_create(883997877, 3785050280),
                    X64Word_create(958139571, 3318307427),
                    X64Word_create(1322822218, 3812723403),
                    X64Word_create(1537002063, 2003034995),
                    X64Word_create(1747873779, 3602036899),
                    X64Word_create(1955562222, 1575990012),
                    X64Word_create(2024104815, 1125592928),
                    X64Word_create(2227730452, 2716904306),
                    X64Word_create(2361852424, 442776044),
                    X64Word_create(2428436474, 593698344),
                    X64Word_create(2756734187, 3733110249),
                    X64Word_create(3204031479, 2999351573),
                    X64Word_create(3329325298, 3815920427),
                    X64Word_create(3391569614, 3928383900),
                    X64Word_create(3515267271, 566280711),
                    X64Word_create(3940187606, 3454069534),
                    X64Word_create(4118630271, 4000239992),
                    X64Word_create(116418474, 1914138554),
                    X64Word_create(174292421, 2731055270),
                    X64Word_create(289380356, 3203993006),
                    X64Word_create(460393269, 320620315),
                    X64Word_create(685471733, 587496836),
                    X64Word_create(852142971, 1086792851),
                    X64Word_create(1017036298, 365543100),
                    X64Word_create(1126000580, 2618297676),
                    X64Word_create(1288033470, 3409855158),
                    X64Word_create(1501505948, 4234509866),
                    X64Word_create(1607167915, 987167468),
                    X64Word_create(1816402316, 1246189591)
                  ];
                  var W = [];
                  (function () {
                    for (var i = 0; i < 80; i++) {
                      W[i] = X64Word_create();
                    }
                  })();
                  var SHA512 = C_algo.SHA512 = Hasher.extend({
                    _doReset: function () {
                      this._hash = new X64WordArray.init([
                        new X64Word.init(1779033703, 4089235720),
                        new X64Word.init(3144134277, 2227873595),
                        new X64Word.init(1013904242, 4271175723),
                        new X64Word.init(2773480762, 1595750129),
                        new X64Word.init(1359893119, 2917565137),
                        new X64Word.init(2600822924, 725511199),
                        new X64Word.init(528734635, 4215389547),
                        new X64Word.init(1541459225, 327033209)
                      ]);
                    },
                    _doProcessBlock: function (M, offset) {
                      var H = this._hash.words;
                      var H0 = H[0];
                      var H1 = H[1];
                      var H2 = H[2];
                      var H3 = H[3];
                      var H4 = H[4];
                      var H5 = H[5];
                      var H6 = H[6];
                      var H7 = H[7];
                      var H0h = H0.high;
                      var H0l = H0.low;
                      var H1h = H1.high;
                      var H1l = H1.low;
                      var H2h = H2.high;
                      var H2l = H2.low;
                      var H3h = H3.high;
                      var H3l = H3.low;
                      var H4h = H4.high;
                      var H4l = H4.low;
                      var H5h = H5.high;
                      var H5l = H5.low;
                      var H6h = H6.high;
                      var H6l = H6.low;
                      var H7h = H7.high;
                      var H7l = H7.low;
                      var ah = H0h;
                      var al = H0l;
                      var bh = H1h;
                      var bl = H1l;
                      var ch = H2h;
                      var cl = H2l;
                      var dh = H3h;
                      var dl = H3l;
                      var eh = H4h;
                      var el = H4l;
                      var fh = H5h;
                      var fl = H5l;
                      var gh = H6h;
                      var gl = H6l;
                      var hh = H7h;
                      var hl = H7l;
                      for (var i = 0; i < 80; i++) {
                        var Wi = W[i];
                        if (i < 16) {
                          var Wih = Wi.high = M[offset + i * 2] | 0;
                          var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
                        } else {
                          var gamma0x = W[i - 15];
                          var gamma0xh = gamma0x.high;
                          var gamma0xl = gamma0x.low;
                          var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                          var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                          var gamma1x = W[i - 2];
                          var gamma1xh = gamma1x.high;
                          var gamma1xl = gamma1x.low;
                          var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                          var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                          var Wi7 = W[i - 7];
                          var Wi7h = Wi7.high;
                          var Wi7l = Wi7.low;
                          var Wi16 = W[i - 16];
                          var Wi16h = Wi16.high;
                          var Wi16l = Wi16.low;
                          var Wil = gamma0l + Wi7l;
                          var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                          var Wil = Wil + gamma1l;
                          var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                          var Wil = Wil + Wi16l;
                          var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                          Wi.high = Wih;
                          Wi.low = Wil;
                        }
                        var chh = eh & fh ^ ~eh & gh;
                        var chl = el & fl ^ ~el & gl;
                        var majh = ah & bh ^ ah & ch ^ bh & ch;
                        var majl = al & bl ^ al & cl ^ bl & cl;
                        var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
                        var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
                        var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
                        var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
                        var Ki = K[i];
                        var Kih = Ki.high;
                        var Kil = Ki.low;
                        var t1l = hl + sigma1l;
                        var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
                        var t1l = t1l + chl;
                        var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
                        var t1l = t1l + Kil;
                        var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
                        var t1l = t1l + Wil;
                        var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
                        var t2l = sigma0l + majl;
                        var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
                        hh = gh;
                        hl = gl;
                        gh = fh;
                        gl = fl;
                        fh = eh;
                        fl = el;
                        el = dl + t1l | 0;
                        eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
                        dh = ch;
                        dl = cl;
                        ch = bh;
                        cl = bl;
                        bh = ah;
                        bl = al;
                        al = t1l + t2l | 0;
                        ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
                      }
                      H0l = H0.low = H0l + al;
                      H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
                      H1l = H1.low = H1l + bl;
                      H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
                      H2l = H2.low = H2l + cl;
                      H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
                      H3l = H3.low = H3l + dl;
                      H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
                      H4l = H4.low = H4l + el;
                      H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
                      H5l = H5.low = H5l + fl;
                      H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
                      H6l = H6.low = H6l + gl;
                      H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
                      H7l = H7.low = H7l + hl;
                      H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                      dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
                      dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
                      data.sigBytes = dataWords.length * 4;
                      this._process();
                      var hash = this._hash.toX32();
                      return hash;
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      clone._hash = this._hash.clone();
                      return clone;
                    },
                    blockSize: 1024 / 32
                  });
                  C.SHA512 = Hasher._createHelper(SHA512);
                  C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
                })();
                return CryptoJS3.SHA512;
              });
            }
          });

          // node_modules/crypto-js/sha384.js
          var require_sha384 = __commonJS({
            "node_modules/crypto-js/sha384.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_x64_core(), require_sha512());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./x64-core", "./sha512"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_x64 = C.x64;
                  var X64Word = C_x64.Word;
                  var X64WordArray = C_x64.WordArray;
                  var C_algo = C.algo;
                  var SHA512 = C_algo.SHA512;
                  var SHA384 = C_algo.SHA384 = SHA512.extend({
                    _doReset: function () {
                      this._hash = new X64WordArray.init([
                        new X64Word.init(3418070365, 3238371032),
                        new X64Word.init(1654270250, 914150663),
                        new X64Word.init(2438529370, 812702999),
                        new X64Word.init(355462360, 4144912697),
                        new X64Word.init(1731405415, 4290775857),
                        new X64Word.init(2394180231, 1750603025),
                        new X64Word.init(3675008525, 1694076839),
                        new X64Word.init(1203062813, 3204075428)
                      ]);
                    },
                    _doFinalize: function () {
                      var hash = SHA512._doFinalize.call(this);
                      hash.sigBytes -= 16;
                      return hash;
                    }
                  });
                  C.SHA384 = SHA512._createHelper(SHA384);
                  C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
                })();
                return CryptoJS3.SHA384;
              });
            }
          });

          // node_modules/crypto-js/sha3.js
          var require_sha3 = __commonJS({
            "node_modules/crypto-js/sha3.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_x64_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./x64-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (Math2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var Hasher = C_lib.Hasher;
                  var C_x64 = C.x64;
                  var X64Word = C_x64.Word;
                  var C_algo = C.algo;
                  var RHO_OFFSETS = [];
                  var PI_INDEXES = [];
                  var ROUND_CONSTANTS = [];
                  (function () {
                    var x = 1, y = 0;
                    for (var t = 0; t < 24; t++) {
                      RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
                      var newX = y % 5;
                      var newY = (2 * x + 3 * y) % 5;
                      x = newX;
                      y = newY;
                    }
                    for (var x = 0; x < 5; x++) {
                      for (var y = 0; y < 5; y++) {
                        PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
                      }
                    }
                    var LFSR = 1;
                    for (var i = 0; i < 24; i++) {
                      var roundConstantMsw = 0;
                      var roundConstantLsw = 0;
                      for (var j = 0; j < 7; j++) {
                        if (LFSR & 1) {
                          var bitPosition = (1 << j) - 1;
                          if (bitPosition < 32) {
                            roundConstantLsw ^= 1 << bitPosition;
                          } else {
                            roundConstantMsw ^= 1 << bitPosition - 32;
                          }
                        }
                        if (LFSR & 128) {
                          LFSR = LFSR << 1 ^ 113;
                        } else {
                          LFSR <<= 1;
                        }
                      }
                      ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
                    }
                  })();
                  var T = [];
                  (function () {
                    for (var i = 0; i < 25; i++) {
                      T[i] = X64Word.create();
                    }
                  })();
                  var SHA3 = C_algo.SHA3 = Hasher.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {number} outputLength
                     *   The desired number of bits in the output hash.
                     *   Only values permitted are: 224, 256, 384, 512.
                     *   Default: 512
                     */
                    cfg: Hasher.cfg.extend({
                      outputLength: 512
                    }),
                    _doReset: function () {
                      var state = this._state = [];
                      for (var i = 0; i < 25; i++) {
                        state[i] = new X64Word.init();
                      }
                      this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                    },
                    _doProcessBlock: function (M, offset) {
                      var state = this._state;
                      var nBlockSizeLanes = this.blockSize / 2;
                      for (var i = 0; i < nBlockSizeLanes; i++) {
                        var M2i = M[offset + 2 * i];
                        var M2i1 = M[offset + 2 * i + 1];
                        M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
                        M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
                        var lane = state[i];
                        lane.high ^= M2i1;
                        lane.low ^= M2i;
                      }
                      for (var round = 0; round < 24; round++) {
                        for (var x = 0; x < 5; x++) {
                          var tMsw = 0, tLsw = 0;
                          for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            tMsw ^= lane.high;
                            tLsw ^= lane.low;
                          }
                          var Tx = T[x];
                          Tx.high = tMsw;
                          Tx.low = tLsw;
                        }
                        for (var x = 0; x < 5; x++) {
                          var Tx4 = T[(x + 4) % 5];
                          var Tx1 = T[(x + 1) % 5];
                          var Tx1Msw = Tx1.high;
                          var Tx1Lsw = Tx1.low;
                          var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                          var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                          for (var y = 0; y < 5; y++) {
                            var lane = state[x + 5 * y];
                            lane.high ^= tMsw;
                            lane.low ^= tLsw;
                          }
                        }
                        for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                          var lane = state[laneIndex];
                          var laneMsw = lane.high;
                          var laneLsw = lane.low;
                          var rhoOffset = RHO_OFFSETS[laneIndex];
                          if (rhoOffset < 32) {
                            var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                            var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                          } else {
                            var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                            var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                          }
                          var TPiLane = T[PI_INDEXES[laneIndex]];
                          TPiLane.high = tMsw;
                          TPiLane.low = tLsw;
                        }
                        var T0 = T[0];
                        var state0 = state[0];
                        T0.high = state0.high;
                        T0.low = state0.low;
                        for (var x = 0; x < 5; x++) {
                          for (var y = 0; y < 5; y++) {
                            var laneIndex = x + 5 * y;
                            var lane = state[laneIndex];
                            var TLane = T[laneIndex];
                            var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                            var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                            lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                            lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                          }
                        }
                        var lane = state[0];
                        var roundConstant = ROUND_CONSTANTS[round];
                        lane.high ^= roundConstant.high;
                        lane.low ^= roundConstant.low;
                        ;
                      }
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      var blockSizeBits = this.blockSize * 32;
                      dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
                      dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
                      data.sigBytes = dataWords.length * 4;
                      this._process();
                      var state = this._state;
                      var outputLengthBytes = this.cfg.outputLength / 8;
                      var outputLengthLanes = outputLengthBytes / 8;
                      var hashWords = [];
                      for (var i = 0; i < outputLengthLanes; i++) {
                        var lane = state[i];
                        var laneMsw = lane.high;
                        var laneLsw = lane.low;
                        laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
                        laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
                        hashWords.push(laneLsw);
                        hashWords.push(laneMsw);
                      }
                      return new WordArray.init(hashWords, outputLengthBytes);
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      var state = clone._state = this._state.slice(0);
                      for (var i = 0; i < 25; i++) {
                        state[i] = state[i].clone();
                      }
                      return clone;
                    }
                  });
                  C.SHA3 = Hasher._createHelper(SHA3);
                  C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
                })(Math);
                return CryptoJS3.SHA3;
              });
            }
          });

          // node_modules/crypto-js/ripemd160.js
          var require_ripemd160 = __commonJS({
            "node_modules/crypto-js/ripemd160.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (Math2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var Hasher = C_lib.Hasher;
                  var C_algo = C.algo;
                  var _zl = WordArray.create([
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                  ]);
                  var _zr = WordArray.create([
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                  ]);
                  var _sl = WordArray.create([
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                  ]);
                  var _sr = WordArray.create([
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                  ]);
                  var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
                  var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
                  var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
                    _doReset: function () {
                      this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
                    },
                    _doProcessBlock: function (M, offset) {
                      for (var i = 0; i < 16; i++) {
                        var offset_i = offset + i;
                        var M_offset_i = M[offset_i];
                        M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
                      }
                      var H = this._hash.words;
                      var hl = _hl.words;
                      var hr = _hr.words;
                      var zl = _zl.words;
                      var zr = _zr.words;
                      var sl = _sl.words;
                      var sr = _sr.words;
                      var al, bl, cl, dl, el;
                      var ar, br, cr, dr, er;
                      ar = al = H[0];
                      br = bl = H[1];
                      cr = cl = H[2];
                      dr = dl = H[3];
                      er = el = H[4];
                      var t;
                      for (var i = 0; i < 80; i += 1) {
                        t = al + M[offset + zl[i]] | 0;
                        if (i < 16) {
                          t += f1(bl, cl, dl) + hl[0];
                        } else if (i < 32) {
                          t += f2(bl, cl, dl) + hl[1];
                        } else if (i < 48) {
                          t += f3(bl, cl, dl) + hl[2];
                        } else if (i < 64) {
                          t += f4(bl, cl, dl) + hl[3];
                        } else {
                          t += f5(bl, cl, dl) + hl[4];
                        }
                        t = t | 0;
                        t = rotl(t, sl[i]);
                        t = t + el | 0;
                        al = el;
                        el = dl;
                        dl = rotl(cl, 10);
                        cl = bl;
                        bl = t;
                        t = ar + M[offset + zr[i]] | 0;
                        if (i < 16) {
                          t += f5(br, cr, dr) + hr[0];
                        } else if (i < 32) {
                          t += f4(br, cr, dr) + hr[1];
                        } else if (i < 48) {
                          t += f3(br, cr, dr) + hr[2];
                        } else if (i < 64) {
                          t += f2(br, cr, dr) + hr[3];
                        } else {
                          t += f1(br, cr, dr) + hr[4];
                        }
                        t = t | 0;
                        t = rotl(t, sr[i]);
                        t = t + er | 0;
                        ar = er;
                        er = dr;
                        dr = rotl(cr, 10);
                        cr = br;
                        br = t;
                      }
                      t = H[1] + cl + dr | 0;
                      H[1] = H[2] + dl + er | 0;
                      H[2] = H[3] + el + ar | 0;
                      H[3] = H[4] + al + br | 0;
                      H[4] = H[0] + bl + cr | 0;
                      H[0] = t;
                    },
                    _doFinalize: function () {
                      var data = this._data;
                      var dataWords = data.words;
                      var nBitsTotal = this._nDataBytes * 8;
                      var nBitsLeft = data.sigBytes * 8;
                      dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
                      dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
                      data.sigBytes = (dataWords.length + 1) * 4;
                      this._process();
                      var hash = this._hash;
                      var H = hash.words;
                      for (var i = 0; i < 5; i++) {
                        var H_i = H[i];
                        H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
                      }
                      return hash;
                    },
                    clone: function () {
                      var clone = Hasher.clone.call(this);
                      clone._hash = this._hash.clone();
                      return clone;
                    }
                  });
                  function f1(x, y, z) {
                    return x ^ y ^ z;
                  }
                  function f2(x, y, z) {
                    return x & y | ~x & z;
                  }
                  function f3(x, y, z) {
                    return (x | ~y) ^ z;
                  }
                  function f4(x, y, z) {
                    return x & z | y & ~z;
                  }
                  function f5(x, y, z) {
                    return x ^ (y | ~z);
                  }
                  function rotl(x, n) {
                    return x << n | x >>> 32 - n;
                  }
                  C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
                  C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
                })(Math);
                return CryptoJS3.RIPEMD160;
              });
            }
          });

          // node_modules/crypto-js/hmac.js
          var require_hmac = __commonJS({
            "node_modules/crypto-js/hmac.js"(exports, module) {
              (function (root, factory) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Base = C_lib.Base;
                  var C_enc = C.enc;
                  var Utf8 = C_enc.Utf8;
                  var C_algo = C.algo;
                  var HMAC = C_algo.HMAC = Base.extend({
                    /**
                     * Initializes a newly created HMAC.
                     *
                     * @param {Hasher} hasher The hash algorithm to use.
                     * @param {WordArray|string} key The secret key.
                     *
                     * @example
                     *
                     *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                     */
                    init: function (hasher, key) {
                      hasher = this._hasher = new hasher.init();
                      if (typeof key == "string") {
                        key = Utf8.parse(key);
                      }
                      var hasherBlockSize = hasher.blockSize;
                      var hasherBlockSizeBytes = hasherBlockSize * 4;
                      if (key.sigBytes > hasherBlockSizeBytes) {
                        key = hasher.finalize(key);
                      }
                      key.clamp();
                      var oKey = this._oKey = key.clone();
                      var iKey = this._iKey = key.clone();
                      var oKeyWords = oKey.words;
                      var iKeyWords = iKey.words;
                      for (var i = 0; i < hasherBlockSize; i++) {
                        oKeyWords[i] ^= 1549556828;
                        iKeyWords[i] ^= 909522486;
                      }
                      oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                      this.reset();
                    },
                    /**
                     * Resets this HMAC to its initial state.
                     *
                     * @example
                     *
                     *     hmacHasher.reset();
                     */
                    reset: function () {
                      var hasher = this._hasher;
                      hasher.reset();
                      hasher.update(this._iKey);
                    },
                    /**
                     * Updates this HMAC with a message.
                     *
                     * @param {WordArray|string} messageUpdate The message to append.
                     *
                     * @return {HMAC} This HMAC instance.
                     *
                     * @example
                     *
                     *     hmacHasher.update('message');
                     *     hmacHasher.update(wordArray);
                     */
                    update: function (messageUpdate) {
                      this._hasher.update(messageUpdate);
                      return this;
                    },
                    /**
                     * Finalizes the HMAC computation.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} messageUpdate (Optional) A final message update.
                     *
                     * @return {WordArray} The HMAC.
                     *
                     * @example
                     *
                     *     var hmac = hmacHasher.finalize();
                     *     var hmac = hmacHasher.finalize('message');
                     *     var hmac = hmacHasher.finalize(wordArray);
                     */
                    finalize: function (messageUpdate) {
                      var hasher = this._hasher;
                      var innerHash = hasher.finalize(messageUpdate);
                      hasher.reset();
                      var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                      return hmac;
                    }
                  });
                })();
              });
            }
          });

          // node_modules/crypto-js/pbkdf2.js
          var require_pbkdf2 = __commonJS({
            "node_modules/crypto-js/pbkdf2.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./sha1", "./hmac"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Base = C_lib.Base;
                  var WordArray = C_lib.WordArray;
                  var C_algo = C.algo;
                  var SHA1 = C_algo.SHA1;
                  var HMAC = C_algo.HMAC;
                  var PBKDF2 = C_algo.PBKDF2 = Base.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                     * @property {Hasher} hasher The hasher to use. Default: SHA1
                     * @property {number} iterations The number of iterations to perform. Default: 1
                     */
                    cfg: Base.extend({
                      keySize: 128 / 32,
                      hasher: SHA1,
                      iterations: 1
                    }),
                    /**
                     * Initializes a newly created key derivation function.
                     *
                     * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                     *
                     * @example
                     *
                     *     var kdf = CryptoJS.algo.PBKDF2.create();
                     *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
                     *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
                     */
                    init: function (cfg) {
                      this.cfg = this.cfg.extend(cfg);
                    },
                    /**
                     * Computes the Password-Based Key Derivation Function 2.
                     *
                     * @param {WordArray|string} password The password.
                     * @param {WordArray|string} salt A salt.
                     *
                     * @return {WordArray} The derived key.
                     *
                     * @example
                     *
                     *     var key = kdf.compute(password, salt);
                     */
                    compute: function (password, salt) {
                      var cfg = this.cfg;
                      var hmac = HMAC.create(cfg.hasher, password);
                      var derivedKey = WordArray.create();
                      var blockIndex = WordArray.create([1]);
                      var derivedKeyWords = derivedKey.words;
                      var blockIndexWords = blockIndex.words;
                      var keySize = cfg.keySize;
                      var iterations = cfg.iterations;
                      while (derivedKeyWords.length < keySize) {
                        var block = hmac.update(salt).finalize(blockIndex);
                        hmac.reset();
                        var blockWords = block.words;
                        var blockWordsLength = blockWords.length;
                        var intermediate = block;
                        for (var i = 1; i < iterations; i++) {
                          intermediate = hmac.finalize(intermediate);
                          hmac.reset();
                          var intermediateWords = intermediate.words;
                          for (var j = 0; j < blockWordsLength; j++) {
                            blockWords[j] ^= intermediateWords[j];
                          }
                        }
                        derivedKey.concat(block);
                        blockIndexWords[0]++;
                      }
                      derivedKey.sigBytes = keySize * 4;
                      return derivedKey;
                    }
                  });
                  C.PBKDF2 = function (password, salt, cfg) {
                    return PBKDF2.create(cfg).compute(password, salt);
                  };
                })();
                return CryptoJS3.PBKDF2;
              });
            }
          });

          // node_modules/crypto-js/evpkdf.js
          var require_evpkdf = __commonJS({
            "node_modules/crypto-js/evpkdf.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_sha1(), require_hmac());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./sha1", "./hmac"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Base = C_lib.Base;
                  var WordArray = C_lib.WordArray;
                  var C_algo = C.algo;
                  var MD5 = C_algo.MD5;
                  var EvpKDF = C_algo.EvpKDF = Base.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                     * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                     * @property {number} iterations The number of iterations to perform. Default: 1
                     */
                    cfg: Base.extend({
                      keySize: 128 / 32,
                      hasher: MD5,
                      iterations: 1
                    }),
                    /**
                     * Initializes a newly created key derivation function.
                     *
                     * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                     *
                     * @example
                     *
                     *     var kdf = CryptoJS.algo.EvpKDF.create();
                     *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                     *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                     */
                    init: function (cfg) {
                      this.cfg = this.cfg.extend(cfg);
                    },
                    /**
                     * Derives a key from a password.
                     *
                     * @param {WordArray|string} password The password.
                     * @param {WordArray|string} salt A salt.
                     *
                     * @return {WordArray} The derived key.
                     *
                     * @example
                     *
                     *     var key = kdf.compute(password, salt);
                     */
                    compute: function (password, salt) {
                      var cfg = this.cfg;
                      var hasher = cfg.hasher.create();
                      var derivedKey = WordArray.create();
                      var derivedKeyWords = derivedKey.words;
                      var keySize = cfg.keySize;
                      var iterations = cfg.iterations;
                      while (derivedKeyWords.length < keySize) {
                        if (block) {
                          hasher.update(block);
                        }
                        var block = hasher.update(password).finalize(salt);
                        hasher.reset();
                        for (var i = 1; i < iterations; i++) {
                          block = hasher.finalize(block);
                          hasher.reset();
                        }
                        derivedKey.concat(block);
                      }
                      derivedKey.sigBytes = keySize * 4;
                      return derivedKey;
                    }
                  });
                  C.EvpKDF = function (password, salt, cfg) {
                    return EvpKDF.create(cfg).compute(password, salt);
                  };
                })();
                return CryptoJS3.EvpKDF;
              });
            }
          });

          // node_modules/crypto-js/cipher-core.js
          var require_cipher_core = __commonJS({
            "node_modules/crypto-js/cipher-core.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_evpkdf());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./evpkdf"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.lib.Cipher || function (undefined2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var Base = C_lib.Base;
                  var WordArray = C_lib.WordArray;
                  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
                  var C_enc = C.enc;
                  var Utf8 = C_enc.Utf8;
                  var Base64 = C_enc.Base64;
                  var C_algo = C.algo;
                  var EvpKDF = C_algo.EvpKDF;
                  var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {WordArray} iv The IV to use for this operation.
                     */
                    cfg: Base.extend(),
                    /**
                     * Creates this cipher in encryption mode.
                     *
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {Cipher} A cipher instance.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                     */
                    createEncryptor: function (key, cfg) {
                      return this.create(this._ENC_XFORM_MODE, key, cfg);
                    },
                    /**
                     * Creates this cipher in decryption mode.
                     *
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {Cipher} A cipher instance.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
                     */
                    createDecryptor: function (key, cfg) {
                      return this.create(this._DEC_XFORM_MODE, key, cfg);
                    },
                    /**
                     * Initializes a newly created cipher.
                     *
                     * @param {number} xformMode Either the encryption or decryption transormation mode constant.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @example
                     *
                     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
                     */
                    init: function (xformMode, key, cfg) {
                      this.cfg = this.cfg.extend(cfg);
                      this._xformMode = xformMode;
                      this._key = key;
                      this.reset();
                    },
                    /**
                     * Resets this cipher to its initial state.
                     *
                     * @example
                     *
                     *     cipher.reset();
                     */
                    reset: function () {
                      BufferedBlockAlgorithm.reset.call(this);
                      this._doReset();
                    },
                    /**
                     * Adds data to be encrypted or decrypted.
                     *
                     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
                     *
                     * @return {WordArray} The data after processing.
                     *
                     * @example
                     *
                     *     var encrypted = cipher.process('data');
                     *     var encrypted = cipher.process(wordArray);
                     */
                    process: function (dataUpdate) {
                      this._append(dataUpdate);
                      return this._process();
                    },
                    /**
                     * Finalizes the encryption or decryption process.
                     * Note that the finalize operation is effectively a destructive, read-once operation.
                     *
                     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
                     *
                     * @return {WordArray} The data after final processing.
                     *
                     * @example
                     *
                     *     var encrypted = cipher.finalize();
                     *     var encrypted = cipher.finalize('data');
                     *     var encrypted = cipher.finalize(wordArray);
                     */
                    finalize: function (dataUpdate) {
                      if (dataUpdate) {
                        this._append(dataUpdate);
                      }
                      var finalProcessedData = this._doFinalize();
                      return finalProcessedData;
                    },
                    keySize: 128 / 32,
                    ivSize: 128 / 32,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    /**
                     * Creates shortcut functions to a cipher's object interface.
                     *
                     * @param {Cipher} cipher The cipher to create a helper for.
                     *
                     * @return {Object} An object with encrypt and decrypt shortcut functions.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                     */
                    _createHelper: function () {
                      function selectCipherStrategy(key) {
                        if (typeof key == "string") {
                          return PasswordBasedCipher;
                        } else {
                          return SerializableCipher;
                        }
                      }
                      return function (cipher) {
                        return {
                          encrypt: function (message, key, cfg) {
                            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                          },
                          decrypt: function (ciphertext, key, cfg) {
                            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                          }
                        };
                      };
                    }()
                  });
                  var StreamCipher = C_lib.StreamCipher = Cipher.extend({
                    _doFinalize: function () {
                      var finalProcessedBlocks = this._process(true);
                      return finalProcessedBlocks;
                    },
                    blockSize: 1
                  });
                  var C_mode = C.mode = {};
                  var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
                    /**
                     * Creates this mode for encryption.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                     */
                    createEncryptor: function (cipher, iv) {
                      return this.Encryptor.create(cipher, iv);
                    },
                    /**
                     * Creates this mode for decryption.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
                     */
                    createDecryptor: function (cipher, iv) {
                      return this.Decryptor.create(cipher, iv);
                    },
                    /**
                     * Initializes a newly created mode.
                     *
                     * @param {Cipher} cipher A block cipher instance.
                     * @param {Array} iv The IV words.
                     *
                     * @example
                     *
                     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
                     */
                    init: function (cipher, iv) {
                      this._cipher = cipher;
                      this._iv = iv;
                    }
                  });
                  var CBC = C_mode.CBC = function () {
                    var CBC2 = BlockCipherMode.extend();
                    CBC2.Encryptor = CBC2.extend({
                      /**
                       * Processes the data block at offset.
                       *
                       * @param {Array} words The data words to operate on.
                       * @param {number} offset The offset where the block starts.
                       *
                       * @example
                       *
                       *     mode.processBlock(data.words, offset);
                       */
                      processBlock: function (words, offset) {
                        var cipher = this._cipher;
                        var blockSize = cipher.blockSize;
                        xorBlock.call(this, words, offset, blockSize);
                        cipher.encryptBlock(words, offset);
                        this._prevBlock = words.slice(offset, offset + blockSize);
                      }
                    });
                    CBC2.Decryptor = CBC2.extend({
                      /**
                       * Processes the data block at offset.
                       *
                       * @param {Array} words The data words to operate on.
                       * @param {number} offset The offset where the block starts.
                       *
                       * @example
                       *
                       *     mode.processBlock(data.words, offset);
                       */
                      processBlock: function (words, offset) {
                        var cipher = this._cipher;
                        var blockSize = cipher.blockSize;
                        var thisBlock = words.slice(offset, offset + blockSize);
                        cipher.decryptBlock(words, offset);
                        xorBlock.call(this, words, offset, blockSize);
                        this._prevBlock = thisBlock;
                      }
                    });
                    function xorBlock(words, offset, blockSize) {
                      var iv = this._iv;
                      if (iv) {
                        var block = iv;
                        this._iv = undefined2;
                      } else {
                        var block = this._prevBlock;
                      }
                      for (var i = 0; i < blockSize; i++) {
                        words[offset + i] ^= block[i];
                      }
                    }
                    return CBC2;
                  }();
                  var C_pad = C.pad = {};
                  var Pkcs7 = C_pad.Pkcs7 = {
                    /**
                     * Pads data using the algorithm defined in PKCS #5/7.
                     *
                     * @param {WordArray} data The data to pad.
                     * @param {number} blockSize The multiple that the data should be padded to.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                     */
                    pad: function (data, blockSize) {
                      var blockSizeBytes = blockSize * 4;
                      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                      var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
                      var paddingWords = [];
                      for (var i = 0; i < nPaddingBytes; i += 4) {
                        paddingWords.push(paddingWord);
                      }
                      var padding = WordArray.create(paddingWords, nPaddingBytes);
                      data.concat(padding);
                    },
                    /**
                     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
                     *
                     * @param {WordArray} data The data to unpad.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     CryptoJS.pad.Pkcs7.unpad(wordArray);
                     */
                    unpad: function (data) {
                      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                      data.sigBytes -= nPaddingBytes;
                    }
                  };
                  var BlockCipher = C_lib.BlockCipher = Cipher.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {Mode} mode The block mode to use. Default: CBC
                     * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                     */
                    cfg: Cipher.cfg.extend({
                      mode: CBC,
                      padding: Pkcs7
                    }),
                    reset: function () {
                      Cipher.reset.call(this);
                      var cfg = this.cfg;
                      var iv = cfg.iv;
                      var mode = cfg.mode;
                      if (this._xformMode == this._ENC_XFORM_MODE) {
                        var modeCreator = mode.createEncryptor;
                      } else {
                        var modeCreator = mode.createDecryptor;
                        this._minBufferSize = 1;
                      }
                      if (this._mode && this._mode.__creator == modeCreator) {
                        this._mode.init(this, iv && iv.words);
                      } else {
                        this._mode = modeCreator.call(mode, this, iv && iv.words);
                        this._mode.__creator = modeCreator;
                      }
                    },
                    _doProcessBlock: function (words, offset) {
                      this._mode.processBlock(words, offset);
                    },
                    _doFinalize: function () {
                      var padding = this.cfg.padding;
                      if (this._xformMode == this._ENC_XFORM_MODE) {
                        padding.pad(this._data, this.blockSize);
                        var finalProcessedBlocks = this._process(true);
                      } else {
                        var finalProcessedBlocks = this._process(true);
                        padding.unpad(finalProcessedBlocks);
                      }
                      return finalProcessedBlocks;
                    },
                    blockSize: 128 / 32
                  });
                  var CipherParams = C_lib.CipherParams = Base.extend({
                    /**
                     * Initializes a newly created cipher params object.
                     *
                     * @param {Object} cipherParams An object with any of the possible cipher parameters.
                     *
                     * @example
                     *
                     *     var cipherParams = CryptoJS.lib.CipherParams.create({
                     *         ciphertext: ciphertextWordArray,
                     *         key: keyWordArray,
                     *         iv: ivWordArray,
                     *         salt: saltWordArray,
                     *         algorithm: CryptoJS.algo.AES,
                     *         mode: CryptoJS.mode.CBC,
                     *         padding: CryptoJS.pad.PKCS7,
                     *         blockSize: 4,
                     *         formatter: CryptoJS.format.OpenSSL
                     *     });
                     */
                    init: function (cipherParams) {
                      this.mixIn(cipherParams);
                    },
                    /**
                     * Converts this cipher params object to a string.
                     *
                     * @param {Format} formatter (Optional) The formatting strategy to use.
                     *
                     * @return {string} The stringified cipher params.
                     *
                     * @throws Error If neither the formatter nor the default formatter is set.
                     *
                     * @example
                     *
                     *     var string = cipherParams + '';
                     *     var string = cipherParams.toString();
                     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
                     */
                    toString: function (formatter) {
                      return (formatter || this.formatter).stringify(this);
                    }
                  });
                  var C_format = C.format = {};
                  var OpenSSLFormatter = C_format.OpenSSL = {
                    /**
                     * Converts a cipher params object to an OpenSSL-compatible string.
                     *
                     * @param {CipherParams} cipherParams The cipher params object.
                     *
                     * @return {string} The OpenSSL-compatible string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                     */
                    stringify: function (cipherParams) {
                      var ciphertext = cipherParams.ciphertext;
                      var salt = cipherParams.salt;
                      if (salt) {
                        var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
                      } else {
                        var wordArray = ciphertext;
                      }
                      return wordArray.toString(Base64);
                    },
                    /**
                     * Converts an OpenSSL-compatible string to a cipher params object.
                     *
                     * @param {string} openSSLStr The OpenSSL-compatible string.
                     *
                     * @return {CipherParams} The cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
                     */
                    parse: function (openSSLStr) {
                      var ciphertext = Base64.parse(openSSLStr);
                      var ciphertextWords = ciphertext.words;
                      if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
                        var salt = WordArray.create(ciphertextWords.slice(2, 4));
                        ciphertextWords.splice(0, 4);
                        ciphertext.sigBytes -= 16;
                      }
                      return CipherParams.create({ ciphertext, salt });
                    }
                  };
                  var SerializableCipher = C_lib.SerializableCipher = Base.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                     */
                    cfg: Base.extend({
                      format: OpenSSLFormatter
                    }),
                    /**
                     * Encrypts a message.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {WordArray|string} message The message to encrypt.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {CipherParams} A cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     */
                    encrypt: function (cipher, message, key, cfg) {
                      cfg = this.cfg.extend(cfg);
                      var encryptor = cipher.createEncryptor(key, cfg);
                      var ciphertext = encryptor.finalize(message);
                      var cipherCfg = encryptor.cfg;
                      return CipherParams.create({
                        ciphertext,
                        key,
                        iv: cipherCfg.iv,
                        algorithm: cipher,
                        mode: cipherCfg.mode,
                        padding: cipherCfg.padding,
                        blockSize: cipher.blockSize,
                        formatter: cfg.format
                      });
                    },
                    /**
                     * Decrypts serialized ciphertext.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                     * @param {WordArray} key The key.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {WordArray} The plaintext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                     */
                    decrypt: function (cipher, ciphertext, key, cfg) {
                      cfg = this.cfg.extend(cfg);
                      ciphertext = this._parse(ciphertext, cfg.format);
                      var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
                      return plaintext;
                    },
                    /**
                     * Converts serialized ciphertext to CipherParams,
                     * else assumed CipherParams already and returns ciphertext unchanged.
                     *
                     * @param {CipherParams|string} ciphertext The ciphertext.
                     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
                     *
                     * @return {CipherParams} The unserialized ciphertext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
                     */
                    _parse: function (ciphertext, format) {
                      if (typeof ciphertext == "string") {
                        return format.parse(ciphertext, this);
                      } else {
                        return ciphertext;
                      }
                    }
                  });
                  var C_kdf = C.kdf = {};
                  var OpenSSLKdf = C_kdf.OpenSSL = {
                    /**
                     * Derives a key and IV from a password.
                     *
                     * @param {string} password The password to derive from.
                     * @param {number} keySize The size in words of the key to generate.
                     * @param {number} ivSize The size in words of the IV to generate.
                     * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                     *
                     * @return {CipherParams} A cipher params object with the key, IV, and salt.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                     */
                    execute: function (password, keySize, ivSize, salt) {
                      if (!salt) {
                        salt = WordArray.random(64 / 8);
                      }
                      var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
                      var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
                      key.sigBytes = keySize * 4;
                      return CipherParams.create({ key, iv, salt });
                    }
                  };
                  var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                     */
                    cfg: SerializableCipher.cfg.extend({
                      kdf: OpenSSLKdf
                    }),
                    /**
                     * Encrypts a message using a password.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {WordArray|string} message The message to encrypt.
                     * @param {string} password The password.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {CipherParams} A cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                     */
                    encrypt: function (cipher, message, password, cfg) {
                      cfg = this.cfg.extend(cfg);
                      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
                      cfg.iv = derivedParams.iv;
                      var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);
                      ciphertext.mixIn(derivedParams);
                      return ciphertext;
                    },
                    /**
                     * Decrypts serialized ciphertext using a password.
                     *
                     * @param {Cipher} cipher The cipher algorithm to use.
                     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
                     * @param {string} password The password.
                     * @param {Object} cfg (Optional) The configuration options to use for this operation.
                     *
                     * @return {WordArray} The plaintext.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
                     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
                     */
                    decrypt: function (cipher, ciphertext, password, cfg) {
                      cfg = this.cfg.extend(cfg);
                      ciphertext = this._parse(ciphertext, cfg.format);
                      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
                      cfg.iv = derivedParams.iv;
                      var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
                      return plaintext;
                    }
                  });
                }();
              });
            }
          });

          // node_modules/crypto-js/mode-cfb.js
          var require_mode_cfb = __commonJS({
            "node_modules/crypto-js/mode-cfb.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.mode.CFB = function () {
                  var CFB = CryptoJS3.lib.BlockCipherMode.extend();
                  CFB.Encryptor = CFB.extend({
                    processBlock: function (words, offset) {
                      var cipher = this._cipher;
                      var blockSize = cipher.blockSize;
                      generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                      this._prevBlock = words.slice(offset, offset + blockSize);
                    }
                  });
                  CFB.Decryptor = CFB.extend({
                    processBlock: function (words, offset) {
                      var cipher = this._cipher;
                      var blockSize = cipher.blockSize;
                      var thisBlock = words.slice(offset, offset + blockSize);
                      generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
                      this._prevBlock = thisBlock;
                    }
                  });
                  function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
                    var iv = this._iv;
                    if (iv) {
                      var keystream = iv.slice(0);
                      this._iv = void 0;
                    } else {
                      var keystream = this._prevBlock;
                    }
                    cipher.encryptBlock(keystream, 0);
                    for (var i = 0; i < blockSize; i++) {
                      words[offset + i] ^= keystream[i];
                    }
                  }
                  return CFB;
                }();
                return CryptoJS3.mode.CFB;
              });
            }
          });

          // node_modules/crypto-js/mode-ctr.js
          var require_mode_ctr = __commonJS({
            "node_modules/crypto-js/mode-ctr.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.mode.CTR = function () {
                  var CTR = CryptoJS3.lib.BlockCipherMode.extend();
                  var Encryptor = CTR.Encryptor = CTR.extend({
                    processBlock: function (words, offset) {
                      var cipher = this._cipher;
                      var blockSize = cipher.blockSize;
                      var iv = this._iv;
                      var counter = this._counter;
                      if (iv) {
                        counter = this._counter = iv.slice(0);
                        this._iv = void 0;
                      }
                      var keystream = counter.slice(0);
                      cipher.encryptBlock(keystream, 0);
                      counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
                      for (var i = 0; i < blockSize; i++) {
                        words[offset + i] ^= keystream[i];
                      }
                    }
                  });
                  CTR.Decryptor = Encryptor;
                  return CTR;
                }();
                return CryptoJS3.mode.CTR;
              });
            }
          });

          // node_modules/crypto-js/mode-ctr-gladman.js
          var require_mode_ctr_gladman = __commonJS({
            "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.mode.CTRGladman = function () {
                  var CTRGladman = CryptoJS3.lib.BlockCipherMode.extend();
                  function incWord(word) {
                    if ((word >> 24 & 255) === 255) {
                      var b1 = word >> 16 & 255;
                      var b2 = word >> 8 & 255;
                      var b3 = word & 255;
                      if (b1 === 255) {
                        b1 = 0;
                        if (b2 === 255) {
                          b2 = 0;
                          if (b3 === 255) {
                            b3 = 0;
                          } else {
                            ++b3;
                          }
                        } else {
                          ++b2;
                        }
                      } else {
                        ++b1;
                      }
                      word = 0;
                      word += b1 << 16;
                      word += b2 << 8;
                      word += b3;
                    } else {
                      word += 1 << 24;
                    }
                    return word;
                  }
                  function incCounter(counter) {
                    if ((counter[0] = incWord(counter[0])) === 0) {
                      counter[1] = incWord(counter[1]);
                    }
                    return counter;
                  }
                  var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
                    processBlock: function (words, offset) {
                      var cipher = this._cipher;
                      var blockSize = cipher.blockSize;
                      var iv = this._iv;
                      var counter = this._counter;
                      if (iv) {
                        counter = this._counter = iv.slice(0);
                        this._iv = void 0;
                      }
                      incCounter(counter);
                      var keystream = counter.slice(0);
                      cipher.encryptBlock(keystream, 0);
                      for (var i = 0; i < blockSize; i++) {
                        words[offset + i] ^= keystream[i];
                      }
                    }
                  });
                  CTRGladman.Decryptor = Encryptor;
                  return CTRGladman;
                }();
                return CryptoJS3.mode.CTRGladman;
              });
            }
          });

          // node_modules/crypto-js/mode-ofb.js
          var require_mode_ofb = __commonJS({
            "node_modules/crypto-js/mode-ofb.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.mode.OFB = function () {
                  var OFB = CryptoJS3.lib.BlockCipherMode.extend();
                  var Encryptor = OFB.Encryptor = OFB.extend({
                    processBlock: function (words, offset) {
                      var cipher = this._cipher;
                      var blockSize = cipher.blockSize;
                      var iv = this._iv;
                      var keystream = this._keystream;
                      if (iv) {
                        keystream = this._keystream = iv.slice(0);
                        this._iv = void 0;
                      }
                      cipher.encryptBlock(keystream, 0);
                      for (var i = 0; i < blockSize; i++) {
                        words[offset + i] ^= keystream[i];
                      }
                    }
                  });
                  OFB.Decryptor = Encryptor;
                  return OFB;
                }();
                return CryptoJS3.mode.OFB;
              });
            }
          });

          // node_modules/crypto-js/mode-ecb.js
          var require_mode_ecb = __commonJS({
            "node_modules/crypto-js/mode-ecb.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.mode.ECB = function () {
                  var ECB = CryptoJS3.lib.BlockCipherMode.extend();
                  ECB.Encryptor = ECB.extend({
                    processBlock: function (words, offset) {
                      this._cipher.encryptBlock(words, offset);
                    }
                  });
                  ECB.Decryptor = ECB.extend({
                    processBlock: function (words, offset) {
                      this._cipher.decryptBlock(words, offset);
                    }
                  });
                  return ECB;
                }();
                return CryptoJS3.mode.ECB;
              });
            }
          });

          // node_modules/crypto-js/pad-ansix923.js
          var require_pad_ansix923 = __commonJS({
            "node_modules/crypto-js/pad-ansix923.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.pad.AnsiX923 = {
                  pad: function (data, blockSize) {
                    var dataSigBytes = data.sigBytes;
                    var blockSizeBytes = blockSize * 4;
                    var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
                    var lastBytePos = dataSigBytes + nPaddingBytes - 1;
                    data.clamp();
                    data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
                    data.sigBytes += nPaddingBytes;
                  },
                  unpad: function (data) {
                    var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                    data.sigBytes -= nPaddingBytes;
                  }
                };
                return CryptoJS3.pad.Ansix923;
              });
            }
          });

          // node_modules/crypto-js/pad-iso10126.js
          var require_pad_iso10126 = __commonJS({
            "node_modules/crypto-js/pad-iso10126.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.pad.Iso10126 = {
                  pad: function (data, blockSize) {
                    var blockSizeBytes = blockSize * 4;
                    var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
                    data.concat(CryptoJS3.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS3.lib.WordArray.create([nPaddingBytes << 24], 1));
                  },
                  unpad: function (data) {
                    var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
                    data.sigBytes -= nPaddingBytes;
                  }
                };
                return CryptoJS3.pad.Iso10126;
              });
            }
          });

          // node_modules/crypto-js/pad-iso97971.js
          var require_pad_iso97971 = __commonJS({
            "node_modules/crypto-js/pad-iso97971.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.pad.Iso97971 = {
                  pad: function (data, blockSize) {
                    data.concat(CryptoJS3.lib.WordArray.create([2147483648], 1));
                    CryptoJS3.pad.ZeroPadding.pad(data, blockSize);
                  },
                  unpad: function (data) {
                    CryptoJS3.pad.ZeroPadding.unpad(data);
                    data.sigBytes--;
                  }
                };
                return CryptoJS3.pad.Iso97971;
              });
            }
          });

          // node_modules/crypto-js/pad-zeropadding.js
          var require_pad_zeropadding = __commonJS({
            "node_modules/crypto-js/pad-zeropadding.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.pad.ZeroPadding = {
                  pad: function (data, blockSize) {
                    var blockSizeBytes = blockSize * 4;
                    data.clamp();
                    data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
                  },
                  unpad: function (data) {
                    var dataWords = data.words;
                    var i = data.sigBytes - 1;
                    while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255)) {
                      i--;
                    }
                    data.sigBytes = i + 1;
                  }
                };
                return CryptoJS3.pad.ZeroPadding;
              });
            }
          });

          // node_modules/crypto-js/pad-nopadding.js
          var require_pad_nopadding = __commonJS({
            "node_modules/crypto-js/pad-nopadding.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                CryptoJS3.pad.NoPadding = {
                  pad: function () {
                  },
                  unpad: function () {
                  }
                };
                return CryptoJS3.pad.NoPadding;
              });
            }
          });

          // node_modules/crypto-js/format-hex.js
          var require_format_hex = __commonJS({
            "node_modules/crypto-js/format-hex.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function (undefined2) {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var CipherParams = C_lib.CipherParams;
                  var C_enc = C.enc;
                  var Hex = C_enc.Hex;
                  var C_format = C.format;
                  var HexFormatter = C_format.Hex = {
                    /**
                     * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
                     *
                     * @param {CipherParams} cipherParams The cipher params object.
                     *
                     * @return {string} The hexadecimally encoded string.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
                     */
                    stringify: function (cipherParams) {
                      return cipherParams.ciphertext.toString(Hex);
                    },
                    /**
                     * Converts a hexadecimally encoded ciphertext string to a cipher params object.
                     *
                     * @param {string} input The hexadecimally encoded string.
                     *
                     * @return {CipherParams} The cipher params object.
                     *
                     * @static
                     *
                     * @example
                     *
                     *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
                     */
                    parse: function (input) {
                      var ciphertext = Hex.parse(input);
                      return CipherParams.create({ ciphertext });
                    }
                  };
                })();
                return CryptoJS3.format.Hex;
              });
            }
          });

          // node_modules/crypto-js/aes.js
          var require_aes = __commonJS({
            "node_modules/crypto-js/aes.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var BlockCipher = C_lib.BlockCipher;
                  var C_algo = C.algo;
                  var SBOX = [];
                  var INV_SBOX = [];
                  var SUB_MIX_0 = [];
                  var SUB_MIX_1 = [];
                  var SUB_MIX_2 = [];
                  var SUB_MIX_3 = [];
                  var INV_SUB_MIX_0 = [];
                  var INV_SUB_MIX_1 = [];
                  var INV_SUB_MIX_2 = [];
                  var INV_SUB_MIX_3 = [];
                  (function () {
                    var d = [];
                    for (var i = 0; i < 256; i++) {
                      if (i < 128) {
                        d[i] = i << 1;
                      } else {
                        d[i] = i << 1 ^ 283;
                      }
                    }
                    var x = 0;
                    var xi = 0;
                    for (var i = 0; i < 256; i++) {
                      var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                      sx = sx >>> 8 ^ sx & 255 ^ 99;
                      SBOX[x] = sx;
                      INV_SBOX[sx] = x;
                      var x2 = d[x];
                      var x4 = d[x2];
                      var x8 = d[x4];
                      var t = d[sx] * 257 ^ sx * 16843008;
                      SUB_MIX_0[x] = t << 24 | t >>> 8;
                      SUB_MIX_1[x] = t << 16 | t >>> 16;
                      SUB_MIX_2[x] = t << 8 | t >>> 24;
                      SUB_MIX_3[x] = t;
                      var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
                      INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
                      INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
                      INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
                      INV_SUB_MIX_3[sx] = t;
                      if (!x) {
                        x = xi = 1;
                      } else {
                        x = x2 ^ d[d[d[x8 ^ x2]]];
                        xi ^= d[d[xi]];
                      }
                    }
                  })();
                  var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
                  var AES = C_algo.AES = BlockCipher.extend({
                    _doReset: function () {
                      if (this._nRounds && this._keyPriorReset === this._key) {
                        return;
                      }
                      var key = this._keyPriorReset = this._key;
                      var keyWords = key.words;
                      var keySize = key.sigBytes / 4;
                      var nRounds = this._nRounds = keySize + 6;
                      var ksRows = (nRounds + 1) * 4;
                      var keySchedule = this._keySchedule = [];
                      for (var ksRow = 0; ksRow < ksRows; ksRow++) {
                        if (ksRow < keySize) {
                          keySchedule[ksRow] = keyWords[ksRow];
                        } else {
                          var t = keySchedule[ksRow - 1];
                          if (!(ksRow % keySize)) {
                            t = t << 8 | t >>> 24;
                            t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                            t ^= RCON[ksRow / keySize | 0] << 24;
                          } else if (keySize > 6 && ksRow % keySize == 4) {
                            t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                          }
                          keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
                        }
                      }
                      var invKeySchedule = this._invKeySchedule = [];
                      for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
                        var ksRow = ksRows - invKsRow;
                        if (invKsRow % 4) {
                          var t = keySchedule[ksRow];
                        } else {
                          var t = keySchedule[ksRow - 4];
                        }
                        if (invKsRow < 4 || ksRow <= 4) {
                          invKeySchedule[invKsRow] = t;
                        } else {
                          invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
                        }
                      }
                    },
                    encryptBlock: function (M, offset) {
                      this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
                    },
                    decryptBlock: function (M, offset) {
                      var t = M[offset + 1];
                      M[offset + 1] = M[offset + 3];
                      M[offset + 3] = t;
                      this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
                      var t = M[offset + 1];
                      M[offset + 1] = M[offset + 3];
                      M[offset + 3] = t;
                    },
                    _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
                      var nRounds = this._nRounds;
                      var s0 = M[offset] ^ keySchedule[0];
                      var s1 = M[offset + 1] ^ keySchedule[1];
                      var s2 = M[offset + 2] ^ keySchedule[2];
                      var s3 = M[offset + 3] ^ keySchedule[3];
                      var ksRow = 4;
                      for (var round = 1; round < nRounds; round++) {
                        var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
                        var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
                        var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
                        var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
                        s0 = t0;
                        s1 = t1;
                        s2 = t2;
                        s3 = t3;
                      }
                      var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
                      var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
                      var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
                      var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
                      M[offset] = t0;
                      M[offset + 1] = t1;
                      M[offset + 2] = t2;
                      M[offset + 3] = t3;
                    },
                    keySize: 256 / 32
                  });
                  C.AES = BlockCipher._createHelper(AES);
                })();
                return CryptoJS3.AES;
              });
            }
          });

          // node_modules/crypto-js/tripledes.js
          var require_tripledes = __commonJS({
            "node_modules/crypto-js/tripledes.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var WordArray = C_lib.WordArray;
                  var BlockCipher = C_lib.BlockCipher;
                  var C_algo = C.algo;
                  var PC1 = [
                    57,
                    49,
                    41,
                    33,
                    25,
                    17,
                    9,
                    1,
                    58,
                    50,
                    42,
                    34,
                    26,
                    18,
                    10,
                    2,
                    59,
                    51,
                    43,
                    35,
                    27,
                    19,
                    11,
                    3,
                    60,
                    52,
                    44,
                    36,
                    63,
                    55,
                    47,
                    39,
                    31,
                    23,
                    15,
                    7,
                    62,
                    54,
                    46,
                    38,
                    30,
                    22,
                    14,
                    6,
                    61,
                    53,
                    45,
                    37,
                    29,
                    21,
                    13,
                    5,
                    28,
                    20,
                    12,
                    4
                  ];
                  var PC2 = [
                    14,
                    17,
                    11,
                    24,
                    1,
                    5,
                    3,
                    28,
                    15,
                    6,
                    21,
                    10,
                    23,
                    19,
                    12,
                    4,
                    26,
                    8,
                    16,
                    7,
                    27,
                    20,
                    13,
                    2,
                    41,
                    52,
                    31,
                    37,
                    47,
                    55,
                    30,
                    40,
                    51,
                    45,
                    33,
                    48,
                    44,
                    49,
                    39,
                    56,
                    34,
                    53,
                    46,
                    42,
                    50,
                    36,
                    29,
                    32
                  ];
                  var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
                  var SBOX_P = [
                    {
                      0: 8421888,
                      268435456: 32768,
                      536870912: 8421378,
                      805306368: 2,
                      1073741824: 512,
                      1342177280: 8421890,
                      1610612736: 8389122,
                      1879048192: 8388608,
                      2147483648: 514,
                      2415919104: 8389120,
                      2684354560: 33280,
                      2952790016: 8421376,
                      3221225472: 32770,
                      3489660928: 8388610,
                      3758096384: 0,
                      4026531840: 33282,
                      134217728: 0,
                      402653184: 8421890,
                      671088640: 33282,
                      939524096: 32768,
                      1207959552: 8421888,
                      1476395008: 512,
                      1744830464: 8421378,
                      2013265920: 2,
                      2281701376: 8389120,
                      2550136832: 33280,
                      2818572288: 8421376,
                      3087007744: 8389122,
                      3355443200: 8388610,
                      3623878656: 32770,
                      3892314112: 514,
                      4160749568: 8388608,
                      1: 32768,
                      268435457: 2,
                      536870913: 8421888,
                      805306369: 8388608,
                      1073741825: 8421378,
                      1342177281: 33280,
                      1610612737: 512,
                      1879048193: 8389122,
                      2147483649: 8421890,
                      2415919105: 8421376,
                      2684354561: 8388610,
                      2952790017: 33282,
                      3221225473: 514,
                      3489660929: 8389120,
                      3758096385: 32770,
                      4026531841: 0,
                      134217729: 8421890,
                      402653185: 8421376,
                      671088641: 8388608,
                      939524097: 512,
                      1207959553: 32768,
                      1476395009: 8388610,
                      1744830465: 2,
                      2013265921: 33282,
                      2281701377: 32770,
                      2550136833: 8389122,
                      2818572289: 514,
                      3087007745: 8421888,
                      3355443201: 8389120,
                      3623878657: 0,
                      3892314113: 33280,
                      4160749569: 8421378
                    },
                    {
                      0: 1074282512,
                      16777216: 16384,
                      33554432: 524288,
                      50331648: 1074266128,
                      67108864: 1073741840,
                      83886080: 1074282496,
                      100663296: 1073758208,
                      117440512: 16,
                      134217728: 540672,
                      150994944: 1073758224,
                      167772160: 1073741824,
                      184549376: 540688,
                      201326592: 524304,
                      218103808: 0,
                      234881024: 16400,
                      251658240: 1074266112,
                      8388608: 1073758208,
                      25165824: 540688,
                      41943040: 16,
                      58720256: 1073758224,
                      75497472: 1074282512,
                      92274688: 1073741824,
                      109051904: 524288,
                      125829120: 1074266128,
                      142606336: 524304,
                      159383552: 0,
                      176160768: 16384,
                      192937984: 1074266112,
                      209715200: 1073741840,
                      226492416: 540672,
                      243269632: 1074282496,
                      260046848: 16400,
                      268435456: 0,
                      285212672: 1074266128,
                      301989888: 1073758224,
                      318767104: 1074282496,
                      335544320: 1074266112,
                      352321536: 16,
                      369098752: 540688,
                      385875968: 16384,
                      402653184: 16400,
                      419430400: 524288,
                      436207616: 524304,
                      452984832: 1073741840,
                      469762048: 540672,
                      486539264: 1073758208,
                      503316480: 1073741824,
                      520093696: 1074282512,
                      276824064: 540688,
                      293601280: 524288,
                      310378496: 1074266112,
                      327155712: 16384,
                      343932928: 1073758208,
                      360710144: 1074282512,
                      377487360: 16,
                      394264576: 1073741824,
                      411041792: 1074282496,
                      427819008: 1073741840,
                      444596224: 1073758224,
                      461373440: 524304,
                      478150656: 0,
                      494927872: 16400,
                      511705088: 1074266128,
                      528482304: 540672
                    },
                    {
                      0: 260,
                      1048576: 0,
                      2097152: 67109120,
                      3145728: 65796,
                      4194304: 65540,
                      5242880: 67108868,
                      6291456: 67174660,
                      7340032: 67174400,
                      8388608: 67108864,
                      9437184: 67174656,
                      10485760: 65792,
                      11534336: 67174404,
                      12582912: 67109124,
                      13631488: 65536,
                      14680064: 4,
                      15728640: 256,
                      524288: 67174656,
                      1572864: 67174404,
                      2621440: 0,
                      3670016: 67109120,
                      4718592: 67108868,
                      5767168: 65536,
                      6815744: 65540,
                      7864320: 260,
                      8912896: 4,
                      9961472: 256,
                      11010048: 67174400,
                      12058624: 65796,
                      13107200: 65792,
                      14155776: 67109124,
                      15204352: 67174660,
                      16252928: 67108864,
                      16777216: 67174656,
                      17825792: 65540,
                      18874368: 65536,
                      19922944: 67109120,
                      20971520: 256,
                      22020096: 67174660,
                      23068672: 67108868,
                      24117248: 0,
                      25165824: 67109124,
                      26214400: 67108864,
                      27262976: 4,
                      28311552: 65792,
                      29360128: 67174400,
                      30408704: 260,
                      31457280: 65796,
                      32505856: 67174404,
                      17301504: 67108864,
                      18350080: 260,
                      19398656: 67174656,
                      20447232: 0,
                      21495808: 65540,
                      22544384: 67109120,
                      23592960: 256,
                      24641536: 67174404,
                      25690112: 65536,
                      26738688: 67174660,
                      27787264: 65796,
                      28835840: 67108868,
                      29884416: 67109124,
                      30932992: 67174400,
                      31981568: 4,
                      33030144: 65792
                    },
                    {
                      0: 2151682048,
                      65536: 2147487808,
                      131072: 4198464,
                      196608: 2151677952,
                      262144: 0,
                      327680: 4198400,
                      393216: 2147483712,
                      458752: 4194368,
                      524288: 2147483648,
                      589824: 4194304,
                      655360: 64,
                      720896: 2147487744,
                      786432: 2151678016,
                      851968: 4160,
                      917504: 4096,
                      983040: 2151682112,
                      32768: 2147487808,
                      98304: 64,
                      163840: 2151678016,
                      229376: 2147487744,
                      294912: 4198400,
                      360448: 2151682112,
                      425984: 0,
                      491520: 2151677952,
                      557056: 4096,
                      622592: 2151682048,
                      688128: 4194304,
                      753664: 4160,
                      819200: 2147483648,
                      884736: 4194368,
                      950272: 4198464,
                      1015808: 2147483712,
                      1048576: 4194368,
                      1114112: 4198400,
                      1179648: 2147483712,
                      1245184: 0,
                      1310720: 4160,
                      1376256: 2151678016,
                      1441792: 2151682048,
                      1507328: 2147487808,
                      1572864: 2151682112,
                      1638400: 2147483648,
                      1703936: 2151677952,
                      1769472: 4198464,
                      1835008: 2147487744,
                      1900544: 4194304,
                      1966080: 64,
                      2031616: 4096,
                      1081344: 2151677952,
                      1146880: 2151682112,
                      1212416: 0,
                      1277952: 4198400,
                      1343488: 4194368,
                      1409024: 2147483648,
                      1474560: 2147487808,
                      1540096: 64,
                      1605632: 2147483712,
                      1671168: 4096,
                      1736704: 2147487744,
                      1802240: 2151678016,
                      1867776: 4160,
                      1933312: 2151682048,
                      1998848: 4194304,
                      2064384: 4198464
                    },
                    {
                      0: 128,
                      4096: 17039360,
                      8192: 262144,
                      12288: 536870912,
                      16384: 537133184,
                      20480: 16777344,
                      24576: 553648256,
                      28672: 262272,
                      32768: 16777216,
                      36864: 537133056,
                      40960: 536871040,
                      45056: 553910400,
                      49152: 553910272,
                      53248: 0,
                      57344: 17039488,
                      61440: 553648128,
                      2048: 17039488,
                      6144: 553648256,
                      10240: 128,
                      14336: 17039360,
                      18432: 262144,
                      22528: 537133184,
                      26624: 553910272,
                      30720: 536870912,
                      34816: 537133056,
                      38912: 0,
                      43008: 553910400,
                      47104: 16777344,
                      51200: 536871040,
                      55296: 553648128,
                      59392: 16777216,
                      63488: 262272,
                      65536: 262144,
                      69632: 128,
                      73728: 536870912,
                      77824: 553648256,
                      81920: 16777344,
                      86016: 553910272,
                      90112: 537133184,
                      94208: 16777216,
                      98304: 553910400,
                      102400: 553648128,
                      106496: 17039360,
                      110592: 537133056,
                      114688: 262272,
                      118784: 536871040,
                      122880: 0,
                      126976: 17039488,
                      67584: 553648256,
                      71680: 16777216,
                      75776: 17039360,
                      79872: 537133184,
                      83968: 536870912,
                      88064: 17039488,
                      92160: 128,
                      96256: 553910272,
                      100352: 262272,
                      104448: 553910400,
                      108544: 0,
                      112640: 553648128,
                      116736: 16777344,
                      120832: 262144,
                      124928: 537133056,
                      129024: 536871040
                    },
                    {
                      0: 268435464,
                      256: 8192,
                      512: 270532608,
                      768: 270540808,
                      1024: 268443648,
                      1280: 2097152,
                      1536: 2097160,
                      1792: 268435456,
                      2048: 0,
                      2304: 268443656,
                      2560: 2105344,
                      2816: 8,
                      3072: 270532616,
                      3328: 2105352,
                      3584: 8200,
                      3840: 270540800,
                      128: 270532608,
                      384: 270540808,
                      640: 8,
                      896: 2097152,
                      1152: 2105352,
                      1408: 268435464,
                      1664: 268443648,
                      1920: 8200,
                      2176: 2097160,
                      2432: 8192,
                      2688: 268443656,
                      2944: 270532616,
                      3200: 0,
                      3456: 270540800,
                      3712: 2105344,
                      3968: 268435456,
                      4096: 268443648,
                      4352: 270532616,
                      4608: 270540808,
                      4864: 8200,
                      5120: 2097152,
                      5376: 268435456,
                      5632: 268435464,
                      5888: 2105344,
                      6144: 2105352,
                      6400: 0,
                      6656: 8,
                      6912: 270532608,
                      7168: 8192,
                      7424: 268443656,
                      7680: 270540800,
                      7936: 2097160,
                      4224: 8,
                      4480: 2105344,
                      4736: 2097152,
                      4992: 268435464,
                      5248: 268443648,
                      5504: 8200,
                      5760: 270540808,
                      6016: 270532608,
                      6272: 270540800,
                      6528: 270532616,
                      6784: 8192,
                      7040: 2105352,
                      7296: 2097160,
                      7552: 0,
                      7808: 268435456,
                      8064: 268443656
                    },
                    {
                      0: 1048576,
                      16: 33555457,
                      32: 1024,
                      48: 1049601,
                      64: 34604033,
                      80: 0,
                      96: 1,
                      112: 34603009,
                      128: 33555456,
                      144: 1048577,
                      160: 33554433,
                      176: 34604032,
                      192: 34603008,
                      208: 1025,
                      224: 1049600,
                      240: 33554432,
                      8: 34603009,
                      24: 0,
                      40: 33555457,
                      56: 34604032,
                      72: 1048576,
                      88: 33554433,
                      104: 33554432,
                      120: 1025,
                      136: 1049601,
                      152: 33555456,
                      168: 34603008,
                      184: 1048577,
                      200: 1024,
                      216: 34604033,
                      232: 1,
                      248: 1049600,
                      256: 33554432,
                      272: 1048576,
                      288: 33555457,
                      304: 34603009,
                      320: 1048577,
                      336: 33555456,
                      352: 34604032,
                      368: 1049601,
                      384: 1025,
                      400: 34604033,
                      416: 1049600,
                      432: 1,
                      448: 0,
                      464: 34603008,
                      480: 33554433,
                      496: 1024,
                      264: 1049600,
                      280: 33555457,
                      296: 34603009,
                      312: 1,
                      328: 33554432,
                      344: 1048576,
                      360: 1025,
                      376: 34604032,
                      392: 33554433,
                      408: 34603008,
                      424: 0,
                      440: 34604033,
                      456: 1049601,
                      472: 1024,
                      488: 33555456,
                      504: 1048577
                    },
                    {
                      0: 134219808,
                      1: 131072,
                      2: 134217728,
                      3: 32,
                      4: 131104,
                      5: 134350880,
                      6: 134350848,
                      7: 2048,
                      8: 134348800,
                      9: 134219776,
                      10: 133120,
                      11: 134348832,
                      12: 2080,
                      13: 0,
                      14: 134217760,
                      15: 133152,
                      2147483648: 2048,
                      2147483649: 134350880,
                      2147483650: 134219808,
                      2147483651: 134217728,
                      2147483652: 134348800,
                      2147483653: 133120,
                      2147483654: 133152,
                      2147483655: 32,
                      2147483656: 134217760,
                      2147483657: 2080,
                      2147483658: 131104,
                      2147483659: 134350848,
                      2147483660: 0,
                      2147483661: 134348832,
                      2147483662: 134219776,
                      2147483663: 131072,
                      16: 133152,
                      17: 134350848,
                      18: 32,
                      19: 2048,
                      20: 134219776,
                      21: 134217760,
                      22: 134348832,
                      23: 131072,
                      24: 0,
                      25: 131104,
                      26: 134348800,
                      27: 134219808,
                      28: 134350880,
                      29: 133120,
                      30: 2080,
                      31: 134217728,
                      2147483664: 131072,
                      2147483665: 2048,
                      2147483666: 134348832,
                      2147483667: 133152,
                      2147483668: 32,
                      2147483669: 134348800,
                      2147483670: 134217728,
                      2147483671: 134219808,
                      2147483672: 134350880,
                      2147483673: 134217760,
                      2147483674: 134219776,
                      2147483675: 0,
                      2147483676: 133120,
                      2147483677: 2080,
                      2147483678: 131104,
                      2147483679: 134350848
                    }
                  ];
                  var SBOX_MASK = [
                    4160749569,
                    528482304,
                    33030144,
                    2064384,
                    129024,
                    8064,
                    504,
                    2147483679
                  ];
                  var DES = C_algo.DES = BlockCipher.extend({
                    _doReset: function () {
                      var key = this._key;
                      var keyWords = key.words;
                      var keyBits = [];
                      for (var i = 0; i < 56; i++) {
                        var keyBitPos = PC1[i] - 1;
                        keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
                      }
                      var subKeys = this._subKeys = [];
                      for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
                        var subKey = subKeys[nSubKey] = [];
                        var bitShift = BIT_SHIFTS[nSubKey];
                        for (var i = 0; i < 24; i++) {
                          subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                          subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
                        }
                        subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
                        for (var i = 1; i < 7; i++) {
                          subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
                        }
                        subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
                      }
                      var invSubKeys = this._invSubKeys = [];
                      for (var i = 0; i < 16; i++) {
                        invSubKeys[i] = subKeys[15 - i];
                      }
                    },
                    encryptBlock: function (M, offset) {
                      this._doCryptBlock(M, offset, this._subKeys);
                    },
                    decryptBlock: function (M, offset) {
                      this._doCryptBlock(M, offset, this._invSubKeys);
                    },
                    _doCryptBlock: function (M, offset, subKeys) {
                      this._lBlock = M[offset];
                      this._rBlock = M[offset + 1];
                      exchangeLR.call(this, 4, 252645135);
                      exchangeLR.call(this, 16, 65535);
                      exchangeRL.call(this, 2, 858993459);
                      exchangeRL.call(this, 8, 16711935);
                      exchangeLR.call(this, 1, 1431655765);
                      for (var round = 0; round < 16; round++) {
                        var subKey = subKeys[round];
                        var lBlock = this._lBlock;
                        var rBlock = this._rBlock;
                        var f = 0;
                        for (var i = 0; i < 8; i++) {
                          f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
                        }
                        this._lBlock = rBlock;
                        this._rBlock = lBlock ^ f;
                      }
                      var t = this._lBlock;
                      this._lBlock = this._rBlock;
                      this._rBlock = t;
                      exchangeLR.call(this, 1, 1431655765);
                      exchangeRL.call(this, 8, 16711935);
                      exchangeRL.call(this, 2, 858993459);
                      exchangeLR.call(this, 16, 65535);
                      exchangeLR.call(this, 4, 252645135);
                      M[offset] = this._lBlock;
                      M[offset + 1] = this._rBlock;
                    },
                    keySize: 64 / 32,
                    ivSize: 64 / 32,
                    blockSize: 64 / 32
                  });
                  function exchangeLR(offset, mask) {
                    var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
                    this._rBlock ^= t;
                    this._lBlock ^= t << offset;
                  }
                  function exchangeRL(offset, mask) {
                    var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
                    this._lBlock ^= t;
                    this._rBlock ^= t << offset;
                  }
                  C.DES = BlockCipher._createHelper(DES);
                  var TripleDES = C_algo.TripleDES = BlockCipher.extend({
                    _doReset: function () {
                      var key = this._key;
                      var keyWords = key.words;
                      this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
                      this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
                      this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
                    },
                    encryptBlock: function (M, offset) {
                      this._des1.encryptBlock(M, offset);
                      this._des2.decryptBlock(M, offset);
                      this._des3.encryptBlock(M, offset);
                    },
                    decryptBlock: function (M, offset) {
                      this._des3.decryptBlock(M, offset);
                      this._des2.encryptBlock(M, offset);
                      this._des1.decryptBlock(M, offset);
                    },
                    keySize: 192 / 32,
                    ivSize: 64 / 32,
                    blockSize: 64 / 32
                  });
                  C.TripleDES = BlockCipher._createHelper(TripleDES);
                })();
                return CryptoJS3.TripleDES;
              });
            }
          });

          // node_modules/crypto-js/rc4.js
          var require_rc4 = __commonJS({
            "node_modules/crypto-js/rc4.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var StreamCipher = C_lib.StreamCipher;
                  var C_algo = C.algo;
                  var RC4 = C_algo.RC4 = StreamCipher.extend({
                    _doReset: function () {
                      var key = this._key;
                      var keyWords = key.words;
                      var keySigBytes = key.sigBytes;
                      var S = this._S = [];
                      for (var i = 0; i < 256; i++) {
                        S[i] = i;
                      }
                      for (var i = 0, j = 0; i < 256; i++) {
                        var keyByteIndex = i % keySigBytes;
                        var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
                        j = (j + S[i] + keyByte) % 256;
                        var t = S[i];
                        S[i] = S[j];
                        S[j] = t;
                      }
                      this._i = this._j = 0;
                    },
                    _doProcessBlock: function (M, offset) {
                      M[offset] ^= generateKeystreamWord.call(this);
                    },
                    keySize: 256 / 32,
                    ivSize: 0
                  });
                  function generateKeystreamWord() {
                    var S = this._S;
                    var i = this._i;
                    var j = this._j;
                    var keystreamWord = 0;
                    for (var n = 0; n < 4; n++) {
                      i = (i + 1) % 256;
                      j = (j + S[i]) % 256;
                      var t = S[i];
                      S[i] = S[j];
                      S[j] = t;
                      keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
                    }
                    this._i = i;
                    this._j = j;
                    return keystreamWord;
                  }
                  C.RC4 = StreamCipher._createHelper(RC4);
                  var RC4Drop = C_algo.RC4Drop = RC4.extend({
                    /**
                     * Configuration options.
                     *
                     * @property {number} drop The number of keystream words to drop. Default 192
                     */
                    cfg: RC4.cfg.extend({
                      drop: 192
                    }),
                    _doReset: function () {
                      RC4._doReset.call(this);
                      for (var i = this.cfg.drop; i > 0; i--) {
                        generateKeystreamWord.call(this);
                      }
                    }
                  });
                  C.RC4Drop = StreamCipher._createHelper(RC4Drop);
                })();
                return CryptoJS3.RC4;
              });
            }
          });

          // node_modules/crypto-js/rabbit.js
          var require_rabbit = __commonJS({
            "node_modules/crypto-js/rabbit.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var StreamCipher = C_lib.StreamCipher;
                  var C_algo = C.algo;
                  var S = [];
                  var C_ = [];
                  var G = [];
                  var Rabbit = C_algo.Rabbit = StreamCipher.extend({
                    _doReset: function () {
                      var K = this._key.words;
                      var iv = this.cfg.iv;
                      for (var i = 0; i < 4; i++) {
                        K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
                      }
                      var X = this._X = [
                        K[0],
                        K[3] << 16 | K[2] >>> 16,
                        K[1],
                        K[0] << 16 | K[3] >>> 16,
                        K[2],
                        K[1] << 16 | K[0] >>> 16,
                        K[3],
                        K[2] << 16 | K[1] >>> 16
                      ];
                      var C2 = this._C = [
                        K[2] << 16 | K[2] >>> 16,
                        K[0] & 4294901760 | K[1] & 65535,
                        K[3] << 16 | K[3] >>> 16,
                        K[1] & 4294901760 | K[2] & 65535,
                        K[0] << 16 | K[0] >>> 16,
                        K[2] & 4294901760 | K[3] & 65535,
                        K[1] << 16 | K[1] >>> 16,
                        K[3] & 4294901760 | K[0] & 65535
                      ];
                      this._b = 0;
                      for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                      }
                      for (var i = 0; i < 8; i++) {
                        C2[i] ^= X[i + 4 & 7];
                      }
                      if (iv) {
                        var IV = iv.words;
                        var IV_0 = IV[0];
                        var IV_1 = IV[1];
                        var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                        var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                        var i1 = i0 >>> 16 | i2 & 4294901760;
                        var i3 = i2 << 16 | i0 & 65535;
                        C2[0] ^= i0;
                        C2[1] ^= i1;
                        C2[2] ^= i2;
                        C2[3] ^= i3;
                        C2[4] ^= i0;
                        C2[5] ^= i1;
                        C2[6] ^= i2;
                        C2[7] ^= i3;
                        for (var i = 0; i < 4; i++) {
                          nextState.call(this);
                        }
                      }
                    },
                    _doProcessBlock: function (M, offset) {
                      var X = this._X;
                      nextState.call(this);
                      S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                      S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                      S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                      S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                      for (var i = 0; i < 4; i++) {
                        S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                        M[offset + i] ^= S[i];
                      }
                    },
                    blockSize: 128 / 32,
                    ivSize: 64 / 32
                  });
                  function nextState() {
                    var X = this._X;
                    var C2 = this._C;
                    for (var i = 0; i < 8; i++) {
                      C_[i] = C2[i];
                    }
                    C2[0] = C2[0] + 1295307597 + this._b | 0;
                    C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
                    C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
                    C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
                    C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
                    C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
                    C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
                    C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
                    this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
                    for (var i = 0; i < 8; i++) {
                      var gx = X[i] + C2[i];
                      var ga = gx & 65535;
                      var gb = gx >>> 16;
                      var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                      var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
                      G[i] = gh ^ gl;
                    }
                    X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
                    X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
                    X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
                    X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
                    X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
                    X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
                    X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
                    X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
                  }
                  C.Rabbit = StreamCipher._createHelper(Rabbit);
                })();
                return CryptoJS3.Rabbit;
              });
            }
          });

          // node_modules/crypto-js/rabbit-legacy.js
          var require_rabbit_legacy = __commonJS({
            "node_modules/crypto-js/rabbit-legacy.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory);
                } else {
                  factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                (function () {
                  var C = CryptoJS3;
                  var C_lib = C.lib;
                  var StreamCipher = C_lib.StreamCipher;
                  var C_algo = C.algo;
                  var S = [];
                  var C_ = [];
                  var G = [];
                  var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
                    _doReset: function () {
                      var K = this._key.words;
                      var iv = this.cfg.iv;
                      var X = this._X = [
                        K[0],
                        K[3] << 16 | K[2] >>> 16,
                        K[1],
                        K[0] << 16 | K[3] >>> 16,
                        K[2],
                        K[1] << 16 | K[0] >>> 16,
                        K[3],
                        K[2] << 16 | K[1] >>> 16
                      ];
                      var C2 = this._C = [
                        K[2] << 16 | K[2] >>> 16,
                        K[0] & 4294901760 | K[1] & 65535,
                        K[3] << 16 | K[3] >>> 16,
                        K[1] & 4294901760 | K[2] & 65535,
                        K[0] << 16 | K[0] >>> 16,
                        K[2] & 4294901760 | K[3] & 65535,
                        K[1] << 16 | K[1] >>> 16,
                        K[3] & 4294901760 | K[0] & 65535
                      ];
                      this._b = 0;
                      for (var i = 0; i < 4; i++) {
                        nextState.call(this);
                      }
                      for (var i = 0; i < 8; i++) {
                        C2[i] ^= X[i + 4 & 7];
                      }
                      if (iv) {
                        var IV = iv.words;
                        var IV_0 = IV[0];
                        var IV_1 = IV[1];
                        var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
                        var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
                        var i1 = i0 >>> 16 | i2 & 4294901760;
                        var i3 = i2 << 16 | i0 & 65535;
                        C2[0] ^= i0;
                        C2[1] ^= i1;
                        C2[2] ^= i2;
                        C2[3] ^= i3;
                        C2[4] ^= i0;
                        C2[5] ^= i1;
                        C2[6] ^= i2;
                        C2[7] ^= i3;
                        for (var i = 0; i < 4; i++) {
                          nextState.call(this);
                        }
                      }
                    },
                    _doProcessBlock: function (M, offset) {
                      var X = this._X;
                      nextState.call(this);
                      S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
                      S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
                      S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
                      S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
                      for (var i = 0; i < 4; i++) {
                        S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
                        M[offset + i] ^= S[i];
                      }
                    },
                    blockSize: 128 / 32,
                    ivSize: 64 / 32
                  });
                  function nextState() {
                    var X = this._X;
                    var C2 = this._C;
                    for (var i = 0; i < 8; i++) {
                      C_[i] = C2[i];
                    }
                    C2[0] = C2[0] + 1295307597 + this._b | 0;
                    C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
                    C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
                    C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
                    C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
                    C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
                    C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
                    C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
                    this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
                    for (var i = 0; i < 8; i++) {
                      var gx = X[i] + C2[i];
                      var ga = gx & 65535;
                      var gb = gx >>> 16;
                      var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
                      var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
                      G[i] = gh ^ gl;
                    }
                    X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
                    X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
                    X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
                    X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
                    X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
                    X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
                    X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
                    X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
                  }
                  C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
                })();
                return CryptoJS3.RabbitLegacy;
              });
            }
          });

          // node_modules/crypto-js/index.js
          var require_crypto_js = __commonJS({
            "node_modules/crypto-js/index.js"(exports, module) {
              (function (root, factory, undef) {
                if (typeof exports === "object") {
                  module.exports = exports = factory(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
                } else if (typeof define === "function" && define.amd) {
                  define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory);
                } else {
                  root.CryptoJS = factory(root.CryptoJS);
                }
              })(exports, function (CryptoJS3) {
                return CryptoJS3;
              });
            }
          });

          // node_modules/base-x/src/index.js
          var require_src = __commonJS({
            "node_modules/base-x/src/index.js"(exports, module) {
              "use strict";
              function base(ALPHABET) {
                if (ALPHABET.length >= 255) {
                  throw new TypeError("Alphabet too long");
                }
                var BASE_MAP = new Uint8Array(256);
                for (var j = 0; j < BASE_MAP.length; j++) {
                  BASE_MAP[j] = 255;
                }
                for (var i = 0; i < ALPHABET.length; i++) {
                  var x = ALPHABET.charAt(i);
                  var xc = x.charCodeAt(0);
                  if (BASE_MAP[xc] !== 255) {
                    throw new TypeError(x + " is ambiguous");
                  }
                  BASE_MAP[xc] = i;
                }
                var BASE = ALPHABET.length;
                var LEADER = ALPHABET.charAt(0);
                var FACTOR = Math.log(BASE) / Math.log(256);
                var iFACTOR = Math.log(256) / Math.log(BASE);
                function encode3(source) {
                  if (source instanceof Uint8Array) {
                  } else if (ArrayBuffer.isView(source)) {
                    source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
                  } else if (Array.isArray(source)) {
                    source = Uint8Array.from(source);
                  }
                  if (!(source instanceof Uint8Array)) {
                    throw new TypeError("Expected Uint8Array");
                  }
                  if (source.length === 0) {
                    return "";
                  }
                  var zeroes = 0;
                  var length = 0;
                  var pbegin = 0;
                  var pend = source.length;
                  while (pbegin !== pend && source[pbegin] === 0) {
                    pbegin++;
                    zeroes++;
                  }
                  var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
                  var b58 = new Uint8Array(size);
                  while (pbegin !== pend) {
                    var carry = source[pbegin];
                    var i2 = 0;
                    for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
                      carry += 256 * b58[it1] >>> 0;
                      b58[it1] = carry % BASE >>> 0;
                      carry = carry / BASE >>> 0;
                    }
                    if (carry !== 0) {
                      throw new Error("Non-zero carry");
                    }
                    length = i2;
                    pbegin++;
                  }
                  var it2 = size - length;
                  while (it2 !== size && b58[it2] === 0) {
                    it2++;
                  }
                  var str = LEADER.repeat(zeroes);
                  for (; it2 < size; ++it2) {
                    str += ALPHABET.charAt(b58[it2]);
                  }
                  return str;
                }
                function decodeUnsafe(source) {
                  if (typeof source !== "string") {
                    throw new TypeError("Expected String");
                  }
                  if (source.length === 0) {
                    return new Uint8Array();
                  }
                  var psz = 0;
                  var zeroes = 0;
                  var length = 0;
                  while (source[psz] === LEADER) {
                    zeroes++;
                    psz++;
                  }
                  var size = (source.length - psz) * FACTOR + 1 >>> 0;
                  var b256 = new Uint8Array(size);
                  while (source[psz]) {
                    var carry = BASE_MAP[source.charCodeAt(psz)];
                    if (carry === 255) {
                      return;
                    }
                    var i2 = 0;
                    for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
                      carry += BASE * b256[it3] >>> 0;
                      b256[it3] = carry % 256 >>> 0;
                      carry = carry / 256 >>> 0;
                    }
                    if (carry !== 0) {
                      throw new Error("Non-zero carry");
                    }
                    length = i2;
                    psz++;
                  }
                  var it4 = size - length;
                  while (it4 !== size && b256[it4] === 0) {
                    it4++;
                  }
                  var vch = new Uint8Array(zeroes + (size - it4));
                  var j2 = zeroes;
                  while (it4 !== size) {
                    vch[j2++] = b256[it4++];
                  }
                  return vch;
                }
                function decode(string) {
                  var buffer = decodeUnsafe(string);
                  if (buffer) {
                    return buffer;
                  }
                  throw new Error("Non-base" + BASE + " character");
                }
                return {
                  encode: encode3,
                  decodeUnsafe,
                  decode
                };
              }
              module.exports = base;
            }
          });

          // node_modules/bs58/index.js
          var require_bs58 = __commonJS({
            "node_modules/bs58/index.js"(exports, module) {
              var basex = require_src();
              var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
              module.exports = basex(ALPHABET);
            }
          });

          // node_modules/elliptic/package.json
          var require_package = __commonJS({
            "node_modules/elliptic/package.json"(exports, module) {
              module.exports = {
                name: "elliptic",
                version: "6.5.4",
                description: "EC cryptography",
                main: "lib/elliptic.js",
                files: [
                  "lib"
                ],
                scripts: {
                  lint: "eslint lib test",
                  "lint:fix": "npm run lint -- --fix",
                  unit: "istanbul test _mocha --reporter=spec test/index.js",
                  test: "npm run lint && npm run unit",
                  version: "grunt dist && git add dist/"
                },
                repository: {
                  type: "git",
                  url: "git@github.com:indutny/elliptic"
                },
                keywords: [
                  "EC",
                  "Elliptic",
                  "curve",
                  "Cryptography"
                ],
                author: "Fedor Indutny <fedor@indutny.com>",
                license: "MIT",
                bugs: {
                  url: "https://github.com/indutny/elliptic/issues"
                },
                homepage: "https://github.com/indutny/elliptic",
                devDependencies: {
                  brfs: "^2.0.2",
                  coveralls: "^3.1.0",
                  eslint: "^7.6.0",
                  grunt: "^1.2.1",
                  "grunt-browserify": "^5.3.0",
                  "grunt-cli": "^1.3.2",
                  "grunt-contrib-connect": "^3.0.0",
                  "grunt-contrib-copy": "^1.0.0",
                  "grunt-contrib-uglify": "^5.0.0",
                  "grunt-mocha-istanbul": "^5.0.2",
                  "grunt-saucelabs": "^9.0.1",
                  istanbul: "^0.4.5",
                  mocha: "^8.0.1"
                },
                dependencies: {
                  "bn.js": "^4.11.9",
                  brorand: "^1.1.0",
                  "hash.js": "^1.0.0",
                  "hmac-drbg": "^1.0.1",
                  inherits: "^2.0.4",
                  "minimalistic-assert": "^1.0.1",
                  "minimalistic-crypto-utils": "^1.0.1"
                }
              };
            }
          });

          // (disabled):node_modules/buffer/index.js
          var require_buffer = __commonJS({
            "(disabled):node_modules/buffer/index.js"() {
            }
          });

          // node_modules/bn.js/lib/bn.js
          var require_bn = __commonJS({
            "node_modules/bn.js/lib/bn.js"(exports, module) {
              (function (module2, exports2) {
                "use strict";
                function assert(val, msg) {
                  if (!val)
                    throw new Error(msg || "Assertion failed");
                }
                function inherits2(ctor, superCtor) {
                  ctor.super_ = superCtor;
                  var TempCtor = function () {
                  };
                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                }
                function BN(number, base, endian) {
                  if (BN.isBN(number)) {
                    return number;
                  }
                  this.negative = 0;
                  this.words = null;
                  this.length = 0;
                  this.red = null;
                  if (number !== null) {
                    if (base === "le" || base === "be") {
                      endian = base;
                      base = 10;
                    }
                    this._init(number || 0, base || 10, endian || "be");
                  }
                }
                if (typeof module2 === "object") {
                  module2.exports = BN;
                } else {
                  exports2.BN = BN;
                }
                BN.BN = BN;
                BN.wordSize = 26;
                var Buffer2;
                try {
                  if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
                    Buffer2 = window.Buffer;
                  } else {
                    Buffer2 = require_buffer().Buffer;
                  }
                } catch (e) {
                }
                BN.isBN = function isBN(num) {
                  if (num instanceof BN) {
                    return true;
                  }
                  return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                };
                BN.max = function max(left, right) {
                  if (left.cmp(right) > 0)
                    return left;
                  return right;
                };
                BN.min = function min(left, right) {
                  if (left.cmp(right) < 0)
                    return left;
                  return right;
                };
                BN.prototype._init = function init(number, base, endian) {
                  if (typeof number === "number") {
                    return this._initNumber(number, base, endian);
                  }
                  if (typeof number === "object") {
                    return this._initArray(number, base, endian);
                  }
                  if (base === "hex") {
                    base = 16;
                  }
                  assert(base === (base | 0) && base >= 2 && base <= 36);
                  number = number.toString().replace(/\s+/g, "");
                  var start = 0;
                  if (number[0] === "-") {
                    start++;
                    this.negative = 1;
                  }
                  if (start < number.length) {
                    if (base === 16) {
                      this._parseHex(number, start, endian);
                    } else {
                      this._parseBase(number, base, start);
                      if (endian === "le") {
                        this._initArray(this.toArray(), base, endian);
                      }
                    }
                  }
                };
                BN.prototype._initNumber = function _initNumber(number, base, endian) {
                  if (number < 0) {
                    this.negative = 1;
                    number = -number;
                  }
                  if (number < 67108864) {
                    this.words = [number & 67108863];
                    this.length = 1;
                  } else if (number < 4503599627370496) {
                    this.words = [
                      number & 67108863,
                      number / 67108864 & 67108863
                    ];
                    this.length = 2;
                  } else {
                    assert(number < 9007199254740992);
                    this.words = [
                      number & 67108863,
                      number / 67108864 & 67108863,
                      1
                    ];
                    this.length = 3;
                  }
                  if (endian !== "le")
                    return;
                  this._initArray(this.toArray(), base, endian);
                };
                BN.prototype._initArray = function _initArray(number, base, endian) {
                  assert(typeof number.length === "number");
                  if (number.length <= 0) {
                    this.words = [0];
                    this.length = 1;
                    return this;
                  }
                  this.length = Math.ceil(number.length / 3);
                  this.words = new Array(this.length);
                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  }
                  var j, w;
                  var off = 0;
                  if (endian === "be") {
                    for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                      w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                      this.words[j] |= w << off & 67108863;
                      this.words[j + 1] = w >>> 26 - off & 67108863;
                      off += 24;
                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  } else if (endian === "le") {
                    for (i = 0, j = 0; i < number.length; i += 3) {
                      w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                      this.words[j] |= w << off & 67108863;
                      this.words[j + 1] = w >>> 26 - off & 67108863;
                      off += 24;
                      if (off >= 26) {
                        off -= 26;
                        j++;
                      }
                    }
                  }
                  return this.strip();
                };
                function parseHex4Bits(string, index) {
                  var c = string.charCodeAt(index);
                  if (c >= 65 && c <= 70) {
                    return c - 55;
                  } else if (c >= 97 && c <= 102) {
                    return c - 87;
                  } else {
                    return c - 48 & 15;
                  }
                }
                function parseHexByte(string, lowerBound, index) {
                  var r = parseHex4Bits(string, index);
                  if (index - 1 >= lowerBound) {
                    r |= parseHex4Bits(string, index - 1) << 4;
                  }
                  return r;
                }
                BN.prototype._parseHex = function _parseHex(number, start, endian) {
                  this.length = Math.ceil((number.length - start) / 6);
                  this.words = new Array(this.length);
                  for (var i = 0; i < this.length; i++) {
                    this.words[i] = 0;
                  }
                  var off = 0;
                  var j = 0;
                  var w;
                  if (endian === "be") {
                    for (i = number.length - 1; i >= start; i -= 2) {
                      w = parseHexByte(number, start, i) << off;
                      this.words[j] |= w & 67108863;
                      if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                      } else {
                        off += 8;
                      }
                    }
                  } else {
                    var parseLength = number.length - start;
                    for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                      w = parseHexByte(number, start, i) << off;
                      this.words[j] |= w & 67108863;
                      if (off >= 18) {
                        off -= 18;
                        j += 1;
                        this.words[j] |= w >>> 26;
                      } else {
                        off += 8;
                      }
                    }
                  }
                  this.strip();
                };
                function parseBase(str, start, end, mul) {
                  var r = 0;
                  var len = Math.min(str.length, end);
                  for (var i = start; i < len; i++) {
                    var c = str.charCodeAt(i) - 48;
                    r *= mul;
                    if (c >= 49) {
                      r += c - 49 + 10;
                    } else if (c >= 17) {
                      r += c - 17 + 10;
                    } else {
                      r += c;
                    }
                  }
                  return r;
                }
                BN.prototype._parseBase = function _parseBase(number, base, start) {
                  this.words = [0];
                  this.length = 1;
                  for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
                    limbLen++;
                  }
                  limbLen--;
                  limbPow = limbPow / base | 0;
                  var total = number.length - start;
                  var mod = total % limbLen;
                  var end = Math.min(total, total - mod) + start;
                  var word = 0;
                  for (var i = start; i < end; i += limbLen) {
                    word = parseBase(number, i, i + limbLen, base);
                    this.imuln(limbPow);
                    if (this.words[0] + word < 67108864) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }
                  if (mod !== 0) {
                    var pow = 1;
                    word = parseBase(number, i, number.length, base);
                    for (i = 0; i < mod; i++) {
                      pow *= base;
                    }
                    this.imuln(pow);
                    if (this.words[0] + word < 67108864) {
                      this.words[0] += word;
                    } else {
                      this._iaddn(word);
                    }
                  }
                  this.strip();
                };
                BN.prototype.copy = function copy(dest) {
                  dest.words = new Array(this.length);
                  for (var i = 0; i < this.length; i++) {
                    dest.words[i] = this.words[i];
                  }
                  dest.length = this.length;
                  dest.negative = this.negative;
                  dest.red = this.red;
                };
                BN.prototype.clone = function clone() {
                  var r = new BN(null);
                  this.copy(r);
                  return r;
                };
                BN.prototype._expand = function _expand(size) {
                  while (this.length < size) {
                    this.words[this.length++] = 0;
                  }
                  return this;
                };
                BN.prototype.strip = function strip() {
                  while (this.length > 1 && this.words[this.length - 1] === 0) {
                    this.length--;
                  }
                  return this._normSign();
                };
                BN.prototype._normSign = function _normSign() {
                  if (this.length === 1 && this.words[0] === 0) {
                    this.negative = 0;
                  }
                  return this;
                };
                BN.prototype.inspect = function inspect() {
                  return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                };
                var zeros = [
                  "",
                  "0",
                  "00",
                  "000",
                  "0000",
                  "00000",
                  "000000",
                  "0000000",
                  "00000000",
                  "000000000",
                  "0000000000",
                  "00000000000",
                  "000000000000",
                  "0000000000000",
                  "00000000000000",
                  "000000000000000",
                  "0000000000000000",
                  "00000000000000000",
                  "000000000000000000",
                  "0000000000000000000",
                  "00000000000000000000",
                  "000000000000000000000",
                  "0000000000000000000000",
                  "00000000000000000000000",
                  "000000000000000000000000",
                  "0000000000000000000000000"
                ];
                var groupSizes = [
                  0,
                  0,
                  25,
                  16,
                  12,
                  11,
                  10,
                  9,
                  8,
                  8,
                  7,
                  7,
                  7,
                  7,
                  6,
                  6,
                  6,
                  6,
                  6,
                  6,
                  6,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5,
                  5
                ];
                var groupBases = [
                  0,
                  0,
                  33554432,
                  43046721,
                  16777216,
                  48828125,
                  60466176,
                  40353607,
                  16777216,
                  43046721,
                  1e7,
                  19487171,
                  35831808,
                  62748517,
                  7529536,
                  11390625,
                  16777216,
                  24137569,
                  34012224,
                  47045881,
                  64e6,
                  4084101,
                  5153632,
                  6436343,
                  7962624,
                  9765625,
                  11881376,
                  14348907,
                  17210368,
                  20511149,
                  243e5,
                  28629151,
                  33554432,
                  39135393,
                  45435424,
                  52521875,
                  60466176
                ];
                BN.prototype.toString = function toString3(base, padding) {
                  base = base || 10;
                  padding = padding | 0 || 1;
                  var out;
                  if (base === 16 || base === "hex") {
                    out = "";
                    var off = 0;
                    var carry = 0;
                    for (var i = 0; i < this.length; i++) {
                      var w = this.words[i];
                      var word = ((w << off | carry) & 16777215).toString(16);
                      carry = w >>> 24 - off & 16777215;
                      if (carry !== 0 || i !== this.length - 1) {
                        out = zeros[6 - word.length] + word + out;
                      } else {
                        out = word + out;
                      }
                      off += 2;
                      if (off >= 26) {
                        off -= 26;
                        i--;
                      }
                    }
                    if (carry !== 0) {
                      out = carry.toString(16) + out;
                    }
                    while (out.length % padding !== 0) {
                      out = "0" + out;
                    }
                    if (this.negative !== 0) {
                      out = "-" + out;
                    }
                    return out;
                  }
                  if (base === (base | 0) && base >= 2 && base <= 36) {
                    var groupSize = groupSizes[base];
                    var groupBase = groupBases[base];
                    out = "";
                    var c = this.clone();
                    c.negative = 0;
                    while (!c.isZero()) {
                      var r = c.modn(groupBase).toString(base);
                      c = c.idivn(groupBase);
                      if (!c.isZero()) {
                        out = zeros[groupSize - r.length] + r + out;
                      } else {
                        out = r + out;
                      }
                    }
                    if (this.isZero()) {
                      out = "0" + out;
                    }
                    while (out.length % padding !== 0) {
                      out = "0" + out;
                    }
                    if (this.negative !== 0) {
                      out = "-" + out;
                    }
                    return out;
                  }
                  assert(false, "Base should be between 2 and 36");
                };
                BN.prototype.toNumber = function toNumber() {
                  var ret = this.words[0];
                  if (this.length === 2) {
                    ret += this.words[1] * 67108864;
                  } else if (this.length === 3 && this.words[2] === 1) {
                    ret += 4503599627370496 + this.words[1] * 67108864;
                  } else if (this.length > 2) {
                    assert(false, "Number can only safely store up to 53 bits");
                  }
                  return this.negative !== 0 ? -ret : ret;
                };
                BN.prototype.toJSON = function toJSON2() {
                  return this.toString(16);
                };
                BN.prototype.toBuffer = function toBuffer(endian, length) {
                  assert(typeof Buffer2 !== "undefined");
                  return this.toArrayLike(Buffer2, endian, length);
                };
                BN.prototype.toArray = function toArray2(endian, length) {
                  return this.toArrayLike(Array, endian, length);
                };
                BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                  var byteLength = this.byteLength();
                  var reqLength = length || Math.max(1, byteLength);
                  assert(byteLength <= reqLength, "byte array longer than desired length");
                  assert(reqLength > 0, "Requested array length <= 0");
                  this.strip();
                  var littleEndian = endian === "le";
                  var res = new ArrayType(reqLength);
                  var b, i;
                  var q = this.clone();
                  if (!littleEndian) {
                    for (i = 0; i < reqLength - byteLength; i++) {
                      res[i] = 0;
                    }
                    for (i = 0; !q.isZero(); i++) {
                      b = q.andln(255);
                      q.iushrn(8);
                      res[reqLength - i - 1] = b;
                    }
                  } else {
                    for (i = 0; !q.isZero(); i++) {
                      b = q.andln(255);
                      q.iushrn(8);
                      res[i] = b;
                    }
                    for (; i < reqLength; i++) {
                      res[i] = 0;
                    }
                  }
                  return res;
                };
                if (Math.clz32) {
                  BN.prototype._countBits = function _countBits(w) {
                    return 32 - Math.clz32(w);
                  };
                } else {
                  BN.prototype._countBits = function _countBits(w) {
                    var t = w;
                    var r = 0;
                    if (t >= 4096) {
                      r += 13;
                      t >>>= 13;
                    }
                    if (t >= 64) {
                      r += 7;
                      t >>>= 7;
                    }
                    if (t >= 8) {
                      r += 4;
                      t >>>= 4;
                    }
                    if (t >= 2) {
                      r += 2;
                      t >>>= 2;
                    }
                    return r + t;
                  };
                }
                BN.prototype._zeroBits = function _zeroBits(w) {
                  if (w === 0)
                    return 26;
                  var t = w;
                  var r = 0;
                  if ((t & 8191) === 0) {
                    r += 13;
                    t >>>= 13;
                  }
                  if ((t & 127) === 0) {
                    r += 7;
                    t >>>= 7;
                  }
                  if ((t & 15) === 0) {
                    r += 4;
                    t >>>= 4;
                  }
                  if ((t & 3) === 0) {
                    r += 2;
                    t >>>= 2;
                  }
                  if ((t & 1) === 0) {
                    r++;
                  }
                  return r;
                };
                BN.prototype.bitLength = function bitLength() {
                  var w = this.words[this.length - 1];
                  var hi = this._countBits(w);
                  return (this.length - 1) * 26 + hi;
                };
                function toBitArray(num) {
                  var w = new Array(num.bitLength());
                  for (var bit = 0; bit < w.length; bit++) {
                    var off = bit / 26 | 0;
                    var wbit = bit % 26;
                    w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
                  }
                  return w;
                }
                BN.prototype.zeroBits = function zeroBits() {
                  if (this.isZero())
                    return 0;
                  var r = 0;
                  for (var i = 0; i < this.length; i++) {
                    var b = this._zeroBits(this.words[i]);
                    r += b;
                    if (b !== 26)
                      break;
                  }
                  return r;
                };
                BN.prototype.byteLength = function byteLength() {
                  return Math.ceil(this.bitLength() / 8);
                };
                BN.prototype.toTwos = function toTwos(width) {
                  if (this.negative !== 0) {
                    return this.abs().inotn(width).iaddn(1);
                  }
                  return this.clone();
                };
                BN.prototype.fromTwos = function fromTwos(width) {
                  if (this.testn(width - 1)) {
                    return this.notn(width).iaddn(1).ineg();
                  }
                  return this.clone();
                };
                BN.prototype.isNeg = function isNeg() {
                  return this.negative !== 0;
                };
                BN.prototype.neg = function neg() {
                  return this.clone().ineg();
                };
                BN.prototype.ineg = function ineg() {
                  if (!this.isZero()) {
                    this.negative ^= 1;
                  }
                  return this;
                };
                BN.prototype.iuor = function iuor(num) {
                  while (this.length < num.length) {
                    this.words[this.length++] = 0;
                  }
                  for (var i = 0; i < num.length; i++) {
                    this.words[i] = this.words[i] | num.words[i];
                  }
                  return this.strip();
                };
                BN.prototype.ior = function ior(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuor(num);
                };
                BN.prototype.or = function or(num) {
                  if (this.length > num.length)
                    return this.clone().ior(num);
                  return num.clone().ior(this);
                };
                BN.prototype.uor = function uor(num) {
                  if (this.length > num.length)
                    return this.clone().iuor(num);
                  return num.clone().iuor(this);
                };
                BN.prototype.iuand = function iuand(num) {
                  var b;
                  if (this.length > num.length) {
                    b = num;
                  } else {
                    b = this;
                  }
                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = this.words[i] & num.words[i];
                  }
                  this.length = b.length;
                  return this.strip();
                };
                BN.prototype.iand = function iand(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuand(num);
                };
                BN.prototype.and = function and(num) {
                  if (this.length > num.length)
                    return this.clone().iand(num);
                  return num.clone().iand(this);
                };
                BN.prototype.uand = function uand(num) {
                  if (this.length > num.length)
                    return this.clone().iuand(num);
                  return num.clone().iuand(this);
                };
                BN.prototype.iuxor = function iuxor(num) {
                  var a;
                  var b;
                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }
                  for (var i = 0; i < b.length; i++) {
                    this.words[i] = a.words[i] ^ b.words[i];
                  }
                  if (this !== a) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }
                  this.length = a.length;
                  return this.strip();
                };
                BN.prototype.ixor = function ixor(num) {
                  assert((this.negative | num.negative) === 0);
                  return this.iuxor(num);
                };
                BN.prototype.xor = function xor(num) {
                  if (this.length > num.length)
                    return this.clone().ixor(num);
                  return num.clone().ixor(this);
                };
                BN.prototype.uxor = function uxor(num) {
                  if (this.length > num.length)
                    return this.clone().iuxor(num);
                  return num.clone().iuxor(this);
                };
                BN.prototype.inotn = function inotn(width) {
                  assert(typeof width === "number" && width >= 0);
                  var bytesNeeded = Math.ceil(width / 26) | 0;
                  var bitsLeft = width % 26;
                  this._expand(bytesNeeded);
                  if (bitsLeft > 0) {
                    bytesNeeded--;
                  }
                  for (var i = 0; i < bytesNeeded; i++) {
                    this.words[i] = ~this.words[i] & 67108863;
                  }
                  if (bitsLeft > 0) {
                    this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
                  }
                  return this.strip();
                };
                BN.prototype.notn = function notn(width) {
                  return this.clone().inotn(width);
                };
                BN.prototype.setn = function setn(bit, val) {
                  assert(typeof bit === "number" && bit >= 0);
                  var off = bit / 26 | 0;
                  var wbit = bit % 26;
                  this._expand(off + 1);
                  if (val) {
                    this.words[off] = this.words[off] | 1 << wbit;
                  } else {
                    this.words[off] = this.words[off] & ~(1 << wbit);
                  }
                  return this.strip();
                };
                BN.prototype.iadd = function iadd(num) {
                  var r;
                  if (this.negative !== 0 && num.negative === 0) {
                    this.negative = 0;
                    r = this.isub(num);
                    this.negative ^= 1;
                    return this._normSign();
                  } else if (this.negative === 0 && num.negative !== 0) {
                    num.negative = 0;
                    r = this.isub(num);
                    num.negative = 1;
                    return r._normSign();
                  }
                  var a, b;
                  if (this.length > num.length) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }
                  var carry = 0;
                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                    this.words[i] = r & 67108863;
                    carry = r >>> 26;
                  }
                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    this.words[i] = r & 67108863;
                    carry = r >>> 26;
                  }
                  this.length = a.length;
                  if (carry !== 0) {
                    this.words[this.length] = carry;
                    this.length++;
                  } else if (a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }
                  return this;
                };
                BN.prototype.add = function add(num) {
                  var res;
                  if (num.negative !== 0 && this.negative === 0) {
                    num.negative = 0;
                    res = this.sub(num);
                    num.negative ^= 1;
                    return res;
                  } else if (num.negative === 0 && this.negative !== 0) {
                    this.negative = 0;
                    res = num.sub(this);
                    this.negative = 1;
                    return res;
                  }
                  if (this.length > num.length)
                    return this.clone().iadd(num);
                  return num.clone().iadd(this);
                };
                BN.prototype.isub = function isub(num) {
                  if (num.negative !== 0) {
                    num.negative = 0;
                    var r = this.iadd(num);
                    num.negative = 1;
                    return r._normSign();
                  } else if (this.negative !== 0) {
                    this.negative = 0;
                    this.iadd(num);
                    this.negative = 1;
                    return this._normSign();
                  }
                  var cmp = this.cmp(num);
                  if (cmp === 0) {
                    this.negative = 0;
                    this.length = 1;
                    this.words[0] = 0;
                    return this;
                  }
                  var a, b;
                  if (cmp > 0) {
                    a = this;
                    b = num;
                  } else {
                    a = num;
                    b = this;
                  }
                  var carry = 0;
                  for (var i = 0; i < b.length; i++) {
                    r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 67108863;
                  }
                  for (; carry !== 0 && i < a.length; i++) {
                    r = (a.words[i] | 0) + carry;
                    carry = r >> 26;
                    this.words[i] = r & 67108863;
                  }
                  if (carry === 0 && i < a.length && a !== this) {
                    for (; i < a.length; i++) {
                      this.words[i] = a.words[i];
                    }
                  }
                  this.length = Math.max(this.length, i);
                  if (a !== this) {
                    this.negative = 1;
                  }
                  return this.strip();
                };
                BN.prototype.sub = function sub(num) {
                  return this.clone().isub(num);
                };
                function smallMulTo(self2, num, out) {
                  out.negative = num.negative ^ self2.negative;
                  var len = self2.length + num.length | 0;
                  out.length = len;
                  len = len - 1 | 0;
                  var a = self2.words[0] | 0;
                  var b = num.words[0] | 0;
                  var r = a * b;
                  var lo = r & 67108863;
                  var carry = r / 67108864 | 0;
                  out.words[0] = lo;
                  for (var k = 1; k < len; k++) {
                    var ncarry = carry >>> 26;
                    var rword = carry & 67108863;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                      var i = k - j | 0;
                      a = self2.words[i] | 0;
                      b = num.words[j] | 0;
                      r = a * b + rword;
                      ncarry += r / 67108864 | 0;
                      rword = r & 67108863;
                    }
                    out.words[k] = rword | 0;
                    carry = ncarry | 0;
                  }
                  if (carry !== 0) {
                    out.words[k] = carry | 0;
                  } else {
                    out.length--;
                  }
                  return out.strip();
                }
                var comb10MulTo = function comb10MulTo2(self2, num, out) {
                  var a = self2.words;
                  var b = num.words;
                  var o = out.words;
                  var c = 0;
                  var lo;
                  var mid;
                  var hi;
                  var a0 = a[0] | 0;
                  var al0 = a0 & 8191;
                  var ah0 = a0 >>> 13;
                  var a1 = a[1] | 0;
                  var al1 = a1 & 8191;
                  var ah1 = a1 >>> 13;
                  var a2 = a[2] | 0;
                  var al2 = a2 & 8191;
                  var ah2 = a2 >>> 13;
                  var a3 = a[3] | 0;
                  var al3 = a3 & 8191;
                  var ah3 = a3 >>> 13;
                  var a4 = a[4] | 0;
                  var al4 = a4 & 8191;
                  var ah4 = a4 >>> 13;
                  var a5 = a[5] | 0;
                  var al5 = a5 & 8191;
                  var ah5 = a5 >>> 13;
                  var a6 = a[6] | 0;
                  var al6 = a6 & 8191;
                  var ah6 = a6 >>> 13;
                  var a7 = a[7] | 0;
                  var al7 = a7 & 8191;
                  var ah7 = a7 >>> 13;
                  var a8 = a[8] | 0;
                  var al8 = a8 & 8191;
                  var ah8 = a8 >>> 13;
                  var a9 = a[9] | 0;
                  var al9 = a9 & 8191;
                  var ah9 = a9 >>> 13;
                  var b0 = b[0] | 0;
                  var bl0 = b0 & 8191;
                  var bh0 = b0 >>> 13;
                  var b1 = b[1] | 0;
                  var bl1 = b1 & 8191;
                  var bh1 = b1 >>> 13;
                  var b2 = b[2] | 0;
                  var bl2 = b2 & 8191;
                  var bh2 = b2 >>> 13;
                  var b3 = b[3] | 0;
                  var bl3 = b3 & 8191;
                  var bh3 = b3 >>> 13;
                  var b4 = b[4] | 0;
                  var bl4 = b4 & 8191;
                  var bh4 = b4 >>> 13;
                  var b5 = b[5] | 0;
                  var bl5 = b5 & 8191;
                  var bh5 = b5 >>> 13;
                  var b6 = b[6] | 0;
                  var bl6 = b6 & 8191;
                  var bh6 = b6 >>> 13;
                  var b7 = b[7] | 0;
                  var bl7 = b7 & 8191;
                  var bh7 = b7 >>> 13;
                  var b8 = b[8] | 0;
                  var bl8 = b8 & 8191;
                  var bh8 = b8 >>> 13;
                  var b9 = b[9] | 0;
                  var bl9 = b9 & 8191;
                  var bh9 = b9 >>> 13;
                  out.negative = self2.negative ^ num.negative;
                  out.length = 19;
                  lo = Math.imul(al0, bl0);
                  mid = Math.imul(al0, bh0);
                  mid = mid + Math.imul(ah0, bl0) | 0;
                  hi = Math.imul(ah0, bh0);
                  var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                  w0 &= 67108863;
                  lo = Math.imul(al1, bl0);
                  mid = Math.imul(al1, bh0);
                  mid = mid + Math.imul(ah1, bl0) | 0;
                  hi = Math.imul(ah1, bh0);
                  lo = lo + Math.imul(al0, bl1) | 0;
                  mid = mid + Math.imul(al0, bh1) | 0;
                  mid = mid + Math.imul(ah0, bl1) | 0;
                  hi = hi + Math.imul(ah0, bh1) | 0;
                  var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                  w1 &= 67108863;
                  lo = Math.imul(al2, bl0);
                  mid = Math.imul(al2, bh0);
                  mid = mid + Math.imul(ah2, bl0) | 0;
                  hi = Math.imul(ah2, bh0);
                  lo = lo + Math.imul(al1, bl1) | 0;
                  mid = mid + Math.imul(al1, bh1) | 0;
                  mid = mid + Math.imul(ah1, bl1) | 0;
                  hi = hi + Math.imul(ah1, bh1) | 0;
                  lo = lo + Math.imul(al0, bl2) | 0;
                  mid = mid + Math.imul(al0, bh2) | 0;
                  mid = mid + Math.imul(ah0, bl2) | 0;
                  hi = hi + Math.imul(ah0, bh2) | 0;
                  var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                  w2 &= 67108863;
                  lo = Math.imul(al3, bl0);
                  mid = Math.imul(al3, bh0);
                  mid = mid + Math.imul(ah3, bl0) | 0;
                  hi = Math.imul(ah3, bh0);
                  lo = lo + Math.imul(al2, bl1) | 0;
                  mid = mid + Math.imul(al2, bh1) | 0;
                  mid = mid + Math.imul(ah2, bl1) | 0;
                  hi = hi + Math.imul(ah2, bh1) | 0;
                  lo = lo + Math.imul(al1, bl2) | 0;
                  mid = mid + Math.imul(al1, bh2) | 0;
                  mid = mid + Math.imul(ah1, bl2) | 0;
                  hi = hi + Math.imul(ah1, bh2) | 0;
                  lo = lo + Math.imul(al0, bl3) | 0;
                  mid = mid + Math.imul(al0, bh3) | 0;
                  mid = mid + Math.imul(ah0, bl3) | 0;
                  hi = hi + Math.imul(ah0, bh3) | 0;
                  var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                  w3 &= 67108863;
                  lo = Math.imul(al4, bl0);
                  mid = Math.imul(al4, bh0);
                  mid = mid + Math.imul(ah4, bl0) | 0;
                  hi = Math.imul(ah4, bh0);
                  lo = lo + Math.imul(al3, bl1) | 0;
                  mid = mid + Math.imul(al3, bh1) | 0;
                  mid = mid + Math.imul(ah3, bl1) | 0;
                  hi = hi + Math.imul(ah3, bh1) | 0;
                  lo = lo + Math.imul(al2, bl2) | 0;
                  mid = mid + Math.imul(al2, bh2) | 0;
                  mid = mid + Math.imul(ah2, bl2) | 0;
                  hi = hi + Math.imul(ah2, bh2) | 0;
                  lo = lo + Math.imul(al1, bl3) | 0;
                  mid = mid + Math.imul(al1, bh3) | 0;
                  mid = mid + Math.imul(ah1, bl3) | 0;
                  hi = hi + Math.imul(ah1, bh3) | 0;
                  lo = lo + Math.imul(al0, bl4) | 0;
                  mid = mid + Math.imul(al0, bh4) | 0;
                  mid = mid + Math.imul(ah0, bl4) | 0;
                  hi = hi + Math.imul(ah0, bh4) | 0;
                  var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                  w4 &= 67108863;
                  lo = Math.imul(al5, bl0);
                  mid = Math.imul(al5, bh0);
                  mid = mid + Math.imul(ah5, bl0) | 0;
                  hi = Math.imul(ah5, bh0);
                  lo = lo + Math.imul(al4, bl1) | 0;
                  mid = mid + Math.imul(al4, bh1) | 0;
                  mid = mid + Math.imul(ah4, bl1) | 0;
                  hi = hi + Math.imul(ah4, bh1) | 0;
                  lo = lo + Math.imul(al3, bl2) | 0;
                  mid = mid + Math.imul(al3, bh2) | 0;
                  mid = mid + Math.imul(ah3, bl2) | 0;
                  hi = hi + Math.imul(ah3, bh2) | 0;
                  lo = lo + Math.imul(al2, bl3) | 0;
                  mid = mid + Math.imul(al2, bh3) | 0;
                  mid = mid + Math.imul(ah2, bl3) | 0;
                  hi = hi + Math.imul(ah2, bh3) | 0;
                  lo = lo + Math.imul(al1, bl4) | 0;
                  mid = mid + Math.imul(al1, bh4) | 0;
                  mid = mid + Math.imul(ah1, bl4) | 0;
                  hi = hi + Math.imul(ah1, bh4) | 0;
                  lo = lo + Math.imul(al0, bl5) | 0;
                  mid = mid + Math.imul(al0, bh5) | 0;
                  mid = mid + Math.imul(ah0, bl5) | 0;
                  hi = hi + Math.imul(ah0, bh5) | 0;
                  var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                  w5 &= 67108863;
                  lo = Math.imul(al6, bl0);
                  mid = Math.imul(al6, bh0);
                  mid = mid + Math.imul(ah6, bl0) | 0;
                  hi = Math.imul(ah6, bh0);
                  lo = lo + Math.imul(al5, bl1) | 0;
                  mid = mid + Math.imul(al5, bh1) | 0;
                  mid = mid + Math.imul(ah5, bl1) | 0;
                  hi = hi + Math.imul(ah5, bh1) | 0;
                  lo = lo + Math.imul(al4, bl2) | 0;
                  mid = mid + Math.imul(al4, bh2) | 0;
                  mid = mid + Math.imul(ah4, bl2) | 0;
                  hi = hi + Math.imul(ah4, bh2) | 0;
                  lo = lo + Math.imul(al3, bl3) | 0;
                  mid = mid + Math.imul(al3, bh3) | 0;
                  mid = mid + Math.imul(ah3, bl3) | 0;
                  hi = hi + Math.imul(ah3, bh3) | 0;
                  lo = lo + Math.imul(al2, bl4) | 0;
                  mid = mid + Math.imul(al2, bh4) | 0;
                  mid = mid + Math.imul(ah2, bl4) | 0;
                  hi = hi + Math.imul(ah2, bh4) | 0;
                  lo = lo + Math.imul(al1, bl5) | 0;
                  mid = mid + Math.imul(al1, bh5) | 0;
                  mid = mid + Math.imul(ah1, bl5) | 0;
                  hi = hi + Math.imul(ah1, bh5) | 0;
                  lo = lo + Math.imul(al0, bl6) | 0;
                  mid = mid + Math.imul(al0, bh6) | 0;
                  mid = mid + Math.imul(ah0, bl6) | 0;
                  hi = hi + Math.imul(ah0, bh6) | 0;
                  var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                  w6 &= 67108863;
                  lo = Math.imul(al7, bl0);
                  mid = Math.imul(al7, bh0);
                  mid = mid + Math.imul(ah7, bl0) | 0;
                  hi = Math.imul(ah7, bh0);
                  lo = lo + Math.imul(al6, bl1) | 0;
                  mid = mid + Math.imul(al6, bh1) | 0;
                  mid = mid + Math.imul(ah6, bl1) | 0;
                  hi = hi + Math.imul(ah6, bh1) | 0;
                  lo = lo + Math.imul(al5, bl2) | 0;
                  mid = mid + Math.imul(al5, bh2) | 0;
                  mid = mid + Math.imul(ah5, bl2) | 0;
                  hi = hi + Math.imul(ah5, bh2) | 0;
                  lo = lo + Math.imul(al4, bl3) | 0;
                  mid = mid + Math.imul(al4, bh3) | 0;
                  mid = mid + Math.imul(ah4, bl3) | 0;
                  hi = hi + Math.imul(ah4, bh3) | 0;
                  lo = lo + Math.imul(al3, bl4) | 0;
                  mid = mid + Math.imul(al3, bh4) | 0;
                  mid = mid + Math.imul(ah3, bl4) | 0;
                  hi = hi + Math.imul(ah3, bh4) | 0;
                  lo = lo + Math.imul(al2, bl5) | 0;
                  mid = mid + Math.imul(al2, bh5) | 0;
                  mid = mid + Math.imul(ah2, bl5) | 0;
                  hi = hi + Math.imul(ah2, bh5) | 0;
                  lo = lo + Math.imul(al1, bl6) | 0;
                  mid = mid + Math.imul(al1, bh6) | 0;
                  mid = mid + Math.imul(ah1, bl6) | 0;
                  hi = hi + Math.imul(ah1, bh6) | 0;
                  lo = lo + Math.imul(al0, bl7) | 0;
                  mid = mid + Math.imul(al0, bh7) | 0;
                  mid = mid + Math.imul(ah0, bl7) | 0;
                  hi = hi + Math.imul(ah0, bh7) | 0;
                  var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                  w7 &= 67108863;
                  lo = Math.imul(al8, bl0);
                  mid = Math.imul(al8, bh0);
                  mid = mid + Math.imul(ah8, bl0) | 0;
                  hi = Math.imul(ah8, bh0);
                  lo = lo + Math.imul(al7, bl1) | 0;
                  mid = mid + Math.imul(al7, bh1) | 0;
                  mid = mid + Math.imul(ah7, bl1) | 0;
                  hi = hi + Math.imul(ah7, bh1) | 0;
                  lo = lo + Math.imul(al6, bl2) | 0;
                  mid = mid + Math.imul(al6, bh2) | 0;
                  mid = mid + Math.imul(ah6, bl2) | 0;
                  hi = hi + Math.imul(ah6, bh2) | 0;
                  lo = lo + Math.imul(al5, bl3) | 0;
                  mid = mid + Math.imul(al5, bh3) | 0;
                  mid = mid + Math.imul(ah5, bl3) | 0;
                  hi = hi + Math.imul(ah5, bh3) | 0;
                  lo = lo + Math.imul(al4, bl4) | 0;
                  mid = mid + Math.imul(al4, bh4) | 0;
                  mid = mid + Math.imul(ah4, bl4) | 0;
                  hi = hi + Math.imul(ah4, bh4) | 0;
                  lo = lo + Math.imul(al3, bl5) | 0;
                  mid = mid + Math.imul(al3, bh5) | 0;
                  mid = mid + Math.imul(ah3, bl5) | 0;
                  hi = hi + Math.imul(ah3, bh5) | 0;
                  lo = lo + Math.imul(al2, bl6) | 0;
                  mid = mid + Math.imul(al2, bh6) | 0;
                  mid = mid + Math.imul(ah2, bl6) | 0;
                  hi = hi + Math.imul(ah2, bh6) | 0;
                  lo = lo + Math.imul(al1, bl7) | 0;
                  mid = mid + Math.imul(al1, bh7) | 0;
                  mid = mid + Math.imul(ah1, bl7) | 0;
                  hi = hi + Math.imul(ah1, bh7) | 0;
                  lo = lo + Math.imul(al0, bl8) | 0;
                  mid = mid + Math.imul(al0, bh8) | 0;
                  mid = mid + Math.imul(ah0, bl8) | 0;
                  hi = hi + Math.imul(ah0, bh8) | 0;
                  var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                  w8 &= 67108863;
                  lo = Math.imul(al9, bl0);
                  mid = Math.imul(al9, bh0);
                  mid = mid + Math.imul(ah9, bl0) | 0;
                  hi = Math.imul(ah9, bh0);
                  lo = lo + Math.imul(al8, bl1) | 0;
                  mid = mid + Math.imul(al8, bh1) | 0;
                  mid = mid + Math.imul(ah8, bl1) | 0;
                  hi = hi + Math.imul(ah8, bh1) | 0;
                  lo = lo + Math.imul(al7, bl2) | 0;
                  mid = mid + Math.imul(al7, bh2) | 0;
                  mid = mid + Math.imul(ah7, bl2) | 0;
                  hi = hi + Math.imul(ah7, bh2) | 0;
                  lo = lo + Math.imul(al6, bl3) | 0;
                  mid = mid + Math.imul(al6, bh3) | 0;
                  mid = mid + Math.imul(ah6, bl3) | 0;
                  hi = hi + Math.imul(ah6, bh3) | 0;
                  lo = lo + Math.imul(al5, bl4) | 0;
                  mid = mid + Math.imul(al5, bh4) | 0;
                  mid = mid + Math.imul(ah5, bl4) | 0;
                  hi = hi + Math.imul(ah5, bh4) | 0;
                  lo = lo + Math.imul(al4, bl5) | 0;
                  mid = mid + Math.imul(al4, bh5) | 0;
                  mid = mid + Math.imul(ah4, bl5) | 0;
                  hi = hi + Math.imul(ah4, bh5) | 0;
                  lo = lo + Math.imul(al3, bl6) | 0;
                  mid = mid + Math.imul(al3, bh6) | 0;
                  mid = mid + Math.imul(ah3, bl6) | 0;
                  hi = hi + Math.imul(ah3, bh6) | 0;
                  lo = lo + Math.imul(al2, bl7) | 0;
                  mid = mid + Math.imul(al2, bh7) | 0;
                  mid = mid + Math.imul(ah2, bl7) | 0;
                  hi = hi + Math.imul(ah2, bh7) | 0;
                  lo = lo + Math.imul(al1, bl8) | 0;
                  mid = mid + Math.imul(al1, bh8) | 0;
                  mid = mid + Math.imul(ah1, bl8) | 0;
                  hi = hi + Math.imul(ah1, bh8) | 0;
                  lo = lo + Math.imul(al0, bl9) | 0;
                  mid = mid + Math.imul(al0, bh9) | 0;
                  mid = mid + Math.imul(ah0, bl9) | 0;
                  hi = hi + Math.imul(ah0, bh9) | 0;
                  var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                  w9 &= 67108863;
                  lo = Math.imul(al9, bl1);
                  mid = Math.imul(al9, bh1);
                  mid = mid + Math.imul(ah9, bl1) | 0;
                  hi = Math.imul(ah9, bh1);
                  lo = lo + Math.imul(al8, bl2) | 0;
                  mid = mid + Math.imul(al8, bh2) | 0;
                  mid = mid + Math.imul(ah8, bl2) | 0;
                  hi = hi + Math.imul(ah8, bh2) | 0;
                  lo = lo + Math.imul(al7, bl3) | 0;
                  mid = mid + Math.imul(al7, bh3) | 0;
                  mid = mid + Math.imul(ah7, bl3) | 0;
                  hi = hi + Math.imul(ah7, bh3) | 0;
                  lo = lo + Math.imul(al6, bl4) | 0;
                  mid = mid + Math.imul(al6, bh4) | 0;
                  mid = mid + Math.imul(ah6, bl4) | 0;
                  hi = hi + Math.imul(ah6, bh4) | 0;
                  lo = lo + Math.imul(al5, bl5) | 0;
                  mid = mid + Math.imul(al5, bh5) | 0;
                  mid = mid + Math.imul(ah5, bl5) | 0;
                  hi = hi + Math.imul(ah5, bh5) | 0;
                  lo = lo + Math.imul(al4, bl6) | 0;
                  mid = mid + Math.imul(al4, bh6) | 0;
                  mid = mid + Math.imul(ah4, bl6) | 0;
                  hi = hi + Math.imul(ah4, bh6) | 0;
                  lo = lo + Math.imul(al3, bl7) | 0;
                  mid = mid + Math.imul(al3, bh7) | 0;
                  mid = mid + Math.imul(ah3, bl7) | 0;
                  hi = hi + Math.imul(ah3, bh7) | 0;
                  lo = lo + Math.imul(al2, bl8) | 0;
                  mid = mid + Math.imul(al2, bh8) | 0;
                  mid = mid + Math.imul(ah2, bl8) | 0;
                  hi = hi + Math.imul(ah2, bh8) | 0;
                  lo = lo + Math.imul(al1, bl9) | 0;
                  mid = mid + Math.imul(al1, bh9) | 0;
                  mid = mid + Math.imul(ah1, bl9) | 0;
                  hi = hi + Math.imul(ah1, bh9) | 0;
                  var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                  w10 &= 67108863;
                  lo = Math.imul(al9, bl2);
                  mid = Math.imul(al9, bh2);
                  mid = mid + Math.imul(ah9, bl2) | 0;
                  hi = Math.imul(ah9, bh2);
                  lo = lo + Math.imul(al8, bl3) | 0;
                  mid = mid + Math.imul(al8, bh3) | 0;
                  mid = mid + Math.imul(ah8, bl3) | 0;
                  hi = hi + Math.imul(ah8, bh3) | 0;
                  lo = lo + Math.imul(al7, bl4) | 0;
                  mid = mid + Math.imul(al7, bh4) | 0;
                  mid = mid + Math.imul(ah7, bl4) | 0;
                  hi = hi + Math.imul(ah7, bh4) | 0;
                  lo = lo + Math.imul(al6, bl5) | 0;
                  mid = mid + Math.imul(al6, bh5) | 0;
                  mid = mid + Math.imul(ah6, bl5) | 0;
                  hi = hi + Math.imul(ah6, bh5) | 0;
                  lo = lo + Math.imul(al5, bl6) | 0;
                  mid = mid + Math.imul(al5, bh6) | 0;
                  mid = mid + Math.imul(ah5, bl6) | 0;
                  hi = hi + Math.imul(ah5, bh6) | 0;
                  lo = lo + Math.imul(al4, bl7) | 0;
                  mid = mid + Math.imul(al4, bh7) | 0;
                  mid = mid + Math.imul(ah4, bl7) | 0;
                  hi = hi + Math.imul(ah4, bh7) | 0;
                  lo = lo + Math.imul(al3, bl8) | 0;
                  mid = mid + Math.imul(al3, bh8) | 0;
                  mid = mid + Math.imul(ah3, bl8) | 0;
                  hi = hi + Math.imul(ah3, bh8) | 0;
                  lo = lo + Math.imul(al2, bl9) | 0;
                  mid = mid + Math.imul(al2, bh9) | 0;
                  mid = mid + Math.imul(ah2, bl9) | 0;
                  hi = hi + Math.imul(ah2, bh9) | 0;
                  var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                  w11 &= 67108863;
                  lo = Math.imul(al9, bl3);
                  mid = Math.imul(al9, bh3);
                  mid = mid + Math.imul(ah9, bl3) | 0;
                  hi = Math.imul(ah9, bh3);
                  lo = lo + Math.imul(al8, bl4) | 0;
                  mid = mid + Math.imul(al8, bh4) | 0;
                  mid = mid + Math.imul(ah8, bl4) | 0;
                  hi = hi + Math.imul(ah8, bh4) | 0;
                  lo = lo + Math.imul(al7, bl5) | 0;
                  mid = mid + Math.imul(al7, bh5) | 0;
                  mid = mid + Math.imul(ah7, bl5) | 0;
                  hi = hi + Math.imul(ah7, bh5) | 0;
                  lo = lo + Math.imul(al6, bl6) | 0;
                  mid = mid + Math.imul(al6, bh6) | 0;
                  mid = mid + Math.imul(ah6, bl6) | 0;
                  hi = hi + Math.imul(ah6, bh6) | 0;
                  lo = lo + Math.imul(al5, bl7) | 0;
                  mid = mid + Math.imul(al5, bh7) | 0;
                  mid = mid + Math.imul(ah5, bl7) | 0;
                  hi = hi + Math.imul(ah5, bh7) | 0;
                  lo = lo + Math.imul(al4, bl8) | 0;
                  mid = mid + Math.imul(al4, bh8) | 0;
                  mid = mid + Math.imul(ah4, bl8) | 0;
                  hi = hi + Math.imul(ah4, bh8) | 0;
                  lo = lo + Math.imul(al3, bl9) | 0;
                  mid = mid + Math.imul(al3, bh9) | 0;
                  mid = mid + Math.imul(ah3, bl9) | 0;
                  hi = hi + Math.imul(ah3, bh9) | 0;
                  var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                  w12 &= 67108863;
                  lo = Math.imul(al9, bl4);
                  mid = Math.imul(al9, bh4);
                  mid = mid + Math.imul(ah9, bl4) | 0;
                  hi = Math.imul(ah9, bh4);
                  lo = lo + Math.imul(al8, bl5) | 0;
                  mid = mid + Math.imul(al8, bh5) | 0;
                  mid = mid + Math.imul(ah8, bl5) | 0;
                  hi = hi + Math.imul(ah8, bh5) | 0;
                  lo = lo + Math.imul(al7, bl6) | 0;
                  mid = mid + Math.imul(al7, bh6) | 0;
                  mid = mid + Math.imul(ah7, bl6) | 0;
                  hi = hi + Math.imul(ah7, bh6) | 0;
                  lo = lo + Math.imul(al6, bl7) | 0;
                  mid = mid + Math.imul(al6, bh7) | 0;
                  mid = mid + Math.imul(ah6, bl7) | 0;
                  hi = hi + Math.imul(ah6, bh7) | 0;
                  lo = lo + Math.imul(al5, bl8) | 0;
                  mid = mid + Math.imul(al5, bh8) | 0;
                  mid = mid + Math.imul(ah5, bl8) | 0;
                  hi = hi + Math.imul(ah5, bh8) | 0;
                  lo = lo + Math.imul(al4, bl9) | 0;
                  mid = mid + Math.imul(al4, bh9) | 0;
                  mid = mid + Math.imul(ah4, bl9) | 0;
                  hi = hi + Math.imul(ah4, bh9) | 0;
                  var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                  w13 &= 67108863;
                  lo = Math.imul(al9, bl5);
                  mid = Math.imul(al9, bh5);
                  mid = mid + Math.imul(ah9, bl5) | 0;
                  hi = Math.imul(ah9, bh5);
                  lo = lo + Math.imul(al8, bl6) | 0;
                  mid = mid + Math.imul(al8, bh6) | 0;
                  mid = mid + Math.imul(ah8, bl6) | 0;
                  hi = hi + Math.imul(ah8, bh6) | 0;
                  lo = lo + Math.imul(al7, bl7) | 0;
                  mid = mid + Math.imul(al7, bh7) | 0;
                  mid = mid + Math.imul(ah7, bl7) | 0;
                  hi = hi + Math.imul(ah7, bh7) | 0;
                  lo = lo + Math.imul(al6, bl8) | 0;
                  mid = mid + Math.imul(al6, bh8) | 0;
                  mid = mid + Math.imul(ah6, bl8) | 0;
                  hi = hi + Math.imul(ah6, bh8) | 0;
                  lo = lo + Math.imul(al5, bl9) | 0;
                  mid = mid + Math.imul(al5, bh9) | 0;
                  mid = mid + Math.imul(ah5, bl9) | 0;
                  hi = hi + Math.imul(ah5, bh9) | 0;
                  var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                  w14 &= 67108863;
                  lo = Math.imul(al9, bl6);
                  mid = Math.imul(al9, bh6);
                  mid = mid + Math.imul(ah9, bl6) | 0;
                  hi = Math.imul(ah9, bh6);
                  lo = lo + Math.imul(al8, bl7) | 0;
                  mid = mid + Math.imul(al8, bh7) | 0;
                  mid = mid + Math.imul(ah8, bl7) | 0;
                  hi = hi + Math.imul(ah8, bh7) | 0;
                  lo = lo + Math.imul(al7, bl8) | 0;
                  mid = mid + Math.imul(al7, bh8) | 0;
                  mid = mid + Math.imul(ah7, bl8) | 0;
                  hi = hi + Math.imul(ah7, bh8) | 0;
                  lo = lo + Math.imul(al6, bl9) | 0;
                  mid = mid + Math.imul(al6, bh9) | 0;
                  mid = mid + Math.imul(ah6, bl9) | 0;
                  hi = hi + Math.imul(ah6, bh9) | 0;
                  var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                  w15 &= 67108863;
                  lo = Math.imul(al9, bl7);
                  mid = Math.imul(al9, bh7);
                  mid = mid + Math.imul(ah9, bl7) | 0;
                  hi = Math.imul(ah9, bh7);
                  lo = lo + Math.imul(al8, bl8) | 0;
                  mid = mid + Math.imul(al8, bh8) | 0;
                  mid = mid + Math.imul(ah8, bl8) | 0;
                  hi = hi + Math.imul(ah8, bh8) | 0;
                  lo = lo + Math.imul(al7, bl9) | 0;
                  mid = mid + Math.imul(al7, bh9) | 0;
                  mid = mid + Math.imul(ah7, bl9) | 0;
                  hi = hi + Math.imul(ah7, bh9) | 0;
                  var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                  w16 &= 67108863;
                  lo = Math.imul(al9, bl8);
                  mid = Math.imul(al9, bh8);
                  mid = mid + Math.imul(ah9, bl8) | 0;
                  hi = Math.imul(ah9, bh8);
                  lo = lo + Math.imul(al8, bl9) | 0;
                  mid = mid + Math.imul(al8, bh9) | 0;
                  mid = mid + Math.imul(ah8, bl9) | 0;
                  hi = hi + Math.imul(ah8, bh9) | 0;
                  var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                  w17 &= 67108863;
                  lo = Math.imul(al9, bl9);
                  mid = Math.imul(al9, bh9);
                  mid = mid + Math.imul(ah9, bl9) | 0;
                  hi = Math.imul(ah9, bh9);
                  var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
                  c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                  w18 &= 67108863;
                  o[0] = w0;
                  o[1] = w1;
                  o[2] = w2;
                  o[3] = w3;
                  o[4] = w4;
                  o[5] = w5;
                  o[6] = w6;
                  o[7] = w7;
                  o[8] = w8;
                  o[9] = w9;
                  o[10] = w10;
                  o[11] = w11;
                  o[12] = w12;
                  o[13] = w13;
                  o[14] = w14;
                  o[15] = w15;
                  o[16] = w16;
                  o[17] = w17;
                  o[18] = w18;
                  if (c !== 0) {
                    o[19] = c;
                    out.length++;
                  }
                  return out;
                };
                if (!Math.imul) {
                  comb10MulTo = smallMulTo;
                }
                function bigMulTo(self2, num, out) {
                  out.negative = num.negative ^ self2.negative;
                  out.length = self2.length + num.length;
                  var carry = 0;
                  var hncarry = 0;
                  for (var k = 0; k < out.length - 1; k++) {
                    var ncarry = hncarry;
                    hncarry = 0;
                    var rword = carry & 67108863;
                    var maxJ = Math.min(k, num.length - 1);
                    for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
                      var i = k - j;
                      var a = self2.words[i] | 0;
                      var b = num.words[j] | 0;
                      var r = a * b;
                      var lo = r & 67108863;
                      ncarry = ncarry + (r / 67108864 | 0) | 0;
                      lo = lo + rword | 0;
                      rword = lo & 67108863;
                      ncarry = ncarry + (lo >>> 26) | 0;
                      hncarry += ncarry >>> 26;
                      ncarry &= 67108863;
                    }
                    out.words[k] = rword;
                    carry = ncarry;
                    ncarry = hncarry;
                  }
                  if (carry !== 0) {
                    out.words[k] = carry;
                  } else {
                    out.length--;
                  }
                  return out.strip();
                }
                function jumboMulTo(self2, num, out) {
                  var fftm = new FFTM();
                  return fftm.mulp(self2, num, out);
                }
                BN.prototype.mulTo = function mulTo(num, out) {
                  var res;
                  var len = this.length + num.length;
                  if (this.length === 10 && num.length === 10) {
                    res = comb10MulTo(this, num, out);
                  } else if (len < 63) {
                    res = smallMulTo(this, num, out);
                  } else if (len < 1024) {
                    res = bigMulTo(this, num, out);
                  } else {
                    res = jumboMulTo(this, num, out);
                  }
                  return res;
                };
                function FFTM(x, y) {
                  this.x = x;
                  this.y = y;
                }
                FFTM.prototype.makeRBT = function makeRBT(N) {
                  var t = new Array(N);
                  var l = BN.prototype._countBits(N) - 1;
                  for (var i = 0; i < N; i++) {
                    t[i] = this.revBin(i, l, N);
                  }
                  return t;
                };
                FFTM.prototype.revBin = function revBin(x, l, N) {
                  if (x === 0 || x === N - 1)
                    return x;
                  var rb = 0;
                  for (var i = 0; i < l; i++) {
                    rb |= (x & 1) << l - i - 1;
                    x >>= 1;
                  }
                  return rb;
                };
                FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                  for (var i = 0; i < N; i++) {
                    rtws[i] = rws[rbt[i]];
                    itws[i] = iws[rbt[i]];
                  }
                };
                FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                  this.permute(rbt, rws, iws, rtws, itws, N);
                  for (var s = 1; s < N; s <<= 1) {
                    var l = s << 1;
                    var rtwdf = Math.cos(2 * Math.PI / l);
                    var itwdf = Math.sin(2 * Math.PI / l);
                    for (var p = 0; p < N; p += l) {
                      var rtwdf_ = rtwdf;
                      var itwdf_ = itwdf;
                      for (var j = 0; j < s; j++) {
                        var re = rtws[p + j];
                        var ie = itws[p + j];
                        var ro = rtws[p + j + s];
                        var io = itws[p + j + s];
                        var rx = rtwdf_ * ro - itwdf_ * io;
                        io = rtwdf_ * io + itwdf_ * ro;
                        ro = rx;
                        rtws[p + j] = re + ro;
                        itws[p + j] = ie + io;
                        rtws[p + j + s] = re - ro;
                        itws[p + j + s] = ie - io;
                        if (j !== l) {
                          rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                          itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                          rtwdf_ = rx;
                        }
                      }
                    }
                  }
                };
                FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                  var N = Math.max(m, n) | 1;
                  var odd = N & 1;
                  var i = 0;
                  for (N = N / 2 | 0; N; N = N >>> 1) {
                    i++;
                  }
                  return 1 << i + 1 + odd;
                };
                FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                  if (N <= 1)
                    return;
                  for (var i = 0; i < N / 2; i++) {
                    var t = rws[i];
                    rws[i] = rws[N - i - 1];
                    rws[N - i - 1] = t;
                    t = iws[i];
                    iws[i] = -iws[N - i - 1];
                    iws[N - i - 1] = -t;
                  }
                };
                FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                  var carry = 0;
                  for (var i = 0; i < N / 2; i++) {
                    var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
                    ws[i] = w & 67108863;
                    if (w < 67108864) {
                      carry = 0;
                    } else {
                      carry = w / 67108864 | 0;
                    }
                  }
                  return ws;
                };
                FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                  var carry = 0;
                  for (var i = 0; i < len; i++) {
                    carry = carry + (ws[i] | 0);
                    rws[2 * i] = carry & 8191;
                    carry = carry >>> 13;
                    rws[2 * i + 1] = carry & 8191;
                    carry = carry >>> 13;
                  }
                  for (i = 2 * len; i < N; ++i) {
                    rws[i] = 0;
                  }
                  assert(carry === 0);
                  assert((carry & ~8191) === 0);
                };
                FFTM.prototype.stub = function stub(N) {
                  var ph = new Array(N);
                  for (var i = 0; i < N; i++) {
                    ph[i] = 0;
                  }
                  return ph;
                };
                FFTM.prototype.mulp = function mulp(x, y, out) {
                  var N = 2 * this.guessLen13b(x.length, y.length);
                  var rbt = this.makeRBT(N);
                  var _ = this.stub(N);
                  var rws = new Array(N);
                  var rwst = new Array(N);
                  var iwst = new Array(N);
                  var nrws = new Array(N);
                  var nrwst = new Array(N);
                  var niwst = new Array(N);
                  var rmws = out.words;
                  rmws.length = N;
                  this.convert13b(x.words, x.length, rws, N);
                  this.convert13b(y.words, y.length, nrws, N);
                  this.transform(rws, _, rwst, iwst, N, rbt);
                  this.transform(nrws, _, nrwst, niwst, N, rbt);
                  for (var i = 0; i < N; i++) {
                    var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                    iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                    rwst[i] = rx;
                  }
                  this.conjugate(rwst, iwst, N);
                  this.transform(rwst, iwst, rmws, _, N, rbt);
                  this.conjugate(rmws, _, N);
                  this.normalize13b(rmws, N);
                  out.negative = x.negative ^ y.negative;
                  out.length = x.length + y.length;
                  return out.strip();
                };
                BN.prototype.mul = function mul(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return this.mulTo(num, out);
                };
                BN.prototype.mulf = function mulf(num) {
                  var out = new BN(null);
                  out.words = new Array(this.length + num.length);
                  return jumboMulTo(this, num, out);
                };
                BN.prototype.imul = function imul(num) {
                  return this.clone().mulTo(num, this);
                };
                BN.prototype.imuln = function imuln(num) {
                  assert(typeof num === "number");
                  assert(num < 67108864);
                  var carry = 0;
                  for (var i = 0; i < this.length; i++) {
                    var w = (this.words[i] | 0) * num;
                    var lo = (w & 67108863) + (carry & 67108863);
                    carry >>= 26;
                    carry += w / 67108864 | 0;
                    carry += lo >>> 26;
                    this.words[i] = lo & 67108863;
                  }
                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }
                  return this;
                };
                BN.prototype.muln = function muln(num) {
                  return this.clone().imuln(num);
                };
                BN.prototype.sqr = function sqr() {
                  return this.mul(this);
                };
                BN.prototype.isqr = function isqr() {
                  return this.imul(this.clone());
                };
                BN.prototype.pow = function pow(num) {
                  var w = toBitArray(num);
                  if (w.length === 0)
                    return new BN(1);
                  var res = this;
                  for (var i = 0; i < w.length; i++, res = res.sqr()) {
                    if (w[i] !== 0)
                      break;
                  }
                  if (++i < w.length) {
                    for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                      if (w[i] === 0)
                        continue;
                      res = res.mul(q);
                    }
                  }
                  return res;
                };
                BN.prototype.iushln = function iushln(bits) {
                  assert(typeof bits === "number" && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  var carryMask = 67108863 >>> 26 - r << 26 - r;
                  var i;
                  if (r !== 0) {
                    var carry = 0;
                    for (i = 0; i < this.length; i++) {
                      var newCarry = this.words[i] & carryMask;
                      var c = (this.words[i] | 0) - newCarry << r;
                      this.words[i] = c | carry;
                      carry = newCarry >>> 26 - r;
                    }
                    if (carry) {
                      this.words[i] = carry;
                      this.length++;
                    }
                  }
                  if (s !== 0) {
                    for (i = this.length - 1; i >= 0; i--) {
                      this.words[i + s] = this.words[i];
                    }
                    for (i = 0; i < s; i++) {
                      this.words[i] = 0;
                    }
                    this.length += s;
                  }
                  return this.strip();
                };
                BN.prototype.ishln = function ishln(bits) {
                  assert(this.negative === 0);
                  return this.iushln(bits);
                };
                BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                  assert(typeof bits === "number" && bits >= 0);
                  var h;
                  if (hint) {
                    h = (hint - hint % 26) / 26;
                  } else {
                    h = 0;
                  }
                  var r = bits % 26;
                  var s = Math.min((bits - r) / 26, this.length);
                  var mask = 67108863 ^ 67108863 >>> r << r;
                  var maskedWords = extended;
                  h -= s;
                  h = Math.max(0, h);
                  if (maskedWords) {
                    for (var i = 0; i < s; i++) {
                      maskedWords.words[i] = this.words[i];
                    }
                    maskedWords.length = s;
                  }
                  if (s === 0) {
                  } else if (this.length > s) {
                    this.length -= s;
                    for (i = 0; i < this.length; i++) {
                      this.words[i] = this.words[i + s];
                    }
                  } else {
                    this.words[0] = 0;
                    this.length = 1;
                  }
                  var carry = 0;
                  for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                    var word = this.words[i] | 0;
                    this.words[i] = carry << 26 - r | word >>> r;
                    carry = word & mask;
                  }
                  if (maskedWords && carry !== 0) {
                    maskedWords.words[maskedWords.length++] = carry;
                  }
                  if (this.length === 0) {
                    this.words[0] = 0;
                    this.length = 1;
                  }
                  return this.strip();
                };
                BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                  assert(this.negative === 0);
                  return this.iushrn(bits, hint, extended);
                };
                BN.prototype.shln = function shln(bits) {
                  return this.clone().ishln(bits);
                };
                BN.prototype.ushln = function ushln(bits) {
                  return this.clone().iushln(bits);
                };
                BN.prototype.shrn = function shrn(bits) {
                  return this.clone().ishrn(bits);
                };
                BN.prototype.ushrn = function ushrn(bits) {
                  return this.clone().iushrn(bits);
                };
                BN.prototype.testn = function testn(bit) {
                  assert(typeof bit === "number" && bit >= 0);
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r;
                  if (this.length <= s)
                    return false;
                  var w = this.words[s];
                  return !!(w & q);
                };
                BN.prototype.imaskn = function imaskn(bits) {
                  assert(typeof bits === "number" && bits >= 0);
                  var r = bits % 26;
                  var s = (bits - r) / 26;
                  assert(this.negative === 0, "imaskn works only with positive numbers");
                  if (this.length <= s) {
                    return this;
                  }
                  if (r !== 0) {
                    s++;
                  }
                  this.length = Math.min(s, this.length);
                  if (r !== 0) {
                    var mask = 67108863 ^ 67108863 >>> r << r;
                    this.words[this.length - 1] &= mask;
                  }
                  return this.strip();
                };
                BN.prototype.maskn = function maskn(bits) {
                  return this.clone().imaskn(bits);
                };
                BN.prototype.iaddn = function iaddn(num) {
                  assert(typeof num === "number");
                  assert(num < 67108864);
                  if (num < 0)
                    return this.isubn(-num);
                  if (this.negative !== 0) {
                    if (this.length === 1 && (this.words[0] | 0) < num) {
                      this.words[0] = num - (this.words[0] | 0);
                      this.negative = 0;
                      return this;
                    }
                    this.negative = 0;
                    this.isubn(num);
                    this.negative = 1;
                    return this;
                  }
                  return this._iaddn(num);
                };
                BN.prototype._iaddn = function _iaddn(num) {
                  this.words[0] += num;
                  for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
                    this.words[i] -= 67108864;
                    if (i === this.length - 1) {
                      this.words[i + 1] = 1;
                    } else {
                      this.words[i + 1]++;
                    }
                  }
                  this.length = Math.max(this.length, i + 1);
                  return this;
                };
                BN.prototype.isubn = function isubn(num) {
                  assert(typeof num === "number");
                  assert(num < 67108864);
                  if (num < 0)
                    return this.iaddn(-num);
                  if (this.negative !== 0) {
                    this.negative = 0;
                    this.iaddn(num);
                    this.negative = 1;
                    return this;
                  }
                  this.words[0] -= num;
                  if (this.length === 1 && this.words[0] < 0) {
                    this.words[0] = -this.words[0];
                    this.negative = 1;
                  } else {
                    for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                      this.words[i] += 67108864;
                      this.words[i + 1] -= 1;
                    }
                  }
                  return this.strip();
                };
                BN.prototype.addn = function addn(num) {
                  return this.clone().iaddn(num);
                };
                BN.prototype.subn = function subn(num) {
                  return this.clone().isubn(num);
                };
                BN.prototype.iabs = function iabs() {
                  this.negative = 0;
                  return this;
                };
                BN.prototype.abs = function abs() {
                  return this.clone().iabs();
                };
                BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                  var len = num.length + shift;
                  var i;
                  this._expand(len);
                  var w;
                  var carry = 0;
                  for (i = 0; i < num.length; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    var right = (num.words[i] | 0) * mul;
                    w -= right & 67108863;
                    carry = (w >> 26) - (right / 67108864 | 0);
                    this.words[i + shift] = w & 67108863;
                  }
                  for (; i < this.length - shift; i++) {
                    w = (this.words[i + shift] | 0) + carry;
                    carry = w >> 26;
                    this.words[i + shift] = w & 67108863;
                  }
                  if (carry === 0)
                    return this.strip();
                  assert(carry === -1);
                  carry = 0;
                  for (i = 0; i < this.length; i++) {
                    w = -(this.words[i] | 0) + carry;
                    carry = w >> 26;
                    this.words[i] = w & 67108863;
                  }
                  this.negative = 1;
                  return this.strip();
                };
                BN.prototype._wordDiv = function _wordDiv(num, mode) {
                  var shift = this.length - num.length;
                  var a = this.clone();
                  var b = num;
                  var bhi = b.words[b.length - 1] | 0;
                  var bhiBits = this._countBits(bhi);
                  shift = 26 - bhiBits;
                  if (shift !== 0) {
                    b = b.ushln(shift);
                    a.iushln(shift);
                    bhi = b.words[b.length - 1] | 0;
                  }
                  var m = a.length - b.length;
                  var q;
                  if (mode !== "mod") {
                    q = new BN(null);
                    q.length = m + 1;
                    q.words = new Array(q.length);
                    for (var i = 0; i < q.length; i++) {
                      q.words[i] = 0;
                    }
                  }
                  var diff = a.clone()._ishlnsubmul(b, 1, m);
                  if (diff.negative === 0) {
                    a = diff;
                    if (q) {
                      q.words[m] = 1;
                    }
                  }
                  for (var j = m - 1; j >= 0; j--) {
                    var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
                    qj = Math.min(qj / bhi | 0, 67108863);
                    a._ishlnsubmul(b, qj, j);
                    while (a.negative !== 0) {
                      qj--;
                      a.negative = 0;
                      a._ishlnsubmul(b, 1, j);
                      if (!a.isZero()) {
                        a.negative ^= 1;
                      }
                    }
                    if (q) {
                      q.words[j] = qj;
                    }
                  }
                  if (q) {
                    q.strip();
                  }
                  a.strip();
                  if (mode !== "div" && shift !== 0) {
                    a.iushrn(shift);
                  }
                  return {
                    div: q || null,
                    mod: a
                  };
                };
                BN.prototype.divmod = function divmod(num, mode, positive) {
                  assert(!num.isZero());
                  if (this.isZero()) {
                    return {
                      div: new BN(0),
                      mod: new BN(0)
                    };
                  }
                  var div, mod, res;
                  if (this.negative !== 0 && num.negative === 0) {
                    res = this.neg().divmod(num, mode);
                    if (mode !== "mod") {
                      div = res.div.neg();
                    }
                    if (mode !== "div") {
                      mod = res.mod.neg();
                      if (positive && mod.negative !== 0) {
                        mod.iadd(num);
                      }
                    }
                    return {
                      div,
                      mod
                    };
                  }
                  if (this.negative === 0 && num.negative !== 0) {
                    res = this.divmod(num.neg(), mode);
                    if (mode !== "mod") {
                      div = res.div.neg();
                    }
                    return {
                      div,
                      mod: res.mod
                    };
                  }
                  if ((this.negative & num.negative) !== 0) {
                    res = this.neg().divmod(num.neg(), mode);
                    if (mode !== "div") {
                      mod = res.mod.neg();
                      if (positive && mod.negative !== 0) {
                        mod.isub(num);
                      }
                    }
                    return {
                      div: res.div,
                      mod
                    };
                  }
                  if (num.length > this.length || this.cmp(num) < 0) {
                    return {
                      div: new BN(0),
                      mod: this
                    };
                  }
                  if (num.length === 1) {
                    if (mode === "div") {
                      return {
                        div: this.divn(num.words[0]),
                        mod: null
                      };
                    }
                    if (mode === "mod") {
                      return {
                        div: null,
                        mod: new BN(this.modn(num.words[0]))
                      };
                    }
                    return {
                      div: this.divn(num.words[0]),
                      mod: new BN(this.modn(num.words[0]))
                    };
                  }
                  return this._wordDiv(num, mode);
                };
                BN.prototype.div = function div(num) {
                  return this.divmod(num, "div", false).div;
                };
                BN.prototype.mod = function mod(num) {
                  return this.divmod(num, "mod", false).mod;
                };
                BN.prototype.umod = function umod(num) {
                  return this.divmod(num, "mod", true).mod;
                };
                BN.prototype.divRound = function divRound(num) {
                  var dm = this.divmod(num);
                  if (dm.mod.isZero())
                    return dm.div;
                  var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                  var half = num.ushrn(1);
                  var r2 = num.andln(1);
                  var cmp = mod.cmp(half);
                  if (cmp < 0 || r2 === 1 && cmp === 0)
                    return dm.div;
                  return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                };
                BN.prototype.modn = function modn(num) {
                  assert(num <= 67108863);
                  var p = (1 << 26) % num;
                  var acc = 0;
                  for (var i = this.length - 1; i >= 0; i--) {
                    acc = (p * acc + (this.words[i] | 0)) % num;
                  }
                  return acc;
                };
                BN.prototype.idivn = function idivn(num) {
                  assert(num <= 67108863);
                  var carry = 0;
                  for (var i = this.length - 1; i >= 0; i--) {
                    var w = (this.words[i] | 0) + carry * 67108864;
                    this.words[i] = w / num | 0;
                    carry = w % num;
                  }
                  return this.strip();
                };
                BN.prototype.divn = function divn(num) {
                  return this.clone().idivn(num);
                };
                BN.prototype.egcd = function egcd(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var x = this;
                  var y = p.clone();
                  if (x.negative !== 0) {
                    x = x.umod(p);
                  } else {
                    x = x.clone();
                  }
                  var A = new BN(1);
                  var B = new BN(0);
                  var C = new BN(0);
                  var D = new BN(1);
                  var g = 0;
                  while (x.isEven() && y.isEven()) {
                    x.iushrn(1);
                    y.iushrn(1);
                    ++g;
                  }
                  var yp = y.clone();
                  var xp = x.clone();
                  while (!x.isZero()) {
                    for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                      ;
                    if (i > 0) {
                      x.iushrn(i);
                      while (i-- > 0) {
                        if (A.isOdd() || B.isOdd()) {
                          A.iadd(yp);
                          B.isub(xp);
                        }
                        A.iushrn(1);
                        B.iushrn(1);
                      }
                    }
                    for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                      ;
                    if (j > 0) {
                      y.iushrn(j);
                      while (j-- > 0) {
                        if (C.isOdd() || D.isOdd()) {
                          C.iadd(yp);
                          D.isub(xp);
                        }
                        C.iushrn(1);
                        D.iushrn(1);
                      }
                    }
                    if (x.cmp(y) >= 0) {
                      x.isub(y);
                      A.isub(C);
                      B.isub(D);
                    } else {
                      y.isub(x);
                      C.isub(A);
                      D.isub(B);
                    }
                  }
                  return {
                    a: C,
                    b: D,
                    gcd: y.iushln(g)
                  };
                };
                BN.prototype._invmp = function _invmp(p) {
                  assert(p.negative === 0);
                  assert(!p.isZero());
                  var a = this;
                  var b = p.clone();
                  if (a.negative !== 0) {
                    a = a.umod(p);
                  } else {
                    a = a.clone();
                  }
                  var x1 = new BN(1);
                  var x2 = new BN(0);
                  var delta = b.clone();
                  while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                    for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
                      ;
                    if (i > 0) {
                      a.iushrn(i);
                      while (i-- > 0) {
                        if (x1.isOdd()) {
                          x1.iadd(delta);
                        }
                        x1.iushrn(1);
                      }
                    }
                    for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
                      ;
                    if (j > 0) {
                      b.iushrn(j);
                      while (j-- > 0) {
                        if (x2.isOdd()) {
                          x2.iadd(delta);
                        }
                        x2.iushrn(1);
                      }
                    }
                    if (a.cmp(b) >= 0) {
                      a.isub(b);
                      x1.isub(x2);
                    } else {
                      b.isub(a);
                      x2.isub(x1);
                    }
                  }
                  var res;
                  if (a.cmpn(1) === 0) {
                    res = x1;
                  } else {
                    res = x2;
                  }
                  if (res.cmpn(0) < 0) {
                    res.iadd(p);
                  }
                  return res;
                };
                BN.prototype.gcd = function gcd(num) {
                  if (this.isZero())
                    return num.abs();
                  if (num.isZero())
                    return this.abs();
                  var a = this.clone();
                  var b = num.clone();
                  a.negative = 0;
                  b.negative = 0;
                  for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                    a.iushrn(1);
                    b.iushrn(1);
                  }
                  do {
                    while (a.isEven()) {
                      a.iushrn(1);
                    }
                    while (b.isEven()) {
                      b.iushrn(1);
                    }
                    var r = a.cmp(b);
                    if (r < 0) {
                      var t = a;
                      a = b;
                      b = t;
                    } else if (r === 0 || b.cmpn(1) === 0) {
                      break;
                    }
                    a.isub(b);
                  } while (true);
                  return b.iushln(shift);
                };
                BN.prototype.invm = function invm(num) {
                  return this.egcd(num).a.umod(num);
                };
                BN.prototype.isEven = function isEven() {
                  return (this.words[0] & 1) === 0;
                };
                BN.prototype.isOdd = function isOdd() {
                  return (this.words[0] & 1) === 1;
                };
                BN.prototype.andln = function andln(num) {
                  return this.words[0] & num;
                };
                BN.prototype.bincn = function bincn(bit) {
                  assert(typeof bit === "number");
                  var r = bit % 26;
                  var s = (bit - r) / 26;
                  var q = 1 << r;
                  if (this.length <= s) {
                    this._expand(s + 1);
                    this.words[s] |= q;
                    return this;
                  }
                  var carry = q;
                  for (var i = s; carry !== 0 && i < this.length; i++) {
                    var w = this.words[i] | 0;
                    w += carry;
                    carry = w >>> 26;
                    w &= 67108863;
                    this.words[i] = w;
                  }
                  if (carry !== 0) {
                    this.words[i] = carry;
                    this.length++;
                  }
                  return this;
                };
                BN.prototype.isZero = function isZero() {
                  return this.length === 1 && this.words[0] === 0;
                };
                BN.prototype.cmpn = function cmpn(num) {
                  var negative = num < 0;
                  if (this.negative !== 0 && !negative)
                    return -1;
                  if (this.negative === 0 && negative)
                    return 1;
                  this.strip();
                  var res;
                  if (this.length > 1) {
                    res = 1;
                  } else {
                    if (negative) {
                      num = -num;
                    }
                    assert(num <= 67108863, "Number is too big");
                    var w = this.words[0] | 0;
                    res = w === num ? 0 : w < num ? -1 : 1;
                  }
                  if (this.negative !== 0)
                    return -res | 0;
                  return res;
                };
                BN.prototype.cmp = function cmp(num) {
                  if (this.negative !== 0 && num.negative === 0)
                    return -1;
                  if (this.negative === 0 && num.negative !== 0)
                    return 1;
                  var res = this.ucmp(num);
                  if (this.negative !== 0)
                    return -res | 0;
                  return res;
                };
                BN.prototype.ucmp = function ucmp(num) {
                  if (this.length > num.length)
                    return 1;
                  if (this.length < num.length)
                    return -1;
                  var res = 0;
                  for (var i = this.length - 1; i >= 0; i--) {
                    var a = this.words[i] | 0;
                    var b = num.words[i] | 0;
                    if (a === b)
                      continue;
                    if (a < b) {
                      res = -1;
                    } else if (a > b) {
                      res = 1;
                    }
                    break;
                  }
                  return res;
                };
                BN.prototype.gtn = function gtn(num) {
                  return this.cmpn(num) === 1;
                };
                BN.prototype.gt = function gt(num) {
                  return this.cmp(num) === 1;
                };
                BN.prototype.gten = function gten(num) {
                  return this.cmpn(num) >= 0;
                };
                BN.prototype.gte = function gte(num) {
                  return this.cmp(num) >= 0;
                };
                BN.prototype.ltn = function ltn(num) {
                  return this.cmpn(num) === -1;
                };
                BN.prototype.lt = function lt(num) {
                  return this.cmp(num) === -1;
                };
                BN.prototype.lten = function lten(num) {
                  return this.cmpn(num) <= 0;
                };
                BN.prototype.lte = function lte(num) {
                  return this.cmp(num) <= 0;
                };
                BN.prototype.eqn = function eqn(num) {
                  return this.cmpn(num) === 0;
                };
                BN.prototype.eq = function eq(num) {
                  return this.cmp(num) === 0;
                };
                BN.red = function red(num) {
                  return new Red(num);
                };
                BN.prototype.toRed = function toRed(ctx) {
                  assert(!this.red, "Already a number in reduction context");
                  assert(this.negative === 0, "red works only with positives");
                  return ctx.convertTo(this)._forceRed(ctx);
                };
                BN.prototype.fromRed = function fromRed() {
                  assert(this.red, "fromRed works only with numbers in reduction context");
                  return this.red.convertFrom(this);
                };
                BN.prototype._forceRed = function _forceRed(ctx) {
                  this.red = ctx;
                  return this;
                };
                BN.prototype.forceRed = function forceRed(ctx) {
                  assert(!this.red, "Already a number in reduction context");
                  return this._forceRed(ctx);
                };
                BN.prototype.redAdd = function redAdd(num) {
                  assert(this.red, "redAdd works only with red numbers");
                  return this.red.add(this, num);
                };
                BN.prototype.redIAdd = function redIAdd(num) {
                  assert(this.red, "redIAdd works only with red numbers");
                  return this.red.iadd(this, num);
                };
                BN.prototype.redSub = function redSub(num) {
                  assert(this.red, "redSub works only with red numbers");
                  return this.red.sub(this, num);
                };
                BN.prototype.redISub = function redISub(num) {
                  assert(this.red, "redISub works only with red numbers");
                  return this.red.isub(this, num);
                };
                BN.prototype.redShl = function redShl(num) {
                  assert(this.red, "redShl works only with red numbers");
                  return this.red.shl(this, num);
                };
                BN.prototype.redMul = function redMul(num) {
                  assert(this.red, "redMul works only with red numbers");
                  this.red._verify2(this, num);
                  return this.red.mul(this, num);
                };
                BN.prototype.redIMul = function redIMul(num) {
                  assert(this.red, "redMul works only with red numbers");
                  this.red._verify2(this, num);
                  return this.red.imul(this, num);
                };
                BN.prototype.redSqr = function redSqr() {
                  assert(this.red, "redSqr works only with red numbers");
                  this.red._verify1(this);
                  return this.red.sqr(this);
                };
                BN.prototype.redISqr = function redISqr() {
                  assert(this.red, "redISqr works only with red numbers");
                  this.red._verify1(this);
                  return this.red.isqr(this);
                };
                BN.prototype.redSqrt = function redSqrt() {
                  assert(this.red, "redSqrt works only with red numbers");
                  this.red._verify1(this);
                  return this.red.sqrt(this);
                };
                BN.prototype.redInvm = function redInvm() {
                  assert(this.red, "redInvm works only with red numbers");
                  this.red._verify1(this);
                  return this.red.invm(this);
                };
                BN.prototype.redNeg = function redNeg() {
                  assert(this.red, "redNeg works only with red numbers");
                  this.red._verify1(this);
                  return this.red.neg(this);
                };
                BN.prototype.redPow = function redPow(num) {
                  assert(this.red && !num.red, "redPow(normalNum)");
                  this.red._verify1(this);
                  return this.red.pow(this, num);
                };
                var primes = {
                  k256: null,
                  p224: null,
                  p192: null,
                  p25519: null
                };
                function MPrime(name, p) {
                  this.name = name;
                  this.p = new BN(p, 16);
                  this.n = this.p.bitLength();
                  this.k = new BN(1).iushln(this.n).isub(this.p);
                  this.tmp = this._tmp();
                }
                MPrime.prototype._tmp = function _tmp() {
                  var tmp = new BN(null);
                  tmp.words = new Array(Math.ceil(this.n / 13));
                  return tmp;
                };
                MPrime.prototype.ireduce = function ireduce(num) {
                  var r = num;
                  var rlen;
                  do {
                    this.split(r, this.tmp);
                    r = this.imulK(r);
                    r = r.iadd(this.tmp);
                    rlen = r.bitLength();
                  } while (rlen > this.n);
                  var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                  if (cmp === 0) {
                    r.words[0] = 0;
                    r.length = 1;
                  } else if (cmp > 0) {
                    r.isub(this.p);
                  } else {
                    if (r.strip !== void 0) {
                      r.strip();
                    } else {
                      r._strip();
                    }
                  }
                  return r;
                };
                MPrime.prototype.split = function split(input, out) {
                  input.iushrn(this.n, 0, out);
                };
                MPrime.prototype.imulK = function imulK(num) {
                  return num.imul(this.k);
                };
                function K256() {
                  MPrime.call(
                    this,
                    "k256",
                    "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
                  );
                }
                inherits2(K256, MPrime);
                K256.prototype.split = function split(input, output) {
                  var mask = 4194303;
                  var outLen = Math.min(input.length, 9);
                  for (var i = 0; i < outLen; i++) {
                    output.words[i] = input.words[i];
                  }
                  output.length = outLen;
                  if (input.length <= 9) {
                    input.words[0] = 0;
                    input.length = 1;
                    return;
                  }
                  var prev = input.words[9];
                  output.words[output.length++] = prev & mask;
                  for (i = 10; i < input.length; i++) {
                    var next = input.words[i] | 0;
                    input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                    prev = next;
                  }
                  prev >>>= 22;
                  input.words[i - 10] = prev;
                  if (prev === 0 && input.length > 10) {
                    input.length -= 10;
                  } else {
                    input.length -= 9;
                  }
                };
                K256.prototype.imulK = function imulK(num) {
                  num.words[num.length] = 0;
                  num.words[num.length + 1] = 0;
                  num.length += 2;
                  var lo = 0;
                  for (var i = 0; i < num.length; i++) {
                    var w = num.words[i] | 0;
                    lo += w * 977;
                    num.words[i] = lo & 67108863;
                    lo = w * 64 + (lo / 67108864 | 0);
                  }
                  if (num.words[num.length - 1] === 0) {
                    num.length--;
                    if (num.words[num.length - 1] === 0) {
                      num.length--;
                    }
                  }
                  return num;
                };
                function P224() {
                  MPrime.call(
                    this,
                    "p224",
                    "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
                  );
                }
                inherits2(P224, MPrime);
                function P192() {
                  MPrime.call(
                    this,
                    "p192",
                    "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
                  );
                }
                inherits2(P192, MPrime);
                function P25519() {
                  MPrime.call(
                    this,
                    "25519",
                    "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
                  );
                }
                inherits2(P25519, MPrime);
                P25519.prototype.imulK = function imulK(num) {
                  var carry = 0;
                  for (var i = 0; i < num.length; i++) {
                    var hi = (num.words[i] | 0) * 19 + carry;
                    var lo = hi & 67108863;
                    hi >>>= 26;
                    num.words[i] = lo;
                    carry = hi;
                  }
                  if (carry !== 0) {
                    num.words[num.length++] = carry;
                  }
                  return num;
                };
                BN._prime = function prime(name) {
                  if (primes[name])
                    return primes[name];
                  var prime2;
                  if (name === "k256") {
                    prime2 = new K256();
                  } else if (name === "p224") {
                    prime2 = new P224();
                  } else if (name === "p192") {
                    prime2 = new P192();
                  } else if (name === "p25519") {
                    prime2 = new P25519();
                  } else {
                    throw new Error("Unknown prime " + name);
                  }
                  primes[name] = prime2;
                  return prime2;
                };
                function Red(m) {
                  if (typeof m === "string") {
                    var prime = BN._prime(m);
                    this.m = prime.p;
                    this.prime = prime;
                  } else {
                    assert(m.gtn(1), "modulus must be greater than 1");
                    this.m = m;
                    this.prime = null;
                  }
                }
                Red.prototype._verify1 = function _verify1(a) {
                  assert(a.negative === 0, "red works only with positives");
                  assert(a.red, "red works only with red numbers");
                };
                Red.prototype._verify2 = function _verify2(a, b) {
                  assert((a.negative | b.negative) === 0, "red works only with positives");
                  assert(
                    a.red && a.red === b.red,
                    "red works only with red numbers"
                  );
                };
                Red.prototype.imod = function imod(a) {
                  if (this.prime)
                    return this.prime.ireduce(a)._forceRed(this);
                  return a.umod(this.m)._forceRed(this);
                };
                Red.prototype.neg = function neg(a) {
                  if (a.isZero()) {
                    return a.clone();
                  }
                  return this.m.sub(a)._forceRed(this);
                };
                Red.prototype.add = function add(a, b) {
                  this._verify2(a, b);
                  var res = a.add(b);
                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }
                  return res._forceRed(this);
                };
                Red.prototype.iadd = function iadd(a, b) {
                  this._verify2(a, b);
                  var res = a.iadd(b);
                  if (res.cmp(this.m) >= 0) {
                    res.isub(this.m);
                  }
                  return res;
                };
                Red.prototype.sub = function sub(a, b) {
                  this._verify2(a, b);
                  var res = a.sub(b);
                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }
                  return res._forceRed(this);
                };
                Red.prototype.isub = function isub(a, b) {
                  this._verify2(a, b);
                  var res = a.isub(b);
                  if (res.cmpn(0) < 0) {
                    res.iadd(this.m);
                  }
                  return res;
                };
                Red.prototype.shl = function shl(a, num) {
                  this._verify1(a);
                  return this.imod(a.ushln(num));
                };
                Red.prototype.imul = function imul(a, b) {
                  this._verify2(a, b);
                  return this.imod(a.imul(b));
                };
                Red.prototype.mul = function mul(a, b) {
                  this._verify2(a, b);
                  return this.imod(a.mul(b));
                };
                Red.prototype.isqr = function isqr(a) {
                  return this.imul(a, a.clone());
                };
                Red.prototype.sqr = function sqr(a) {
                  return this.mul(a, a);
                };
                Red.prototype.sqrt = function sqrt(a) {
                  if (a.isZero())
                    return a.clone();
                  var mod3 = this.m.andln(3);
                  assert(mod3 % 2 === 1);
                  if (mod3 === 3) {
                    var pow = this.m.add(new BN(1)).iushrn(2);
                    return this.pow(a, pow);
                  }
                  var q = this.m.subn(1);
                  var s = 0;
                  while (!q.isZero() && q.andln(1) === 0) {
                    s++;
                    q.iushrn(1);
                  }
                  assert(!q.isZero());
                  var one = new BN(1).toRed(this);
                  var nOne = one.redNeg();
                  var lpow = this.m.subn(1).iushrn(1);
                  var z = this.m.bitLength();
                  z = new BN(2 * z * z).toRed(this);
                  while (this.pow(z, lpow).cmp(nOne) !== 0) {
                    z.redIAdd(nOne);
                  }
                  var c = this.pow(z, q);
                  var r = this.pow(a, q.addn(1).iushrn(1));
                  var t = this.pow(a, q);
                  var m = s;
                  while (t.cmp(one) !== 0) {
                    var tmp = t;
                    for (var i = 0; tmp.cmp(one) !== 0; i++) {
                      tmp = tmp.redSqr();
                    }
                    assert(i < m);
                    var b = this.pow(c, new BN(1).iushln(m - i - 1));
                    r = r.redMul(b);
                    c = b.redSqr();
                    t = t.redMul(c);
                    m = i;
                  }
                  return r;
                };
                Red.prototype.invm = function invm(a) {
                  var inv = a._invmp(this.m);
                  if (inv.negative !== 0) {
                    inv.negative = 0;
                    return this.imod(inv).redNeg();
                  } else {
                    return this.imod(inv);
                  }
                };
                Red.prototype.pow = function pow(a, num) {
                  if (num.isZero())
                    return new BN(1).toRed(this);
                  if (num.cmpn(1) === 0)
                    return a.clone();
                  var windowSize = 4;
                  var wnd = new Array(1 << windowSize);
                  wnd[0] = new BN(1).toRed(this);
                  wnd[1] = a;
                  for (var i = 2; i < wnd.length; i++) {
                    wnd[i] = this.mul(wnd[i - 1], a);
                  }
                  var res = wnd[0];
                  var current = 0;
                  var currentLen = 0;
                  var start = num.bitLength() % 26;
                  if (start === 0) {
                    start = 26;
                  }
                  for (i = num.length - 1; i >= 0; i--) {
                    var word = num.words[i];
                    for (var j = start - 1; j >= 0; j--) {
                      var bit = word >> j & 1;
                      if (res !== wnd[0]) {
                        res = this.sqr(res);
                      }
                      if (bit === 0 && current === 0) {
                        currentLen = 0;
                        continue;
                      }
                      current <<= 1;
                      current |= bit;
                      currentLen++;
                      if (currentLen !== windowSize && (i !== 0 || j !== 0))
                        continue;
                      res = this.mul(res, wnd[current]);
                      currentLen = 0;
                      current = 0;
                    }
                    start = 26;
                  }
                  return res;
                };
                Red.prototype.convertTo = function convertTo(num) {
                  var r = num.umod(this.m);
                  return r === num ? r.clone() : r;
                };
                Red.prototype.convertFrom = function convertFrom(num) {
                  var res = num.clone();
                  res.red = null;
                  return res;
                };
                BN.mont = function mont(num) {
                  return new Mont(num);
                };
                function Mont(m) {
                  Red.call(this, m);
                  this.shift = this.m.bitLength();
                  if (this.shift % 26 !== 0) {
                    this.shift += 26 - this.shift % 26;
                  }
                  this.r = new BN(1).iushln(this.shift);
                  this.r2 = this.imod(this.r.sqr());
                  this.rinv = this.r._invmp(this.m);
                  this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                  this.minv = this.minv.umod(this.r);
                  this.minv = this.r.sub(this.minv);
                }
                inherits2(Mont, Red);
                Mont.prototype.convertTo = function convertTo(num) {
                  return this.imod(num.ushln(this.shift));
                };
                Mont.prototype.convertFrom = function convertFrom(num) {
                  var r = this.imod(num.mul(this.rinv));
                  r.red = null;
                  return r;
                };
                Mont.prototype.imul = function imul(a, b) {
                  if (a.isZero() || b.isZero()) {
                    a.words[0] = 0;
                    a.length = 1;
                    return a;
                  }
                  var t = a.imul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;
                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }
                  return res._forceRed(this);
                };
                Mont.prototype.mul = function mul(a, b) {
                  if (a.isZero() || b.isZero())
                    return new BN(0)._forceRed(this);
                  var t = a.mul(b);
                  var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                  var u = t.isub(c).iushrn(this.shift);
                  var res = u;
                  if (u.cmp(this.m) >= 0) {
                    res = u.isub(this.m);
                  } else if (u.cmpn(0) < 0) {
                    res = u.iadd(this.m);
                  }
                  return res._forceRed(this);
                };
                Mont.prototype.invm = function invm(a) {
                  var res = this.imod(a._invmp(this.m).mul(this.r2));
                  return res._forceRed(this);
                };
              })(typeof module === "undefined" || module, exports);
            }
          });

          // node_modules/minimalistic-assert/index.js
          var require_minimalistic_assert = __commonJS({
            "node_modules/minimalistic-assert/index.js"(exports, module) {
              module.exports = assert;
              function assert(val, msg) {
                if (!val)
                  throw new Error(msg || "Assertion failed");
              }
              assert.equal = function assertEqual(l, r, msg) {
                if (l != r)
                  throw new Error(msg || "Assertion failed: " + l + " != " + r);
              };
            }
          });

          // node_modules/minimalistic-crypto-utils/lib/utils.js
          var require_utils = __commonJS({
            "node_modules/minimalistic-crypto-utils/lib/utils.js"(exports) {
              "use strict";
              var utils = exports;
              function toArray2(msg, enc) {
                if (Array.isArray(msg))
                  return msg.slice();
                if (!msg)
                  return [];
                var res = [];
                if (typeof msg !== "string") {
                  for (var i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
                  return res;
                }
                if (enc === "hex") {
                  msg = msg.replace(/[^a-z0-9]+/ig, "");
                  if (msg.length % 2 !== 0)
                    msg = "0" + msg;
                  for (var i = 0; i < msg.length; i += 2)
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
                } else {
                  for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);
                    var hi = c >> 8;
                    var lo = c & 255;
                    if (hi)
                      res.push(hi, lo);
                    else
                      res.push(lo);
                  }
                }
                return res;
              }
              utils.toArray = toArray2;
              function zero2(word) {
                if (word.length === 1)
                  return "0" + word;
                else
                  return word;
              }
              utils.zero2 = zero2;
              function toHex(msg) {
                var res = "";
                for (var i = 0; i < msg.length; i++)
                  res += zero2(msg[i].toString(16));
                return res;
              }
              utils.toHex = toHex;
              utils.encode = function encode3(arr, enc) {
                if (enc === "hex")
                  return toHex(arr);
                else
                  return arr;
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/utils.js
          var require_utils2 = __commonJS({
            "node_modules/elliptic/lib/elliptic/utils.js"(exports) {
              "use strict";
              var utils = exports;
              var BN = require_bn();
              var minAssert = require_minimalistic_assert();
              var minUtils = require_utils();
              utils.assert = minAssert;
              utils.toArray = minUtils.toArray;
              utils.zero2 = minUtils.zero2;
              utils.toHex = minUtils.toHex;
              utils.encode = minUtils.encode;
              function getNAF(num, w, bits) {
                var naf = new Array(Math.max(num.bitLength(), bits) + 1);
                naf.fill(0);
                var ws = 1 << w + 1;
                var k = num.clone();
                for (var i = 0; i < naf.length; i++) {
                  var z;
                  var mod = k.andln(ws - 1);
                  if (k.isOdd()) {
                    if (mod > (ws >> 1) - 1)
                      z = (ws >> 1) - mod;
                    else
                      z = mod;
                    k.isubn(z);
                  } else {
                    z = 0;
                  }
                  naf[i] = z;
                  k.iushrn(1);
                }
                return naf;
              }
              utils.getNAF = getNAF;
              function getJSF(k1, k2) {
                var jsf = [
                  [],
                  []
                ];
                k1 = k1.clone();
                k2 = k2.clone();
                var d1 = 0;
                var d2 = 0;
                var m8;
                while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
                  var m14 = k1.andln(3) + d1 & 3;
                  var m24 = k2.andln(3) + d2 & 3;
                  if (m14 === 3)
                    m14 = -1;
                  if (m24 === 3)
                    m24 = -1;
                  var u1;
                  if ((m14 & 1) === 0) {
                    u1 = 0;
                  } else {
                    m8 = k1.andln(7) + d1 & 7;
                    if ((m8 === 3 || m8 === 5) && m24 === 2)
                      u1 = -m14;
                    else
                      u1 = m14;
                  }
                  jsf[0].push(u1);
                  var u2;
                  if ((m24 & 1) === 0) {
                    u2 = 0;
                  } else {
                    m8 = k2.andln(7) + d2 & 7;
                    if ((m8 === 3 || m8 === 5) && m14 === 2)
                      u2 = -m24;
                    else
                      u2 = m24;
                  }
                  jsf[1].push(u2);
                  if (2 * d1 === u1 + 1)
                    d1 = 1 - d1;
                  if (2 * d2 === u2 + 1)
                    d2 = 1 - d2;
                  k1.iushrn(1);
                  k2.iushrn(1);
                }
                return jsf;
              }
              utils.getJSF = getJSF;
              function cachedProperty(obj, name, computer) {
                var key = "_" + name;
                obj.prototype[name] = function cachedProperty2() {
                  return this[key] !== void 0 ? this[key] : this[key] = computer.call(this);
                };
              }
              utils.cachedProperty = cachedProperty;
              function parseBytes(bytes) {
                return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
              }
              utils.parseBytes = parseBytes;
              function intFromLE(bytes) {
                return new BN(bytes, "hex", "le");
              }
              utils.intFromLE = intFromLE;
            }
          });

          // (disabled):crypto
          var require_crypto = __commonJS({
            "(disabled):crypto"() {
            }
          });

          // node_modules/brorand/index.js
          var require_brorand = __commonJS({
            "node_modules/brorand/index.js"(exports, module) {
              var r;
              module.exports = function rand(len) {
                if (!r)
                  r = new Rand(null);
                return r.generate(len);
              };
              function Rand(rand) {
                this.rand = rand;
              }
              module.exports.Rand = Rand;
              Rand.prototype.generate = function generate(len) {
                return this._rand(len);
              };
              Rand.prototype._rand = function _rand(n) {
                if (this.rand.getBytes)
                  return this.rand.getBytes(n);
                var res = new Uint8Array(n);
                for (var i = 0; i < res.length; i++)
                  res[i] = this.rand.getByte();
                return res;
              };
              if (typeof self === "object") {
                if (self.crypto && self.crypto.getRandomValues) {
                  Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.crypto.getRandomValues(arr);
                    return arr;
                  };
                } else if (self.msCrypto && self.msCrypto.getRandomValues) {
                  Rand.prototype._rand = function _rand(n) {
                    var arr = new Uint8Array(n);
                    self.msCrypto.getRandomValues(arr);
                    return arr;
                  };
                } else if (typeof window === "object") {
                  Rand.prototype._rand = function () {
                    throw new Error("Not implemented yet");
                  };
                }
              } else {
                try {
                  crypto = require_crypto();
                  if (typeof crypto.randomBytes !== "function")
                    throw new Error("Not supported");
                  Rand.prototype._rand = function _rand(n) {
                    return crypto.randomBytes(n);
                  };
                } catch (e) {
                }
              }
              var crypto;
            }
          });

          // node_modules/elliptic/lib/elliptic/curve/base.js
          var require_base = __commonJS({
            "node_modules/elliptic/lib/elliptic/curve/base.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var utils = require_utils2();
              var getNAF = utils.getNAF;
              var getJSF = utils.getJSF;
              var assert = utils.assert;
              function BaseCurve(type, conf) {
                this.type = type;
                this.p = new BN(conf.p, 16);
                this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
                this.zero = new BN(0).toRed(this.red);
                this.one = new BN(1).toRed(this.red);
                this.two = new BN(2).toRed(this.red);
                this.n = conf.n && new BN(conf.n, 16);
                this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
                this._wnafT1 = new Array(4);
                this._wnafT2 = new Array(4);
                this._wnafT3 = new Array(4);
                this._wnafT4 = new Array(4);
                this._bitLength = this.n ? this.n.bitLength() : 0;
                var adjustCount = this.n && this.p.div(this.n);
                if (!adjustCount || adjustCount.cmpn(100) > 0) {
                  this.redN = null;
                } else {
                  this._maxwellTrick = true;
                  this.redN = this.n.toRed(this.red);
                }
              }
              module.exports = BaseCurve;
              BaseCurve.prototype.point = function point() {
                throw new Error("Not implemented");
              };
              BaseCurve.prototype.validate = function validate() {
                throw new Error("Not implemented");
              };
              BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                assert(p.precomputed);
                var doubles = p._getDoubles();
                var naf = getNAF(k, 1, this._bitLength);
                var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
                I /= 3;
                var repr = [];
                var j;
                var nafW;
                for (j = 0; j < naf.length; j += doubles.step) {
                  nafW = 0;
                  for (var l = j + doubles.step - 1; l >= j; l--)
                    nafW = (nafW << 1) + naf[l];
                  repr.push(nafW);
                }
                var a = this.jpoint(null, null, null);
                var b = this.jpoint(null, null, null);
                for (var i = I; i > 0; i--) {
                  for (j = 0; j < repr.length; j++) {
                    nafW = repr[j];
                    if (nafW === i)
                      b = b.mixedAdd(doubles.points[j]);
                    else if (nafW === -i)
                      b = b.mixedAdd(doubles.points[j].neg());
                  }
                  a = a.add(b);
                }
                return a.toP();
              };
              BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                var w = 4;
                var nafPoints = p._getNAFPoints(w);
                w = nafPoints.wnd;
                var wnd = nafPoints.points;
                var naf = getNAF(k, w, this._bitLength);
                var acc = this.jpoint(null, null, null);
                for (var i = naf.length - 1; i >= 0; i--) {
                  for (var l = 0; i >= 0 && naf[i] === 0; i--)
                    l++;
                  if (i >= 0)
                    l++;
                  acc = acc.dblp(l);
                  if (i < 0)
                    break;
                  var z = naf[i];
                  assert(z !== 0);
                  if (p.type === "affine") {
                    if (z > 0)
                      acc = acc.mixedAdd(wnd[z - 1 >> 1]);
                    else
                      acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
                  } else {
                    if (z > 0)
                      acc = acc.add(wnd[z - 1 >> 1]);
                    else
                      acc = acc.add(wnd[-z - 1 >> 1].neg());
                  }
                }
                return p.type === "affine" ? acc.toP() : acc;
              };
              BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
                var wndWidth = this._wnafT1;
                var wnd = this._wnafT2;
                var naf = this._wnafT3;
                var max = 0;
                var i;
                var j;
                var p;
                for (i = 0; i < len; i++) {
                  p = points[i];
                  var nafPoints = p._getNAFPoints(defW);
                  wndWidth[i] = nafPoints.wnd;
                  wnd[i] = nafPoints.points;
                }
                for (i = len - 1; i >= 1; i -= 2) {
                  var a = i - 1;
                  var b = i;
                  if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                    naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                    naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                    max = Math.max(naf[a].length, max);
                    max = Math.max(naf[b].length, max);
                    continue;
                  }
                  var comb = [
                    points[a],
                    /* 1 */
                    null,
                    /* 3 */
                    null,
                    /* 5 */
                    points[b]
                    /* 7 */
                  ];
                  if (points[a].y.cmp(points[b].y) === 0) {
                    comb[1] = points[a].add(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                  } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].add(points[b].neg());
                  } else {
                    comb[1] = points[a].toJ().mixedAdd(points[b]);
                    comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                  }
                  var index = [
                    -3,
                    /* -1 -1 */
                    -1,
                    /* -1 0 */
                    -5,
                    /* -1 1 */
                    -7,
                    /* 0 -1 */
                    0,
                    /* 0 0 */
                    7,
                    /* 0 1 */
                    5,
                    /* 1 -1 */
                    1,
                    /* 1 0 */
                    3
                    /* 1 1 */
                  ];
                  var jsf = getJSF(coeffs[a], coeffs[b]);
                  max = Math.max(jsf[0].length, max);
                  naf[a] = new Array(max);
                  naf[b] = new Array(max);
                  for (j = 0; j < max; j++) {
                    var ja = jsf[0][j] | 0;
                    var jb = jsf[1][j] | 0;
                    naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                    naf[b][j] = 0;
                    wnd[a] = comb;
                  }
                }
                var acc = this.jpoint(null, null, null);
                var tmp = this._wnafT4;
                for (i = max; i >= 0; i--) {
                  var k = 0;
                  while (i >= 0) {
                    var zero = true;
                    for (j = 0; j < len; j++) {
                      tmp[j] = naf[j][i] | 0;
                      if (tmp[j] !== 0)
                        zero = false;
                    }
                    if (!zero)
                      break;
                    k++;
                    i--;
                  }
                  if (i >= 0)
                    k++;
                  acc = acc.dblp(k);
                  if (i < 0)
                    break;
                  for (j = 0; j < len; j++) {
                    var z = tmp[j];
                    p;
                    if (z === 0)
                      continue;
                    else if (z > 0)
                      p = wnd[j][z - 1 >> 1];
                    else if (z < 0)
                      p = wnd[j][-z - 1 >> 1].neg();
                    if (p.type === "affine")
                      acc = acc.mixedAdd(p);
                    else
                      acc = acc.add(p);
                  }
                }
                for (i = 0; i < len; i++)
                  wnd[i] = null;
                if (jacobianResult)
                  return acc;
                else
                  return acc.toP();
              };
              function BasePoint(curve, type) {
                this.curve = curve;
                this.type = type;
                this.precomputed = null;
              }
              BaseCurve.BasePoint = BasePoint;
              BasePoint.prototype.eq = function eq() {
                throw new Error("Not implemented");
              };
              BasePoint.prototype.validate = function validate() {
                return this.curve.validate(this);
              };
              BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                bytes = utils.toArray(bytes, enc);
                var len = this.p.byteLength();
                if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
                  if (bytes[0] === 6)
                    assert(bytes[bytes.length - 1] % 2 === 0);
                  else if (bytes[0] === 7)
                    assert(bytes[bytes.length - 1] % 2 === 1);
                  var res = this.point(
                    bytes.slice(1, 1 + len),
                    bytes.slice(1 + len, 1 + 2 * len)
                  );
                  return res;
                } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) {
                  return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
                }
                throw new Error("Unknown point format");
              };
              BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
                return this.encode(enc, true);
              };
              BasePoint.prototype._encode = function _encode(compact) {
                var len = this.curve.p.byteLength();
                var x = this.getX().toArray("be", len);
                if (compact)
                  return [this.getY().isEven() ? 2 : 3].concat(x);
                return [4].concat(x, this.getY().toArray("be", len));
              };
              BasePoint.prototype.encode = function encode3(enc, compact) {
                return utils.encode(this._encode(compact), enc);
              };
              BasePoint.prototype.precompute = function precompute(power) {
                if (this.precomputed)
                  return this;
                var precomputed = {
                  doubles: null,
                  naf: null,
                  beta: null
                };
                precomputed.naf = this._getNAFPoints(8);
                precomputed.doubles = this._getDoubles(4, power);
                precomputed.beta = this._getBeta();
                this.precomputed = precomputed;
                return this;
              };
              BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                if (!this.precomputed)
                  return false;
                var doubles = this.precomputed.doubles;
                if (!doubles)
                  return false;
                return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
              };
              BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
                if (this.precomputed && this.precomputed.doubles)
                  return this.precomputed.doubles;
                var doubles = [this];
                var acc = this;
                for (var i = 0; i < power; i += step) {
                  for (var j = 0; j < step; j++)
                    acc = acc.dbl();
                  doubles.push(acc);
                }
                return {
                  step,
                  points: doubles
                };
              };
              BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
                if (this.precomputed && this.precomputed.naf)
                  return this.precomputed.naf;
                var res = [this];
                var max = (1 << wnd) - 1;
                var dbl = max === 1 ? null : this.dbl();
                for (var i = 1; i < max; i++)
                  res[i] = res[i - 1].add(dbl);
                return {
                  wnd,
                  points: res
                };
              };
              BasePoint.prototype._getBeta = function _getBeta() {
                return null;
              };
              BasePoint.prototype.dblp = function dblp(k) {
                var r = this;
                for (var i = 0; i < k; i++)
                  r = r.dbl();
                return r;
              };
            }
          });

          // node_modules/inherits/inherits_browser.js
          var require_inherits_browser = __commonJS({
            "node_modules/inherits/inherits_browser.js"(exports, module) {
              if (typeof Object.create === "function") {
                module.exports = function inherits2(ctor, superCtor) {
                  if (superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                      constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                      }
                    });
                  }
                };
              } else {
                module.exports = function inherits2(ctor, superCtor) {
                  if (superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function () {
                    };
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                  }
                };
              }
            }
          });

          // node_modules/elliptic/lib/elliptic/curve/short.js
          var require_short = __commonJS({
            "node_modules/elliptic/lib/elliptic/curve/short.js"(exports, module) {
              "use strict";
              var utils = require_utils2();
              var BN = require_bn();
              var inherits2 = require_inherits_browser();
              var Base = require_base();
              var assert = utils.assert;
              function ShortCurve(conf) {
                Base.call(this, "short", conf);
                this.a = new BN(conf.a, 16).toRed(this.red);
                this.b = new BN(conf.b, 16).toRed(this.red);
                this.tinv = this.two.redInvm();
                this.zeroA = this.a.fromRed().cmpn(0) === 0;
                this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
                this.endo = this._getEndomorphism(conf);
                this._endoWnafT1 = new Array(4);
                this._endoWnafT2 = new Array(4);
              }
              inherits2(ShortCurve, Base);
              module.exports = ShortCurve;
              ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
                if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                  return;
                var beta;
                var lambda;
                if (conf.beta) {
                  beta = new BN(conf.beta, 16).toRed(this.red);
                } else {
                  var betas = this._getEndoRoots(this.p);
                  beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                  beta = beta.toRed(this.red);
                }
                if (conf.lambda) {
                  lambda = new BN(conf.lambda, 16);
                } else {
                  var lambdas = this._getEndoRoots(this.n);
                  if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                    lambda = lambdas[0];
                  } else {
                    lambda = lambdas[1];
                    assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                  }
                }
                var basis;
                if (conf.basis) {
                  basis = conf.basis.map(function (vec) {
                    return {
                      a: new BN(vec.a, 16),
                      b: new BN(vec.b, 16)
                    };
                  });
                } else {
                  basis = this._getEndoBasis(lambda);
                }
                return {
                  beta,
                  lambda,
                  basis
                };
              };
              ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
                var red = num === this.p ? this.red : BN.mont(num);
                var tinv = new BN(2).toRed(red).redInvm();
                var ntinv = tinv.redNeg();
                var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
                var l1 = ntinv.redAdd(s).fromRed();
                var l2 = ntinv.redSub(s).fromRed();
                return [l1, l2];
              };
              ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
                var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
                var u = lambda;
                var v = this.n.clone();
                var x1 = new BN(1);
                var y1 = new BN(0);
                var x2 = new BN(0);
                var y2 = new BN(1);
                var a0;
                var b0;
                var a1;
                var b1;
                var a2;
                var b2;
                var prevR;
                var i = 0;
                var r;
                var x;
                while (u.cmpn(0) !== 0) {
                  var q = v.div(u);
                  r = v.sub(q.mul(u));
                  x = x2.sub(q.mul(x1));
                  var y = y2.sub(q.mul(y1));
                  if (!a1 && r.cmp(aprxSqrt) < 0) {
                    a0 = prevR.neg();
                    b0 = x1;
                    a1 = r.neg();
                    b1 = x;
                  } else if (a1 && ++i === 2) {
                    break;
                  }
                  prevR = r;
                  v = u;
                  u = r;
                  x2 = x1;
                  x1 = x;
                  y2 = y1;
                  y1 = y;
                }
                a2 = r.neg();
                b2 = x;
                var len1 = a1.sqr().add(b1.sqr());
                var len2 = a2.sqr().add(b2.sqr());
                if (len2.cmp(len1) >= 0) {
                  a2 = a0;
                  b2 = b0;
                }
                if (a1.negative) {
                  a1 = a1.neg();
                  b1 = b1.neg();
                }
                if (a2.negative) {
                  a2 = a2.neg();
                  b2 = b2.neg();
                }
                return [
                  { a: a1, b: b1 },
                  { a: a2, b: b2 }
                ];
              };
              ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                var basis = this.endo.basis;
                var v1 = basis[0];
                var v2 = basis[1];
                var c1 = v2.b.mul(k).divRound(this.n);
                var c2 = v1.b.neg().mul(k).divRound(this.n);
                var p1 = c1.mul(v1.a);
                var p2 = c2.mul(v2.a);
                var q1 = c1.mul(v1.b);
                var q2 = c2.mul(v2.b);
                var k1 = k.sub(p1).sub(p2);
                var k2 = q1.add(q2).neg();
                return { k1, k2 };
              };
              ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                x = new BN(x, 16);
                if (!x.red)
                  x = x.toRed(this.red);
                var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
                var y = y2.redSqrt();
                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                  throw new Error("invalid point");
                var isOdd = y.fromRed().isOdd();
                if (odd && !isOdd || !odd && isOdd)
                  y = y.redNeg();
                return this.point(x, y);
              };
              ShortCurve.prototype.validate = function validate(point) {
                if (point.inf)
                  return true;
                var x = point.x;
                var y = point.y;
                var ax = this.a.redMul(x);
                var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                return y.redSqr().redISub(rhs).cmpn(0) === 0;
              };
              ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                var npoints = this._endoWnafT1;
                var ncoeffs = this._endoWnafT2;
                for (var i = 0; i < points.length; i++) {
                  var split = this._endoSplit(coeffs[i]);
                  var p = points[i];
                  var beta = p._getBeta();
                  if (split.k1.negative) {
                    split.k1.ineg();
                    p = p.neg(true);
                  }
                  if (split.k2.negative) {
                    split.k2.ineg();
                    beta = beta.neg(true);
                  }
                  npoints[i * 2] = p;
                  npoints[i * 2 + 1] = beta;
                  ncoeffs[i * 2] = split.k1;
                  ncoeffs[i * 2 + 1] = split.k2;
                }
                var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
                for (var j = 0; j < i * 2; j++) {
                  npoints[j] = null;
                  ncoeffs[j] = null;
                }
                return res;
              };
              function Point(curve, x, y, isRed) {
                Base.BasePoint.call(this, curve, "affine");
                if (x === null && y === null) {
                  this.x = null;
                  this.y = null;
                  this.inf = true;
                } else {
                  this.x = new BN(x, 16);
                  this.y = new BN(y, 16);
                  if (isRed) {
                    this.x.forceRed(this.curve.red);
                    this.y.forceRed(this.curve.red);
                  }
                  if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                  if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                  this.inf = false;
                }
              }
              inherits2(Point, Base.BasePoint);
              ShortCurve.prototype.point = function point(x, y, isRed) {
                return new Point(this, x, y, isRed);
              };
              ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
                return Point.fromJSON(this, obj, red);
              };
              Point.prototype._getBeta = function _getBeta() {
                if (!this.curve.endo)
                  return;
                var pre = this.precomputed;
                if (pre && pre.beta)
                  return pre.beta;
                var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                if (pre) {
                  var curve = this.curve;
                  var endoMul = function (p) {
                    return curve.point(p.x.redMul(curve.endo.beta), p.y);
                  };
                  pre.beta = beta;
                  beta.precomputed = {
                    beta: null,
                    naf: pre.naf && {
                      wnd: pre.naf.wnd,
                      points: pre.naf.points.map(endoMul)
                    },
                    doubles: pre.doubles && {
                      step: pre.doubles.step,
                      points: pre.doubles.points.map(endoMul)
                    }
                  };
                }
                return beta;
              };
              Point.prototype.toJSON = function toJSON2() {
                if (!this.precomputed)
                  return [this.x, this.y];
                return [this.x, this.y, this.precomputed && {
                  doubles: this.precomputed.doubles && {
                    step: this.precomputed.doubles.step,
                    points: this.precomputed.doubles.points.slice(1)
                  },
                  naf: this.precomputed.naf && {
                    wnd: this.precomputed.naf.wnd,
                    points: this.precomputed.naf.points.slice(1)
                  }
                }];
              };
              Point.fromJSON = function fromJSON(curve, obj, red) {
                if (typeof obj === "string")
                  obj = JSON.parse(obj);
                var res = curve.point(obj[0], obj[1], red);
                if (!obj[2])
                  return res;
                function obj2point(obj2) {
                  return curve.point(obj2[0], obj2[1], red);
                }
                var pre = obj[2];
                res.precomputed = {
                  beta: null,
                  doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: [res].concat(pre.doubles.points.map(obj2point))
                  },
                  naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: [res].concat(pre.naf.points.map(obj2point))
                  }
                };
                return res;
              };
              Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                  return "<EC Point Infinity>";
                return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
              };
              Point.prototype.isInfinity = function isInfinity() {
                return this.inf;
              };
              Point.prototype.add = function add(p) {
                if (this.inf)
                  return p;
                if (p.inf)
                  return this;
                if (this.eq(p))
                  return this.dbl();
                if (this.neg().eq(p))
                  return this.curve.point(null, null);
                if (this.x.cmp(p.x) === 0)
                  return this.curve.point(null, null);
                var c = this.y.redSub(p.y);
                if (c.cmpn(0) !== 0)
                  c = c.redMul(this.x.redSub(p.x).redInvm());
                var nx = c.redSqr().redISub(this.x).redISub(p.x);
                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                return this.curve.point(nx, ny);
              };
              Point.prototype.dbl = function dbl() {
                if (this.inf)
                  return this;
                var ys1 = this.y.redAdd(this.y);
                if (ys1.cmpn(0) === 0)
                  return this.curve.point(null, null);
                var a = this.curve.a;
                var x2 = this.x.redSqr();
                var dyinv = ys1.redInvm();
                var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
                var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                return this.curve.point(nx, ny);
              };
              Point.prototype.getX = function getX() {
                return this.x.fromRed();
              };
              Point.prototype.getY = function getY() {
                return this.y.fromRed();
              };
              Point.prototype.mul = function mul(k) {
                k = new BN(k, 16);
                if (this.isInfinity())
                  return this;
                else if (this._hasDoubles(k))
                  return this.curve._fixedNafMul(this, k);
                else if (this.curve.endo)
                  return this.curve._endoWnafMulAdd([this], [k]);
                else
                  return this.curve._wnafMul(this, k);
              };
              Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                var points = [this, p2];
                var coeffs = [k1, k2];
                if (this.curve.endo)
                  return this.curve._endoWnafMulAdd(points, coeffs);
                else
                  return this.curve._wnafMulAdd(1, points, coeffs, 2);
              };
              Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                var points = [this, p2];
                var coeffs = [k1, k2];
                if (this.curve.endo)
                  return this.curve._endoWnafMulAdd(points, coeffs, true);
                else
                  return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
              };
              Point.prototype.eq = function eq(p) {
                return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
              };
              Point.prototype.neg = function neg(_precompute) {
                if (this.inf)
                  return this;
                var res = this.curve.point(this.x, this.y.redNeg());
                if (_precompute && this.precomputed) {
                  var pre = this.precomputed;
                  var negate = function (p) {
                    return p.neg();
                  };
                  res.precomputed = {
                    naf: pre.naf && {
                      wnd: pre.naf.wnd,
                      points: pre.naf.points.map(negate)
                    },
                    doubles: pre.doubles && {
                      step: pre.doubles.step,
                      points: pre.doubles.points.map(negate)
                    }
                  };
                }
                return res;
              };
              Point.prototype.toJ = function toJ() {
                if (this.inf)
                  return this.curve.jpoint(null, null, null);
                var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                return res;
              };
              function JPoint(curve, x, y, z) {
                Base.BasePoint.call(this, curve, "jacobian");
                if (x === null && y === null && z === null) {
                  this.x = this.curve.one;
                  this.y = this.curve.one;
                  this.z = new BN(0);
                } else {
                  this.x = new BN(x, 16);
                  this.y = new BN(y, 16);
                  this.z = new BN(z, 16);
                }
                if (!this.x.red)
                  this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                  this.y = this.y.toRed(this.curve.red);
                if (!this.z.red)
                  this.z = this.z.toRed(this.curve.red);
                this.zOne = this.z === this.curve.one;
              }
              inherits2(JPoint, Base.BasePoint);
              ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                return new JPoint(this, x, y, z);
              };
              JPoint.prototype.toP = function toP() {
                if (this.isInfinity())
                  return this.curve.point(null, null);
                var zinv = this.z.redInvm();
                var zinv2 = zinv.redSqr();
                var ax = this.x.redMul(zinv2);
                var ay = this.y.redMul(zinv2).redMul(zinv);
                return this.curve.point(ax, ay);
              };
              JPoint.prototype.neg = function neg() {
                return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
              };
              JPoint.prototype.add = function add(p) {
                if (this.isInfinity())
                  return p;
                if (p.isInfinity())
                  return this;
                var pz2 = p.z.redSqr();
                var z2 = this.z.redSqr();
                var u1 = this.x.redMul(pz2);
                var u2 = p.x.redMul(z2);
                var s1 = this.y.redMul(pz2.redMul(p.z));
                var s2 = p.y.redMul(z2.redMul(this.z));
                var h = u1.redSub(u2);
                var r = s1.redSub(s2);
                if (h.cmpn(0) === 0) {
                  if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                  else
                    return this.dbl();
                }
                var h2 = h.redSqr();
                var h3 = h2.redMul(h);
                var v = u1.redMul(h2);
                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                var nz = this.z.redMul(p.z).redMul(h);
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype.mixedAdd = function mixedAdd(p) {
                if (this.isInfinity())
                  return p.toJ();
                if (p.isInfinity())
                  return this;
                var z2 = this.z.redSqr();
                var u1 = this.x;
                var u2 = p.x.redMul(z2);
                var s1 = this.y;
                var s2 = p.y.redMul(z2).redMul(this.z);
                var h = u1.redSub(u2);
                var r = s1.redSub(s2);
                if (h.cmpn(0) === 0) {
                  if (r.cmpn(0) !== 0)
                    return this.curve.jpoint(null, null, null);
                  else
                    return this.dbl();
                }
                var h2 = h.redSqr();
                var h3 = h2.redMul(h);
                var v = u1.redMul(h2);
                var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                var nz = this.z.redMul(h);
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype.dblp = function dblp(pow) {
                if (pow === 0)
                  return this;
                if (this.isInfinity())
                  return this;
                if (!pow)
                  return this.dbl();
                var i;
                if (this.curve.zeroA || this.curve.threeA) {
                  var r = this;
                  for (i = 0; i < pow; i++)
                    r = r.dbl();
                  return r;
                }
                var a = this.curve.a;
                var tinv = this.curve.tinv;
                var jx = this.x;
                var jy = this.y;
                var jz = this.z;
                var jz4 = jz.redSqr().redSqr();
                var jyd = jy.redAdd(jy);
                for (i = 0; i < pow; i++) {
                  var jx2 = jx.redSqr();
                  var jyd2 = jyd.redSqr();
                  var jyd4 = jyd2.redSqr();
                  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                  var t1 = jx.redMul(jyd2);
                  var nx = c.redSqr().redISub(t1.redAdd(t1));
                  var t2 = t1.redISub(nx);
                  var dny = c.redMul(t2);
                  dny = dny.redIAdd(dny).redISub(jyd4);
                  var nz = jyd.redMul(jz);
                  if (i + 1 < pow)
                    jz4 = jz4.redMul(jyd4);
                  jx = nx;
                  jz = nz;
                  jyd = dny;
                }
                return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
              };
              JPoint.prototype.dbl = function dbl() {
                if (this.isInfinity())
                  return this;
                if (this.curve.zeroA)
                  return this._zeroDbl();
                else if (this.curve.threeA)
                  return this._threeDbl();
                else
                  return this._dbl();
              };
              JPoint.prototype._zeroDbl = function _zeroDbl() {
                var nx;
                var ny;
                var nz;
                if (this.zOne) {
                  var xx = this.x.redSqr();
                  var yy = this.y.redSqr();
                  var yyyy = yy.redSqr();
                  var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                  s = s.redIAdd(s);
                  var m = xx.redAdd(xx).redIAdd(xx);
                  var t = m.redSqr().redISub(s).redISub(s);
                  var yyyy8 = yyyy.redIAdd(yyyy);
                  yyyy8 = yyyy8.redIAdd(yyyy8);
                  yyyy8 = yyyy8.redIAdd(yyyy8);
                  nx = t;
                  ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                  nz = this.y.redAdd(this.y);
                } else {
                  var a = this.x.redSqr();
                  var b = this.y.redSqr();
                  var c = b.redSqr();
                  var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                  d = d.redIAdd(d);
                  var e = a.redAdd(a).redIAdd(a);
                  var f = e.redSqr();
                  var c8 = c.redIAdd(c);
                  c8 = c8.redIAdd(c8);
                  c8 = c8.redIAdd(c8);
                  nx = f.redISub(d).redISub(d);
                  ny = e.redMul(d.redISub(nx)).redISub(c8);
                  nz = this.y.redMul(this.z);
                  nz = nz.redIAdd(nz);
                }
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype._threeDbl = function _threeDbl() {
                var nx;
                var ny;
                var nz;
                if (this.zOne) {
                  var xx = this.x.redSqr();
                  var yy = this.y.redSqr();
                  var yyyy = yy.redSqr();
                  var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                  s = s.redIAdd(s);
                  var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                  var t = m.redSqr().redISub(s).redISub(s);
                  nx = t;
                  var yyyy8 = yyyy.redIAdd(yyyy);
                  yyyy8 = yyyy8.redIAdd(yyyy8);
                  yyyy8 = yyyy8.redIAdd(yyyy8);
                  ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                  nz = this.y.redAdd(this.y);
                } else {
                  var delta = this.z.redSqr();
                  var gamma = this.y.redSqr();
                  var beta = this.x.redMul(gamma);
                  var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                  alpha = alpha.redAdd(alpha).redIAdd(alpha);
                  var beta4 = beta.redIAdd(beta);
                  beta4 = beta4.redIAdd(beta4);
                  var beta8 = beta4.redAdd(beta4);
                  nx = alpha.redSqr().redISub(beta8);
                  nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                  var ggamma8 = gamma.redSqr();
                  ggamma8 = ggamma8.redIAdd(ggamma8);
                  ggamma8 = ggamma8.redIAdd(ggamma8);
                  ggamma8 = ggamma8.redIAdd(ggamma8);
                  ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                }
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype._dbl = function _dbl() {
                var a = this.curve.a;
                var jx = this.x;
                var jy = this.y;
                var jz = this.z;
                var jz4 = jz.redSqr().redSqr();
                var jx2 = jx.redSqr();
                var jy2 = jy.redSqr();
                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                var jxd4 = jx.redAdd(jx);
                jxd4 = jxd4.redIAdd(jxd4);
                var t1 = jxd4.redMul(jy2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);
                var jyd8 = jy2.redSqr();
                jyd8 = jyd8.redIAdd(jyd8);
                jyd8 = jyd8.redIAdd(jyd8);
                jyd8 = jyd8.redIAdd(jyd8);
                var ny = c.redMul(t2).redISub(jyd8);
                var nz = jy.redAdd(jy).redMul(jz);
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype.trpl = function trpl() {
                if (!this.curve.zeroA)
                  return this.dbl().add(this);
                var xx = this.x.redSqr();
                var yy = this.y.redSqr();
                var zz = this.z.redSqr();
                var yyyy = yy.redSqr();
                var m = xx.redAdd(xx).redIAdd(xx);
                var mm = m.redSqr();
                var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                e = e.redIAdd(e);
                e = e.redAdd(e).redIAdd(e);
                e = e.redISub(mm);
                var ee = e.redSqr();
                var t = yyyy.redIAdd(yyyy);
                t = t.redIAdd(t);
                t = t.redIAdd(t);
                t = t.redIAdd(t);
                var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
                var yyu4 = yy.redMul(u);
                yyu4 = yyu4.redIAdd(yyu4);
                yyu4 = yyu4.redIAdd(yyu4);
                var nx = this.x.redMul(ee).redISub(yyu4);
                nx = nx.redIAdd(nx);
                nx = nx.redIAdd(nx);
                var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
                ny = ny.redIAdd(ny);
                ny = ny.redIAdd(ny);
                ny = ny.redIAdd(ny);
                var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
                return this.curve.jpoint(nx, ny, nz);
              };
              JPoint.prototype.mul = function mul(k, kbase) {
                k = new BN(k, kbase);
                return this.curve._wnafMul(this, k);
              };
              JPoint.prototype.eq = function eq(p) {
                if (p.type === "affine")
                  return this.eq(p.toJ());
                if (this === p)
                  return true;
                var z2 = this.z.redSqr();
                var pz2 = p.z.redSqr();
                if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                  return false;
                var z3 = z2.redMul(this.z);
                var pz3 = pz2.redMul(p.z);
                return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
              };
              JPoint.prototype.eqXToP = function eqXToP(x) {
                var zs = this.z.redSqr();
                var rx = x.toRed(this.curve.red).redMul(zs);
                if (this.x.cmp(rx) === 0)
                  return true;
                var xc = x.clone();
                var t = this.curve.redN.redMul(zs);
                for (; ;) {
                  xc.iadd(this.curve.n);
                  if (xc.cmp(this.curve.p) >= 0)
                    return false;
                  rx.redIAdd(t);
                  if (this.x.cmp(rx) === 0)
                    return true;
                }
              };
              JPoint.prototype.inspect = function inspect() {
                if (this.isInfinity())
                  return "<EC JPoint Infinity>";
                return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
              };
              JPoint.prototype.isInfinity = function isInfinity() {
                return this.z.cmpn(0) === 0;
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/curve/mont.js
          var require_mont = __commonJS({
            "node_modules/elliptic/lib/elliptic/curve/mont.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var inherits2 = require_inherits_browser();
              var Base = require_base();
              var utils = require_utils2();
              function MontCurve(conf) {
                Base.call(this, "mont", conf);
                this.a = new BN(conf.a, 16).toRed(this.red);
                this.b = new BN(conf.b, 16).toRed(this.red);
                this.i4 = new BN(4).toRed(this.red).redInvm();
                this.two = new BN(2).toRed(this.red);
                this.a24 = this.i4.redMul(this.a.redAdd(this.two));
              }
              inherits2(MontCurve, Base);
              module.exports = MontCurve;
              MontCurve.prototype.validate = function validate(point) {
                var x = point.normalize().x;
                var x2 = x.redSqr();
                var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
                var y = rhs.redSqrt();
                return y.redSqr().cmp(rhs) === 0;
              };
              function Point(curve, x, z) {
                Base.BasePoint.call(this, curve, "projective");
                if (x === null && z === null) {
                  this.x = this.curve.one;
                  this.z = this.curve.zero;
                } else {
                  this.x = new BN(x, 16);
                  this.z = new BN(z, 16);
                  if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                  if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
                }
              }
              inherits2(Point, Base.BasePoint);
              MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                return this.point(utils.toArray(bytes, enc), 1);
              };
              MontCurve.prototype.point = function point(x, z) {
                return new Point(this, x, z);
              };
              MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                return Point.fromJSON(this, obj);
              };
              Point.prototype.precompute = function precompute() {
              };
              Point.prototype._encode = function _encode() {
                return this.getX().toArray("be", this.curve.p.byteLength());
              };
              Point.fromJSON = function fromJSON(curve, obj) {
                return new Point(curve, obj[0], obj[1] || curve.one);
              };
              Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                  return "<EC Point Infinity>";
                return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
              };
              Point.prototype.isInfinity = function isInfinity() {
                return this.z.cmpn(0) === 0;
              };
              Point.prototype.dbl = function dbl() {
                var a = this.x.redAdd(this.z);
                var aa = a.redSqr();
                var b = this.x.redSub(this.z);
                var bb = b.redSqr();
                var c = aa.redSub(bb);
                var nx = aa.redMul(bb);
                var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
                return this.curve.point(nx, nz);
              };
              Point.prototype.add = function add() {
                throw new Error("Not supported on Montgomery curve");
              };
              Point.prototype.diffAdd = function diffAdd(p, diff) {
                var a = this.x.redAdd(this.z);
                var b = this.x.redSub(this.z);
                var c = p.x.redAdd(p.z);
                var d = p.x.redSub(p.z);
                var da = d.redMul(a);
                var cb = c.redMul(b);
                var nx = diff.z.redMul(da.redAdd(cb).redSqr());
                var nz = diff.x.redMul(da.redISub(cb).redSqr());
                return this.curve.point(nx, nz);
              };
              Point.prototype.mul = function mul(k) {
                var t = k.clone();
                var a = this;
                var b = this.curve.point(null, null);
                var c = this;
                for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
                  bits.push(t.andln(1));
                for (var i = bits.length - 1; i >= 0; i--) {
                  if (bits[i] === 0) {
                    a = a.diffAdd(b, c);
                    b = b.dbl();
                  } else {
                    b = a.diffAdd(b, c);
                    a = a.dbl();
                  }
                }
                return b;
              };
              Point.prototype.mulAdd = function mulAdd() {
                throw new Error("Not supported on Montgomery curve");
              };
              Point.prototype.jumlAdd = function jumlAdd() {
                throw new Error("Not supported on Montgomery curve");
              };
              Point.prototype.eq = function eq(other) {
                return this.getX().cmp(other.getX()) === 0;
              };
              Point.prototype.normalize = function normalize() {
                this.x = this.x.redMul(this.z.redInvm());
                this.z = this.curve.one;
                return this;
              };
              Point.prototype.getX = function getX() {
                this.normalize();
                return this.x.fromRed();
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/curve/edwards.js
          var require_edwards = __commonJS({
            "node_modules/elliptic/lib/elliptic/curve/edwards.js"(exports, module) {
              "use strict";
              var utils = require_utils2();
              var BN = require_bn();
              var inherits2 = require_inherits_browser();
              var Base = require_base();
              var assert = utils.assert;
              function EdwardsCurve(conf) {
                this.twisted = (conf.a | 0) !== 1;
                this.mOneA = this.twisted && (conf.a | 0) === -1;
                this.extended = this.mOneA;
                Base.call(this, "edwards", conf);
                this.a = new BN(conf.a, 16).umod(this.red.m);
                this.a = this.a.toRed(this.red);
                this.c = new BN(conf.c, 16).toRed(this.red);
                this.c2 = this.c.redSqr();
                this.d = new BN(conf.d, 16).toRed(this.red);
                this.dd = this.d.redAdd(this.d);
                assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
                this.oneC = (conf.c | 0) === 1;
              }
              inherits2(EdwardsCurve, Base);
              module.exports = EdwardsCurve;
              EdwardsCurve.prototype._mulA = function _mulA(num) {
                if (this.mOneA)
                  return num.redNeg();
                else
                  return this.a.redMul(num);
              };
              EdwardsCurve.prototype._mulC = function _mulC(num) {
                if (this.oneC)
                  return num;
                else
                  return this.c.redMul(num);
              };
              EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
                return this.point(x, y, z, t);
              };
              EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
                x = new BN(x, 16);
                if (!x.red)
                  x = x.toRed(this.red);
                var x2 = x.redSqr();
                var rhs = this.c2.redSub(this.a.redMul(x2));
                var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
                var y2 = rhs.redMul(lhs.redInvm());
                var y = y2.redSqrt();
                if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                  throw new Error("invalid point");
                var isOdd = y.fromRed().isOdd();
                if (odd && !isOdd || !odd && isOdd)
                  y = y.redNeg();
                return this.point(x, y);
              };
              EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
                y = new BN(y, 16);
                if (!y.red)
                  y = y.toRed(this.red);
                var y2 = y.redSqr();
                var lhs = y2.redSub(this.c2);
                var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
                var x2 = lhs.redMul(rhs.redInvm());
                if (x2.cmp(this.zero) === 0) {
                  if (odd)
                    throw new Error("invalid point");
                  else
                    return this.point(this.zero, y);
                }
                var x = x2.redSqrt();
                if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
                  throw new Error("invalid point");
                if (x.fromRed().isOdd() !== odd)
                  x = x.redNeg();
                return this.point(x, y);
              };
              EdwardsCurve.prototype.validate = function validate(point) {
                if (point.isInfinity())
                  return true;
                point.normalize();
                var x2 = point.x.redSqr();
                var y2 = point.y.redSqr();
                var lhs = x2.redMul(this.a).redAdd(y2);
                var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
                return lhs.cmp(rhs) === 0;
              };
              function Point(curve, x, y, z, t) {
                Base.BasePoint.call(this, curve, "projective");
                if (x === null && y === null && z === null) {
                  this.x = this.curve.zero;
                  this.y = this.curve.one;
                  this.z = this.curve.one;
                  this.t = this.curve.zero;
                  this.zOne = true;
                } else {
                  this.x = new BN(x, 16);
                  this.y = new BN(y, 16);
                  this.z = z ? new BN(z, 16) : this.curve.one;
                  this.t = t && new BN(t, 16);
                  if (!this.x.red)
                    this.x = this.x.toRed(this.curve.red);
                  if (!this.y.red)
                    this.y = this.y.toRed(this.curve.red);
                  if (!this.z.red)
                    this.z = this.z.toRed(this.curve.red);
                  if (this.t && !this.t.red)
                    this.t = this.t.toRed(this.curve.red);
                  this.zOne = this.z === this.curve.one;
                  if (this.curve.extended && !this.t) {
                    this.t = this.x.redMul(this.y);
                    if (!this.zOne)
                      this.t = this.t.redMul(this.z.redInvm());
                  }
                }
              }
              inherits2(Point, Base.BasePoint);
              EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                return Point.fromJSON(this, obj);
              };
              EdwardsCurve.prototype.point = function point(x, y, z, t) {
                return new Point(this, x, y, z, t);
              };
              Point.fromJSON = function fromJSON(curve, obj) {
                return new Point(curve, obj[0], obj[1], obj[2]);
              };
              Point.prototype.inspect = function inspect() {
                if (this.isInfinity())
                  return "<EC Point Infinity>";
                return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
              };
              Point.prototype.isInfinity = function isInfinity() {
                return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
              };
              Point.prototype._extDbl = function _extDbl() {
                var a = this.x.redSqr();
                var b = this.y.redSqr();
                var c = this.z.redSqr();
                c = c.redIAdd(c);
                var d = this.curve._mulA(a);
                var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
                var g = d.redAdd(b);
                var f = g.redSub(c);
                var h = d.redSub(b);
                var nx = e.redMul(f);
                var ny = g.redMul(h);
                var nt = e.redMul(h);
                var nz = f.redMul(g);
                return this.curve.point(nx, ny, nz, nt);
              };
              Point.prototype._projDbl = function _projDbl() {
                var b = this.x.redAdd(this.y).redSqr();
                var c = this.x.redSqr();
                var d = this.y.redSqr();
                var nx;
                var ny;
                var nz;
                var e;
                var h;
                var j;
                if (this.curve.twisted) {
                  e = this.curve._mulA(c);
                  var f = e.redAdd(d);
                  if (this.zOne) {
                    nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
                    ny = f.redMul(e.redSub(d));
                    nz = f.redSqr().redSub(f).redSub(f);
                  } else {
                    h = this.z.redSqr();
                    j = f.redSub(h).redISub(h);
                    nx = b.redSub(c).redISub(d).redMul(j);
                    ny = f.redMul(e.redSub(d));
                    nz = f.redMul(j);
                  }
                } else {
                  e = c.redAdd(d);
                  h = this.curve._mulC(this.z).redSqr();
                  j = e.redSub(h).redSub(h);
                  nx = this.curve._mulC(b.redISub(e)).redMul(j);
                  ny = this.curve._mulC(e).redMul(c.redISub(d));
                  nz = e.redMul(j);
                }
                return this.curve.point(nx, ny, nz);
              };
              Point.prototype.dbl = function dbl() {
                if (this.isInfinity())
                  return this;
                if (this.curve.extended)
                  return this._extDbl();
                else
                  return this._projDbl();
              };
              Point.prototype._extAdd = function _extAdd(p) {
                var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
                var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
                var c = this.t.redMul(this.curve.dd).redMul(p.t);
                var d = this.z.redMul(p.z.redAdd(p.z));
                var e = b.redSub(a);
                var f = d.redSub(c);
                var g = d.redAdd(c);
                var h = b.redAdd(a);
                var nx = e.redMul(f);
                var ny = g.redMul(h);
                var nt = e.redMul(h);
                var nz = f.redMul(g);
                return this.curve.point(nx, ny, nz, nt);
              };
              Point.prototype._projAdd = function _projAdd(p) {
                var a = this.z.redMul(p.z);
                var b = a.redSqr();
                var c = this.x.redMul(p.x);
                var d = this.y.redMul(p.y);
                var e = this.curve.d.redMul(c).redMul(d);
                var f = b.redSub(e);
                var g = b.redAdd(e);
                var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
                var nx = a.redMul(f).redMul(tmp);
                var ny;
                var nz;
                if (this.curve.twisted) {
                  ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
                  nz = f.redMul(g);
                } else {
                  ny = a.redMul(g).redMul(d.redSub(c));
                  nz = this.curve._mulC(f).redMul(g);
                }
                return this.curve.point(nx, ny, nz);
              };
              Point.prototype.add = function add(p) {
                if (this.isInfinity())
                  return p;
                if (p.isInfinity())
                  return this;
                if (this.curve.extended)
                  return this._extAdd(p);
                else
                  return this._projAdd(p);
              };
              Point.prototype.mul = function mul(k) {
                if (this._hasDoubles(k))
                  return this.curve._fixedNafMul(this, k);
                else
                  return this.curve._wnafMul(this, k);
              };
              Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
              };
              Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
                return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
              };
              Point.prototype.normalize = function normalize() {
                if (this.zOne)
                  return this;
                var zi = this.z.redInvm();
                this.x = this.x.redMul(zi);
                this.y = this.y.redMul(zi);
                if (this.t)
                  this.t = this.t.redMul(zi);
                this.z = this.curve.one;
                this.zOne = true;
                return this;
              };
              Point.prototype.neg = function neg() {
                return this.curve.point(
                  this.x.redNeg(),
                  this.y,
                  this.z,
                  this.t && this.t.redNeg()
                );
              };
              Point.prototype.getX = function getX() {
                this.normalize();
                return this.x.fromRed();
              };
              Point.prototype.getY = function getY() {
                this.normalize();
                return this.y.fromRed();
              };
              Point.prototype.eq = function eq(other) {
                return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
              };
              Point.prototype.eqXToP = function eqXToP(x) {
                var rx = x.toRed(this.curve.red).redMul(this.z);
                if (this.x.cmp(rx) === 0)
                  return true;
                var xc = x.clone();
                var t = this.curve.redN.redMul(this.z);
                for (; ;) {
                  xc.iadd(this.curve.n);
                  if (xc.cmp(this.curve.p) >= 0)
                    return false;
                  rx.redIAdd(t);
                  if (this.x.cmp(rx) === 0)
                    return true;
                }
              };
              Point.prototype.toP = Point.prototype.normalize;
              Point.prototype.mixedAdd = Point.prototype.add;
            }
          });

          // node_modules/elliptic/lib/elliptic/curve/index.js
          var require_curve = __commonJS({
            "node_modules/elliptic/lib/elliptic/curve/index.js"(exports) {
              "use strict";
              var curve = exports;
              curve.base = require_base();
              curve.short = require_short();
              curve.mont = require_mont();
              curve.edwards = require_edwards();
            }
          });

          // node_modules/hash.js/lib/hash/utils.js
          var require_utils3 = __commonJS({
            "node_modules/hash.js/lib/hash/utils.js"(exports) {
              "use strict";
              var assert = require_minimalistic_assert();
              var inherits2 = require_inherits_browser();
              exports.inherits = inherits2;
              function isSurrogatePair(msg, i) {
                if ((msg.charCodeAt(i) & 64512) !== 55296) {
                  return false;
                }
                if (i < 0 || i + 1 >= msg.length) {
                  return false;
                }
                return (msg.charCodeAt(i + 1) & 64512) === 56320;
              }
              function toArray2(msg, enc) {
                if (Array.isArray(msg))
                  return msg.slice();
                if (!msg)
                  return [];
                var res = [];
                if (typeof msg === "string") {
                  if (!enc) {
                    var p = 0;
                    for (var i = 0; i < msg.length; i++) {
                      var c = msg.charCodeAt(i);
                      if (c < 128) {
                        res[p++] = c;
                      } else if (c < 2048) {
                        res[p++] = c >> 6 | 192;
                        res[p++] = c & 63 | 128;
                      } else if (isSurrogatePair(msg, i)) {
                        c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                        res[p++] = c >> 18 | 240;
                        res[p++] = c >> 12 & 63 | 128;
                        res[p++] = c >> 6 & 63 | 128;
                        res[p++] = c & 63 | 128;
                      } else {
                        res[p++] = c >> 12 | 224;
                        res[p++] = c >> 6 & 63 | 128;
                        res[p++] = c & 63 | 128;
                      }
                    }
                  } else if (enc === "hex") {
                    msg = msg.replace(/[^a-z0-9]+/ig, "");
                    if (msg.length % 2 !== 0)
                      msg = "0" + msg;
                    for (i = 0; i < msg.length; i += 2)
                      res.push(parseInt(msg[i] + msg[i + 1], 16));
                  }
                } else {
                  for (i = 0; i < msg.length; i++)
                    res[i] = msg[i] | 0;
                }
                return res;
              }
              exports.toArray = toArray2;
              function toHex(msg) {
                var res = "";
                for (var i = 0; i < msg.length; i++)
                  res += zero2(msg[i].toString(16));
                return res;
              }
              exports.toHex = toHex;
              function htonl(w) {
                var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
                return res >>> 0;
              }
              exports.htonl = htonl;
              function toHex32(msg, endian) {
                var res = "";
                for (var i = 0; i < msg.length; i++) {
                  var w = msg[i];
                  if (endian === "little")
                    w = htonl(w);
                  res += zero8(w.toString(16));
                }
                return res;
              }
              exports.toHex32 = toHex32;
              function zero2(word) {
                if (word.length === 1)
                  return "0" + word;
                else
                  return word;
              }
              exports.zero2 = zero2;
              function zero8(word) {
                if (word.length === 7)
                  return "0" + word;
                else if (word.length === 6)
                  return "00" + word;
                else if (word.length === 5)
                  return "000" + word;
                else if (word.length === 4)
                  return "0000" + word;
                else if (word.length === 3)
                  return "00000" + word;
                else if (word.length === 2)
                  return "000000" + word;
                else if (word.length === 1)
                  return "0000000" + word;
                else
                  return word;
              }
              exports.zero8 = zero8;
              function join32(msg, start, end, endian) {
                var len = end - start;
                assert(len % 4 === 0);
                var res = new Array(len / 4);
                for (var i = 0, k = start; i < res.length; i++, k += 4) {
                  var w;
                  if (endian === "big")
                    w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
                  else
                    w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
                  res[i] = w >>> 0;
                }
                return res;
              }
              exports.join32 = join32;
              function split32(msg, endian) {
                var res = new Array(msg.length * 4);
                for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                  var m = msg[i];
                  if (endian === "big") {
                    res[k] = m >>> 24;
                    res[k + 1] = m >>> 16 & 255;
                    res[k + 2] = m >>> 8 & 255;
                    res[k + 3] = m & 255;
                  } else {
                    res[k + 3] = m >>> 24;
                    res[k + 2] = m >>> 16 & 255;
                    res[k + 1] = m >>> 8 & 255;
                    res[k] = m & 255;
                  }
                }
                return res;
              }
              exports.split32 = split32;
              function rotr32(w, b) {
                return w >>> b | w << 32 - b;
              }
              exports.rotr32 = rotr32;
              function rotl32(w, b) {
                return w << b | w >>> 32 - b;
              }
              exports.rotl32 = rotl32;
              function sum32(a, b) {
                return a + b >>> 0;
              }
              exports.sum32 = sum32;
              function sum32_3(a, b, c) {
                return a + b + c >>> 0;
              }
              exports.sum32_3 = sum32_3;
              function sum32_4(a, b, c, d) {
                return a + b + c + d >>> 0;
              }
              exports.sum32_4 = sum32_4;
              function sum32_5(a, b, c, d, e) {
                return a + b + c + d + e >>> 0;
              }
              exports.sum32_5 = sum32_5;
              function sum64(buf, pos, ah, al) {
                var bh = buf[pos];
                var bl = buf[pos + 1];
                var lo = al + bl >>> 0;
                var hi = (lo < al ? 1 : 0) + ah + bh;
                buf[pos] = hi >>> 0;
                buf[pos + 1] = lo;
              }
              exports.sum64 = sum64;
              function sum64_hi(ah, al, bh, bl) {
                var lo = al + bl >>> 0;
                var hi = (lo < al ? 1 : 0) + ah + bh;
                return hi >>> 0;
              }
              exports.sum64_hi = sum64_hi;
              function sum64_lo(ah, al, bh, bl) {
                var lo = al + bl;
                return lo >>> 0;
              }
              exports.sum64_lo = sum64_lo;
              function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
                var carry = 0;
                var lo = al;
                lo = lo + bl >>> 0;
                carry += lo < al ? 1 : 0;
                lo = lo + cl >>> 0;
                carry += lo < cl ? 1 : 0;
                lo = lo + dl >>> 0;
                carry += lo < dl ? 1 : 0;
                var hi = ah + bh + ch + dh + carry;
                return hi >>> 0;
              }
              exports.sum64_4_hi = sum64_4_hi;
              function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
                var lo = al + bl + cl + dl;
                return lo >>> 0;
              }
              exports.sum64_4_lo = sum64_4_lo;
              function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                var carry = 0;
                var lo = al;
                lo = lo + bl >>> 0;
                carry += lo < al ? 1 : 0;
                lo = lo + cl >>> 0;
                carry += lo < cl ? 1 : 0;
                lo = lo + dl >>> 0;
                carry += lo < dl ? 1 : 0;
                lo = lo + el >>> 0;
                carry += lo < el ? 1 : 0;
                var hi = ah + bh + ch + dh + eh + carry;
                return hi >>> 0;
              }
              exports.sum64_5_hi = sum64_5_hi;
              function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                var lo = al + bl + cl + dl + el;
                return lo >>> 0;
              }
              exports.sum64_5_lo = sum64_5_lo;
              function rotr64_hi(ah, al, num) {
                var r = al << 32 - num | ah >>> num;
                return r >>> 0;
              }
              exports.rotr64_hi = rotr64_hi;
              function rotr64_lo(ah, al, num) {
                var r = ah << 32 - num | al >>> num;
                return r >>> 0;
              }
              exports.rotr64_lo = rotr64_lo;
              function shr64_hi(ah, al, num) {
                return ah >>> num;
              }
              exports.shr64_hi = shr64_hi;
              function shr64_lo(ah, al, num) {
                var r = ah << 32 - num | al >>> num;
                return r >>> 0;
              }
              exports.shr64_lo = shr64_lo;
            }
          });

          // node_modules/hash.js/lib/hash/common.js
          var require_common = __commonJS({
            "node_modules/hash.js/lib/hash/common.js"(exports) {
              "use strict";
              var utils = require_utils3();
              var assert = require_minimalistic_assert();
              function BlockHash() {
                this.pending = null;
                this.pendingTotal = 0;
                this.blockSize = this.constructor.blockSize;
                this.outSize = this.constructor.outSize;
                this.hmacStrength = this.constructor.hmacStrength;
                this.padLength = this.constructor.padLength / 8;
                this.endian = "big";
                this._delta8 = this.blockSize / 8;
                this._delta32 = this.blockSize / 32;
              }
              exports.BlockHash = BlockHash;
              BlockHash.prototype.update = function update(msg, enc) {
                msg = utils.toArray(msg, enc);
                if (!this.pending)
                  this.pending = msg;
                else
                  this.pending = this.pending.concat(msg);
                this.pendingTotal += msg.length;
                if (this.pending.length >= this._delta8) {
                  msg = this.pending;
                  var r = msg.length % this._delta8;
                  this.pending = msg.slice(msg.length - r, msg.length);
                  if (this.pending.length === 0)
                    this.pending = null;
                  msg = utils.join32(msg, 0, msg.length - r, this.endian);
                  for (var i = 0; i < msg.length; i += this._delta32)
                    this._update(msg, i, i + this._delta32);
                }
                return this;
              };
              BlockHash.prototype.digest = function digest(enc) {
                this.update(this._pad());
                assert(this.pending === null);
                return this._digest(enc);
              };
              BlockHash.prototype._pad = function pad() {
                var len = this.pendingTotal;
                var bytes = this._delta8;
                var k = bytes - (len + this.padLength) % bytes;
                var res = new Array(k + this.padLength);
                res[0] = 128;
                for (var i = 1; i < k; i++)
                  res[i] = 0;
                len <<= 3;
                if (this.endian === "big") {
                  for (var t = 8; t < this.padLength; t++)
                    res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = len >>> 24 & 255;
                  res[i++] = len >>> 16 & 255;
                  res[i++] = len >>> 8 & 255;
                  res[i++] = len & 255;
                } else {
                  res[i++] = len & 255;
                  res[i++] = len >>> 8 & 255;
                  res[i++] = len >>> 16 & 255;
                  res[i++] = len >>> 24 & 255;
                  res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = 0;
                  res[i++] = 0;
                  for (t = 8; t < this.padLength; t++)
                    res[i++] = 0;
                }
                return res;
              };
            }
          });

          // node_modules/hash.js/lib/hash/sha/common.js
          var require_common2 = __commonJS({
            "node_modules/hash.js/lib/hash/sha/common.js"(exports) {
              "use strict";
              var utils = require_utils3();
              var rotr32 = utils.rotr32;
              function ft_1(s, x, y, z) {
                if (s === 0)
                  return ch32(x, y, z);
                if (s === 1 || s === 3)
                  return p32(x, y, z);
                if (s === 2)
                  return maj32(x, y, z);
              }
              exports.ft_1 = ft_1;
              function ch32(x, y, z) {
                return x & y ^ ~x & z;
              }
              exports.ch32 = ch32;
              function maj32(x, y, z) {
                return x & y ^ x & z ^ y & z;
              }
              exports.maj32 = maj32;
              function p32(x, y, z) {
                return x ^ y ^ z;
              }
              exports.p32 = p32;
              function s0_256(x) {
                return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
              }
              exports.s0_256 = s0_256;
              function s1_256(x) {
                return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
              }
              exports.s1_256 = s1_256;
              function g0_256(x) {
                return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
              }
              exports.g0_256 = g0_256;
              function g1_256(x) {
                return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
              }
              exports.g1_256 = g1_256;
            }
          });

          // node_modules/hash.js/lib/hash/sha/1.js
          var require__ = __commonJS({
            "node_modules/hash.js/lib/hash/sha/1.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var common = require_common();
              var shaCommon = require_common2();
              var rotl32 = utils.rotl32;
              var sum32 = utils.sum32;
              var sum32_5 = utils.sum32_5;
              var ft_1 = shaCommon.ft_1;
              var BlockHash = common.BlockHash;
              var sha1_K = [
                1518500249,
                1859775393,
                2400959708,
                3395469782
              ];
              function SHA1() {
                if (!(this instanceof SHA1))
                  return new SHA1();
                BlockHash.call(this);
                this.h = [
                  1732584193,
                  4023233417,
                  2562383102,
                  271733878,
                  3285377520
                ];
                this.W = new Array(80);
              }
              utils.inherits(SHA1, BlockHash);
              module.exports = SHA1;
              SHA1.blockSize = 512;
              SHA1.outSize = 160;
              SHA1.hmacStrength = 80;
              SHA1.padLength = 64;
              SHA1.prototype._update = function _update(msg, start) {
                var W = this.W;
                for (var i = 0; i < 16; i++)
                  W[i] = msg[start + i];
                for (; i < W.length; i++)
                  W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
                var a = this.h[0];
                var b = this.h[1];
                var c = this.h[2];
                var d = this.h[3];
                var e = this.h[4];
                for (i = 0; i < W.length; i++) {
                  var s = ~~(i / 20);
                  var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                  e = d;
                  d = c;
                  c = rotl32(b, 30);
                  b = a;
                  a = t;
                }
                this.h[0] = sum32(this.h[0], a);
                this.h[1] = sum32(this.h[1], b);
                this.h[2] = sum32(this.h[2], c);
                this.h[3] = sum32(this.h[3], d);
                this.h[4] = sum32(this.h[4], e);
              };
              SHA1.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h, "big");
                else
                  return utils.split32(this.h, "big");
              };
            }
          });

          // node_modules/hash.js/lib/hash/sha/256.js
          var require__2 = __commonJS({
            "node_modules/hash.js/lib/hash/sha/256.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var common = require_common();
              var shaCommon = require_common2();
              var assert = require_minimalistic_assert();
              var sum32 = utils.sum32;
              var sum32_4 = utils.sum32_4;
              var sum32_5 = utils.sum32_5;
              var ch32 = shaCommon.ch32;
              var maj32 = shaCommon.maj32;
              var s0_256 = shaCommon.s0_256;
              var s1_256 = shaCommon.s1_256;
              var g0_256 = shaCommon.g0_256;
              var g1_256 = shaCommon.g1_256;
              var BlockHash = common.BlockHash;
              var sha256_K = [
                1116352408,
                1899447441,
                3049323471,
                3921009573,
                961987163,
                1508970993,
                2453635748,
                2870763221,
                3624381080,
                310598401,
                607225278,
                1426881987,
                1925078388,
                2162078206,
                2614888103,
                3248222580,
                3835390401,
                4022224774,
                264347078,
                604807628,
                770255983,
                1249150122,
                1555081692,
                1996064986,
                2554220882,
                2821834349,
                2952996808,
                3210313671,
                3336571891,
                3584528711,
                113926993,
                338241895,
                666307205,
                773529912,
                1294757372,
                1396182291,
                1695183700,
                1986661051,
                2177026350,
                2456956037,
                2730485921,
                2820302411,
                3259730800,
                3345764771,
                3516065817,
                3600352804,
                4094571909,
                275423344,
                430227734,
                506948616,
                659060556,
                883997877,
                958139571,
                1322822218,
                1537002063,
                1747873779,
                1955562222,
                2024104815,
                2227730452,
                2361852424,
                2428436474,
                2756734187,
                3204031479,
                3329325298
              ];
              function SHA256() {
                if (!(this instanceof SHA256))
                  return new SHA256();
                BlockHash.call(this);
                this.h = [
                  1779033703,
                  3144134277,
                  1013904242,
                  2773480762,
                  1359893119,
                  2600822924,
                  528734635,
                  1541459225
                ];
                this.k = sha256_K;
                this.W = new Array(64);
              }
              utils.inherits(SHA256, BlockHash);
              module.exports = SHA256;
              SHA256.blockSize = 512;
              SHA256.outSize = 256;
              SHA256.hmacStrength = 192;
              SHA256.padLength = 64;
              SHA256.prototype._update = function _update(msg, start) {
                var W = this.W;
                for (var i = 0; i < 16; i++)
                  W[i] = msg[start + i];
                for (; i < W.length; i++)
                  W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
                var a = this.h[0];
                var b = this.h[1];
                var c = this.h[2];
                var d = this.h[3];
                var e = this.h[4];
                var f = this.h[5];
                var g = this.h[6];
                var h = this.h[7];
                assert(this.k.length === W.length);
                for (i = 0; i < W.length; i++) {
                  var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                  var T2 = sum32(s0_256(a), maj32(a, b, c));
                  h = g;
                  g = f;
                  f = e;
                  e = sum32(d, T1);
                  d = c;
                  c = b;
                  b = a;
                  a = sum32(T1, T2);
                }
                this.h[0] = sum32(this.h[0], a);
                this.h[1] = sum32(this.h[1], b);
                this.h[2] = sum32(this.h[2], c);
                this.h[3] = sum32(this.h[3], d);
                this.h[4] = sum32(this.h[4], e);
                this.h[5] = sum32(this.h[5], f);
                this.h[6] = sum32(this.h[6], g);
                this.h[7] = sum32(this.h[7], h);
              };
              SHA256.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h, "big");
                else
                  return utils.split32(this.h, "big");
              };
            }
          });

          // node_modules/hash.js/lib/hash/sha/224.js
          var require__3 = __commonJS({
            "node_modules/hash.js/lib/hash/sha/224.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var SHA256 = require__2();
              function SHA224() {
                if (!(this instanceof SHA224))
                  return new SHA224();
                SHA256.call(this);
                this.h = [
                  3238371032,
                  914150663,
                  812702999,
                  4144912697,
                  4290775857,
                  1750603025,
                  1694076839,
                  3204075428
                ];
              }
              utils.inherits(SHA224, SHA256);
              module.exports = SHA224;
              SHA224.blockSize = 512;
              SHA224.outSize = 224;
              SHA224.hmacStrength = 192;
              SHA224.padLength = 64;
              SHA224.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h.slice(0, 7), "big");
                else
                  return utils.split32(this.h.slice(0, 7), "big");
              };
            }
          });

          // node_modules/hash.js/lib/hash/sha/512.js
          var require__4 = __commonJS({
            "node_modules/hash.js/lib/hash/sha/512.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var common = require_common();
              var assert = require_minimalistic_assert();
              var rotr64_hi = utils.rotr64_hi;
              var rotr64_lo = utils.rotr64_lo;
              var shr64_hi = utils.shr64_hi;
              var shr64_lo = utils.shr64_lo;
              var sum64 = utils.sum64;
              var sum64_hi = utils.sum64_hi;
              var sum64_lo = utils.sum64_lo;
              var sum64_4_hi = utils.sum64_4_hi;
              var sum64_4_lo = utils.sum64_4_lo;
              var sum64_5_hi = utils.sum64_5_hi;
              var sum64_5_lo = utils.sum64_5_lo;
              var BlockHash = common.BlockHash;
              var sha512_K = [
                1116352408,
                3609767458,
                1899447441,
                602891725,
                3049323471,
                3964484399,
                3921009573,
                2173295548,
                961987163,
                4081628472,
                1508970993,
                3053834265,
                2453635748,
                2937671579,
                2870763221,
                3664609560,
                3624381080,
                2734883394,
                310598401,
                1164996542,
                607225278,
                1323610764,
                1426881987,
                3590304994,
                1925078388,
                4068182383,
                2162078206,
                991336113,
                2614888103,
                633803317,
                3248222580,
                3479774868,
                3835390401,
                2666613458,
                4022224774,
                944711139,
                264347078,
                2341262773,
                604807628,
                2007800933,
                770255983,
                1495990901,
                1249150122,
                1856431235,
                1555081692,
                3175218132,
                1996064986,
                2198950837,
                2554220882,
                3999719339,
                2821834349,
                766784016,
                2952996808,
                2566594879,
                3210313671,
                3203337956,
                3336571891,
                1034457026,
                3584528711,
                2466948901,
                113926993,
                3758326383,
                338241895,
                168717936,
                666307205,
                1188179964,
                773529912,
                1546045734,
                1294757372,
                1522805485,
                1396182291,
                2643833823,
                1695183700,
                2343527390,
                1986661051,
                1014477480,
                2177026350,
                1206759142,
                2456956037,
                344077627,
                2730485921,
                1290863460,
                2820302411,
                3158454273,
                3259730800,
                3505952657,
                3345764771,
                106217008,
                3516065817,
                3606008344,
                3600352804,
                1432725776,
                4094571909,
                1467031594,
                275423344,
                851169720,
                430227734,
                3100823752,
                506948616,
                1363258195,
                659060556,
                3750685593,
                883997877,
                3785050280,
                958139571,
                3318307427,
                1322822218,
                3812723403,
                1537002063,
                2003034995,
                1747873779,
                3602036899,
                1955562222,
                1575990012,
                2024104815,
                1125592928,
                2227730452,
                2716904306,
                2361852424,
                442776044,
                2428436474,
                593698344,
                2756734187,
                3733110249,
                3204031479,
                2999351573,
                3329325298,
                3815920427,
                3391569614,
                3928383900,
                3515267271,
                566280711,
                3940187606,
                3454069534,
                4118630271,
                4000239992,
                116418474,
                1914138554,
                174292421,
                2731055270,
                289380356,
                3203993006,
                460393269,
                320620315,
                685471733,
                587496836,
                852142971,
                1086792851,
                1017036298,
                365543100,
                1126000580,
                2618297676,
                1288033470,
                3409855158,
                1501505948,
                4234509866,
                1607167915,
                987167468,
                1816402316,
                1246189591
              ];
              function SHA512() {
                if (!(this instanceof SHA512))
                  return new SHA512();
                BlockHash.call(this);
                this.h = [
                  1779033703,
                  4089235720,
                  3144134277,
                  2227873595,
                  1013904242,
                  4271175723,
                  2773480762,
                  1595750129,
                  1359893119,
                  2917565137,
                  2600822924,
                  725511199,
                  528734635,
                  4215389547,
                  1541459225,
                  327033209
                ];
                this.k = sha512_K;
                this.W = new Array(160);
              }
              utils.inherits(SHA512, BlockHash);
              module.exports = SHA512;
              SHA512.blockSize = 1024;
              SHA512.outSize = 512;
              SHA512.hmacStrength = 192;
              SHA512.padLength = 128;
              SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
                var W = this.W;
                for (var i = 0; i < 32; i++)
                  W[i] = msg[start + i];
                for (; i < W.length; i += 2) {
                  var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);
                  var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                  var c1_hi = W[i - 14];
                  var c1_lo = W[i - 13];
                  var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);
                  var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                  var c3_hi = W[i - 32];
                  var c3_lo = W[i - 31];
                  W[i] = sum64_4_hi(
                    c0_hi,
                    c0_lo,
                    c1_hi,
                    c1_lo,
                    c2_hi,
                    c2_lo,
                    c3_hi,
                    c3_lo
                  );
                  W[i + 1] = sum64_4_lo(
                    c0_hi,
                    c0_lo,
                    c1_hi,
                    c1_lo,
                    c2_hi,
                    c2_lo,
                    c3_hi,
                    c3_lo
                  );
                }
              };
              SHA512.prototype._update = function _update(msg, start) {
                this._prepareBlock(msg, start);
                var W = this.W;
                var ah = this.h[0];
                var al = this.h[1];
                var bh = this.h[2];
                var bl = this.h[3];
                var ch = this.h[4];
                var cl = this.h[5];
                var dh = this.h[6];
                var dl = this.h[7];
                var eh = this.h[8];
                var el = this.h[9];
                var fh = this.h[10];
                var fl = this.h[11];
                var gh = this.h[12];
                var gl = this.h[13];
                var hh = this.h[14];
                var hl = this.h[15];
                assert(this.k.length === W.length);
                for (var i = 0; i < W.length; i += 2) {
                  var c0_hi = hh;
                  var c0_lo = hl;
                  var c1_hi = s1_512_hi(eh, el);
                  var c1_lo = s1_512_lo(eh, el);
                  var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                  var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                  var c3_hi = this.k[i];
                  var c3_lo = this.k[i + 1];
                  var c4_hi = W[i];
                  var c4_lo = W[i + 1];
                  var T1_hi = sum64_5_hi(
                    c0_hi,
                    c0_lo,
                    c1_hi,
                    c1_lo,
                    c2_hi,
                    c2_lo,
                    c3_hi,
                    c3_lo,
                    c4_hi,
                    c4_lo
                  );
                  var T1_lo = sum64_5_lo(
                    c0_hi,
                    c0_lo,
                    c1_hi,
                    c1_lo,
                    c2_hi,
                    c2_lo,
                    c3_hi,
                    c3_lo,
                    c4_hi,
                    c4_lo
                  );
                  c0_hi = s0_512_hi(ah, al);
                  c0_lo = s0_512_lo(ah, al);
                  c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                  c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
                  var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                  var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
                  hh = gh;
                  hl = gl;
                  gh = fh;
                  gl = fl;
                  fh = eh;
                  fl = el;
                  eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                  el = sum64_lo(dl, dl, T1_hi, T1_lo);
                  dh = ch;
                  dl = cl;
                  ch = bh;
                  cl = bl;
                  bh = ah;
                  bl = al;
                  ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                  al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
                }
                sum64(this.h, 0, ah, al);
                sum64(this.h, 2, bh, bl);
                sum64(this.h, 4, ch, cl);
                sum64(this.h, 6, dh, dl);
                sum64(this.h, 8, eh, el);
                sum64(this.h, 10, fh, fl);
                sum64(this.h, 12, gh, gl);
                sum64(this.h, 14, hh, hl);
              };
              SHA512.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h, "big");
                else
                  return utils.split32(this.h, "big");
              };
              function ch64_hi(xh, xl, yh, yl, zh) {
                var r = xh & yh ^ ~xh & zh;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function ch64_lo(xh, xl, yh, yl, zh, zl) {
                var r = xl & yl ^ ~xl & zl;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function maj64_hi(xh, xl, yh, yl, zh) {
                var r = xh & yh ^ xh & zh ^ yh & zh;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function maj64_lo(xh, xl, yh, yl, zh, zl) {
                var r = xl & yl ^ xl & zl ^ yl & zl;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function s0_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 28);
                var c1_hi = rotr64_hi(xl, xh, 2);
                var c2_hi = rotr64_hi(xl, xh, 7);
                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function s0_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 28);
                var c1_lo = rotr64_lo(xl, xh, 2);
                var c2_lo = rotr64_lo(xl, xh, 7);
                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function s1_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 14);
                var c1_hi = rotr64_hi(xh, xl, 18);
                var c2_hi = rotr64_hi(xl, xh, 9);
                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function s1_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 14);
                var c1_lo = rotr64_lo(xh, xl, 18);
                var c2_lo = rotr64_lo(xl, xh, 9);
                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function g0_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 1);
                var c1_hi = rotr64_hi(xh, xl, 8);
                var c2_hi = shr64_hi(xh, xl, 7);
                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function g0_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 1);
                var c1_lo = rotr64_lo(xh, xl, 8);
                var c2_lo = shr64_lo(xh, xl, 7);
                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function g1_512_hi(xh, xl) {
                var c0_hi = rotr64_hi(xh, xl, 19);
                var c1_hi = rotr64_hi(xl, xh, 29);
                var c2_hi = shr64_hi(xh, xl, 6);
                var r = c0_hi ^ c1_hi ^ c2_hi;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
              function g1_512_lo(xh, xl) {
                var c0_lo = rotr64_lo(xh, xl, 19);
                var c1_lo = rotr64_lo(xl, xh, 29);
                var c2_lo = shr64_lo(xh, xl, 6);
                var r = c0_lo ^ c1_lo ^ c2_lo;
                if (r < 0)
                  r += 4294967296;
                return r;
              }
            }
          });

          // node_modules/hash.js/lib/hash/sha/384.js
          var require__5 = __commonJS({
            "node_modules/hash.js/lib/hash/sha/384.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var SHA512 = require__4();
              function SHA384() {
                if (!(this instanceof SHA384))
                  return new SHA384();
                SHA512.call(this);
                this.h = [
                  3418070365,
                  3238371032,
                  1654270250,
                  914150663,
                  2438529370,
                  812702999,
                  355462360,
                  4144912697,
                  1731405415,
                  4290775857,
                  2394180231,
                  1750603025,
                  3675008525,
                  1694076839,
                  1203062813,
                  3204075428
                ];
              }
              utils.inherits(SHA384, SHA512);
              module.exports = SHA384;
              SHA384.blockSize = 1024;
              SHA384.outSize = 384;
              SHA384.hmacStrength = 192;
              SHA384.padLength = 128;
              SHA384.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h.slice(0, 12), "big");
                else
                  return utils.split32(this.h.slice(0, 12), "big");
              };
            }
          });

          // node_modules/hash.js/lib/hash/sha.js
          var require_sha = __commonJS({
            "node_modules/hash.js/lib/hash/sha.js"(exports) {
              "use strict";
              exports.sha1 = require__();
              exports.sha224 = require__3();
              exports.sha256 = require__2();
              exports.sha384 = require__5();
              exports.sha512 = require__4();
            }
          });

          // node_modules/hash.js/lib/hash/ripemd.js
          var require_ripemd = __commonJS({
            "node_modules/hash.js/lib/hash/ripemd.js"(exports) {
              "use strict";
              var utils = require_utils3();
              var common = require_common();
              var rotl32 = utils.rotl32;
              var sum32 = utils.sum32;
              var sum32_3 = utils.sum32_3;
              var sum32_4 = utils.sum32_4;
              var BlockHash = common.BlockHash;
              function RIPEMD160() {
                if (!(this instanceof RIPEMD160))
                  return new RIPEMD160();
                BlockHash.call(this);
                this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
                this.endian = "little";
              }
              utils.inherits(RIPEMD160, BlockHash);
              exports.ripemd160 = RIPEMD160;
              RIPEMD160.blockSize = 512;
              RIPEMD160.outSize = 160;
              RIPEMD160.hmacStrength = 192;
              RIPEMD160.padLength = 64;
              RIPEMD160.prototype._update = function update(msg, start) {
                var A = this.h[0];
                var B = this.h[1];
                var C = this.h[2];
                var D = this.h[3];
                var E = this.h[4];
                var Ah = A;
                var Bh = B;
                var Ch = C;
                var Dh = D;
                var Eh = E;
                for (var j = 0; j < 80; j++) {
                  var T = sum32(
                    rotl32(
                      sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
                      s[j]
                    ),
                    E
                  );
                  A = E;
                  E = D;
                  D = rotl32(C, 10);
                  C = B;
                  B = T;
                  T = sum32(
                    rotl32(
                      sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                      sh[j]
                    ),
                    Eh
                  );
                  Ah = Eh;
                  Eh = Dh;
                  Dh = rotl32(Ch, 10);
                  Ch = Bh;
                  Bh = T;
                }
                T = sum32_3(this.h[1], C, Dh);
                this.h[1] = sum32_3(this.h[2], D, Eh);
                this.h[2] = sum32_3(this.h[3], E, Ah);
                this.h[3] = sum32_3(this.h[4], A, Bh);
                this.h[4] = sum32_3(this.h[0], B, Ch);
                this.h[0] = T;
              };
              RIPEMD160.prototype._digest = function digest(enc) {
                if (enc === "hex")
                  return utils.toHex32(this.h, "little");
                else
                  return utils.split32(this.h, "little");
              };
              function f(j, x, y, z) {
                if (j <= 15)
                  return x ^ y ^ z;
                else if (j <= 31)
                  return x & y | ~x & z;
                else if (j <= 47)
                  return (x | ~y) ^ z;
                else if (j <= 63)
                  return x & z | y & ~z;
                else
                  return x ^ (y | ~z);
              }
              function K(j) {
                if (j <= 15)
                  return 0;
                else if (j <= 31)
                  return 1518500249;
                else if (j <= 47)
                  return 1859775393;
                else if (j <= 63)
                  return 2400959708;
                else
                  return 2840853838;
              }
              function Kh(j) {
                if (j <= 15)
                  return 1352829926;
                else if (j <= 31)
                  return 1548603684;
                else if (j <= 47)
                  return 1836072691;
                else if (j <= 63)
                  return 2053994217;
                else
                  return 0;
              }
              var r = [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8,
                3,
                10,
                14,
                4,
                9,
                15,
                8,
                1,
                2,
                7,
                0,
                6,
                13,
                11,
                5,
                12,
                1,
                9,
                11,
                10,
                0,
                8,
                12,
                4,
                13,
                3,
                7,
                15,
                14,
                5,
                6,
                2,
                4,
                0,
                5,
                9,
                7,
                12,
                2,
                10,
                14,
                1,
                3,
                8,
                11,
                6,
                15,
                13
              ];
              var rh = [
                5,
                14,
                7,
                0,
                9,
                2,
                11,
                4,
                13,
                6,
                15,
                8,
                1,
                10,
                3,
                12,
                6,
                11,
                3,
                7,
                0,
                13,
                5,
                10,
                14,
                15,
                8,
                12,
                4,
                9,
                1,
                2,
                15,
                5,
                1,
                3,
                7,
                14,
                6,
                9,
                11,
                8,
                12,
                2,
                10,
                0,
                4,
                13,
                8,
                6,
                4,
                1,
                3,
                11,
                15,
                0,
                5,
                12,
                2,
                13,
                9,
                7,
                10,
                14,
                12,
                15,
                10,
                4,
                1,
                5,
                8,
                7,
                6,
                2,
                13,
                14,
                0,
                3,
                9,
                11
              ];
              var s = [
                11,
                14,
                15,
                12,
                5,
                8,
                7,
                9,
                11,
                13,
                14,
                15,
                6,
                7,
                9,
                8,
                7,
                6,
                8,
                13,
                11,
                9,
                7,
                15,
                7,
                12,
                15,
                9,
                11,
                7,
                13,
                12,
                11,
                13,
                6,
                7,
                14,
                9,
                13,
                15,
                14,
                8,
                13,
                6,
                5,
                12,
                7,
                5,
                11,
                12,
                14,
                15,
                14,
                15,
                9,
                8,
                9,
                14,
                5,
                6,
                8,
                6,
                5,
                12,
                9,
                15,
                5,
                11,
                6,
                8,
                13,
                12,
                5,
                12,
                13,
                14,
                11,
                8,
                5,
                6
              ];
              var sh = [
                8,
                9,
                9,
                11,
                13,
                15,
                15,
                5,
                7,
                7,
                8,
                11,
                14,
                14,
                12,
                6,
                9,
                13,
                15,
                7,
                12,
                8,
                9,
                11,
                7,
                7,
                12,
                7,
                6,
                15,
                13,
                11,
                9,
                7,
                15,
                11,
                8,
                6,
                6,
                14,
                12,
                13,
                5,
                14,
                13,
                13,
                7,
                5,
                15,
                5,
                8,
                11,
                14,
                14,
                6,
                14,
                6,
                9,
                12,
                9,
                12,
                5,
                15,
                8,
                8,
                5,
                12,
                9,
                12,
                5,
                14,
                6,
                8,
                13,
                6,
                5,
                15,
                13,
                11,
                11
              ];
            }
          });

          // node_modules/hash.js/lib/hash/hmac.js
          var require_hmac2 = __commonJS({
            "node_modules/hash.js/lib/hash/hmac.js"(exports, module) {
              "use strict";
              var utils = require_utils3();
              var assert = require_minimalistic_assert();
              function Hmac(hash, key, enc) {
                if (!(this instanceof Hmac))
                  return new Hmac(hash, key, enc);
                this.Hash = hash;
                this.blockSize = hash.blockSize / 8;
                this.outSize = hash.outSize / 8;
                this.inner = null;
                this.outer = null;
                this._init(utils.toArray(key, enc));
              }
              module.exports = Hmac;
              Hmac.prototype._init = function init(key) {
                if (key.length > this.blockSize)
                  key = new this.Hash().update(key).digest();
                assert(key.length <= this.blockSize);
                for (var i = key.length; i < this.blockSize; i++)
                  key.push(0);
                for (i = 0; i < key.length; i++)
                  key[i] ^= 54;
                this.inner = new this.Hash().update(key);
                for (i = 0; i < key.length; i++)
                  key[i] ^= 106;
                this.outer = new this.Hash().update(key);
              };
              Hmac.prototype.update = function update(msg, enc) {
                this.inner.update(msg, enc);
                return this;
              };
              Hmac.prototype.digest = function digest(enc) {
                this.outer.update(this.inner.digest());
                return this.outer.digest(enc);
              };
            }
          });

          // node_modules/hash.js/lib/hash.js
          var require_hash = __commonJS({
            "node_modules/hash.js/lib/hash.js"(exports) {
              var hash = exports;
              hash.utils = require_utils3();
              hash.common = require_common();
              hash.sha = require_sha();
              hash.ripemd = require_ripemd();
              hash.hmac = require_hmac2();
              hash.sha1 = hash.sha.sha1;
              hash.sha256 = hash.sha.sha256;
              hash.sha224 = hash.sha.sha224;
              hash.sha384 = hash.sha.sha384;
              hash.sha512 = hash.sha.sha512;
              hash.ripemd160 = hash.ripemd.ripemd160;
            }
          });

          // node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js
          var require_secp256k1 = __commonJS({
            "node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js"(exports, module) {
              module.exports = {
                doubles: {
                  step: 4,
                  points: [
                    [
                      "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                      "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                    ],
                    [
                      "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                      "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                    ],
                    [
                      "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                      "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                    ],
                    [
                      "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                      "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                    ],
                    [
                      "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                      "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                    ],
                    [
                      "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                      "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                    ],
                    [
                      "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                      "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                    ],
                    [
                      "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                      "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                    ],
                    [
                      "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                      "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                    ],
                    [
                      "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                      "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                    ],
                    [
                      "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                      "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                    ],
                    [
                      "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                      "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                    ],
                    [
                      "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                      "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                    ],
                    [
                      "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                      "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                    ],
                    [
                      "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                      "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                    ],
                    [
                      "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                      "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                    ],
                    [
                      "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                      "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                    ],
                    [
                      "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                      "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                    ],
                    [
                      "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                      "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                    ],
                    [
                      "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                      "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                    ],
                    [
                      "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                      "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                    ],
                    [
                      "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                      "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                    ],
                    [
                      "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                      "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                    ],
                    [
                      "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                      "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                    ],
                    [
                      "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                      "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                    ],
                    [
                      "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                      "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                    ],
                    [
                      "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                      "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                    ],
                    [
                      "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                      "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                    ],
                    [
                      "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                      "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                    ],
                    [
                      "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                      "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                    ],
                    [
                      "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                      "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                    ],
                    [
                      "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                      "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                    ],
                    [
                      "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                      "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                    ],
                    [
                      "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                      "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                    ],
                    [
                      "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                      "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                    ],
                    [
                      "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                      "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                    ],
                    [
                      "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                      "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                    ],
                    [
                      "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                      "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                    ],
                    [
                      "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                      "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                    ],
                    [
                      "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                      "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                    ],
                    [
                      "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                      "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                    ],
                    [
                      "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                      "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                    ],
                    [
                      "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                      "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                    ],
                    [
                      "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                      "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                    ],
                    [
                      "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                      "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                    ],
                    [
                      "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                      "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                    ],
                    [
                      "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                      "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                    ],
                    [
                      "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                      "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                    ],
                    [
                      "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                      "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                    ],
                    [
                      "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                      "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                    ],
                    [
                      "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                      "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                    ],
                    [
                      "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                      "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                    ],
                    [
                      "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                      "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                    ],
                    [
                      "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                      "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                    ],
                    [
                      "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                      "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                    ],
                    [
                      "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                      "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                    ],
                    [
                      "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                      "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                    ],
                    [
                      "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                      "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                    ],
                    [
                      "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                      "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                    ],
                    [
                      "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                      "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                    ],
                    [
                      "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                      "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                    ],
                    [
                      "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                      "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                    ],
                    [
                      "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                      "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                    ],
                    [
                      "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                      "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                    ],
                    [
                      "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                      "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                    ]
                  ]
                },
                naf: {
                  wnd: 7,
                  points: [
                    [
                      "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                      "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                    ],
                    [
                      "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                      "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                    ],
                    [
                      "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                      "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                    ],
                    [
                      "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                      "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                    ],
                    [
                      "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                      "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                    ],
                    [
                      "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                      "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                    ],
                    [
                      "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                      "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                    ],
                    [
                      "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                      "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                    ],
                    [
                      "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                      "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                    ],
                    [
                      "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                      "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                    ],
                    [
                      "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                      "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                    ],
                    [
                      "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                      "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                    ],
                    [
                      "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                      "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                    ],
                    [
                      "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                      "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                    ],
                    [
                      "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                      "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                    ],
                    [
                      "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                      "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                    ],
                    [
                      "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                      "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                    ],
                    [
                      "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                      "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                    ],
                    [
                      "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                      "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                    ],
                    [
                      "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                      "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                    ],
                    [
                      "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                      "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                    ],
                    [
                      "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                      "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                    ],
                    [
                      "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                      "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                    ],
                    [
                      "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                      "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                    ],
                    [
                      "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                      "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                    ],
                    [
                      "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                      "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                    ],
                    [
                      "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                      "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                    ],
                    [
                      "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                      "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                    ],
                    [
                      "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                      "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                    ],
                    [
                      "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                      "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                    ],
                    [
                      "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                      "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                    ],
                    [
                      "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                      "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                    ],
                    [
                      "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                      "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                    ],
                    [
                      "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                      "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                    ],
                    [
                      "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                      "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                    ],
                    [
                      "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                      "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                    ],
                    [
                      "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                      "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                    ],
                    [
                      "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                      "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                    ],
                    [
                      "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                      "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                    ],
                    [
                      "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                      "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                    ],
                    [
                      "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                      "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                    ],
                    [
                      "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                      "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                    ],
                    [
                      "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                      "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                    ],
                    [
                      "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                      "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                    ],
                    [
                      "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                      "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                    ],
                    [
                      "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                      "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                    ],
                    [
                      "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                      "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                    ],
                    [
                      "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                      "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                    ],
                    [
                      "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                      "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                    ],
                    [
                      "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                      "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                    ],
                    [
                      "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                      "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                    ],
                    [
                      "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                      "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                    ],
                    [
                      "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                      "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                    ],
                    [
                      "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                      "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                    ],
                    [
                      "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                      "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                    ],
                    [
                      "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                      "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                    ],
                    [
                      "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                      "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                    ],
                    [
                      "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                      "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                    ],
                    [
                      "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                      "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                    ],
                    [
                      "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                      "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                    ],
                    [
                      "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                      "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                    ],
                    [
                      "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                      "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                    ],
                    [
                      "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                      "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                    ],
                    [
                      "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                      "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                    ],
                    [
                      "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                      "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                    ],
                    [
                      "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                      "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                    ],
                    [
                      "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                      "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                    ],
                    [
                      "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                      "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                    ],
                    [
                      "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                      "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                    ],
                    [
                      "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                      "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                    ],
                    [
                      "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                      "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                    ],
                    [
                      "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                      "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                    ],
                    [
                      "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                      "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                    ],
                    [
                      "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                      "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                    ],
                    [
                      "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                      "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                    ],
                    [
                      "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                      "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                    ],
                    [
                      "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                      "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                    ],
                    [
                      "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                      "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                    ],
                    [
                      "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                      "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                    ],
                    [
                      "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                      "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                    ],
                    [
                      "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                      "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                    ],
                    [
                      "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                      "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                    ],
                    [
                      "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                      "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                    ],
                    [
                      "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                      "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                    ],
                    [
                      "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                      "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                    ],
                    [
                      "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                      "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                    ],
                    [
                      "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                      "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                    ],
                    [
                      "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                      "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                    ],
                    [
                      "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                      "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                    ],
                    [
                      "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                      "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                    ],
                    [
                      "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                      "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                    ],
                    [
                      "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                      "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                    ],
                    [
                      "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                      "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                    ],
                    [
                      "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                      "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                    ],
                    [
                      "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                      "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                    ],
                    [
                      "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                      "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                    ],
                    [
                      "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                      "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                    ],
                    [
                      "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                      "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                    ],
                    [
                      "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                      "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                    ],
                    [
                      "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                      "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                    ],
                    [
                      "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                      "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                    ],
                    [
                      "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                      "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                    ],
                    [
                      "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                      "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                    ],
                    [
                      "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                      "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                    ],
                    [
                      "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                      "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                    ],
                    [
                      "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                      "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                    ],
                    [
                      "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                      "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                    ],
                    [
                      "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                      "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                    ],
                    [
                      "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                      "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                    ],
                    [
                      "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                      "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                    ],
                    [
                      "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                      "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                    ],
                    [
                      "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                      "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                    ],
                    [
                      "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                      "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                    ],
                    [
                      "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                      "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                    ],
                    [
                      "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                      "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                    ],
                    [
                      "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                      "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                    ],
                    [
                      "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                      "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                    ],
                    [
                      "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                      "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                    ],
                    [
                      "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                      "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                    ],
                    [
                      "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                      "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                    ],
                    [
                      "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                      "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                    ],
                    [
                      "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                      "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                    ],
                    [
                      "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                      "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                    ],
                    [
                      "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                      "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                    ],
                    [
                      "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                      "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                    ],
                    [
                      "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                      "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                    ],
                    [
                      "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                      "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                    ]
                  ]
                }
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/curves.js
          var require_curves = __commonJS({
            "node_modules/elliptic/lib/elliptic/curves.js"(exports) {
              "use strict";
              var curves = exports;
              var hash = require_hash();
              var curve = require_curve();
              var utils = require_utils2();
              var assert = utils.assert;
              function PresetCurve(options) {
                if (options.type === "short")
                  this.curve = new curve.short(options);
                else if (options.type === "edwards")
                  this.curve = new curve.edwards(options);
                else
                  this.curve = new curve.mont(options);
                this.g = this.curve.g;
                this.n = this.curve.n;
                this.hash = options.hash;
                assert(this.g.validate(), "Invalid curve");
                assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
              }
              curves.PresetCurve = PresetCurve;
              function defineCurve(name, options) {
                Object.defineProperty(curves, name, {
                  configurable: true,
                  enumerable: true,
                  get: function () {
                    var curve2 = new PresetCurve(options);
                    Object.defineProperty(curves, name, {
                      configurable: true,
                      enumerable: true,
                      value: curve2
                    });
                    return curve2;
                  }
                });
              }
              defineCurve("p192", {
                type: "short",
                prime: "p192",
                p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                hash: hash.sha256,
                gRed: false,
                g: [
                  "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                  "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
                ]
              });
              defineCurve("p224", {
                type: "short",
                prime: "p224",
                p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                hash: hash.sha256,
                gRed: false,
                g: [
                  "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                  "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
                ]
              });
              defineCurve("p256", {
                type: "short",
                prime: null,
                p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                hash: hash.sha256,
                gRed: false,
                g: [
                  "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                  "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
                ]
              });
              defineCurve("p384", {
                type: "short",
                prime: null,
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                hash: hash.sha384,
                gRed: false,
                g: [
                  "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                  "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
                ]
              });
              defineCurve("p521", {
                type: "short",
                prime: null,
                p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                hash: hash.sha512,
                gRed: false,
                g: [
                  "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                  "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
                ]
              });
              defineCurve("curve25519", {
                type: "mont",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "76d06",
                b: "1",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: hash.sha256,
                gRed: false,
                g: [
                  "9"
                ]
              });
              defineCurve("ed25519", {
                type: "edwards",
                prime: "p25519",
                p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                a: "-1",
                c: "1",
                // -121665 * (121666^(-1)) (mod P)
                d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                hash: hash.sha256,
                gRed: false,
                g: [
                  "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
                  // 4/5
                  "6666666666666666666666666666666666666666666666666666666666666658"
                ]
              });
              var pre;
              try {
                pre = require_secp256k1();
              } catch (e) {
                pre = void 0;
              }
              defineCurve("secp256k1", {
                type: "short",
                prime: "k256",
                p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                a: "0",
                b: "7",
                n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                h: "1",
                hash: hash.sha256,
                // Precomputed endomorphism
                beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                basis: [
                  {
                    a: "3086d221a7d46bcde86c90e49284eb15",
                    b: "-e4437ed6010e88286f547fa90abfe4c3"
                  },
                  {
                    a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                    b: "3086d221a7d46bcde86c90e49284eb15"
                  }
                ],
                gRed: false,
                g: [
                  "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                  "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                  pre
                ]
              });
            }
          });

          // node_modules/hmac-drbg/lib/hmac-drbg.js
          var require_hmac_drbg = __commonJS({
            "node_modules/hmac-drbg/lib/hmac-drbg.js"(exports, module) {
              "use strict";
              var hash = require_hash();
              var utils = require_utils();
              var assert = require_minimalistic_assert();
              function HmacDRBG(options) {
                if (!(this instanceof HmacDRBG))
                  return new HmacDRBG(options);
                this.hash = options.hash;
                this.predResist = !!options.predResist;
                this.outLen = this.hash.outSize;
                this.minEntropy = options.minEntropy || this.hash.hmacStrength;
                this._reseed = null;
                this.reseedInterval = null;
                this.K = null;
                this.V = null;
                var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
                var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
                var pers = utils.toArray(options.pers, options.persEnc || "hex");
                assert(
                  entropy.length >= this.minEntropy / 8,
                  "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
                );
                this._init(entropy, nonce, pers);
              }
              module.exports = HmacDRBG;
              HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
                var seed = entropy.concat(nonce).concat(pers);
                this.K = new Array(this.outLen / 8);
                this.V = new Array(this.outLen / 8);
                for (var i = 0; i < this.V.length; i++) {
                  this.K[i] = 0;
                  this.V[i] = 1;
                }
                this._update(seed);
                this._reseed = 1;
                this.reseedInterval = 281474976710656;
              };
              HmacDRBG.prototype._hmac = function hmac() {
                return new hash.hmac(this.hash, this.K);
              };
              HmacDRBG.prototype._update = function update(seed) {
                var kmac = this._hmac().update(this.V).update([0]);
                if (seed)
                  kmac = kmac.update(seed);
                this.K = kmac.digest();
                this.V = this._hmac().update(this.V).digest();
                if (!seed)
                  return;
                this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
                this.V = this._hmac().update(this.V).digest();
              };
              HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
                if (typeof entropyEnc !== "string") {
                  addEnc = add;
                  add = entropyEnc;
                  entropyEnc = null;
                }
                entropy = utils.toArray(entropy, entropyEnc);
                add = utils.toArray(add, addEnc);
                assert(
                  entropy.length >= this.minEntropy / 8,
                  "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
                );
                this._update(entropy.concat(add || []));
                this._reseed = 1;
              };
              HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
                if (this._reseed > this.reseedInterval)
                  throw new Error("Reseed is required");
                if (typeof enc !== "string") {
                  addEnc = add;
                  add = enc;
                  enc = null;
                }
                if (add) {
                  add = utils.toArray(add, addEnc || "hex");
                  this._update(add);
                }
                var temp = [];
                while (temp.length < len) {
                  this.V = this._hmac().update(this.V).digest();
                  temp = temp.concat(this.V);
                }
                var res = temp.slice(0, len);
                this._update(add);
                this._reseed++;
                return utils.encode(res, enc);
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/ec/key.js
          var require_key = __commonJS({
            "node_modules/elliptic/lib/elliptic/ec/key.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var utils = require_utils2();
              var assert = utils.assert;
              function KeyPair(ec, options) {
                this.ec = ec;
                this.priv = null;
                this.pub = null;
                if (options.priv)
                  this._importPrivate(options.priv, options.privEnc);
                if (options.pub)
                  this._importPublic(options.pub, options.pubEnc);
              }
              module.exports = KeyPair;
              KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                if (pub instanceof KeyPair)
                  return pub;
                return new KeyPair(ec, {
                  pub,
                  pubEnc: enc
                });
              };
              KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                if (priv instanceof KeyPair)
                  return priv;
                return new KeyPair(ec, {
                  priv,
                  privEnc: enc
                });
              };
              KeyPair.prototype.validate = function validate() {
                var pub = this.getPublic();
                if (pub.isInfinity())
                  return { result: false, reason: "Invalid public key" };
                if (!pub.validate())
                  return { result: false, reason: "Public key is not a point" };
                if (!pub.mul(this.ec.curve.n).isInfinity())
                  return { result: false, reason: "Public key * N != O" };
                return { result: true, reason: null };
              };
              KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                if (typeof compact === "string") {
                  enc = compact;
                  compact = null;
                }
                if (!this.pub)
                  this.pub = this.ec.g.mul(this.priv);
                if (!enc)
                  return this.pub;
                return this.pub.encode(enc, compact);
              };
              KeyPair.prototype.getPrivate = function getPrivate(enc) {
                if (enc === "hex")
                  return this.priv.toString(16, 2);
                else
                  return this.priv;
              };
              KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
                this.priv = new BN(key, enc || 16);
                this.priv = this.priv.umod(this.ec.curve.n);
              };
              KeyPair.prototype._importPublic = function _importPublic(key, enc) {
                if (key.x || key.y) {
                  if (this.ec.curve.type === "mont") {
                    assert(key.x, "Need x coordinate");
                  } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
                    assert(key.x && key.y, "Need both x and y coordinate");
                  }
                  this.pub = this.ec.curve.point(key.x, key.y);
                  return;
                }
                this.pub = this.ec.curve.decodePoint(key, enc);
              };
              KeyPair.prototype.derive = function derive(pub) {
                if (!pub.validate()) {
                  assert(pub.validate(), "public point not validated");
                }
                return pub.mul(this.priv).getX();
              };
              KeyPair.prototype.sign = function sign(msg, enc, options) {
                return this.ec.sign(msg, this, enc, options);
              };
              KeyPair.prototype.verify = function verify(msg, signature) {
                return this.ec.verify(msg, signature, this);
              };
              KeyPair.prototype.inspect = function inspect() {
                return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/ec/signature.js
          var require_signature = __commonJS({
            "node_modules/elliptic/lib/elliptic/ec/signature.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var utils = require_utils2();
              var assert = utils.assert;
              function Signature(options, enc) {
                if (options instanceof Signature)
                  return options;
                if (this._importDER(options, enc))
                  return;
                assert(options.r && options.s, "Signature without r or s");
                this.r = new BN(options.r, 16);
                this.s = new BN(options.s, 16);
                if (options.recoveryParam === void 0)
                  this.recoveryParam = null;
                else
                  this.recoveryParam = options.recoveryParam;
              }
              module.exports = Signature;
              function Position() {
                this.place = 0;
              }
              function getLength(buf, p) {
                var initial = buf[p.place++];
                if (!(initial & 128)) {
                  return initial;
                }
                var octetLen = initial & 15;
                if (octetLen === 0 || octetLen > 4) {
                  return false;
                }
                var val = 0;
                for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                  val <<= 8;
                  val |= buf[off];
                  val >>>= 0;
                }
                if (val <= 127) {
                  return false;
                }
                p.place = off;
                return val;
              }
              function rmPadding(buf) {
                var i = 0;
                var len = buf.length - 1;
                while (!buf[i] && !(buf[i + 1] & 128) && i < len) {
                  i++;
                }
                if (i === 0) {
                  return buf;
                }
                return buf.slice(i);
              }
              Signature.prototype._importDER = function _importDER(data, enc) {
                data = utils.toArray(data, enc);
                var p = new Position();
                if (data[p.place++] !== 48) {
                  return false;
                }
                var len = getLength(data, p);
                if (len === false) {
                  return false;
                }
                if (len + p.place !== data.length) {
                  return false;
                }
                if (data[p.place++] !== 2) {
                  return false;
                }
                var rlen = getLength(data, p);
                if (rlen === false) {
                  return false;
                }
                var r = data.slice(p.place, rlen + p.place);
                p.place += rlen;
                if (data[p.place++] !== 2) {
                  return false;
                }
                var slen = getLength(data, p);
                if (slen === false) {
                  return false;
                }
                if (data.length !== slen + p.place) {
                  return false;
                }
                var s = data.slice(p.place, slen + p.place);
                if (r[0] === 0) {
                  if (r[1] & 128) {
                    r = r.slice(1);
                  } else {
                    return false;
                  }
                }
                if (s[0] === 0) {
                  if (s[1] & 128) {
                    s = s.slice(1);
                  } else {
                    return false;
                  }
                }
                this.r = new BN(r);
                this.s = new BN(s);
                this.recoveryParam = null;
                return true;
              };
              function constructLength(arr, len) {
                if (len < 128) {
                  arr.push(len);
                  return;
                }
                var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
                arr.push(octets | 128);
                while (--octets) {
                  arr.push(len >>> (octets << 3) & 255);
                }
                arr.push(len);
              }
              Signature.prototype.toDER = function toDER(enc) {
                var r = this.r.toArray();
                var s = this.s.toArray();
                if (r[0] & 128)
                  r = [0].concat(r);
                if (s[0] & 128)
                  s = [0].concat(s);
                r = rmPadding(r);
                s = rmPadding(s);
                while (!s[0] && !(s[1] & 128)) {
                  s = s.slice(1);
                }
                var arr = [2];
                constructLength(arr, r.length);
                arr = arr.concat(r);
                arr.push(2);
                constructLength(arr, s.length);
                var backHalf = arr.concat(s);
                var res = [48];
                constructLength(res, backHalf.length);
                res = res.concat(backHalf);
                return utils.encode(res, enc);
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/ec/index.js
          var require_ec = __commonJS({
            "node_modules/elliptic/lib/elliptic/ec/index.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var HmacDRBG = require_hmac_drbg();
              var utils = require_utils2();
              var curves = require_curves();
              var rand = require_brorand();
              var assert = utils.assert;
              var KeyPair = require_key();
              var Signature = require_signature();
              function EC2(options) {
                if (!(this instanceof EC2))
                  return new EC2(options);
                if (typeof options === "string") {
                  assert(
                    Object.prototype.hasOwnProperty.call(curves, options),
                    "Unknown curve " + options
                  );
                  options = curves[options];
                }
                if (options instanceof curves.PresetCurve)
                  options = { curve: options };
                this.curve = options.curve.curve;
                this.n = this.curve.n;
                this.nh = this.n.ushrn(1);
                this.g = this.curve.g;
                this.g = options.curve.g;
                this.g.precompute(options.curve.n.bitLength() + 1);
                this.hash = options.hash || options.curve.hash;
              }
              module.exports = EC2;
              EC2.prototype.keyPair = function keyPair(options) {
                return new KeyPair(this, options);
              };
              EC2.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
                return KeyPair.fromPrivate(this, priv, enc);
              };
              EC2.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                return KeyPair.fromPublic(this, pub, enc);
              };
              EC2.prototype.genKeyPair = function genKeyPair(options) {
                if (!options)
                  options = {};
                var drbg = new HmacDRBG({
                  hash: this.hash,
                  pers: options.pers,
                  persEnc: options.persEnc || "utf8",
                  entropy: options.entropy || rand(this.hash.hmacStrength),
                  entropyEnc: options.entropy && options.entropyEnc || "utf8",
                  nonce: this.n.toArray()
                });
                var bytes = this.n.byteLength();
                var ns2 = this.n.sub(new BN(2));
                for (; ;) {
                  var priv = new BN(drbg.generate(bytes));
                  if (priv.cmp(ns2) > 0)
                    continue;
                  priv.iaddn(1);
                  return this.keyFromPrivate(priv);
                }
              };
              EC2.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
                var delta = msg.byteLength() * 8 - this.n.bitLength();
                if (delta > 0)
                  msg = msg.ushrn(delta);
                if (!truncOnly && msg.cmp(this.n) >= 0)
                  return msg.sub(this.n);
                else
                  return msg;
              };
              EC2.prototype.sign = function sign(msg, key, enc, options) {
                if (typeof enc === "object") {
                  options = enc;
                  enc = null;
                }
                if (!options)
                  options = {};
                key = this.keyFromPrivate(key, enc);
                msg = this._truncateToN(new BN(msg, 16));
                var bytes = this.n.byteLength();
                var bkey = key.getPrivate().toArray("be", bytes);
                var nonce = msg.toArray("be", bytes);
                var drbg = new HmacDRBG({
                  hash: this.hash,
                  entropy: bkey,
                  nonce,
                  pers: options.pers,
                  persEnc: options.persEnc || "utf8"
                });
                var ns1 = this.n.sub(new BN(1));
                for (var iter = 0; ; iter++) {
                  var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
                  k = this._truncateToN(k, true);
                  if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                    continue;
                  var kp = this.g.mul(k);
                  if (kp.isInfinity())
                    continue;
                  var kpX = kp.getX();
                  var r = kpX.umod(this.n);
                  if (r.cmpn(0) === 0)
                    continue;
                  var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                  s = s.umod(this.n);
                  if (s.cmpn(0) === 0)
                    continue;
                  var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
                  if (options.canonical && s.cmp(this.nh) > 0) {
                    s = this.n.sub(s);
                    recoveryParam ^= 1;
                  }
                  return new Signature({ r, s, recoveryParam });
                }
              };
              EC2.prototype.verify = function verify(msg, signature, key, enc) {
                msg = this._truncateToN(new BN(msg, 16));
                key = this.keyFromPublic(key, enc);
                signature = new Signature(signature, "hex");
                var r = signature.r;
                var s = signature.s;
                if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                  return false;
                if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                  return false;
                var sinv = s.invm(this.n);
                var u1 = sinv.mul(msg).umod(this.n);
                var u2 = sinv.mul(r).umod(this.n);
                var p;
                if (!this.curve._maxwellTrick) {
                  p = this.g.mulAdd(u1, key.getPublic(), u2);
                  if (p.isInfinity())
                    return false;
                  return p.getX().umod(this.n).cmp(r) === 0;
                }
                p = this.g.jmulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity())
                  return false;
                return p.eqXToP(r);
              };
              EC2.prototype.recoverPubKey = function (msg, signature, j, enc) {
                assert((3 & j) === j, "The recovery param is more than two bits");
                signature = new Signature(signature, enc);
                var n = this.n;
                var e = new BN(msg);
                var r = signature.r;
                var s = signature.s;
                var isYOdd = j & 1;
                var isSecondKey = j >> 1;
                if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                  throw new Error("Unable to find sencond key candinate");
                if (isSecondKey)
                  r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                else
                  r = this.curve.pointFromX(r, isYOdd);
                var rInv = signature.r.invm(n);
                var s1 = n.sub(e).mul(rInv).umod(n);
                var s2 = s.mul(rInv).umod(n);
                return this.g.mulAdd(s1, r, s2);
              };
              EC2.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
                signature = new Signature(signature, enc);
                if (signature.recoveryParam !== null)
                  return signature.recoveryParam;
                for (var i = 0; i < 4; i++) {
                  var Qprime;
                  try {
                    Qprime = this.recoverPubKey(e, signature, i);
                  } catch (e2) {
                    continue;
                  }
                  if (Qprime.eq(Q))
                    return i;
                }
                throw new Error("Unable to find valid recovery factor");
              };
            }
          });

          // node_modules/elliptic/lib/elliptic/eddsa/key.js
          var require_key2 = __commonJS({
            "node_modules/elliptic/lib/elliptic/eddsa/key.js"(exports, module) {
              "use strict";
              var utils = require_utils2();
              var assert = utils.assert;
              var parseBytes = utils.parseBytes;
              var cachedProperty = utils.cachedProperty;
              function KeyPair(eddsa, params) {
                this.eddsa = eddsa;
                this._secret = parseBytes(params.secret);
                if (eddsa.isPoint(params.pub))
                  this._pub = params.pub;
                else
                  this._pubBytes = parseBytes(params.pub);
              }
              KeyPair.fromPublic = function fromPublic(eddsa, pub) {
                if (pub instanceof KeyPair)
                  return pub;
                return new KeyPair(eddsa, { pub });
              };
              KeyPair.fromSecret = function fromSecret(eddsa, secret) {
                if (secret instanceof KeyPair)
                  return secret;
                return new KeyPair(eddsa, { secret });
              };
              KeyPair.prototype.secret = function secret() {
                return this._secret;
              };
              cachedProperty(KeyPair, "pubBytes", function pubBytes() {
                return this.eddsa.encodePoint(this.pub());
              });
              cachedProperty(KeyPair, "pub", function pub() {
                if (this._pubBytes)
                  return this.eddsa.decodePoint(this._pubBytes);
                return this.eddsa.g.mul(this.priv());
              });
              cachedProperty(KeyPair, "privBytes", function privBytes() {
                var eddsa = this.eddsa;
                var hash = this.hash();
                var lastIx = eddsa.encodingLength - 1;
                var a = hash.slice(0, eddsa.encodingLength);
                a[0] &= 248;
                a[lastIx] &= 127;
                a[lastIx] |= 64;
                return a;
              });
              cachedProperty(KeyPair, "priv", function priv() {
                return this.eddsa.decodeInt(this.privBytes());
              });
              cachedProperty(KeyPair, "hash", function hash() {
                return this.eddsa.hash().update(this.secret()).digest();
              });
              cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
                return this.hash().slice(this.eddsa.encodingLength);
              });
              KeyPair.prototype.sign = function sign(message) {
                assert(this._secret, "KeyPair can only verify");
                return this.eddsa.sign(message, this);
              };
              KeyPair.prototype.verify = function verify(message, sig) {
                return this.eddsa.verify(message, sig, this);
              };
              KeyPair.prototype.getSecret = function getSecret(enc) {
                assert(this._secret, "KeyPair is public only");
                return utils.encode(this.secret(), enc);
              };
              KeyPair.prototype.getPublic = function getPublic(enc) {
                return utils.encode(this.pubBytes(), enc);
              };
              module.exports = KeyPair;
            }
          });

          // node_modules/elliptic/lib/elliptic/eddsa/signature.js
          var require_signature2 = __commonJS({
            "node_modules/elliptic/lib/elliptic/eddsa/signature.js"(exports, module) {
              "use strict";
              var BN = require_bn();
              var utils = require_utils2();
              var assert = utils.assert;
              var cachedProperty = utils.cachedProperty;
              var parseBytes = utils.parseBytes;
              function Signature(eddsa, sig) {
                this.eddsa = eddsa;
                if (typeof sig !== "object")
                  sig = parseBytes(sig);
                if (Array.isArray(sig)) {
                  sig = {
                    R: sig.slice(0, eddsa.encodingLength),
                    S: sig.slice(eddsa.encodingLength)
                  };
                }
                assert(sig.R && sig.S, "Signature without R or S");
                if (eddsa.isPoint(sig.R))
                  this._R = sig.R;
                if (sig.S instanceof BN)
                  this._S = sig.S;
                this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
                this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
              }
              cachedProperty(Signature, "S", function S() {
                return this.eddsa.decodeInt(this.Sencoded());
              });
              cachedProperty(Signature, "R", function R() {
                return this.eddsa.decodePoint(this.Rencoded());
              });
              cachedProperty(Signature, "Rencoded", function Rencoded() {
                return this.eddsa.encodePoint(this.R());
              });
              cachedProperty(Signature, "Sencoded", function Sencoded() {
                return this.eddsa.encodeInt(this.S());
              });
              Signature.prototype.toBytes = function toBytes() {
                return this.Rencoded().concat(this.Sencoded());
              };
              Signature.prototype.toHex = function toHex() {
                return utils.encode(this.toBytes(), "hex").toUpperCase();
              };
              module.exports = Signature;
            }
          });

          // node_modules/elliptic/lib/elliptic/eddsa/index.js
          var require_eddsa = __commonJS({
            "node_modules/elliptic/lib/elliptic/eddsa/index.js"(exports, module) {
              "use strict";
              var hash = require_hash();
              var curves = require_curves();
              var utils = require_utils2();
              var assert = utils.assert;
              var parseBytes = utils.parseBytes;
              var KeyPair = require_key2();
              var Signature = require_signature2();
              function EDDSA(curve) {
                assert(curve === "ed25519", "only tested with ed25519 so far");
                if (!(this instanceof EDDSA))
                  return new EDDSA(curve);
                curve = curves[curve].curve;
                this.curve = curve;
                this.g = curve.g;
                this.g.precompute(curve.n.bitLength() + 1);
                this.pointClass = curve.point().constructor;
                this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
                this.hash = hash.sha512;
              }
              module.exports = EDDSA;
              EDDSA.prototype.sign = function sign(message, secret) {
                message = parseBytes(message);
                var key = this.keyFromSecret(secret);
                var r = this.hashInt(key.messagePrefix(), message);
                var R = this.g.mul(r);
                var Rencoded = this.encodePoint(R);
                var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
                var S = r.add(s_).umod(this.curve.n);
                return this.makeSignature({ R, S, Rencoded });
              };
              EDDSA.prototype.verify = function verify(message, sig, pub) {
                message = parseBytes(message);
                sig = this.makeSignature(sig);
                var key = this.keyFromPublic(pub);
                var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
                var SG = this.g.mul(sig.S());
                var RplusAh = sig.R().add(key.pub().mul(h));
                return RplusAh.eq(SG);
              };
              EDDSA.prototype.hashInt = function hashInt() {
                var hash2 = this.hash();
                for (var i = 0; i < arguments.length; i++)
                  hash2.update(arguments[i]);
                return utils.intFromLE(hash2.digest()).umod(this.curve.n);
              };
              EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
                return KeyPair.fromPublic(this, pub);
              };
              EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
                return KeyPair.fromSecret(this, secret);
              };
              EDDSA.prototype.makeSignature = function makeSignature(sig) {
                if (sig instanceof Signature)
                  return sig;
                return new Signature(this, sig);
              };
              EDDSA.prototype.encodePoint = function encodePoint(point) {
                var enc = point.getY().toArray("le", this.encodingLength);
                enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
                return enc;
              };
              EDDSA.prototype.decodePoint = function decodePoint(bytes) {
                bytes = utils.parseBytes(bytes);
                var lastIx = bytes.length - 1;
                var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
                var xIsOdd = (bytes[lastIx] & 128) !== 0;
                var y = utils.intFromLE(normed);
                return this.curve.pointFromY(y, xIsOdd);
              };
              EDDSA.prototype.encodeInt = function encodeInt(num) {
                return num.toArray("le", this.encodingLength);
              };
              EDDSA.prototype.decodeInt = function decodeInt(bytes) {
                return utils.intFromLE(bytes);
              };
              EDDSA.prototype.isPoint = function isPoint(val) {
                return val instanceof this.pointClass;
              };
            }
          });

          // node_modules/elliptic/lib/elliptic.js
          var require_elliptic = __commonJS({
            "node_modules/elliptic/lib/elliptic.js"(exports) {
              "use strict";
              var elliptic = exports;
              elliptic.version = require_package().version;
              elliptic.utils = require_utils2();
              elliptic.rand = require_brorand();
              elliptic.curve = require_curve();
              elliptic.curves = require_curves();
              elliptic.ec = require_ec();
              elliptic.eddsa = require_eddsa();
            }
          });

          // node_modules/base64-js/index.js
          var require_base64_js = __commonJS({
            "node_modules/base64-js/index.js"(exports) {
              "use strict";
              exports.byteLength = byteLength;
              exports.toByteArray = toByteArray;
              exports.fromByteArray = fromByteArray;
              var lookup = [];
              var revLookup = [];
              var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
              var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
              for (i = 0, len = code.length; i < len; ++i) {
                lookup[i] = code[i];
                revLookup[code.charCodeAt(i)] = i;
              }
              var i;
              var len;
              revLookup["-".charCodeAt(0)] = 62;
              revLookup["_".charCodeAt(0)] = 63;
              function getLens(b64) {
                var len2 = b64.length;
                if (len2 % 4 > 0) {
                  throw new Error("Invalid string. Length must be a multiple of 4");
                }
                var validLen = b64.indexOf("=");
                if (validLen === -1)
                  validLen = len2;
                var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
                return [validLen, placeHoldersLen];
              }
              function byteLength(b64) {
                var lens = getLens(b64);
                var validLen = lens[0];
                var placeHoldersLen = lens[1];
                return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
              }
              function _byteLength(b64, validLen, placeHoldersLen) {
                return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
              }
              function toByteArray(b64) {
                var tmp;
                var lens = getLens(b64);
                var validLen = lens[0];
                var placeHoldersLen = lens[1];
                var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
                var curByte = 0;
                var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
                var i2;
                for (i2 = 0; i2 < len2; i2 += 4) {
                  tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
                  arr[curByte++] = tmp >> 16 & 255;
                  arr[curByte++] = tmp >> 8 & 255;
                  arr[curByte++] = tmp & 255;
                }
                if (placeHoldersLen === 2) {
                  tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
                  arr[curByte++] = tmp & 255;
                }
                if (placeHoldersLen === 1) {
                  tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
                  arr[curByte++] = tmp >> 8 & 255;
                  arr[curByte++] = tmp & 255;
                }
                return arr;
              }
              function tripletToBase64(num) {
                return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
              }
              function encodeChunk(uint8, start, end) {
                var tmp;
                var output = [];
                for (var i2 = start; i2 < end; i2 += 3) {
                  tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
                  output.push(tripletToBase64(tmp));
                }
                return output.join("");
              }
              function fromByteArray(uint8) {
                var tmp;
                var len2 = uint8.length;
                var extraBytes = len2 % 3;
                var parts = [];
                var maxChunkLength = 16383;
                for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
                  parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
                }
                if (extraBytes === 1) {
                  tmp = uint8[len2 - 1];
                  parts.push(
                    lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
                  );
                } else if (extraBytes === 2) {
                  tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
                  parts.push(
                    lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
                  );
                }
                return parts.join("");
              }
            }
          });

          // node_modules/ieee754/index.js
          var require_ieee754 = __commonJS({
            "node_modules/ieee754/index.js"(exports) {
              exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                var e, m;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var nBits = -7;
                var i = isLE ? nBytes - 1 : 0;
                var d = isLE ? -1 : 1;
                var s = buffer[offset + i];
                i += d;
                e = s & (1 << -nBits) - 1;
                s >>= -nBits;
                nBits += eLen;
                for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
                }
                m = e & (1 << -nBits) - 1;
                e >>= -nBits;
                nBits += mLen;
                for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
                }
                if (e === 0) {
                  e = 1 - eBias;
                } else if (e === eMax) {
                  return m ? NaN : (s ? -1 : 1) * Infinity;
                } else {
                  m = m + Math.pow(2, mLen);
                  e = e - eBias;
                }
                return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
              };
              exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                var e, m, c;
                var eLen = nBytes * 8 - mLen - 1;
                var eMax = (1 << eLen) - 1;
                var eBias = eMax >> 1;
                var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                var i = isLE ? 0 : nBytes - 1;
                var d = isLE ? 1 : -1;
                var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                value = Math.abs(value);
                if (isNaN(value) || value === Infinity) {
                  m = isNaN(value) ? 1 : 0;
                  e = eMax;
                } else {
                  e = Math.floor(Math.log(value) / Math.LN2);
                  if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                  }
                  if (e + eBias >= 1) {
                    value += rt / c;
                  } else {
                    value += rt * Math.pow(2, 1 - eBias);
                  }
                  if (value * c >= 2) {
                    e++;
                    c /= 2;
                  }
                  if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                  } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                  } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                  }
                }
                for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
                }
                e = e << mLen | m;
                eLen += mLen;
                for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
                }
                buffer[offset + i - d] |= s * 128;
              };
            }
          });

          // node_modules/buffer/index.js
          var require_buffer2 = __commonJS({
            "node_modules/buffer/index.js"(exports) {
              "use strict";
              var base64 = require_base64_js();
              var ieee754 = require_ieee754();
              exports.Buffer = Buffer2;
              exports.SlowBuffer = SlowBuffer;
              exports.INSPECT_MAX_BYTES = 50;
              var K_MAX_LENGTH = 2147483647;
              exports.kMaxLength = K_MAX_LENGTH;
              Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
              if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
                console.error(
                  "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
                );
              }
              function typedArraySupport() {
                try {
                  var arr = new Uint8Array(1);
                  arr.__proto__ = {
                    __proto__: Uint8Array.prototype, foo: function () {
                      return 42;
                    }
                  };
                  return arr.foo() === 42;
                } catch (e) {
                  return false;
                }
              }
              Object.defineProperty(Buffer2.prototype, "parent", {
                enumerable: true,
                get: function () {
                  if (!Buffer2.isBuffer(this))
                    return void 0;
                  return this.buffer;
                }
              });
              Object.defineProperty(Buffer2.prototype, "offset", {
                enumerable: true,
                get: function () {
                  if (!Buffer2.isBuffer(this))
                    return void 0;
                  return this.byteOffset;
                }
              });
              function createBuffer(length) {
                if (length > K_MAX_LENGTH) {
                  throw new RangeError('The value "' + length + '" is invalid for option "size"');
                }
                var buf = new Uint8Array(length);
                buf.__proto__ = Buffer2.prototype;
                return buf;
              }
              function Buffer2(arg, encodingOrOffset, length) {
                if (typeof arg === "number") {
                  if (typeof encodingOrOffset === "string") {
                    throw new TypeError(
                      'The "string" argument must be of type string. Received type number'
                    );
                  }
                  return allocUnsafe(arg);
                }
                return from(arg, encodingOrOffset, length);
              }
              if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer2[Symbol.species] === Buffer2) {
                Object.defineProperty(Buffer2, Symbol.species, {
                  value: null,
                  configurable: true,
                  enumerable: false,
                  writable: false
                });
              }
              Buffer2.poolSize = 8192;
              function from(value, encodingOrOffset, length) {
                if (typeof value === "string") {
                  return fromString(value, encodingOrOffset);
                }
                if (ArrayBuffer.isView(value)) {
                  return fromArrayLike(value);
                }
                if (value == null) {
                  throw TypeError(
                    "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
                  );
                }
                if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                  return fromArrayBuffer(value, encodingOrOffset, length);
                }
                if (typeof value === "number") {
                  throw new TypeError(
                    'The "value" argument must not be of type number. Received type number'
                  );
                }
                var valueOf = value.valueOf && value.valueOf();
                if (valueOf != null && valueOf !== value) {
                  return Buffer2.from(valueOf, encodingOrOffset, length);
                }
                var b = fromObject(value);
                if (b)
                  return b;
                if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
                  return Buffer2.from(
                    value[Symbol.toPrimitive]("string"),
                    encodingOrOffset,
                    length
                  );
                }
                throw new TypeError(
                  "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
                );
              }
              Buffer2.from = function (value, encodingOrOffset, length) {
                return from(value, encodingOrOffset, length);
              };
              Buffer2.prototype.__proto__ = Uint8Array.prototype;
              Buffer2.__proto__ = Uint8Array;
              function assertSize(size) {
                if (typeof size !== "number") {
                  throw new TypeError('"size" argument must be of type number');
                } else if (size < 0) {
                  throw new RangeError('The value "' + size + '" is invalid for option "size"');
                }
              }
              function alloc(size, fill, encoding) {
                assertSize(size);
                if (size <= 0) {
                  return createBuffer(size);
                }
                if (fill !== void 0) {
                  return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                }
                return createBuffer(size);
              }
              Buffer2.alloc = function (size, fill, encoding) {
                return alloc(size, fill, encoding);
              };
              function allocUnsafe(size) {
                assertSize(size);
                return createBuffer(size < 0 ? 0 : checked(size) | 0);
              }
              Buffer2.allocUnsafe = function (size) {
                return allocUnsafe(size);
              };
              Buffer2.allocUnsafeSlow = function (size) {
                return allocUnsafe(size);
              };
              function fromString(string, encoding) {
                if (typeof encoding !== "string" || encoding === "") {
                  encoding = "utf8";
                }
                if (!Buffer2.isEncoding(encoding)) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                var length = byteLength(string, encoding) | 0;
                var buf = createBuffer(length);
                var actual = buf.write(string, encoding);
                if (actual !== length) {
                  buf = buf.slice(0, actual);
                }
                return buf;
              }
              function fromArrayLike(array) {
                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                var buf = createBuffer(length);
                for (var i = 0; i < length; i += 1) {
                  buf[i] = array[i] & 255;
                }
                return buf;
              }
              function fromArrayBuffer(array, byteOffset, length) {
                if (byteOffset < 0 || array.byteLength < byteOffset) {
                  throw new RangeError('"offset" is outside of buffer bounds');
                }
                if (array.byteLength < byteOffset + (length || 0)) {
                  throw new RangeError('"length" is outside of buffer bounds');
                }
                var buf;
                if (byteOffset === void 0 && length === void 0) {
                  buf = new Uint8Array(array);
                } else if (length === void 0) {
                  buf = new Uint8Array(array, byteOffset);
                } else {
                  buf = new Uint8Array(array, byteOffset, length);
                }
                buf.__proto__ = Buffer2.prototype;
                return buf;
              }
              function fromObject(obj) {
                if (Buffer2.isBuffer(obj)) {
                  var len = checked(obj.length) | 0;
                  var buf = createBuffer(len);
                  if (buf.length === 0) {
                    return buf;
                  }
                  obj.copy(buf, 0, 0, len);
                  return buf;
                }
                if (obj.length !== void 0) {
                  if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
                    return createBuffer(0);
                  }
                  return fromArrayLike(obj);
                }
                if (obj.type === "Buffer" && Array.isArray(obj.data)) {
                  return fromArrayLike(obj.data);
                }
              }
              function checked(length) {
                if (length >= K_MAX_LENGTH) {
                  throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                }
                return length | 0;
              }
              function SlowBuffer(length) {
                if (+length != length) {
                  length = 0;
                }
                return Buffer2.alloc(+length);
              }
              Buffer2.isBuffer = function isBuffer2(b) {
                return b != null && b._isBuffer === true && b !== Buffer2.prototype;
              };
              Buffer2.compare = function compare(a, b) {
                if (isInstance(a, Uint8Array))
                  a = Buffer2.from(a, a.offset, a.byteLength);
                if (isInstance(b, Uint8Array))
                  b = Buffer2.from(b, b.offset, b.byteLength);
                if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
                  throw new TypeError(
                    'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                  );
                }
                if (a === b)
                  return 0;
                var x = a.length;
                var y = b.length;
                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                  if (a[i] !== b[i]) {
                    x = a[i];
                    y = b[i];
                    break;
                  }
                }
                if (x < y)
                  return -1;
                if (y < x)
                  return 1;
                return 0;
              };
              Buffer2.isEncoding = function isEncoding(encoding) {
                switch (String(encoding).toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "latin1":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                    return true;
                  default:
                    return false;
                }
              };
              Buffer2.concat = function concat(list, length) {
                if (!Array.isArray(list)) {
                  throw new TypeError('"list" argument must be an Array of Buffers');
                }
                if (list.length === 0) {
                  return Buffer2.alloc(0);
                }
                var i;
                if (length === void 0) {
                  length = 0;
                  for (i = 0; i < list.length; ++i) {
                    length += list[i].length;
                  }
                }
                var buffer = Buffer2.allocUnsafe(length);
                var pos = 0;
                for (i = 0; i < list.length; ++i) {
                  var buf = list[i];
                  if (isInstance(buf, Uint8Array)) {
                    buf = Buffer2.from(buf);
                  }
                  if (!Buffer2.isBuffer(buf)) {
                    throw new TypeError('"list" argument must be an Array of Buffers');
                  }
                  buf.copy(buffer, pos);
                  pos += buf.length;
                }
                return buffer;
              };
              function byteLength(string, encoding) {
                if (Buffer2.isBuffer(string)) {
                  return string.length;
                }
                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                  return string.byteLength;
                }
                if (typeof string !== "string") {
                  throw new TypeError(
                    'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
                  );
                }
                var len = string.length;
                var mustMatch = arguments.length > 2 && arguments[2] === true;
                if (!mustMatch && len === 0)
                  return 0;
                var loweredCase = false;
                for (; ;) {
                  switch (encoding) {
                    case "ascii":
                    case "latin1":
                    case "binary":
                      return len;
                    case "utf8":
                    case "utf-8":
                      return utf8ToBytes(string).length;
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return len * 2;
                    case "hex":
                      return len >>> 1;
                    case "base64":
                      return base64ToBytes(string).length;
                    default:
                      if (loweredCase) {
                        return mustMatch ? -1 : utf8ToBytes(string).length;
                      }
                      encoding = ("" + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              }
              Buffer2.byteLength = byteLength;
              function slowToString(encoding, start, end) {
                var loweredCase = false;
                if (start === void 0 || start < 0) {
                  start = 0;
                }
                if (start > this.length) {
                  return "";
                }
                if (end === void 0 || end > this.length) {
                  end = this.length;
                }
                if (end <= 0) {
                  return "";
                }
                end >>>= 0;
                start >>>= 0;
                if (end <= start) {
                  return "";
                }
                if (!encoding)
                  encoding = "utf8";
                while (true) {
                  switch (encoding) {
                    case "hex":
                      return hexSlice(this, start, end);
                    case "utf8":
                    case "utf-8":
                      return utf8Slice(this, start, end);
                    case "ascii":
                      return asciiSlice(this, start, end);
                    case "latin1":
                    case "binary":
                      return latin1Slice(this, start, end);
                    case "base64":
                      return base64Slice(this, start, end);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return utf16leSlice(this, start, end);
                    default:
                      if (loweredCase)
                        throw new TypeError("Unknown encoding: " + encoding);
                      encoding = (encoding + "").toLowerCase();
                      loweredCase = true;
                  }
                }
              }
              Buffer2.prototype._isBuffer = true;
              function swap(b, n, m) {
                var i = b[n];
                b[n] = b[m];
                b[m] = i;
              }
              Buffer2.prototype.swap16 = function swap16() {
                var len = this.length;
                if (len % 2 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 16-bits");
                }
                for (var i = 0; i < len; i += 2) {
                  swap(this, i, i + 1);
                }
                return this;
              };
              Buffer2.prototype.swap32 = function swap32() {
                var len = this.length;
                if (len % 4 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 32-bits");
                }
                for (var i = 0; i < len; i += 4) {
                  swap(this, i, i + 3);
                  swap(this, i + 1, i + 2);
                }
                return this;
              };
              Buffer2.prototype.swap64 = function swap64() {
                var len = this.length;
                if (len % 8 !== 0) {
                  throw new RangeError("Buffer size must be a multiple of 64-bits");
                }
                for (var i = 0; i < len; i += 8) {
                  swap(this, i, i + 7);
                  swap(this, i + 1, i + 6);
                  swap(this, i + 2, i + 5);
                  swap(this, i + 3, i + 4);
                }
                return this;
              };
              Buffer2.prototype.toString = function toString3() {
                var length = this.length;
                if (length === 0)
                  return "";
                if (arguments.length === 0)
                  return utf8Slice(this, 0, length);
                return slowToString.apply(this, arguments);
              };
              Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
              Buffer2.prototype.equals = function equals(b) {
                if (!Buffer2.isBuffer(b))
                  throw new TypeError("Argument must be a Buffer");
                if (this === b)
                  return true;
                return Buffer2.compare(this, b) === 0;
              };
              Buffer2.prototype.inspect = function inspect() {
                var str = "";
                var max = exports.INSPECT_MAX_BYTES;
                str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
                if (this.length > max)
                  str += " ... ";
                return "<Buffer " + str + ">";
              };
              Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                if (isInstance(target, Uint8Array)) {
                  target = Buffer2.from(target, target.offset, target.byteLength);
                }
                if (!Buffer2.isBuffer(target)) {
                  throw new TypeError(
                    'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
                  );
                }
                if (start === void 0) {
                  start = 0;
                }
                if (end === void 0) {
                  end = target ? target.length : 0;
                }
                if (thisStart === void 0) {
                  thisStart = 0;
                }
                if (thisEnd === void 0) {
                  thisEnd = this.length;
                }
                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                  throw new RangeError("out of range index");
                }
                if (thisStart >= thisEnd && start >= end) {
                  return 0;
                }
                if (thisStart >= thisEnd) {
                  return -1;
                }
                if (start >= end) {
                  return 1;
                }
                start >>>= 0;
                end >>>= 0;
                thisStart >>>= 0;
                thisEnd >>>= 0;
                if (this === target)
                  return 0;
                var x = thisEnd - thisStart;
                var y = end - start;
                var len = Math.min(x, y);
                var thisCopy = this.slice(thisStart, thisEnd);
                var targetCopy = target.slice(start, end);
                for (var i = 0; i < len; ++i) {
                  if (thisCopy[i] !== targetCopy[i]) {
                    x = thisCopy[i];
                    y = targetCopy[i];
                    break;
                  }
                }
                if (x < y)
                  return -1;
                if (y < x)
                  return 1;
                return 0;
              };
              function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                if (buffer.length === 0)
                  return -1;
                if (typeof byteOffset === "string") {
                  encoding = byteOffset;
                  byteOffset = 0;
                } else if (byteOffset > 2147483647) {
                  byteOffset = 2147483647;
                } else if (byteOffset < -2147483648) {
                  byteOffset = -2147483648;
                }
                byteOffset = +byteOffset;
                if (numberIsNaN(byteOffset)) {
                  byteOffset = dir ? 0 : buffer.length - 1;
                }
                if (byteOffset < 0)
                  byteOffset = buffer.length + byteOffset;
                if (byteOffset >= buffer.length) {
                  if (dir)
                    return -1;
                  else
                    byteOffset = buffer.length - 1;
                } else if (byteOffset < 0) {
                  if (dir)
                    byteOffset = 0;
                  else
                    return -1;
                }
                if (typeof val === "string") {
                  val = Buffer2.from(val, encoding);
                }
                if (Buffer2.isBuffer(val)) {
                  if (val.length === 0) {
                    return -1;
                  }
                  return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                } else if (typeof val === "number") {
                  val = val & 255;
                  if (typeof Uint8Array.prototype.indexOf === "function") {
                    if (dir) {
                      return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                    } else {
                      return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                    }
                  }
                  return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                }
                throw new TypeError("val must be string, number or Buffer");
              }
              function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                var indexSize = 1;
                var arrLength = arr.length;
                var valLength = val.length;
                if (encoding !== void 0) {
                  encoding = String(encoding).toLowerCase();
                  if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                    if (arr.length < 2 || val.length < 2) {
                      return -1;
                    }
                    indexSize = 2;
                    arrLength /= 2;
                    valLength /= 2;
                    byteOffset /= 2;
                  }
                }
                function read(buf, i2) {
                  if (indexSize === 1) {
                    return buf[i2];
                  } else {
                    return buf.readUInt16BE(i2 * indexSize);
                  }
                }
                var i;
                if (dir) {
                  var foundIndex = -1;
                  for (i = byteOffset; i < arrLength; i++) {
                    if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                      if (foundIndex === -1)
                        foundIndex = i;
                      if (i - foundIndex + 1 === valLength)
                        return foundIndex * indexSize;
                    } else {
                      if (foundIndex !== -1)
                        i -= i - foundIndex;
                      foundIndex = -1;
                    }
                  }
                } else {
                  if (byteOffset + valLength > arrLength)
                    byteOffset = arrLength - valLength;
                  for (i = byteOffset; i >= 0; i--) {
                    var found = true;
                    for (var j = 0; j < valLength; j++) {
                      if (read(arr, i + j) !== read(val, j)) {
                        found = false;
                        break;
                      }
                    }
                    if (found)
                      return i;
                  }
                }
                return -1;
              }
              Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
                return this.indexOf(val, byteOffset, encoding) !== -1;
              };
              Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
              };
              Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
              };
              function hexWrite(buf, string, offset, length) {
                offset = Number(offset) || 0;
                var remaining = buf.length - offset;
                if (!length) {
                  length = remaining;
                } else {
                  length = Number(length);
                  if (length > remaining) {
                    length = remaining;
                  }
                }
                var strLen = string.length;
                if (length > strLen / 2) {
                  length = strLen / 2;
                }
                for (var i = 0; i < length; ++i) {
                  var parsed = parseInt(string.substr(i * 2, 2), 16);
                  if (numberIsNaN(parsed))
                    return i;
                  buf[offset + i] = parsed;
                }
                return i;
              }
              function utf8Write(buf, string, offset, length) {
                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
              }
              function asciiWrite(buf, string, offset, length) {
                return blitBuffer(asciiToBytes(string), buf, offset, length);
              }
              function latin1Write(buf, string, offset, length) {
                return asciiWrite(buf, string, offset, length);
              }
              function base64Write(buf, string, offset, length) {
                return blitBuffer(base64ToBytes(string), buf, offset, length);
              }
              function ucs2Write(buf, string, offset, length) {
                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
              }
              Buffer2.prototype.write = function write(string, offset, length, encoding) {
                if (offset === void 0) {
                  encoding = "utf8";
                  length = this.length;
                  offset = 0;
                } else if (length === void 0 && typeof offset === "string") {
                  encoding = offset;
                  length = this.length;
                  offset = 0;
                } else if (isFinite(offset)) {
                  offset = offset >>> 0;
                  if (isFinite(length)) {
                    length = length >>> 0;
                    if (encoding === void 0)
                      encoding = "utf8";
                  } else {
                    encoding = length;
                    length = void 0;
                  }
                } else {
                  throw new Error(
                    "Buffer.write(string, encoding, offset[, length]) is no longer supported"
                  );
                }
                var remaining = this.length - offset;
                if (length === void 0 || length > remaining)
                  length = remaining;
                if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                  throw new RangeError("Attempt to write outside buffer bounds");
                }
                if (!encoding)
                  encoding = "utf8";
                var loweredCase = false;
                for (; ;) {
                  switch (encoding) {
                    case "hex":
                      return hexWrite(this, string, offset, length);
                    case "utf8":
                    case "utf-8":
                      return utf8Write(this, string, offset, length);
                    case "ascii":
                      return asciiWrite(this, string, offset, length);
                    case "latin1":
                    case "binary":
                      return latin1Write(this, string, offset, length);
                    case "base64":
                      return base64Write(this, string, offset, length);
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return ucs2Write(this, string, offset, length);
                    default:
                      if (loweredCase)
                        throw new TypeError("Unknown encoding: " + encoding);
                      encoding = ("" + encoding).toLowerCase();
                      loweredCase = true;
                  }
                }
              };
              Buffer2.prototype.toJSON = function toJSON2() {
                return {
                  type: "Buffer",
                  data: Array.prototype.slice.call(this._arr || this, 0)
                };
              };
              function base64Slice(buf, start, end) {
                if (start === 0 && end === buf.length) {
                  return base64.fromByteArray(buf);
                } else {
                  return base64.fromByteArray(buf.slice(start, end));
                }
              }
              function utf8Slice(buf, start, end) {
                end = Math.min(buf.length, end);
                var res = [];
                var i = start;
                while (i < end) {
                  var firstByte = buf[i];
                  var codePoint = null;
                  var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                  if (i + bytesPerSequence <= end) {
                    var secondByte, thirdByte, fourthByte, tempCodePoint;
                    switch (bytesPerSequence) {
                      case 1:
                        if (firstByte < 128) {
                          codePoint = firstByte;
                        }
                        break;
                      case 2:
                        secondByte = buf[i + 1];
                        if ((secondByte & 192) === 128) {
                          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                          if (tempCodePoint > 127) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 3:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                            codePoint = tempCodePoint;
                          }
                        }
                        break;
                      case 4:
                        secondByte = buf[i + 1];
                        thirdByte = buf[i + 2];
                        fourthByte = buf[i + 3];
                        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                            codePoint = tempCodePoint;
                          }
                        }
                    }
                  }
                  if (codePoint === null) {
                    codePoint = 65533;
                    bytesPerSequence = 1;
                  } else if (codePoint > 65535) {
                    codePoint -= 65536;
                    res.push(codePoint >>> 10 & 1023 | 55296);
                    codePoint = 56320 | codePoint & 1023;
                  }
                  res.push(codePoint);
                  i += bytesPerSequence;
                }
                return decodeCodePointsArray(res);
              }
              var MAX_ARGUMENTS_LENGTH = 4096;
              function decodeCodePointsArray(codePoints) {
                var len = codePoints.length;
                if (len <= MAX_ARGUMENTS_LENGTH) {
                  return String.fromCharCode.apply(String, codePoints);
                }
                var res = "";
                var i = 0;
                while (i < len) {
                  res += String.fromCharCode.apply(
                    String,
                    codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
                  );
                }
                return res;
              }
              function asciiSlice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i] & 127);
                }
                return ret;
              }
              function latin1Slice(buf, start, end) {
                var ret = "";
                end = Math.min(buf.length, end);
                for (var i = start; i < end; ++i) {
                  ret += String.fromCharCode(buf[i]);
                }
                return ret;
              }
              function hexSlice(buf, start, end) {
                var len = buf.length;
                if (!start || start < 0)
                  start = 0;
                if (!end || end < 0 || end > len)
                  end = len;
                var out = "";
                for (var i = start; i < end; ++i) {
                  out += toHex(buf[i]);
                }
                return out;
              }
              function utf16leSlice(buf, start, end) {
                var bytes = buf.slice(start, end);
                var res = "";
                for (var i = 0; i < bytes.length; i += 2) {
                  res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                }
                return res;
              }
              Buffer2.prototype.slice = function slice(start, end) {
                var len = this.length;
                start = ~~start;
                end = end === void 0 ? len : ~~end;
                if (start < 0) {
                  start += len;
                  if (start < 0)
                    start = 0;
                } else if (start > len) {
                  start = len;
                }
                if (end < 0) {
                  end += len;
                  if (end < 0)
                    end = 0;
                } else if (end > len) {
                  end = len;
                }
                if (end < start)
                  end = start;
                var newBuf = this.subarray(start, end);
                newBuf.__proto__ = Buffer2.prototype;
                return newBuf;
              };
              function checkOffset(offset, ext, length) {
                if (offset % 1 !== 0 || offset < 0)
                  throw new RangeError("offset is not uint");
                if (offset + ext > length)
                  throw new RangeError("Trying to access beyond buffer length");
              }
              Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength2 && (mul *= 256)) {
                  val += this[offset + i] * mul;
                }
                return val;
              };
              Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  checkOffset(offset, byteLength2, this.length);
                }
                var val = this[offset + --byteLength2];
                var mul = 1;
                while (byteLength2 > 0 && (mul *= 256)) {
                  val += this[offset + --byteLength2] * mul;
                }
                return val;
              };
              Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 1, this.length);
                return this[offset];
              };
              Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                return this[offset] | this[offset + 1] << 8;
              };
              Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                return this[offset] << 8 | this[offset + 1];
              };
              Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
              };
              Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
              };
              Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var val = this[offset];
                var mul = 1;
                var i = 0;
                while (++i < byteLength2 && (mul *= 256)) {
                  val += this[offset + i] * mul;
                }
                mul *= 128;
                if (val >= mul)
                  val -= Math.pow(2, 8 * byteLength2);
                return val;
              };
              Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert)
                  checkOffset(offset, byteLength2, this.length);
                var i = byteLength2;
                var mul = 1;
                var val = this[offset + --i];
                while (i > 0 && (mul *= 256)) {
                  val += this[offset + --i] * mul;
                }
                mul *= 128;
                if (val >= mul)
                  val -= Math.pow(2, 8 * byteLength2);
                return val;
              };
              Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 1, this.length);
                if (!(this[offset] & 128))
                  return this[offset];
                return (255 - this[offset] + 1) * -1;
              };
              Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                var val = this[offset] | this[offset + 1] << 8;
                return val & 32768 ? val | 4294901760 : val;
              };
              Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 2, this.length);
                var val = this[offset + 1] | this[offset] << 8;
                return val & 32768 ? val | 4294901760 : val;
              };
              Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
              };
              Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
              };
              Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, true, 23, 4);
              };
              Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 4, this.length);
                return ieee754.read(this, offset, false, 23, 4);
              };
              Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, true, 52, 8);
              };
              Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                offset = offset >>> 0;
                if (!noAssert)
                  checkOffset(offset, 8, this.length);
                return ieee754.read(this, offset, false, 52, 8);
              };
              function checkInt(buf, value, offset, ext, max, min) {
                if (!Buffer2.isBuffer(buf))
                  throw new TypeError('"buffer" argument must be a Buffer instance');
                if (value > max || value < min)
                  throw new RangeError('"value" argument is out of bounds');
                if (offset + ext > buf.length)
                  throw new RangeError("Index out of range");
              }
              Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                  checkInt(this, value, offset, byteLength2, maxBytes, 0);
                }
                var mul = 1;
                var i = 0;
                this[offset] = value & 255;
                while (++i < byteLength2 && (mul *= 256)) {
                  this[offset + i] = value / mul & 255;
                }
                return offset + byteLength2;
              };
              Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                byteLength2 = byteLength2 >>> 0;
                if (!noAssert) {
                  var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
                  checkInt(this, value, offset, byteLength2, maxBytes, 0);
                }
                var i = byteLength2 - 1;
                var mul = 1;
                this[offset + i] = value & 255;
                while (--i >= 0 && (mul *= 256)) {
                  this[offset + i] = value / mul & 255;
                }
                return offset + byteLength2;
              };
              Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 1, 255, 0);
                this[offset] = value & 255;
                return offset + 1;
              };
              Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };
              Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 65535, 0);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
              };
              Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset + 3] = value >>> 24;
                this[offset + 2] = value >>> 16;
                this[offset + 1] = value >>> 8;
                this[offset] = value & 255;
                return offset + 4;
              };
              Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 4294967295, 0);
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
              };
              Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength2 - 1);
                  checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                }
                var i = 0;
                var mul = 1;
                var sub = 0;
                this[offset] = value & 255;
                while (++i < byteLength2 && (mul *= 256)) {
                  if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
              };
              Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  var limit = Math.pow(2, 8 * byteLength2 - 1);
                  checkInt(this, value, offset, byteLength2, limit - 1, -limit);
                }
                var i = byteLength2 - 1;
                var mul = 1;
                var sub = 0;
                this[offset + i] = value & 255;
                while (--i >= 0 && (mul *= 256)) {
                  if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                    sub = 1;
                  }
                  this[offset + i] = (value / mul >> 0) - sub & 255;
                }
                return offset + byteLength2;
              };
              Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 1, 127, -128);
                if (value < 0)
                  value = 255 + value + 1;
                this[offset] = value & 255;
                return offset + 1;
              };
              Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                return offset + 2;
              };
              Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 2, 32767, -32768);
                this[offset] = value >>> 8;
                this[offset + 1] = value & 255;
                return offset + 2;
              };
              Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 2147483647, -2147483648);
                this[offset] = value & 255;
                this[offset + 1] = value >>> 8;
                this[offset + 2] = value >>> 16;
                this[offset + 3] = value >>> 24;
                return offset + 4;
              };
              Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert)
                  checkInt(this, value, offset, 4, 2147483647, -2147483648);
                if (value < 0)
                  value = 4294967295 + value + 1;
                this[offset] = value >>> 24;
                this[offset + 1] = value >>> 16;
                this[offset + 2] = value >>> 8;
                this[offset + 3] = value & 255;
                return offset + 4;
              };
              function checkIEEE754(buf, value, offset, ext, max, min) {
                if (offset + ext > buf.length)
                  throw new RangeError("Index out of range");
                if (offset < 0)
                  throw new RangeError("Index out of range");
              }
              function writeFloat(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
                }
                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                return offset + 4;
              }
              Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                return writeFloat(this, value, offset, true, noAssert);
              };
              Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                return writeFloat(this, value, offset, false, noAssert);
              };
              function writeDouble(buf, value, offset, littleEndian, noAssert) {
                value = +value;
                offset = offset >>> 0;
                if (!noAssert) {
                  checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
                }
                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                return offset + 8;
              }
              Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                return writeDouble(this, value, offset, true, noAssert);
              };
              Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                return writeDouble(this, value, offset, false, noAssert);
              };
              Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
                if (!Buffer2.isBuffer(target))
                  throw new TypeError("argument should be a Buffer");
                if (!start)
                  start = 0;
                if (!end && end !== 0)
                  end = this.length;
                if (targetStart >= target.length)
                  targetStart = target.length;
                if (!targetStart)
                  targetStart = 0;
                if (end > 0 && end < start)
                  end = start;
                if (end === start)
                  return 0;
                if (target.length === 0 || this.length === 0)
                  return 0;
                if (targetStart < 0) {
                  throw new RangeError("targetStart out of bounds");
                }
                if (start < 0 || start >= this.length)
                  throw new RangeError("Index out of range");
                if (end < 0)
                  throw new RangeError("sourceEnd out of bounds");
                if (end > this.length)
                  end = this.length;
                if (target.length - targetStart < end - start) {
                  end = target.length - targetStart + start;
                }
                var len = end - start;
                if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
                  this.copyWithin(targetStart, start, end);
                } else if (this === target && start < targetStart && targetStart < end) {
                  for (var i = len - 1; i >= 0; --i) {
                    target[i + targetStart] = this[i + start];
                  }
                } else {
                  Uint8Array.prototype.set.call(
                    target,
                    this.subarray(start, end),
                    targetStart
                  );
                }
                return len;
              };
              Buffer2.prototype.fill = function fill(val, start, end, encoding) {
                if (typeof val === "string") {
                  if (typeof start === "string") {
                    encoding = start;
                    start = 0;
                    end = this.length;
                  } else if (typeof end === "string") {
                    encoding = end;
                    end = this.length;
                  }
                  if (encoding !== void 0 && typeof encoding !== "string") {
                    throw new TypeError("encoding must be a string");
                  }
                  if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
                    throw new TypeError("Unknown encoding: " + encoding);
                  }
                  if (val.length === 1) {
                    var code = val.charCodeAt(0);
                    if (encoding === "utf8" && code < 128 || encoding === "latin1") {
                      val = code;
                    }
                  }
                } else if (typeof val === "number") {
                  val = val & 255;
                }
                if (start < 0 || this.length < start || this.length < end) {
                  throw new RangeError("Out of range index");
                }
                if (end <= start) {
                  return this;
                }
                start = start >>> 0;
                end = end === void 0 ? this.length : end >>> 0;
                if (!val)
                  val = 0;
                var i;
                if (typeof val === "number") {
                  for (i = start; i < end; ++i) {
                    this[i] = val;
                  }
                } else {
                  var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
                  var len = bytes.length;
                  if (len === 0) {
                    throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                  }
                  for (i = 0; i < end - start; ++i) {
                    this[i + start] = bytes[i % len];
                  }
                }
                return this;
              };
              var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
              function base64clean(str) {
                str = str.split("=")[0];
                str = str.trim().replace(INVALID_BASE64_RE, "");
                if (str.length < 2)
                  return "";
                while (str.length % 4 !== 0) {
                  str = str + "=";
                }
                return str;
              }
              function toHex(n) {
                if (n < 16)
                  return "0" + n.toString(16);
                return n.toString(16);
              }
              function utf8ToBytes(string, units) {
                units = units || Infinity;
                var codePoint;
                var length = string.length;
                var leadSurrogate = null;
                var bytes = [];
                for (var i = 0; i < length; ++i) {
                  codePoint = string.charCodeAt(i);
                  if (codePoint > 55295 && codePoint < 57344) {
                    if (!leadSurrogate) {
                      if (codePoint > 56319) {
                        if ((units -= 3) > -1)
                          bytes.push(239, 191, 189);
                        continue;
                      } else if (i + 1 === length) {
                        if ((units -= 3) > -1)
                          bytes.push(239, 191, 189);
                        continue;
                      }
                      leadSurrogate = codePoint;
                      continue;
                    }
                    if (codePoint < 56320) {
                      if ((units -= 3) > -1)
                        bytes.push(239, 191, 189);
                      leadSurrogate = codePoint;
                      continue;
                    }
                    codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                  } else if (leadSurrogate) {
                    if ((units -= 3) > -1)
                      bytes.push(239, 191, 189);
                  }
                  leadSurrogate = null;
                  if (codePoint < 128) {
                    if ((units -= 1) < 0)
                      break;
                    bytes.push(codePoint);
                  } else if (codePoint < 2048) {
                    if ((units -= 2) < 0)
                      break;
                    bytes.push(
                      codePoint >> 6 | 192,
                      codePoint & 63 | 128
                    );
                  } else if (codePoint < 65536) {
                    if ((units -= 3) < 0)
                      break;
                    bytes.push(
                      codePoint >> 12 | 224,
                      codePoint >> 6 & 63 | 128,
                      codePoint & 63 | 128
                    );
                  } else if (codePoint < 1114112) {
                    if ((units -= 4) < 0)
                      break;
                    bytes.push(
                      codePoint >> 18 | 240,
                      codePoint >> 12 & 63 | 128,
                      codePoint >> 6 & 63 | 128,
                      codePoint & 63 | 128
                    );
                  } else {
                    throw new Error("Invalid code point");
                  }
                }
                return bytes;
              }
              function asciiToBytes(str) {
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                  byteArray.push(str.charCodeAt(i) & 255);
                }
                return byteArray;
              }
              function utf16leToBytes(str, units) {
                var c, hi, lo;
                var byteArray = [];
                for (var i = 0; i < str.length; ++i) {
                  if ((units -= 2) < 0)
                    break;
                  c = str.charCodeAt(i);
                  hi = c >> 8;
                  lo = c % 256;
                  byteArray.push(lo);
                  byteArray.push(hi);
                }
                return byteArray;
              }
              function base64ToBytes(str) {
                return base64.toByteArray(base64clean(str));
              }
              function blitBuffer(src, dst, offset, length) {
                for (var i = 0; i < length; ++i) {
                  if (i + offset >= dst.length || i >= src.length)
                    break;
                  dst[i + offset] = src[i];
                }
                return i;
              }
              function isInstance(obj, type) {
                return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
              }
              function numberIsNaN(obj) {
                return obj !== obj;
              }
            }
          });

          // node_modules/safe-buffer/index.js
          var require_safe_buffer = __commonJS({
            "node_modules/safe-buffer/index.js"(exports, module) {
              var buffer = require_buffer2();
              var Buffer2 = buffer.Buffer;
              function copyProps(src, dst) {
                for (var key in src) {
                  dst[key] = src[key];
                }
              }
              if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
                module.exports = buffer;
              } else {
                copyProps(buffer, exports);
                exports.Buffer = SafeBuffer;
              }
              function SafeBuffer(arg, encodingOrOffset, length) {
                return Buffer2(arg, encodingOrOffset, length);
              }
              SafeBuffer.prototype = Object.create(Buffer2.prototype);
              copyProps(Buffer2, SafeBuffer);
              SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === "number") {
                  throw new TypeError("Argument must not be a number");
                }
                return Buffer2(arg, encodingOrOffset, length);
              };
              SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                var buf = Buffer2(size);
                if (fill !== void 0) {
                  if (typeof encoding === "string") {
                    buf.fill(fill, encoding);
                  } else {
                    buf.fill(fill);
                  }
                } else {
                  buf.fill(0);
                }
                return buf;
              };
              SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                return Buffer2(size);
              };
              SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                return buffer.SlowBuffer(size);
              };
            }
          });

          // node_modules/process-nextick-args/index.js
          var require_process_nextick_args = __commonJS({
            "node_modules/process-nextick-args/index.js"(exports, module) {
              "use strict";
              if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
                module.exports = { nextTick };
              } else {
                module.exports = process;
              }
              function nextTick(fn, arg1, arg2, arg3) {
                if (typeof fn !== "function") {
                  throw new TypeError('"callback" argument must be a function');
                }
                var len = arguments.length;
                var args, i;
                switch (len) {
                  case 0:
                  case 1:
                    return process.nextTick(fn);
                  case 2:
                    return process.nextTick(function afterTickOne() {
                      fn.call(null, arg1);
                    });
                  case 3:
                    return process.nextTick(function afterTickTwo() {
                      fn.call(null, arg1, arg2);
                    });
                  case 4:
                    return process.nextTick(function afterTickThree() {
                      fn.call(null, arg1, arg2, arg3);
                    });
                  default:
                    args = new Array(len - 1);
                    i = 0;
                    while (i < args.length) {
                      args[i++] = arguments[i];
                    }
                    return process.nextTick(function afterTick() {
                      fn.apply(null, args);
                    });
                }
              }
            }
          });

          // node_modules/isarray/index.js
          var require_isarray = __commonJS({
            "node_modules/isarray/index.js"(exports, module) {
              var toString3 = {}.toString;
              module.exports = Array.isArray || function (arr) {
                return toString3.call(arr) == "[object Array]";
              };
            }
          });

          // node_modules/events/events.js
          var require_events = __commonJS({
            "node_modules/events/events.js"(exports, module) {
              "use strict";
              var R = typeof Reflect === "object" ? Reflect : null;
              var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
                return Function.prototype.apply.call(target, receiver, args);
              };
              var ReflectOwnKeys;
              if (R && typeof R.ownKeys === "function") {
                ReflectOwnKeys = R.ownKeys;
              } else if (Object.getOwnPropertySymbols) {
                ReflectOwnKeys = function ReflectOwnKeys2(target) {
                  return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
                };
              } else {
                ReflectOwnKeys = function ReflectOwnKeys2(target) {
                  return Object.getOwnPropertyNames(target);
                };
              }
              function ProcessEmitWarning(warning) {
                if (console && console.warn)
                  console.warn(warning);
              }
              var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
                return value !== value;
              };
              function EventEmitter() {
                EventEmitter.init.call(this);
              }
              module.exports = EventEmitter;
              module.exports.once = once;
              EventEmitter.EventEmitter = EventEmitter;
              EventEmitter.prototype._events = void 0;
              EventEmitter.prototype._eventsCount = 0;
              EventEmitter.prototype._maxListeners = void 0;
              var defaultMaxListeners = 10;
              function checkListener(listener) {
                if (typeof listener !== "function") {
                  throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
                }
              }
              Object.defineProperty(EventEmitter, "defaultMaxListeners", {
                enumerable: true,
                get: function () {
                  return defaultMaxListeners;
                },
                set: function (arg) {
                  if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
                    throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
                  }
                  defaultMaxListeners = arg;
                }
              });
              EventEmitter.init = function () {
                if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
                  this._events = /* @__PURE__ */ Object.create(null);
                  this._eventsCount = 0;
                }
                this._maxListeners = this._maxListeners || void 0;
              };
              EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
                  throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
                }
                this._maxListeners = n;
                return this;
              };
              function _getMaxListeners(that) {
                if (that._maxListeners === void 0)
                  return EventEmitter.defaultMaxListeners;
                return that._maxListeners;
              }
              EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                return _getMaxListeners(this);
              };
              EventEmitter.prototype.emit = function emit(type) {
                var args = [];
                for (var i = 1; i < arguments.length; i++)
                  args.push(arguments[i]);
                var doError = type === "error";
                var events = this._events;
                if (events !== void 0)
                  doError = doError && events.error === void 0;
                else if (!doError)
                  return false;
                if (doError) {
                  var er;
                  if (args.length > 0)
                    er = args[0];
                  if (er instanceof Error) {
                    throw er;
                  }
                  var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
                  err.context = er;
                  throw err;
                }
                var handler = events[type];
                if (handler === void 0)
                  return false;
                if (typeof handler === "function") {
                  ReflectApply(handler, this, args);
                } else {
                  var len = handler.length;
                  var listeners = arrayClone(handler, len);
                  for (var i = 0; i < len; ++i)
                    ReflectApply(listeners[i], this, args);
                }
                return true;
              };
              function _addListener(target, type, listener, prepend) {
                var m;
                var events;
                var existing;
                checkListener(listener);
                events = target._events;
                if (events === void 0) {
                  events = target._events = /* @__PURE__ */ Object.create(null);
                  target._eventsCount = 0;
                } else {
                  if (events.newListener !== void 0) {
                    target.emit(
                      "newListener",
                      type,
                      listener.listener ? listener.listener : listener
                    );
                    events = target._events;
                  }
                  existing = events[type];
                }
                if (existing === void 0) {
                  existing = events[type] = listener;
                  ++target._eventsCount;
                } else {
                  if (typeof existing === "function") {
                    existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                  } else if (prepend) {
                    existing.unshift(listener);
                  } else {
                    existing.push(listener);
                  }
                  m = _getMaxListeners(target);
                  if (m > 0 && existing.length > m && !existing.warned) {
                    existing.warned = true;
                    var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
                    w.name = "MaxListenersExceededWarning";
                    w.emitter = target;
                    w.type = type;
                    w.count = existing.length;
                    ProcessEmitWarning(w);
                  }
                }
                return target;
              }
              EventEmitter.prototype.addListener = function addListener(type, listener) {
                return _addListener(this, type, listener, false);
              };
              EventEmitter.prototype.on = EventEmitter.prototype.addListener;
              EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                return _addListener(this, type, listener, true);
              };
              function onceWrapper() {
                if (!this.fired) {
                  this.target.removeListener(this.type, this.wrapFn);
                  this.fired = true;
                  if (arguments.length === 0)
                    return this.listener.call(this.target);
                  return this.listener.apply(this.target, arguments);
                }
              }
              function _onceWrap(target, type, listener) {
                var state = { fired: false, wrapFn: void 0, target, type, listener };
                var wrapped = onceWrapper.bind(state);
                wrapped.listener = listener;
                state.wrapFn = wrapped;
                return wrapped;
              }
              EventEmitter.prototype.once = function once2(type, listener) {
                checkListener(listener);
                this.on(type, _onceWrap(this, type, listener));
                return this;
              };
              EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                checkListener(listener);
                this.prependListener(type, _onceWrap(this, type, listener));
                return this;
              };
              EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                var list, events, position, i, originalListener;
                checkListener(listener);
                events = this._events;
                if (events === void 0)
                  return this;
                list = events[type];
                if (list === void 0)
                  return this;
                if (list === listener || list.listener === listener) {
                  if (--this._eventsCount === 0)
                    this._events = /* @__PURE__ */ Object.create(null);
                  else {
                    delete events[type];
                    if (events.removeListener)
                      this.emit("removeListener", type, list.listener || listener);
                  }
                } else if (typeof list !== "function") {
                  position = -1;
                  for (i = list.length - 1; i >= 0; i--) {
                    if (list[i] === listener || list[i].listener === listener) {
                      originalListener = list[i].listener;
                      position = i;
                      break;
                    }
                  }
                  if (position < 0)
                    return this;
                  if (position === 0)
                    list.shift();
                  else {
                    spliceOne(list, position);
                  }
                  if (list.length === 1)
                    events[type] = list[0];
                  if (events.removeListener !== void 0)
                    this.emit("removeListener", type, originalListener || listener);
                }
                return this;
              };
              EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
              EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                var listeners, events, i;
                events = this._events;
                if (events === void 0)
                  return this;
                if (events.removeListener === void 0) {
                  if (arguments.length === 0) {
                    this._events = /* @__PURE__ */ Object.create(null);
                    this._eventsCount = 0;
                  } else if (events[type] !== void 0) {
                    if (--this._eventsCount === 0)
                      this._events = /* @__PURE__ */ Object.create(null);
                    else
                      delete events[type];
                  }
                  return this;
                }
                if (arguments.length === 0) {
                  var keys = Object.keys(events);
                  var key;
                  for (i = 0; i < keys.length; ++i) {
                    key = keys[i];
                    if (key === "removeListener")
                      continue;
                    this.removeAllListeners(key);
                  }
                  this.removeAllListeners("removeListener");
                  this._events = /* @__PURE__ */ Object.create(null);
                  this._eventsCount = 0;
                  return this;
                }
                listeners = events[type];
                if (typeof listeners === "function") {
                  this.removeListener(type, listeners);
                } else if (listeners !== void 0) {
                  for (i = listeners.length - 1; i >= 0; i--) {
                    this.removeListener(type, listeners[i]);
                  }
                }
                return this;
              };
              function _listeners(target, type, unwrap) {
                var events = target._events;
                if (events === void 0)
                  return [];
                var evlistener = events[type];
                if (evlistener === void 0)
                  return [];
                if (typeof evlistener === "function")
                  return unwrap ? [evlistener.listener || evlistener] : [evlistener];
                return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
              }
              EventEmitter.prototype.listeners = function listeners(type) {
                return _listeners(this, type, true);
              };
              EventEmitter.prototype.rawListeners = function rawListeners(type) {
                return _listeners(this, type, false);
              };
              EventEmitter.listenerCount = function (emitter, type) {
                if (typeof emitter.listenerCount === "function") {
                  return emitter.listenerCount(type);
                } else {
                  return listenerCount.call(emitter, type);
                }
              };
              EventEmitter.prototype.listenerCount = listenerCount;
              function listenerCount(type) {
                var events = this._events;
                if (events !== void 0) {
                  var evlistener = events[type];
                  if (typeof evlistener === "function") {
                    return 1;
                  } else if (evlistener !== void 0) {
                    return evlistener.length;
                  }
                }
                return 0;
              }
              EventEmitter.prototype.eventNames = function eventNames() {
                return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
              };
              function arrayClone(arr, n) {
                var copy = new Array(n);
                for (var i = 0; i < n; ++i)
                  copy[i] = arr[i];
                return copy;
              }
              function spliceOne(list, index) {
                for (; index + 1 < list.length; index++)
                  list[index] = list[index + 1];
                list.pop();
              }
              function unwrapListeners(arr) {
                var ret = new Array(arr.length);
                for (var i = 0; i < ret.length; ++i) {
                  ret[i] = arr[i].listener || arr[i];
                }
                return ret;
              }
              function once(emitter, name) {
                return new Promise(function (resolve, reject) {
                  function errorListener(err) {
                    emitter.removeListener(name, resolver);
                    reject(err);
                  }
                  function resolver() {
                    if (typeof emitter.removeListener === "function") {
                      emitter.removeListener("error", errorListener);
                    }
                    resolve([].slice.call(arguments));
                  }
                  ;
                  eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
                  if (name !== "error") {
                    addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
                  }
                });
              }
              function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                if (typeof emitter.on === "function") {
                  eventTargetAgnosticAddListener(emitter, "error", handler, flags);
                }
              }
              function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                if (typeof emitter.on === "function") {
                  if (flags.once) {
                    emitter.once(name, listener);
                  } else {
                    emitter.on(name, listener);
                  }
                } else if (typeof emitter.addEventListener === "function") {
                  emitter.addEventListener(name, function wrapListener(arg) {
                    if (flags.once) {
                      emitter.removeEventListener(name, wrapListener);
                    }
                    listener(arg);
                  });
                } else {
                  throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
                }
              }
            }
          });

          // node_modules/readable-stream/lib/internal/streams/stream-browser.js
          var require_stream_browser = __commonJS({
            "node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
              module.exports = require_events().EventEmitter;
            }
          });

          // node_modules/readable-stream/node_modules/safe-buffer/index.js
          var require_safe_buffer2 = __commonJS({
            "node_modules/readable-stream/node_modules/safe-buffer/index.js"(exports, module) {
              var buffer = require_buffer2();
              var Buffer2 = buffer.Buffer;
              function copyProps(src, dst) {
                for (var key in src) {
                  dst[key] = src[key];
                }
              }
              if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
                module.exports = buffer;
              } else {
                copyProps(buffer, exports);
                exports.Buffer = SafeBuffer;
              }
              function SafeBuffer(arg, encodingOrOffset, length) {
                return Buffer2(arg, encodingOrOffset, length);
              }
              copyProps(Buffer2, SafeBuffer);
              SafeBuffer.from = function (arg, encodingOrOffset, length) {
                if (typeof arg === "number") {
                  throw new TypeError("Argument must not be a number");
                }
                return Buffer2(arg, encodingOrOffset, length);
              };
              SafeBuffer.alloc = function (size, fill, encoding) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                var buf = Buffer2(size);
                if (fill !== void 0) {
                  if (typeof encoding === "string") {
                    buf.fill(fill, encoding);
                  } else {
                    buf.fill(fill);
                  }
                } else {
                  buf.fill(0);
                }
                return buf;
              };
              SafeBuffer.allocUnsafe = function (size) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                return Buffer2(size);
              };
              SafeBuffer.allocUnsafeSlow = function (size) {
                if (typeof size !== "number") {
                  throw new TypeError("Argument must be a number");
                }
                return buffer.SlowBuffer(size);
              };
            }
          });

          // node_modules/core-util-is/lib/util.js
          var require_util = __commonJS({
            "node_modules/core-util-is/lib/util.js"(exports) {
              function isArray2(arg) {
                if (Array.isArray) {
                  return Array.isArray(arg);
                }
                return objectToString(arg) === "[object Array]";
              }
              exports.isArray = isArray2;
              function isBoolean2(arg) {
                return typeof arg === "boolean";
              }
              exports.isBoolean = isBoolean2;
              function isNull(arg) {
                return arg === null;
              }
              exports.isNull = isNull;
              function isNullOrUndefined(arg) {
                return arg == null;
              }
              exports.isNullOrUndefined = isNullOrUndefined;
              function isNumber2(arg) {
                return typeof arg === "number";
              }
              exports.isNumber = isNumber2;
              function isString2(arg) {
                return typeof arg === "string";
              }
              exports.isString = isString2;
              function isSymbol(arg) {
                return typeof arg === "symbol";
              }
              exports.isSymbol = isSymbol;
              function isUndefined2(arg) {
                return arg === void 0;
              }
              exports.isUndefined = isUndefined2;
              function isRegExp2(re) {
                return objectToString(re) === "[object RegExp]";
              }
              exports.isRegExp = isRegExp2;
              function isObject2(arg) {
                return typeof arg === "object" && arg !== null;
              }
              exports.isObject = isObject2;
              function isDate2(d) {
                return objectToString(d) === "[object Date]";
              }
              exports.isDate = isDate2;
              function isError(e) {
                return objectToString(e) === "[object Error]" || e instanceof Error;
              }
              exports.isError = isError;
              function isFunction2(arg) {
                return typeof arg === "function";
              }
              exports.isFunction = isFunction2;
              function isPrimitive(arg) {
                return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
                  typeof arg === "undefined";
              }
              exports.isPrimitive = isPrimitive;
              exports.isBuffer = require_buffer2().Buffer.isBuffer;
              function objectToString(o) {
                return Object.prototype.toString.call(o);
              }
            }
          });

          // (disabled):node_modules/util/util.js
          var require_util2 = __commonJS({
            "(disabled):node_modules/util/util.js"() {
            }
          });

          // node_modules/readable-stream/lib/internal/streams/BufferList.js
          var require_BufferList = __commonJS({
            "node_modules/readable-stream/lib/internal/streams/BufferList.js"(exports, module) {
              "use strict";
              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }
              var Buffer2 = require_safe_buffer2().Buffer;
              var util = require_util2();
              function copyBuffer(src, target, offset) {
                src.copy(target, offset);
              }
              module.exports = function () {
                function BufferList() {
                  _classCallCheck(this, BufferList);
                  this.head = null;
                  this.tail = null;
                  this.length = 0;
                }
                BufferList.prototype.push = function push(v) {
                  var entry = { data: v, next: null };
                  if (this.length > 0)
                    this.tail.next = entry;
                  else
                    this.head = entry;
                  this.tail = entry;
                  ++this.length;
                };
                BufferList.prototype.unshift = function unshift(v) {
                  var entry = { data: v, next: this.head };
                  if (this.length === 0)
                    this.tail = entry;
                  this.head = entry;
                  ++this.length;
                };
                BufferList.prototype.shift = function shift() {
                  if (this.length === 0)
                    return;
                  var ret = this.head.data;
                  if (this.length === 1)
                    this.head = this.tail = null;
                  else
                    this.head = this.head.next;
                  --this.length;
                  return ret;
                };
                BufferList.prototype.clear = function clear() {
                  this.head = this.tail = null;
                  this.length = 0;
                };
                BufferList.prototype.join = function join(s) {
                  if (this.length === 0)
                    return "";
                  var p = this.head;
                  var ret = "" + p.data;
                  while (p = p.next) {
                    ret += s + p.data;
                  }
                  return ret;
                };
                BufferList.prototype.concat = function concat(n) {
                  if (this.length === 0)
                    return Buffer2.alloc(0);
                  var ret = Buffer2.allocUnsafe(n >>> 0);
                  var p = this.head;
                  var i = 0;
                  while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                  }
                  return ret;
                };
                return BufferList;
              }();
              if (util && util.inspect && util.inspect.custom) {
                module.exports.prototype[util.inspect.custom] = function () {
                  var obj = util.inspect({ length: this.length });
                  return this.constructor.name + " " + obj;
                };
              }
            }
          });

          // node_modules/readable-stream/lib/internal/streams/destroy.js
          var require_destroy = __commonJS({
            "node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
              "use strict";
              var pna = require_process_nextick_args();
              function destroy(err, cb) {
                var _this = this;
                var readableDestroyed = this._readableState && this._readableState.destroyed;
                var writableDestroyed = this._writableState && this._writableState.destroyed;
                if (readableDestroyed || writableDestroyed) {
                  if (cb) {
                    cb(err);
                  } else if (err) {
                    if (!this._writableState) {
                      pna.nextTick(emitErrorNT, this, err);
                    } else if (!this._writableState.errorEmitted) {
                      this._writableState.errorEmitted = true;
                      pna.nextTick(emitErrorNT, this, err);
                    }
                  }
                  return this;
                }
                if (this._readableState) {
                  this._readableState.destroyed = true;
                }
                if (this._writableState) {
                  this._writableState.destroyed = true;
                }
                this._destroy(err || null, function (err2) {
                  if (!cb && err2) {
                    if (!_this._writableState) {
                      pna.nextTick(emitErrorNT, _this, err2);
                    } else if (!_this._writableState.errorEmitted) {
                      _this._writableState.errorEmitted = true;
                      pna.nextTick(emitErrorNT, _this, err2);
                    }
                  } else if (cb) {
                    cb(err2);
                  }
                });
                return this;
              }
              function undestroy() {
                if (this._readableState) {
                  this._readableState.destroyed = false;
                  this._readableState.reading = false;
                  this._readableState.ended = false;
                  this._readableState.endEmitted = false;
                }
                if (this._writableState) {
                  this._writableState.destroyed = false;
                  this._writableState.ended = false;
                  this._writableState.ending = false;
                  this._writableState.finalCalled = false;
                  this._writableState.prefinished = false;
                  this._writableState.finished = false;
                  this._writableState.errorEmitted = false;
                }
              }
              function emitErrorNT(self2, err) {
                self2.emit("error", err);
              }
              module.exports = {
                destroy,
                undestroy
              };
            }
          });

          // node_modules/util-deprecate/browser.js
          var require_browser = __commonJS({
            "node_modules/util-deprecate/browser.js"(exports, module) {
              module.exports = deprecate;
              function deprecate(fn, msg) {
                if (config("noDeprecation")) {
                  return fn;
                }
                var warned = false;
                function deprecated() {
                  if (!warned) {
                    if (config("throwDeprecation")) {
                      throw new Error(msg);
                    } else if (config("traceDeprecation")) {
                      console.trace(msg);
                    } else {
                      console.warn(msg);
                    }
                    warned = true;
                  }
                  return fn.apply(this, arguments);
                }
                return deprecated;
              }
              function config(name) {
                try {
                  if (!global.localStorage)
                    return false;
                } catch (_) {
                  return false;
                }
                var val = global.localStorage[name];
                if (null == val)
                  return false;
                return String(val).toLowerCase() === "true";
              }
            }
          });

          // node_modules/readable-stream/lib/_stream_writable.js
          var require_stream_writable = __commonJS({
            "node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
              "use strict";
              var pna = require_process_nextick_args();
              module.exports = Writable;
              function CorkedRequest(state) {
                var _this = this;
                this.next = null;
                this.entry = null;
                this.finish = function () {
                  onCorkedFinish(_this, state);
                };
              }
              var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
              var Duplex;
              Writable.WritableState = WritableState;
              var util = Object.create(require_util());
              util.inherits = require_inherits_browser();
              var internalUtil = {
                deprecate: require_browser()
              };
              var Stream = require_stream_browser();
              var Buffer2 = require_safe_buffer2().Buffer;
              var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function () {
              };
              function _uint8ArrayToBuffer(chunk) {
                return Buffer2.from(chunk);
              }
              function _isUint8Array(obj) {
                return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
              }
              var destroyImpl = require_destroy();
              util.inherits(Writable, Stream);
              function nop() {
              }
              function WritableState(options, stream) {
                Duplex = Duplex || require_stream_duplex();
                options = options || {};
                var isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode = this.objectMode || !!options.writableObjectMode;
                var hwm = options.highWaterMark;
                var writableHwm = options.writableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                if (hwm || hwm === 0)
                  this.highWaterMark = hwm;
                else if (isDuplex && (writableHwm || writableHwm === 0))
                  this.highWaterMark = writableHwm;
                else
                  this.highWaterMark = defaultHwm;
                this.highWaterMark = Math.floor(this.highWaterMark);
                this.finalCalled = false;
                this.needDrain = false;
                this.ending = false;
                this.ended = false;
                this.finished = false;
                this.destroyed = false;
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.length = 0;
                this.writing = false;
                this.corked = 0;
                this.sync = true;
                this.bufferProcessing = false;
                this.onwrite = function (er) {
                  onwrite(stream, er);
                };
                this.writecb = null;
                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null;
                this.pendingcb = 0;
                this.prefinished = false;
                this.errorEmitted = false;
                this.bufferedRequestCount = 0;
                this.corkedRequestsFree = new CorkedRequest(this);
              }
              WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                  out.push(current);
                  current = current.next;
                }
                return out;
              };
              (function () {
                try {
                  Object.defineProperty(WritableState.prototype, "buffer", {
                    get: internalUtil.deprecate(function () {
                      return this.getBuffer();
                    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                  });
                } catch (_) {
                }
              })();
              var realHasInstance;
              if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                  value: function (object) {
                    if (realHasInstance.call(this, object))
                      return true;
                    if (this !== Writable)
                      return false;
                    return object && object._writableState instanceof WritableState;
                  }
                });
              } else {
                realHasInstance = function (object) {
                  return object instanceof this;
                };
              }
              function Writable(options) {
                Duplex = Duplex || require_stream_duplex();
                if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
                  return new Writable(options);
                }
                this._writableState = new WritableState(options, this);
                this.writable = true;
                if (options) {
                  if (typeof options.write === "function")
                    this._write = options.write;
                  if (typeof options.writev === "function")
                    this._writev = options.writev;
                  if (typeof options.destroy === "function")
                    this._destroy = options.destroy;
                  if (typeof options.final === "function")
                    this._final = options.final;
                }
                Stream.call(this);
              }
              Writable.prototype.pipe = function () {
                this.emit("error", new Error("Cannot pipe, not readable"));
              };
              function writeAfterEnd(stream, cb) {
                var er = new Error("write after end");
                stream.emit("error", er);
                pna.nextTick(cb, er);
              }
              function validChunk(stream, state, chunk, cb) {
                var valid = true;
                var er = false;
                if (chunk === null) {
                  er = new TypeError("May not write null values to stream");
                } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                  er = new TypeError("Invalid non-string/buffer chunk");
                }
                if (er) {
                  stream.emit("error", er);
                  pna.nextTick(cb, er);
                  valid = false;
                }
                return valid;
              }
              Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);
                if (isBuf && !Buffer2.isBuffer(chunk)) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }
                if (typeof encoding === "function") {
                  cb = encoding;
                  encoding = null;
                }
                if (isBuf)
                  encoding = "buffer";
                else if (!encoding)
                  encoding = state.defaultEncoding;
                if (typeof cb !== "function")
                  cb = nop;
                if (state.ended)
                  writeAfterEnd(this, cb);
                else if (isBuf || validChunk(this, state, chunk, cb)) {
                  state.pendingcb++;
                  ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }
                return ret;
              };
              Writable.prototype.cork = function () {
                var state = this._writableState;
                state.corked++;
              };
              Writable.prototype.uncork = function () {
                var state = this._writableState;
                if (state.corked) {
                  state.corked--;
                  if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                    clearBuffer(this, state);
                }
              };
              Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                if (typeof encoding === "string")
                  encoding = encoding.toLowerCase();
                if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                  throw new TypeError("Unknown encoding: " + encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
              };
              function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                  chunk = Buffer2.from(chunk, encoding);
                }
                return chunk;
              }
              Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                  return this._writableState.highWaterMark;
                }
              });
              function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                  var newChunk = decodeChunk(state, chunk, encoding);
                  if (chunk !== newChunk) {
                    isBuf = true;
                    encoding = "buffer";
                    chunk = newChunk;
                  }
                }
                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark;
                if (!ret)
                  state.needDrain = true;
                if (state.writing || state.corked) {
                  var last = state.lastBufferedRequest;
                  state.lastBufferedRequest = {
                    chunk,
                    encoding,
                    isBuf,
                    callback: cb,
                    next: null
                  };
                  if (last) {
                    last.next = state.lastBufferedRequest;
                  } else {
                    state.bufferedRequest = state.lastBufferedRequest;
                  }
                  state.bufferedRequestCount += 1;
                } else {
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                }
                return ret;
              }
              function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (writev)
                  stream._writev(chunk, state.onwrite);
                else
                  stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
              }
              function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;
                if (sync) {
                  pna.nextTick(cb, er);
                  pna.nextTick(finishMaybe, stream, state);
                  stream._writableState.errorEmitted = true;
                  stream.emit("error", er);
                } else {
                  cb(er);
                  stream._writableState.errorEmitted = true;
                  stream.emit("error", er);
                  finishMaybe(stream, state);
                }
              }
              function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
              }
              function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;
                onwriteStateUpdate(state);
                if (er)
                  onwriteError(stream, state, sync, er, cb);
                else {
                  var finished = needFinish(state);
                  if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                    clearBuffer(stream, state);
                  }
                  if (sync) {
                    asyncWrite(afterWrite, stream, state, finished, cb);
                  } else {
                    afterWrite(stream, state, finished, cb);
                  }
                }
              }
              function afterWrite(stream, state, finished, cb) {
                if (!finished)
                  onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
              }
              function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                  state.needDrain = false;
                  stream.emit("drain");
                }
              }
              function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;
                if (stream._writev && entry && entry.next) {
                  var l = state.bufferedRequestCount;
                  var buffer = new Array(l);
                  var holder = state.corkedRequestsFree;
                  holder.entry = entry;
                  var count = 0;
                  var allBuffers = true;
                  while (entry) {
                    buffer[count] = entry;
                    if (!entry.isBuf)
                      allBuffers = false;
                    entry = entry.next;
                    count += 1;
                  }
                  buffer.allBuffers = allBuffers;
                  doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                  state.pendingcb++;
                  state.lastBufferedRequest = null;
                  if (holder.next) {
                    state.corkedRequestsFree = holder.next;
                    holder.next = null;
                  } else {
                    state.corkedRequestsFree = new CorkedRequest(state);
                  }
                  state.bufferedRequestCount = 0;
                } else {
                  while (entry) {
                    var chunk = entry.chunk;
                    var encoding = entry.encoding;
                    var cb = entry.callback;
                    var len = state.objectMode ? 1 : chunk.length;
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                    entry = entry.next;
                    state.bufferedRequestCount--;
                    if (state.writing) {
                      break;
                    }
                  }
                  if (entry === null)
                    state.lastBufferedRequest = null;
                }
                state.bufferedRequest = entry;
                state.bufferProcessing = false;
              }
              Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new Error("_write() is not implemented"));
              };
              Writable.prototype._writev = null;
              Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;
                if (typeof chunk === "function") {
                  cb = chunk;
                  chunk = null;
                  encoding = null;
                } else if (typeof encoding === "function") {
                  cb = encoding;
                  encoding = null;
                }
                if (chunk !== null && chunk !== void 0)
                  this.write(chunk, encoding);
                if (state.corked) {
                  state.corked = 1;
                  this.uncork();
                }
                if (!state.ending)
                  endWritable(this, state, cb);
              };
              function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
              }
              function callFinal(stream, state) {
                stream._final(function (err) {
                  state.pendingcb--;
                  if (err) {
                    stream.emit("error", err);
                  }
                  state.prefinished = true;
                  stream.emit("prefinish");
                  finishMaybe(stream, state);
                });
              }
              function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                  if (typeof stream._final === "function") {
                    state.pendingcb++;
                    state.finalCalled = true;
                    pna.nextTick(callFinal, stream, state);
                  } else {
                    state.prefinished = true;
                    stream.emit("prefinish");
                  }
                }
              }
              function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                  prefinish(stream, state);
                  if (state.pendingcb === 0) {
                    state.finished = true;
                    stream.emit("finish");
                  }
                }
                return need;
              }
              function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                  if (state.finished)
                    pna.nextTick(cb);
                  else
                    stream.once("finish", cb);
                }
                state.ended = true;
                stream.writable = false;
              }
              function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                state.corkedRequestsFree.next = corkReq;
              }
              Object.defineProperty(Writable.prototype, "destroyed", {
                get: function () {
                  if (this._writableState === void 0) {
                    return false;
                  }
                  return this._writableState.destroyed;
                },
                set: function (value) {
                  if (!this._writableState) {
                    return;
                  }
                  this._writableState.destroyed = value;
                }
              });
              Writable.prototype.destroy = destroyImpl.destroy;
              Writable.prototype._undestroy = destroyImpl.undestroy;
              Writable.prototype._destroy = function (err, cb) {
                this.end();
                cb(err);
              };
            }
          });

          // node_modules/readable-stream/lib/_stream_duplex.js
          var require_stream_duplex = __commonJS({
            "node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
              "use strict";
              var pna = require_process_nextick_args();
              var objectKeys = Object.keys || function (obj) {
                var keys2 = [];
                for (var key in obj) {
                  keys2.push(key);
                }
                return keys2;
              };
              module.exports = Duplex;
              var util = Object.create(require_util());
              util.inherits = require_inherits_browser();
              var Readable = require_stream_readable();
              var Writable = require_stream_writable();
              util.inherits(Duplex, Readable);
              {
                keys = objectKeys(Writable.prototype);
                for (v = 0; v < keys.length; v++) {
                  method = keys[v];
                  if (!Duplex.prototype[method])
                    Duplex.prototype[method] = Writable.prototype[method];
                }
              }
              var keys;
              var method;
              var v;
              function Duplex(options) {
                if (!(this instanceof Duplex))
                  return new Duplex(options);
                Readable.call(this, options);
                Writable.call(this, options);
                if (options && options.readable === false)
                  this.readable = false;
                if (options && options.writable === false)
                  this.writable = false;
                this.allowHalfOpen = true;
                if (options && options.allowHalfOpen === false)
                  this.allowHalfOpen = false;
                this.once("end", onend);
              }
              Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                  return this._writableState.highWaterMark;
                }
              });
              function onend() {
                if (this.allowHalfOpen || this._writableState.ended)
                  return;
                pna.nextTick(onEndNT, this);
              }
              function onEndNT(self2) {
                self2.end();
              }
              Object.defineProperty(Duplex.prototype, "destroyed", {
                get: function () {
                  if (this._readableState === void 0 || this._writableState === void 0) {
                    return false;
                  }
                  return this._readableState.destroyed && this._writableState.destroyed;
                },
                set: function (value) {
                  if (this._readableState === void 0 || this._writableState === void 0) {
                    return;
                  }
                  this._readableState.destroyed = value;
                  this._writableState.destroyed = value;
                }
              });
              Duplex.prototype._destroy = function (err, cb) {
                this.push(null);
                this.end();
                pna.nextTick(cb, err);
              };
            }
          });

          // node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js
          var require_string_decoder = __commonJS({
            "node_modules/readable-stream/node_modules/string_decoder/lib/string_decoder.js"(exports) {
              "use strict";
              var Buffer2 = require_safe_buffer2().Buffer;
              var isEncoding = Buffer2.isEncoding || function (encoding) {
                encoding = "" + encoding;
                switch (encoding && encoding.toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                  case "raw":
                    return true;
                  default:
                    return false;
                }
              };
              function _normalizeEncoding(enc) {
                if (!enc)
                  return "utf8";
                var retried;
                while (true) {
                  switch (enc) {
                    case "utf8":
                    case "utf-8":
                      return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return "utf16le";
                    case "latin1":
                    case "binary":
                      return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                      return enc;
                    default:
                      if (retried)
                        return;
                      enc = ("" + enc).toLowerCase();
                      retried = true;
                  }
                }
              }
              function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
                  throw new Error("Unknown encoding: " + enc);
                return nenc || enc;
              }
              exports.StringDecoder = StringDecoder;
              function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;
                switch (this.encoding) {
                  case "utf16le":
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;
                  case "utf8":
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;
                  case "base64":
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;
                  default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer2.allocUnsafe(nb);
              }
              StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0)
                  return "";
                var r;
                var i;
                if (this.lastNeed) {
                  r = this.fillLast(buf);
                  if (r === void 0)
                    return "";
                  i = this.lastNeed;
                  this.lastNeed = 0;
                } else {
                  i = 0;
                }
                if (i < buf.length)
                  return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || "";
              };
              StringDecoder.prototype.end = utf8End;
              StringDecoder.prototype.text = utf8Text;
              StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
              };
              function utf8CheckByte(byte) {
                if (byte <= 127)
                  return 0;
                else if (byte >> 5 === 6)
                  return 2;
                else if (byte >> 4 === 14)
                  return 3;
                else if (byte >> 3 === 30)
                  return 4;
                return byte >> 6 === 2 ? -1 : -2;
              }
              function utf8CheckIncomplete(self2, buf, i) {
                var j = buf.length - 1;
                if (j < i)
                  return 0;
                var nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0)
                    self2.lastNeed = nb - 1;
                  return nb;
                }
                if (--j < i || nb === -2)
                  return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0)
                    self2.lastNeed = nb - 2;
                  return nb;
                }
                if (--j < i || nb === -2)
                  return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0) {
                    if (nb === 2)
                      nb = 0;
                    else
                      self2.lastNeed = nb - 3;
                  }
                  return nb;
                }
                return 0;
              }
              function utf8CheckExtraBytes(self2, buf, p) {
                if ((buf[0] & 192) !== 128) {
                  self2.lastNeed = 0;
                  return "\uFFFD";
                }
                if (self2.lastNeed > 1 && buf.length > 1) {
                  if ((buf[1] & 192) !== 128) {
                    self2.lastNeed = 1;
                    return "\uFFFD";
                  }
                  if (self2.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 192) !== 128) {
                      self2.lastNeed = 2;
                      return "\uFFFD";
                    }
                  }
                }
              }
              function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== void 0)
                  return r;
                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, p, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
              }
              function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed)
                  return buf.toString("utf8", i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString("utf8", i, end);
              }
              function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed)
                  return r + "\uFFFD";
                return r;
              }
              function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                  var r = buf.toString("utf16le", i);
                  if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 55296 && c <= 56319) {
                      this.lastNeed = 2;
                      this.lastTotal = 4;
                      this.lastChar[0] = buf[buf.length - 2];
                      this.lastChar[1] = buf[buf.length - 1];
                      return r.slice(0, -1);
                    }
                  }
                  return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString("utf16le", i, buf.length - 1);
              }
              function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed) {
                  var end = this.lastTotal - this.lastNeed;
                  return r + this.lastChar.toString("utf16le", 0, end);
                }
                return r;
              }
              function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0)
                  return buf.toString("base64", i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;
                if (n === 1) {
                  this.lastChar[0] = buf[buf.length - 1];
                } else {
                  this.lastChar[0] = buf[buf.length - 2];
                  this.lastChar[1] = buf[buf.length - 1];
                }
                return buf.toString("base64", i, buf.length - n);
              }
              function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed)
                  return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
                return r;
              }
              function simpleWrite(buf) {
                return buf.toString(this.encoding);
              }
              function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : "";
              }
            }
          });

          // node_modules/readable-stream/lib/_stream_readable.js
          var require_stream_readable = __commonJS({
            "node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
              "use strict";
              var pna = require_process_nextick_args();
              module.exports = Readable;
              var isArray2 = require_isarray();
              var Duplex;
              Readable.ReadableState = ReadableState;
              var EE = require_events().EventEmitter;
              var EElistenerCount = function (emitter, type) {
                return emitter.listeners(type).length;
              };
              var Stream = require_stream_browser();
              var Buffer2 = require_safe_buffer2().Buffer;
              var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function () {
              };
              function _uint8ArrayToBuffer(chunk) {
                return Buffer2.from(chunk);
              }
              function _isUint8Array(obj) {
                return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
              }
              var util = Object.create(require_util());
              util.inherits = require_inherits_browser();
              var debugUtil = require_util2();
              var debug = void 0;
              if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog("stream");
              } else {
                debug = function () {
                };
              }
              var BufferList = require_BufferList();
              var destroyImpl = require_destroy();
              var StringDecoder;
              util.inherits(Readable, Stream);
              var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
              function prependListener(emitter, event, fn) {
                if (typeof emitter.prependListener === "function")
                  return emitter.prependListener(event, fn);
                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (isArray2(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else
                  emitter._events[event] = [fn, emitter._events[event]];
              }
              function ReadableState(options, stream) {
                Duplex = Duplex || require_stream_duplex();
                options = options || {};
                var isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode = this.objectMode || !!options.readableObjectMode;
                var hwm = options.highWaterMark;
                var readableHwm = options.readableHighWaterMark;
                var defaultHwm = this.objectMode ? 16 : 16 * 1024;
                if (hwm || hwm === 0)
                  this.highWaterMark = hwm;
                else if (isDuplex && (readableHwm || readableHwm === 0))
                  this.highWaterMark = readableHwm;
                else
                  this.highWaterMark = defaultHwm;
                this.highWaterMark = Math.floor(this.highWaterMark);
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;
                this.sync = true;
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.destroyed = false;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.awaitDrain = 0;
                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                  if (!StringDecoder)
                    StringDecoder = require_string_decoder().StringDecoder;
                  this.decoder = new StringDecoder(options.encoding);
                  this.encoding = options.encoding;
                }
              }
              function Readable(options) {
                Duplex = Duplex || require_stream_duplex();
                if (!(this instanceof Readable))
                  return new Readable(options);
                this._readableState = new ReadableState(options, this);
                this.readable = true;
                if (options) {
                  if (typeof options.read === "function")
                    this._read = options.read;
                  if (typeof options.destroy === "function")
                    this._destroy = options.destroy;
                }
                Stream.call(this);
              }
              Object.defineProperty(Readable.prototype, "destroyed", {
                get: function () {
                  if (this._readableState === void 0) {
                    return false;
                  }
                  return this._readableState.destroyed;
                },
                set: function (value) {
                  if (!this._readableState) {
                    return;
                  }
                  this._readableState.destroyed = value;
                }
              });
              Readable.prototype.destroy = destroyImpl.destroy;
              Readable.prototype._undestroy = destroyImpl.undestroy;
              Readable.prototype._destroy = function (err, cb) {
                this.push(null);
                cb(err);
              };
              Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;
                if (!state.objectMode) {
                  if (typeof chunk === "string") {
                    encoding = encoding || state.defaultEncoding;
                    if (encoding !== state.encoding) {
                      chunk = Buffer2.from(chunk, encoding);
                      encoding = "";
                    }
                    skipChunkCheck = true;
                  }
                } else {
                  skipChunkCheck = true;
                }
                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
              };
              Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
              };
              function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                var state = stream._readableState;
                if (chunk === null) {
                  state.reading = false;
                  onEofChunk(stream, state);
                } else {
                  var er;
                  if (!skipChunkCheck)
                    er = chunkInvalid(state, chunk);
                  if (er) {
                    stream.emit("error", er);
                  } else if (state.objectMode || chunk && chunk.length > 0) {
                    if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                      chunk = _uint8ArrayToBuffer(chunk);
                    }
                    if (addToFront) {
                      if (state.endEmitted)
                        stream.emit("error", new Error("stream.unshift() after end event"));
                      else
                        addChunk(stream, state, chunk, true);
                    } else if (state.ended) {
                      stream.emit("error", new Error("stream.push() after EOF"));
                    } else {
                      state.reading = false;
                      if (state.decoder && !encoding) {
                        chunk = state.decoder.write(chunk);
                        if (state.objectMode || chunk.length !== 0)
                          addChunk(stream, state, chunk, false);
                        else
                          maybeReadMore(stream, state);
                      } else {
                        addChunk(stream, state, chunk, false);
                      }
                    }
                  } else if (!addToFront) {
                    state.reading = false;
                  }
                }
                return needMoreData(state);
              }
              function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                  stream.emit("data", chunk);
                  stream.read(0);
                } else {
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront)
                    state.buffer.unshift(chunk);
                  else
                    state.buffer.push(chunk);
                  if (state.needReadable)
                    emitReadable(stream);
                }
                maybeReadMore(stream, state);
              }
              function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                  er = new TypeError("Invalid non-string/buffer chunk");
                }
                return er;
              }
              function needMoreData(state) {
                return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
              }
              Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
              };
              Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder)
                  StringDecoder = require_string_decoder().StringDecoder;
                this._readableState.decoder = new StringDecoder(enc);
                this._readableState.encoding = enc;
                return this;
              };
              var MAX_HWM = 8388608;
              function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                  n = MAX_HWM;
                } else {
                  n--;
                  n |= n >>> 1;
                  n |= n >>> 2;
                  n |= n >>> 4;
                  n |= n >>> 8;
                  n |= n >>> 16;
                  n++;
                }
                return n;
              }
              function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended)
                  return 0;
                if (state.objectMode)
                  return 1;
                if (n !== n) {
                  if (state.flowing && state.length)
                    return state.buffer.head.data.length;
                  else
                    return state.length;
                }
                if (n > state.highWaterMark)
                  state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length)
                  return n;
                if (!state.ended) {
                  state.needReadable = true;
                  return 0;
                }
                return state.length;
              }
              Readable.prototype.read = function (n) {
                debug("read", n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;
                if (n !== 0)
                  state.emittedReadable = false;
                if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
                  debug("read: emitReadable", state.length, state.ended);
                  if (state.length === 0 && state.ended)
                    endReadable(this);
                  else
                    emitReadable(this);
                  return null;
                }
                n = howMuchToRead(n, state);
                if (n === 0 && state.ended) {
                  if (state.length === 0)
                    endReadable(this);
                  return null;
                }
                var doRead = state.needReadable;
                debug("need readable", doRead);
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                  doRead = true;
                  debug("length less than watermark", doRead);
                }
                if (state.ended || state.reading) {
                  doRead = false;
                  debug("reading or ended", doRead);
                } else if (doRead) {
                  debug("do read");
                  state.reading = true;
                  state.sync = true;
                  if (state.length === 0)
                    state.needReadable = true;
                  this._read(state.highWaterMark);
                  state.sync = false;
                  if (!state.reading)
                    n = howMuchToRead(nOrig, state);
                }
                var ret;
                if (n > 0)
                  ret = fromList(n, state);
                else
                  ret = null;
                if (ret === null) {
                  state.needReadable = true;
                  n = 0;
                } else {
                  state.length -= n;
                }
                if (state.length === 0) {
                  if (!state.ended)
                    state.needReadable = true;
                  if (nOrig !== n && state.ended)
                    endReadable(this);
                }
                if (ret !== null)
                  this.emit("data", ret);
                return ret;
              };
              function onEofChunk(stream, state) {
                if (state.ended)
                  return;
                if (state.decoder) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) {
                    state.buffer.push(chunk);
                    state.length += state.objectMode ? 1 : chunk.length;
                  }
                }
                state.ended = true;
                emitReadable(stream);
              }
              function emitReadable(stream) {
                var state = stream._readableState;
                state.needReadable = false;
                if (!state.emittedReadable) {
                  debug("emitReadable", state.flowing);
                  state.emittedReadable = true;
                  if (state.sync)
                    pna.nextTick(emitReadable_, stream);
                  else
                    emitReadable_(stream);
                }
              }
              function emitReadable_(stream) {
                debug("emit readable");
                stream.emit("readable");
                flow(stream);
              }
              function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                  state.readingMore = true;
                  pna.nextTick(maybeReadMore_, stream, state);
                }
              }
              function maybeReadMore_(stream, state) {
                var len = state.length;
                while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
                  debug("maybeReadMore read 0");
                  stream.read(0);
                  if (len === state.length)
                    break;
                  else
                    len = state.length;
                }
                state.readingMore = false;
              }
              Readable.prototype._read = function (n) {
                this.emit("error", new Error("_read() is not implemented"));
              };
              Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;
                switch (state.pipesCount) {
                  case 0:
                    state.pipes = dest;
                    break;
                  case 1:
                    state.pipes = [state.pipes, dest];
                    break;
                  default:
                    state.pipes.push(dest);
                    break;
                }
                state.pipesCount += 1;
                debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted)
                  pna.nextTick(endFn);
                else
                  src.once("end", endFn);
                dest.on("unpipe", onunpipe);
                function onunpipe(readable, unpipeInfo) {
                  debug("onunpipe");
                  if (readable === src) {
                    if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                      unpipeInfo.hasUnpiped = true;
                      cleanup();
                    }
                  }
                }
                function onend() {
                  debug("onend");
                  dest.end();
                }
                var ondrain = pipeOnDrain(src);
                dest.on("drain", ondrain);
                var cleanedUp = false;
                function cleanup() {
                  debug("cleanup");
                  dest.removeListener("close", onclose);
                  dest.removeListener("finish", onfinish);
                  dest.removeListener("drain", ondrain);
                  dest.removeListener("error", onerror);
                  dest.removeListener("unpipe", onunpipe);
                  src.removeListener("end", onend);
                  src.removeListener("end", unpipe);
                  src.removeListener("data", ondata);
                  cleanedUp = true;
                  if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                    ondrain();
                }
                var increasedAwaitDrain = false;
                src.on("data", ondata);
                function ondata(chunk) {
                  debug("ondata");
                  increasedAwaitDrain = false;
                  var ret = dest.write(chunk);
                  if (false === ret && !increasedAwaitDrain) {
                    if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                      debug("false write response, pause", state.awaitDrain);
                      state.awaitDrain++;
                      increasedAwaitDrain = true;
                    }
                    src.pause();
                  }
                }
                function onerror(er) {
                  debug("onerror", er);
                  unpipe();
                  dest.removeListener("error", onerror);
                  if (EElistenerCount(dest, "error") === 0)
                    dest.emit("error", er);
                }
                prependListener(dest, "error", onerror);
                function onclose() {
                  dest.removeListener("finish", onfinish);
                  unpipe();
                }
                dest.once("close", onclose);
                function onfinish() {
                  debug("onfinish");
                  dest.removeListener("close", onclose);
                  unpipe();
                }
                dest.once("finish", onfinish);
                function unpipe() {
                  debug("unpipe");
                  src.unpipe(dest);
                }
                dest.emit("pipe", src);
                if (!state.flowing) {
                  debug("pipe resume");
                  src.resume();
                }
                return dest;
              };
              function pipeOnDrain(src) {
                return function () {
                  var state = src._readableState;
                  debug("pipeOnDrain", state.awaitDrain);
                  if (state.awaitDrain)
                    state.awaitDrain--;
                  if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                    state.flowing = true;
                    flow(src);
                  }
                };
              }
              Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = { hasUnpiped: false };
                if (state.pipesCount === 0)
                  return this;
                if (state.pipesCount === 1) {
                  if (dest && dest !== state.pipes)
                    return this;
                  if (!dest)
                    dest = state.pipes;
                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;
                  if (dest)
                    dest.emit("unpipe", this, unpipeInfo);
                  return this;
                }
                if (!dest) {
                  var dests = state.pipes;
                  var len = state.pipesCount;
                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;
                  for (var i = 0; i < len; i++) {
                    dests[i].emit("unpipe", this, { hasUnpiped: false });
                  }
                  return this;
                }
                var index = indexOf(state.pipes, dest);
                if (index === -1)
                  return this;
                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1)
                  state.pipes = state.pipes[0];
                dest.emit("unpipe", this, unpipeInfo);
                return this;
              };
              Readable.prototype.on = function (ev, fn) {
                var res = Stream.prototype.on.call(this, ev, fn);
                if (ev === "data") {
                  if (this._readableState.flowing !== false)
                    this.resume();
                } else if (ev === "readable") {
                  var state = this._readableState;
                  if (!state.endEmitted && !state.readableListening) {
                    state.readableListening = state.needReadable = true;
                    state.emittedReadable = false;
                    if (!state.reading) {
                      pna.nextTick(nReadingNextTick, this);
                    } else if (state.length) {
                      emitReadable(this);
                    }
                  }
                }
                return res;
              };
              Readable.prototype.addListener = Readable.prototype.on;
              function nReadingNextTick(self2) {
                debug("readable nexttick read 0");
                self2.read(0);
              }
              Readable.prototype.resume = function () {
                var state = this._readableState;
                if (!state.flowing) {
                  debug("resume");
                  state.flowing = true;
                  resume(this, state);
                }
                return this;
              };
              function resume(stream, state) {
                if (!state.resumeScheduled) {
                  state.resumeScheduled = true;
                  pna.nextTick(resume_, stream, state);
                }
              }
              function resume_(stream, state) {
                if (!state.reading) {
                  debug("resume read 0");
                  stream.read(0);
                }
                state.resumeScheduled = false;
                state.awaitDrain = 0;
                stream.emit("resume");
                flow(stream);
                if (state.flowing && !state.reading)
                  stream.read(0);
              }
              Readable.prototype.pause = function () {
                debug("call pause flowing=%j", this._readableState.flowing);
                if (false !== this._readableState.flowing) {
                  debug("pause");
                  this._readableState.flowing = false;
                  this.emit("pause");
                }
                return this;
              };
              function flow(stream) {
                var state = stream._readableState;
                debug("flow", state.flowing);
                while (state.flowing && stream.read() !== null) {
                }
              }
              Readable.prototype.wrap = function (stream) {
                var _this = this;
                var state = this._readableState;
                var paused = false;
                stream.on("end", function () {
                  debug("wrapped end");
                  if (state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length)
                      _this.push(chunk);
                  }
                  _this.push(null);
                });
                stream.on("data", function (chunk) {
                  debug("wrapped data");
                  if (state.decoder)
                    chunk = state.decoder.write(chunk);
                  if (state.objectMode && (chunk === null || chunk === void 0))
                    return;
                  else if (!state.objectMode && (!chunk || !chunk.length))
                    return;
                  var ret = _this.push(chunk);
                  if (!ret) {
                    paused = true;
                    stream.pause();
                  }
                });
                for (var i in stream) {
                  if (this[i] === void 0 && typeof stream[i] === "function") {
                    this[i] = function (method) {
                      return function () {
                        return stream[method].apply(stream, arguments);
                      };
                    }(i);
                  }
                }
                for (var n = 0; n < kProxyEvents.length; n++) {
                  stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }
                this._read = function (n2) {
                  debug("wrapped _read", n2);
                  if (paused) {
                    paused = false;
                    stream.resume();
                  }
                };
                return this;
              };
              Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function () {
                  return this._readableState.highWaterMark;
                }
              });
              Readable._fromList = fromList;
              function fromList(n, state) {
                if (state.length === 0)
                  return null;
                var ret;
                if (state.objectMode)
                  ret = state.buffer.shift();
                else if (!n || n >= state.length) {
                  if (state.decoder)
                    ret = state.buffer.join("");
                  else if (state.buffer.length === 1)
                    ret = state.buffer.head.data;
                  else
                    ret = state.buffer.concat(state.length);
                  state.buffer.clear();
                } else {
                  ret = fromListPartial(n, state.buffer, state.decoder);
                }
                return ret;
              }
              function fromListPartial(n, list, hasStrings) {
                var ret;
                if (n < list.head.data.length) {
                  ret = list.head.data.slice(0, n);
                  list.head.data = list.head.data.slice(n);
                } else if (n === list.head.data.length) {
                  ret = list.shift();
                } else {
                  ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
                }
                return ret;
              }
              function copyFromBufferString(n, list) {
                var p = list.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while (p = p.next) {
                  var str = p.data;
                  var nb = n > str.length ? str.length : n;
                  if (nb === str.length)
                    ret += str;
                  else
                    ret += str.slice(0, n);
                  n -= nb;
                  if (n === 0) {
                    if (nb === str.length) {
                      ++c;
                      if (p.next)
                        list.head = p.next;
                      else
                        list.head = list.tail = null;
                    } else {
                      list.head = p;
                      p.data = str.slice(nb);
                    }
                    break;
                  }
                  ++c;
                }
                list.length -= c;
                return ret;
              }
              function copyFromBuffer(n, list) {
                var ret = Buffer2.allocUnsafe(n);
                var p = list.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while (p = p.next) {
                  var buf = p.data;
                  var nb = n > buf.length ? buf.length : n;
                  buf.copy(ret, ret.length - n, 0, nb);
                  n -= nb;
                  if (n === 0) {
                    if (nb === buf.length) {
                      ++c;
                      if (p.next)
                        list.head = p.next;
                      else
                        list.head = list.tail = null;
                    } else {
                      list.head = p;
                      p.data = buf.slice(nb);
                    }
                    break;
                  }
                  ++c;
                }
                list.length -= c;
                return ret;
              }
              function endReadable(stream) {
                var state = stream._readableState;
                if (state.length > 0)
                  throw new Error('"endReadable()" called on non-empty stream');
                if (!state.endEmitted) {
                  state.ended = true;
                  pna.nextTick(endReadableNT, state, stream);
                }
              }
              function endReadableNT(state, stream) {
                if (!state.endEmitted && state.length === 0) {
                  state.endEmitted = true;
                  stream.readable = false;
                  stream.emit("end");
                }
              }
              function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                  if (xs[i] === x)
                    return i;
                }
                return -1;
              }
            }
          });

          // node_modules/readable-stream/lib/_stream_transform.js
          var require_stream_transform = __commonJS({
            "node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
              "use strict";
              module.exports = Transform;
              var Duplex = require_stream_duplex();
              var util = Object.create(require_util());
              util.inherits = require_inherits_browser();
              util.inherits(Transform, Duplex);
              function afterTransform(er, data) {
                var ts = this._transformState;
                ts.transforming = false;
                var cb = ts.writecb;
                if (!cb) {
                  return this.emit("error", new Error("write callback called multiple times"));
                }
                ts.writechunk = null;
                ts.writecb = null;
                if (data != null)
                  this.push(data);
                cb(er);
                var rs = this._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                  this._read(rs.highWaterMark);
                }
              }
              function Transform(options) {
                if (!(this instanceof Transform))
                  return new Transform(options);
                Duplex.call(this, options);
                this._transformState = {
                  afterTransform: afterTransform.bind(this),
                  needTransform: false,
                  transforming: false,
                  writecb: null,
                  writechunk: null,
                  writeencoding: null
                };
                this._readableState.needReadable = true;
                this._readableState.sync = false;
                if (options) {
                  if (typeof options.transform === "function")
                    this._transform = options.transform;
                  if (typeof options.flush === "function")
                    this._flush = options.flush;
                }
                this.on("prefinish", prefinish);
              }
              function prefinish() {
                var _this = this;
                if (typeof this._flush === "function") {
                  this._flush(function (er, data) {
                    done(_this, er, data);
                  });
                } else {
                  done(this, null, null);
                }
              }
              Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
              };
              Transform.prototype._transform = function (chunk, encoding, cb) {
                throw new Error("_transform() is not implemented");
              };
              Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                  var rs = this._readableState;
                  if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                    this._read(rs.highWaterMark);
                }
              };
              Transform.prototype._read = function (n) {
                var ts = this._transformState;
                if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
                  ts.transforming = true;
                  this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                  ts.needTransform = true;
                }
              };
              Transform.prototype._destroy = function (err, cb) {
                var _this2 = this;
                Duplex.prototype._destroy.call(this, err, function (err2) {
                  cb(err2);
                  _this2.emit("close");
                });
              };
              function done(stream, er, data) {
                if (er)
                  return stream.emit("error", er);
                if (data != null)
                  stream.push(data);
                if (stream._writableState.length)
                  throw new Error("Calling transform done when ws.length != 0");
                if (stream._transformState.transforming)
                  throw new Error("Calling transform done when still transforming");
                return stream.push(null);
              }
            }
          });

          // node_modules/readable-stream/lib/_stream_passthrough.js
          var require_stream_passthrough = __commonJS({
            "node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
              "use strict";
              module.exports = PassThrough;
              var Transform = require_stream_transform();
              var util = Object.create(require_util());
              util.inherits = require_inherits_browser();
              util.inherits(PassThrough, Transform);
              function PassThrough(options) {
                if (!(this instanceof PassThrough))
                  return new PassThrough(options);
                Transform.call(this, options);
              }
              PassThrough.prototype._transform = function (chunk, encoding, cb) {
                cb(null, chunk);
              };
            }
          });

          // node_modules/readable-stream/readable-browser.js
          var require_readable_browser = __commonJS({
            "node_modules/readable-stream/readable-browser.js"(exports, module) {
              exports = module.exports = require_stream_readable();
              exports.Stream = exports;
              exports.Readable = exports;
              exports.Writable = require_stream_writable();
              exports.Duplex = require_stream_duplex();
              exports.Transform = require_stream_transform();
              exports.PassThrough = require_stream_passthrough();
            }
          });

          // node_modules/string_decoder/lib/string_decoder.js
          var require_string_decoder2 = __commonJS({
            "node_modules/string_decoder/lib/string_decoder.js"(exports) {
              "use strict";
              var Buffer2 = require_safe_buffer().Buffer;
              var isEncoding = Buffer2.isEncoding || function (encoding) {
                encoding = "" + encoding;
                switch (encoding && encoding.toLowerCase()) {
                  case "hex":
                  case "utf8":
                  case "utf-8":
                  case "ascii":
                  case "binary":
                  case "base64":
                  case "ucs2":
                  case "ucs-2":
                  case "utf16le":
                  case "utf-16le":
                  case "raw":
                    return true;
                  default:
                    return false;
                }
              };
              function _normalizeEncoding(enc) {
                if (!enc)
                  return "utf8";
                var retried;
                while (true) {
                  switch (enc) {
                    case "utf8":
                    case "utf-8":
                      return "utf8";
                    case "ucs2":
                    case "ucs-2":
                    case "utf16le":
                    case "utf-16le":
                      return "utf16le";
                    case "latin1":
                    case "binary":
                      return "latin1";
                    case "base64":
                    case "ascii":
                    case "hex":
                      return enc;
                    default:
                      if (retried)
                        return;
                      enc = ("" + enc).toLowerCase();
                      retried = true;
                  }
                }
              }
              function normalizeEncoding(enc) {
                var nenc = _normalizeEncoding(enc);
                if (typeof nenc !== "string" && (Buffer2.isEncoding === isEncoding || !isEncoding(enc)))
                  throw new Error("Unknown encoding: " + enc);
                return nenc || enc;
              }
              exports.StringDecoder = StringDecoder;
              function StringDecoder(encoding) {
                this.encoding = normalizeEncoding(encoding);
                var nb;
                switch (this.encoding) {
                  case "utf16le":
                    this.text = utf16Text;
                    this.end = utf16End;
                    nb = 4;
                    break;
                  case "utf8":
                    this.fillLast = utf8FillLast;
                    nb = 4;
                    break;
                  case "base64":
                    this.text = base64Text;
                    this.end = base64End;
                    nb = 3;
                    break;
                  default:
                    this.write = simpleWrite;
                    this.end = simpleEnd;
                    return;
                }
                this.lastNeed = 0;
                this.lastTotal = 0;
                this.lastChar = Buffer2.allocUnsafe(nb);
              }
              StringDecoder.prototype.write = function (buf) {
                if (buf.length === 0)
                  return "";
                var r;
                var i;
                if (this.lastNeed) {
                  r = this.fillLast(buf);
                  if (r === void 0)
                    return "";
                  i = this.lastNeed;
                  this.lastNeed = 0;
                } else {
                  i = 0;
                }
                if (i < buf.length)
                  return r ? r + this.text(buf, i) : this.text(buf, i);
                return r || "";
              };
              StringDecoder.prototype.end = utf8End;
              StringDecoder.prototype.text = utf8Text;
              StringDecoder.prototype.fillLast = function (buf) {
                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                this.lastNeed -= buf.length;
              };
              function utf8CheckByte(byte) {
                if (byte <= 127)
                  return 0;
                else if (byte >> 5 === 6)
                  return 2;
                else if (byte >> 4 === 14)
                  return 3;
                else if (byte >> 3 === 30)
                  return 4;
                return byte >> 6 === 2 ? -1 : -2;
              }
              function utf8CheckIncomplete(self2, buf, i) {
                var j = buf.length - 1;
                if (j < i)
                  return 0;
                var nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0)
                    self2.lastNeed = nb - 1;
                  return nb;
                }
                if (--j < i || nb === -2)
                  return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0)
                    self2.lastNeed = nb - 2;
                  return nb;
                }
                if (--j < i || nb === -2)
                  return 0;
                nb = utf8CheckByte(buf[j]);
                if (nb >= 0) {
                  if (nb > 0) {
                    if (nb === 2)
                      nb = 0;
                    else
                      self2.lastNeed = nb - 3;
                  }
                  return nb;
                }
                return 0;
              }
              function utf8CheckExtraBytes(self2, buf, p) {
                if ((buf[0] & 192) !== 128) {
                  self2.lastNeed = 0;
                  return "\uFFFD";
                }
                if (self2.lastNeed > 1 && buf.length > 1) {
                  if ((buf[1] & 192) !== 128) {
                    self2.lastNeed = 1;
                    return "\uFFFD";
                  }
                  if (self2.lastNeed > 2 && buf.length > 2) {
                    if ((buf[2] & 192) !== 128) {
                      self2.lastNeed = 2;
                      return "\uFFFD";
                    }
                  }
                }
              }
              function utf8FillLast(buf) {
                var p = this.lastTotal - this.lastNeed;
                var r = utf8CheckExtraBytes(this, buf, p);
                if (r !== void 0)
                  return r;
                if (this.lastNeed <= buf.length) {
                  buf.copy(this.lastChar, p, 0, this.lastNeed);
                  return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                }
                buf.copy(this.lastChar, p, 0, buf.length);
                this.lastNeed -= buf.length;
              }
              function utf8Text(buf, i) {
                var total = utf8CheckIncomplete(this, buf, i);
                if (!this.lastNeed)
                  return buf.toString("utf8", i);
                this.lastTotal = total;
                var end = buf.length - (total - this.lastNeed);
                buf.copy(this.lastChar, 0, end);
                return buf.toString("utf8", i, end);
              }
              function utf8End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed)
                  return r + "\uFFFD";
                return r;
              }
              function utf16Text(buf, i) {
                if ((buf.length - i) % 2 === 0) {
                  var r = buf.toString("utf16le", i);
                  if (r) {
                    var c = r.charCodeAt(r.length - 1);
                    if (c >= 55296 && c <= 56319) {
                      this.lastNeed = 2;
                      this.lastTotal = 4;
                      this.lastChar[0] = buf[buf.length - 2];
                      this.lastChar[1] = buf[buf.length - 1];
                      return r.slice(0, -1);
                    }
                  }
                  return r;
                }
                this.lastNeed = 1;
                this.lastTotal = 2;
                this.lastChar[0] = buf[buf.length - 1];
                return buf.toString("utf16le", i, buf.length - 1);
              }
              function utf16End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed) {
                  var end = this.lastTotal - this.lastNeed;
                  return r + this.lastChar.toString("utf16le", 0, end);
                }
                return r;
              }
              function base64Text(buf, i) {
                var n = (buf.length - i) % 3;
                if (n === 0)
                  return buf.toString("base64", i);
                this.lastNeed = 3 - n;
                this.lastTotal = 3;
                if (n === 1) {
                  this.lastChar[0] = buf[buf.length - 1];
                } else {
                  this.lastChar[0] = buf[buf.length - 2];
                  this.lastChar[1] = buf[buf.length - 1];
                }
                return buf.toString("base64", i, buf.length - n);
              }
              function base64End(buf) {
                var r = buf && buf.length ? this.write(buf) : "";
                if (this.lastNeed)
                  return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
                return r;
              }
              function simpleWrite(buf) {
                return buf.toString(this.encoding);
              }
              function simpleEnd(buf) {
                return buf && buf.length ? this.write(buf) : "";
              }
            }
          });

          // node_modules/cipher-base/index.js
          var require_cipher_base = __commonJS({
            "node_modules/cipher-base/index.js"(exports, module) {
              var Buffer2 = require_safe_buffer().Buffer;
              var Transform = require_readable_browser().Transform;
              var StringDecoder = require_string_decoder2().StringDecoder;
              var inherits2 = require_inherits_browser();
              function CipherBase(hashMode) {
                Transform.call(this);
                this.hashMode = typeof hashMode === "string";
                if (this.hashMode) {
                  this[hashMode] = this._finalOrDigest;
                } else {
                  this.final = this._finalOrDigest;
                }
                if (this._final) {
                  this.__final = this._final;
                  this._final = null;
                }
                this._decoder = null;
                this._encoding = null;
              }
              inherits2(CipherBase, Transform);
              CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
                if (typeof data === "string") {
                  data = Buffer2.from(data, inputEnc);
                }
                var outData = this._update(data);
                if (this.hashMode)
                  return this;
                if (outputEnc) {
                  outData = this._toString(outData, outputEnc);
                }
                return outData;
              };
              CipherBase.prototype.setAutoPadding = function () {
              };
              CipherBase.prototype.getAuthTag = function () {
                throw new Error("trying to get auth tag in unsupported state");
              };
              CipherBase.prototype.setAuthTag = function () {
                throw new Error("trying to set auth tag in unsupported state");
              };
              CipherBase.prototype.setAAD = function () {
                throw new Error("trying to set aad in unsupported state");
              };
              CipherBase.prototype._transform = function (data, _, next) {
                var err;
                try {
                  if (this.hashMode) {
                    this._update(data);
                  } else {
                    this.push(this._update(data));
                  }
                } catch (e) {
                  err = e;
                } finally {
                  next(err);
                }
              };
              CipherBase.prototype._flush = function (done) {
                var err;
                try {
                  this.push(this.__final());
                } catch (e) {
                  err = e;
                }
                done(err);
              };
              CipherBase.prototype._finalOrDigest = function (outputEnc) {
                var outData = this.__final() || Buffer2.alloc(0);
                if (outputEnc) {
                  outData = this._toString(outData, outputEnc, true);
                }
                return outData;
              };
              CipherBase.prototype._toString = function (value, enc, fin) {
                if (!this._decoder) {
                  this._decoder = new StringDecoder(enc);
                  this._encoding = enc;
                }
                if (this._encoding !== enc)
                  throw new Error("can't switch encodings");
                var out = this._decoder.write(value);
                if (fin) {
                  out += this._decoder.end();
                }
                return out;
              };
              module.exports = CipherBase;
            }
          });

          // node_modules/create-hmac/legacy.js
          var require_legacy = __commonJS({
            "node_modules/create-hmac/legacy.js"(exports, module) {
              "use strict";
              var inherits2 = require_inherits_browser();
              var Buffer2 = require_safe_buffer().Buffer;
              var Base = require_cipher_base();
              var ZEROS = Buffer2.alloc(128);
              var blocksize = 64;
              function Hmac(alg, key) {
                Base.call(this, "digest");
                if (typeof key === "string") {
                  key = Buffer2.from(key);
                }
                this._alg = alg;
                this._key = key;
                if (key.length > blocksize) {
                  key = alg(key);
                } else if (key.length < blocksize) {
                  key = Buffer2.concat([key, ZEROS], blocksize);
                }
                var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
                var opad = this._opad = Buffer2.allocUnsafe(blocksize);
                for (var i = 0; i < blocksize; i++) {
                  ipad[i] = key[i] ^ 54;
                  opad[i] = key[i] ^ 92;
                }
                this._hash = [ipad];
              }
              inherits2(Hmac, Base);
              Hmac.prototype._update = function (data) {
                this._hash.push(data);
              };
              Hmac.prototype._final = function () {
                var h = this._alg(Buffer2.concat(this._hash));
                return this._alg(Buffer2.concat([this._opad, h]));
              };
              module.exports = Hmac;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js
          var require_stream_browser2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js"(exports, module) {
              module.exports = require_events().EventEmitter;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js
          var require_buffer_list = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
              "use strict";
              function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                  var symbols = Object.getOwnPropertySymbols(object);
                  enumerableOnly && (symbols = symbols.filter(function (sym) {
                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                  })), keys.push.apply(keys, symbols);
                }
                return keys;
              }
              function _objectSpread(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = null != arguments[i] ? arguments[i] : {};
                  i % 2 ? ownKeys(Object(source), true).forEach(function (key) {
                    _defineProperty(target, key, source[key]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                  });
                }
                return target;
              }
              function _defineProperty(obj, key, value) {
                key = _toPropertyKey(key);
                if (key in obj) {
                  Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
                } else {
                  obj[key] = value;
                }
                return obj;
              }
              function _toPropertyKey(arg) {
                var key = _toPrimitive(arg, "string");
                return typeof key === "symbol" ? key : String(key);
              }
              function _toPrimitive(input, hint) {
                if (typeof input !== "object" || input === null)
                  return input;
                var prim = input[Symbol.toPrimitive];
                if (prim !== void 0) {
                  var res = prim.call(input, hint || "default");
                  if (typeof res !== "object")
                    return res;
                  throw new TypeError("@@toPrimitive must return a primitive value.");
                }
                return (hint === "string" ? String : Number)(input);
              }
              var _require = require_buffer2();
              var Buffer2 = _require.Buffer;
              var _require2 = require_util2();
              var inspect = _require2.inspect;
              var custom = inspect && inspect.custom || "inspect";
              function copyBuffer(src, target, offset) {
                Buffer2.prototype.copy.call(src, target, offset);
              }
              module.exports = class BufferList {
                constructor() {
                  this.head = null;
                  this.tail = null;
                  this.length = 0;
                }
                push(v) {
                  const entry = {
                    data: v,
                    next: null
                  };
                  if (this.length > 0)
                    this.tail.next = entry;
                  else
                    this.head = entry;
                  this.tail = entry;
                  ++this.length;
                }
                unshift(v) {
                  const entry = {
                    data: v,
                    next: this.head
                  };
                  if (this.length === 0)
                    this.tail = entry;
                  this.head = entry;
                  ++this.length;
                }
                shift() {
                  if (this.length === 0)
                    return;
                  const ret = this.head.data;
                  if (this.length === 1)
                    this.head = this.tail = null;
                  else
                    this.head = this.head.next;
                  --this.length;
                  return ret;
                }
                clear() {
                  this.head = this.tail = null;
                  this.length = 0;
                }
                join(s) {
                  if (this.length === 0)
                    return "";
                  var p = this.head;
                  var ret = "" + p.data;
                  while (p = p.next)
                    ret += s + p.data;
                  return ret;
                }
                concat(n) {
                  if (this.length === 0)
                    return Buffer2.alloc(0);
                  const ret = Buffer2.allocUnsafe(n >>> 0);
                  var p = this.head;
                  var i = 0;
                  while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                  }
                  return ret;
                }
                // Consumes a specified amount of bytes or characters from the buffered data.
                consume(n, hasStrings) {
                  var ret;
                  if (n < this.head.data.length) {
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                  } else if (n === this.head.data.length) {
                    ret = this.shift();
                  } else {
                    ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                  }
                  return ret;
                }
                first() {
                  return this.head.data;
                }
                // Consumes a specified amount of characters from the buffered data.
                _getString(n) {
                  var p = this.head;
                  var c = 1;
                  var ret = p.data;
                  n -= ret.length;
                  while (p = p.next) {
                    const str = p.data;
                    const nb = n > str.length ? str.length : n;
                    if (nb === str.length)
                      ret += str;
                    else
                      ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                      if (nb === str.length) {
                        ++c;
                        if (p.next)
                          this.head = p.next;
                        else
                          this.head = this.tail = null;
                      } else {
                        this.head = p;
                        p.data = str.slice(nb);
                      }
                      break;
                    }
                    ++c;
                  }
                  this.length -= c;
                  return ret;
                }
                // Consumes a specified amount of bytes from the buffered data.
                _getBuffer(n) {
                  const ret = Buffer2.allocUnsafe(n);
                  var p = this.head;
                  var c = 1;
                  p.data.copy(ret);
                  n -= p.data.length;
                  while (p = p.next) {
                    const buf = p.data;
                    const nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                      if (nb === buf.length) {
                        ++c;
                        if (p.next)
                          this.head = p.next;
                        else
                          this.head = this.tail = null;
                      } else {
                        this.head = p;
                        p.data = buf.slice(nb);
                      }
                      break;
                    }
                    ++c;
                  }
                  this.length -= c;
                  return ret;
                }
                // Make sure the linked list only shows the minimal necessary information.
                [custom](_, options) {
                  return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                  }));
                }
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js
          var require_destroy2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
              "use strict";
              function destroy(err, cb) {
                const readableDestroyed = this._readableState && this._readableState.destroyed;
                const writableDestroyed = this._writableState && this._writableState.destroyed;
                if (readableDestroyed || writableDestroyed) {
                  if (cb) {
                    cb(err);
                  } else if (err) {
                    if (!this._writableState) {
                      process.nextTick(emitErrorNT, this, err);
                    } else if (!this._writableState.errorEmitted) {
                      this._writableState.errorEmitted = true;
                      process.nextTick(emitErrorNT, this, err);
                    }
                  }
                  return this;
                }
                if (this._readableState) {
                  this._readableState.destroyed = true;
                }
                if (this._writableState) {
                  this._writableState.destroyed = true;
                }
                this._destroy(err || null, (err2) => {
                  if (!cb && err2) {
                    if (!this._writableState) {
                      process.nextTick(emitErrorAndCloseNT, this, err2);
                    } else if (!this._writableState.errorEmitted) {
                      this._writableState.errorEmitted = true;
                      process.nextTick(emitErrorAndCloseNT, this, err2);
                    } else {
                      process.nextTick(emitCloseNT, this);
                    }
                  } else if (cb) {
                    process.nextTick(emitCloseNT, this);
                    cb(err2);
                  } else {
                    process.nextTick(emitCloseNT, this);
                  }
                });
                return this;
              }
              function emitErrorAndCloseNT(self2, err) {
                emitErrorNT(self2, err);
                emitCloseNT(self2);
              }
              function emitCloseNT(self2) {
                if (self2._writableState && !self2._writableState.emitClose)
                  return;
                if (self2._readableState && !self2._readableState.emitClose)
                  return;
                self2.emit("close");
              }
              function undestroy() {
                if (this._readableState) {
                  this._readableState.destroyed = false;
                  this._readableState.reading = false;
                  this._readableState.ended = false;
                  this._readableState.endEmitted = false;
                }
                if (this._writableState) {
                  this._writableState.destroyed = false;
                  this._writableState.ended = false;
                  this._writableState.ending = false;
                  this._writableState.finalCalled = false;
                  this._writableState.prefinished = false;
                  this._writableState.finished = false;
                  this._writableState.errorEmitted = false;
                }
              }
              function emitErrorNT(self2, err) {
                self2.emit("error", err);
              }
              function errorOrDestroy(stream, err) {
                const rState = stream._readableState;
                const wState = stream._writableState;
                if (rState && rState.autoDestroy || wState && wState.autoDestroy)
                  stream.destroy(err);
                else
                  stream.emit("error", err);
              }
              module.exports = {
                destroy,
                undestroy,
                errorOrDestroy
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/errors-browser.js
          var require_errors_browser = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/errors-browser.js"(exports, module) {
              "use strict";
              function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
              }
              var codes = {};
              function createErrorType(code, message, Base) {
                if (!Base) {
                  Base = Error;
                }
                function getMessage(arg1, arg2, arg3) {
                  if (typeof message === "string") {
                    return message;
                  } else {
                    return message(arg1, arg2, arg3);
                  }
                }
                var NodeError = /* @__PURE__ */ function (_Base) {
                  _inheritsLoose(NodeError2, _Base);
                  function NodeError2(arg1, arg2, arg3) {
                    return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                  }
                  return NodeError2;
                }(Base);
                NodeError.prototype.name = Base.name;
                NodeError.prototype.code = code;
                codes[code] = NodeError;
              }
              function oneOf(expected, thing) {
                if (Array.isArray(expected)) {
                  var len = expected.length;
                  expected = expected.map(function (i) {
                    return String(i);
                  });
                  if (len > 2) {
                    return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
                  } else if (len === 2) {
                    return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                  } else {
                    return "of ".concat(thing, " ").concat(expected[0]);
                  }
                } else {
                  return "of ".concat(thing, " ").concat(String(expected));
                }
              }
              function startsWith(str, search, pos) {
                return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
              }
              function endsWith2(str, search, this_len) {
                if (this_len === void 0 || this_len > str.length) {
                  this_len = str.length;
                }
                return str.substring(this_len - search.length, this_len) === search;
              }
              function includes(str, search, start) {
                if (typeof start !== "number") {
                  start = 0;
                }
                if (start + search.length > str.length) {
                  return false;
                } else {
                  return str.indexOf(search, start) !== -1;
                }
              }
              createErrorType("ERR_INVALID_OPT_VALUE", function (name, value) {
                return 'The value "' + value + '" is invalid for option "' + name + '"';
              }, TypeError);
              createErrorType("ERR_INVALID_ARG_TYPE", function (name, expected, actual) {
                var determiner;
                if (typeof expected === "string" && startsWith(expected, "not ")) {
                  determiner = "must not be";
                  expected = expected.replace(/^not /, "");
                } else {
                  determiner = "must be";
                }
                var msg;
                if (endsWith2(name, " argument")) {
                  msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
                } else {
                  var type = includes(name, ".") ? "property" : "argument";
                  msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
                }
                msg += ". Received type ".concat(typeof actual);
                return msg;
              }, TypeError);
              createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
              createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function (name) {
                return "The " + name + " method is not implemented";
              });
              createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
              createErrorType("ERR_STREAM_DESTROYED", function (name) {
                return "Cannot call " + name + " after a stream was destroyed";
              });
              createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
              createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
              createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
              createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
              createErrorType("ERR_UNKNOWN_ENCODING", function (arg) {
                return "Unknown encoding: " + arg;
              }, TypeError);
              createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
              module.exports.codes = codes;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js
          var require_state = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
              "use strict";
              var ERR_INVALID_OPT_VALUE = require_errors_browser().codes.ERR_INVALID_OPT_VALUE;
              function highWaterMarkFrom(options, isDuplex, duplexKey) {
                return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
              }
              function getHighWaterMark(state, options, duplexKey, isDuplex) {
                const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
                if (hwm != null) {
                  if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
                    const name = isDuplex ? duplexKey : "highWaterMark";
                    throw new ERR_INVALID_OPT_VALUE(name, hwm);
                  }
                  return Math.floor(hwm);
                }
                return state.objectMode ? 16 : 16 * 1024;
              }
              module.exports = {
                getHighWaterMark
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js
          var require_stream_writable2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
              "use strict";
              module.exports = Writable;
              function CorkedRequest(state) {
                this.next = null;
                this.entry = null;
                this.finish = () => {
                  onCorkedFinish(this, state);
                };
              }
              var Duplex;
              Writable.WritableState = WritableState;
              var internalUtil = {
                deprecate: require_browser()
              };
              var Stream = require_stream_browser2();
              var Buffer2 = require_buffer2().Buffer;
              var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function () {
              };
              function _uint8ArrayToBuffer(chunk) {
                return Buffer2.from(chunk);
              }
              function _isUint8Array(obj) {
                return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
              }
              var destroyImpl = require_destroy2();
              var _require = require_state();
              var getHighWaterMark = _require.getHighWaterMark;
              var _require$codes = require_errors_browser().codes;
              var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
              var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
              var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
              var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
              var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
              var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
              var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
              var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
              var errorOrDestroy = destroyImpl.errorOrDestroy;
              require_inherits_browser()(Writable, Stream);
              function nop() {
              }
              function WritableState(options, stream, isDuplex) {
                Duplex = Duplex || require_stream_duplex2();
                options = options || {};
                if (typeof isDuplex !== "boolean")
                  isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode = this.objectMode || !!options.writableObjectMode;
                this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
                this.finalCalled = false;
                this.needDrain = false;
                this.ending = false;
                this.ended = false;
                this.finished = false;
                this.destroyed = false;
                var noDecode = options.decodeStrings === false;
                this.decodeStrings = !noDecode;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.length = 0;
                this.writing = false;
                this.corked = 0;
                this.sync = true;
                this.bufferProcessing = false;
                this.onwrite = function (er) {
                  onwrite(stream, er);
                };
                this.writecb = null;
                this.writelen = 0;
                this.bufferedRequest = null;
                this.lastBufferedRequest = null;
                this.pendingcb = 0;
                this.prefinished = false;
                this.errorEmitted = false;
                this.emitClose = options.emitClose !== false;
                this.autoDestroy = !!options.autoDestroy;
                this.bufferedRequestCount = 0;
                this.corkedRequestsFree = new CorkedRequest(this);
              }
              WritableState.prototype.getBuffer = function getBuffer() {
                var current = this.bufferedRequest;
                var out = [];
                while (current) {
                  out.push(current);
                  current = current.next;
                }
                return out;
              };
              (function () {
                try {
                  Object.defineProperty(WritableState.prototype, "buffer", {
                    get: internalUtil.deprecate(function writableStateBufferGetter() {
                      return this.getBuffer();
                    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                  });
                } catch (_) {
                }
              })();
              var realHasInstance;
              if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
                realHasInstance = Function.prototype[Symbol.hasInstance];
                Object.defineProperty(Writable, Symbol.hasInstance, {
                  value: function value(object) {
                    if (realHasInstance.call(this, object))
                      return true;
                    if (this !== Writable)
                      return false;
                    return object && object._writableState instanceof WritableState;
                  }
                });
              } else {
                realHasInstance = function realHasInstance2(object) {
                  return object instanceof this;
                };
              }
              function Writable(options) {
                Duplex = Duplex || require_stream_duplex2();
                const isDuplex = this instanceof Duplex;
                if (!isDuplex && !realHasInstance.call(Writable, this))
                  return new Writable(options);
                this._writableState = new WritableState(options, this, isDuplex);
                this.writable = true;
                if (options) {
                  if (typeof options.write === "function")
                    this._write = options.write;
                  if (typeof options.writev === "function")
                    this._writev = options.writev;
                  if (typeof options.destroy === "function")
                    this._destroy = options.destroy;
                  if (typeof options.final === "function")
                    this._final = options.final;
                }
                Stream.call(this);
              }
              Writable.prototype.pipe = function () {
                errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
              };
              function writeAfterEnd(stream, cb) {
                var er = new ERR_STREAM_WRITE_AFTER_END();
                errorOrDestroy(stream, er);
                process.nextTick(cb, er);
              }
              function validChunk(stream, state, chunk, cb) {
                var er;
                if (chunk === null) {
                  er = new ERR_STREAM_NULL_VALUES();
                } else if (typeof chunk !== "string" && !state.objectMode) {
                  er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
                }
                if (er) {
                  errorOrDestroy(stream, er);
                  process.nextTick(cb, er);
                  return false;
                }
                return true;
              }
              Writable.prototype.write = function (chunk, encoding, cb) {
                var state = this._writableState;
                var ret = false;
                var isBuf = !state.objectMode && _isUint8Array(chunk);
                if (isBuf && !Buffer2.isBuffer(chunk)) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }
                if (typeof encoding === "function") {
                  cb = encoding;
                  encoding = null;
                }
                if (isBuf)
                  encoding = "buffer";
                else if (!encoding)
                  encoding = state.defaultEncoding;
                if (typeof cb !== "function")
                  cb = nop;
                if (state.ending)
                  writeAfterEnd(this, cb);
                else if (isBuf || validChunk(this, state, chunk, cb)) {
                  state.pendingcb++;
                  ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                }
                return ret;
              };
              Writable.prototype.cork = function () {
                this._writableState.corked++;
              };
              Writable.prototype.uncork = function () {
                var state = this._writableState;
                if (state.corked) {
                  state.corked--;
                  if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
                    clearBuffer(this, state);
                }
              };
              Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                if (typeof encoding === "string")
                  encoding = encoding.toLowerCase();
                if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
                  throw new ERR_UNKNOWN_ENCODING(encoding);
                this._writableState.defaultEncoding = encoding;
                return this;
              };
              Object.defineProperty(Writable.prototype, "writableBuffer", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState && this._writableState.getBuffer();
                }
              });
              function decodeChunk(state, chunk, encoding) {
                if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
                  chunk = Buffer2.from(chunk, encoding);
                }
                return chunk;
              }
              Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState.highWaterMark;
                }
              });
              function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                if (!isBuf) {
                  var newChunk = decodeChunk(state, chunk, encoding);
                  if (chunk !== newChunk) {
                    isBuf = true;
                    encoding = "buffer";
                    chunk = newChunk;
                  }
                }
                var len = state.objectMode ? 1 : chunk.length;
                state.length += len;
                var ret = state.length < state.highWaterMark;
                if (!ret)
                  state.needDrain = true;
                if (state.writing || state.corked) {
                  var last = state.lastBufferedRequest;
                  state.lastBufferedRequest = {
                    chunk,
                    encoding,
                    isBuf,
                    callback: cb,
                    next: null
                  };
                  if (last) {
                    last.next = state.lastBufferedRequest;
                  } else {
                    state.bufferedRequest = state.lastBufferedRequest;
                  }
                  state.bufferedRequestCount += 1;
                } else {
                  doWrite(stream, state, false, len, chunk, encoding, cb);
                }
                return ret;
              }
              function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                state.writelen = len;
                state.writecb = cb;
                state.writing = true;
                state.sync = true;
                if (state.destroyed)
                  state.onwrite(new ERR_STREAM_DESTROYED("write"));
                else if (writev)
                  stream._writev(chunk, state.onwrite);
                else
                  stream._write(chunk, encoding, state.onwrite);
                state.sync = false;
              }
              function onwriteError(stream, state, sync, er, cb) {
                --state.pendingcb;
                if (sync) {
                  process.nextTick(cb, er);
                  process.nextTick(finishMaybe, stream, state);
                  stream._writableState.errorEmitted = true;
                  errorOrDestroy(stream, er);
                } else {
                  cb(er);
                  stream._writableState.errorEmitted = true;
                  errorOrDestroy(stream, er);
                  finishMaybe(stream, state);
                }
              }
              function onwriteStateUpdate(state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
              }
              function onwrite(stream, er) {
                var state = stream._writableState;
                var sync = state.sync;
                var cb = state.writecb;
                if (typeof cb !== "function")
                  throw new ERR_MULTIPLE_CALLBACK();
                onwriteStateUpdate(state);
                if (er)
                  onwriteError(stream, state, sync, er, cb);
                else {
                  var finished = needFinish(state) || stream.destroyed;
                  if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                    clearBuffer(stream, state);
                  }
                  if (sync) {
                    process.nextTick(afterWrite, stream, state, finished, cb);
                  } else {
                    afterWrite(stream, state, finished, cb);
                  }
                }
              }
              function afterWrite(stream, state, finished, cb) {
                if (!finished)
                  onwriteDrain(stream, state);
                state.pendingcb--;
                cb();
                finishMaybe(stream, state);
              }
              function onwriteDrain(stream, state) {
                if (state.length === 0 && state.needDrain) {
                  state.needDrain = false;
                  stream.emit("drain");
                }
              }
              function clearBuffer(stream, state) {
                state.bufferProcessing = true;
                var entry = state.bufferedRequest;
                if (stream._writev && entry && entry.next) {
                  var l = state.bufferedRequestCount;
                  var buffer = new Array(l);
                  var holder = state.corkedRequestsFree;
                  holder.entry = entry;
                  var count = 0;
                  var allBuffers = true;
                  while (entry) {
                    buffer[count] = entry;
                    if (!entry.isBuf)
                      allBuffers = false;
                    entry = entry.next;
                    count += 1;
                  }
                  buffer.allBuffers = allBuffers;
                  doWrite(stream, state, true, state.length, buffer, "", holder.finish);
                  state.pendingcb++;
                  state.lastBufferedRequest = null;
                  if (holder.next) {
                    state.corkedRequestsFree = holder.next;
                    holder.next = null;
                  } else {
                    state.corkedRequestsFree = new CorkedRequest(state);
                  }
                  state.bufferedRequestCount = 0;
                } else {
                  while (entry) {
                    var chunk = entry.chunk;
                    var encoding = entry.encoding;
                    var cb = entry.callback;
                    var len = state.objectMode ? 1 : chunk.length;
                    doWrite(stream, state, false, len, chunk, encoding, cb);
                    entry = entry.next;
                    state.bufferedRequestCount--;
                    if (state.writing) {
                      break;
                    }
                  }
                  if (entry === null)
                    state.lastBufferedRequest = null;
                }
                state.bufferedRequest = entry;
                state.bufferProcessing = false;
              }
              Writable.prototype._write = function (chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
              };
              Writable.prototype._writev = null;
              Writable.prototype.end = function (chunk, encoding, cb) {
                var state = this._writableState;
                if (typeof chunk === "function") {
                  cb = chunk;
                  chunk = null;
                  encoding = null;
                } else if (typeof encoding === "function") {
                  cb = encoding;
                  encoding = null;
                }
                if (chunk !== null && chunk !== void 0)
                  this.write(chunk, encoding);
                if (state.corked) {
                  state.corked = 1;
                  this.uncork();
                }
                if (!state.ending)
                  endWritable(this, state, cb);
                return this;
              };
              Object.defineProperty(Writable.prototype, "writableLength", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  return this._writableState.length;
                }
              });
              function needFinish(state) {
                return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
              }
              function callFinal(stream, state) {
                stream._final((err) => {
                  state.pendingcb--;
                  if (err) {
                    errorOrDestroy(stream, err);
                  }
                  state.prefinished = true;
                  stream.emit("prefinish");
                  finishMaybe(stream, state);
                });
              }
              function prefinish(stream, state) {
                if (!state.prefinished && !state.finalCalled) {
                  if (typeof stream._final === "function" && !state.destroyed) {
                    state.pendingcb++;
                    state.finalCalled = true;
                    process.nextTick(callFinal, stream, state);
                  } else {
                    state.prefinished = true;
                    stream.emit("prefinish");
                  }
                }
              }
              function finishMaybe(stream, state) {
                var need = needFinish(state);
                if (need) {
                  prefinish(stream, state);
                  if (state.pendingcb === 0) {
                    state.finished = true;
                    stream.emit("finish");
                    if (state.autoDestroy) {
                      const rState = stream._readableState;
                      if (!rState || rState.autoDestroy && rState.endEmitted) {
                        stream.destroy();
                      }
                    }
                  }
                }
                return need;
              }
              function endWritable(stream, state, cb) {
                state.ending = true;
                finishMaybe(stream, state);
                if (cb) {
                  if (state.finished)
                    process.nextTick(cb);
                  else
                    stream.once("finish", cb);
                }
                state.ended = true;
                stream.writable = false;
              }
              function onCorkedFinish(corkReq, state, err) {
                var entry = corkReq.entry;
                corkReq.entry = null;
                while (entry) {
                  var cb = entry.callback;
                  state.pendingcb--;
                  cb(err);
                  entry = entry.next;
                }
                state.corkedRequestsFree.next = corkReq;
              }
              Object.defineProperty(Writable.prototype, "destroyed", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  if (this._writableState === void 0) {
                    return false;
                  }
                  return this._writableState.destroyed;
                },
                set(value) {
                  if (!this._writableState) {
                    return;
                  }
                  this._writableState.destroyed = value;
                }
              });
              Writable.prototype.destroy = destroyImpl.destroy;
              Writable.prototype._undestroy = destroyImpl.undestroy;
              Writable.prototype._destroy = function (err, cb) {
                cb(err);
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js
          var require_stream_duplex2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
              "use strict";
              var objectKeys = Object.keys || function (obj) {
                var keys = [];
                for (var key in obj)
                  keys.push(key);
                return keys;
              };
              module.exports = Duplex;
              var Readable = require_stream_readable2();
              var Writable = require_stream_writable2();
              require_inherits_browser()(Duplex, Readable);
              {
                const keys = objectKeys(Writable.prototype);
                for (v = 0; v < keys.length; v++) {
                  const method = keys[v];
                  if (!Duplex.prototype[method])
                    Duplex.prototype[method] = Writable.prototype[method];
                }
              }
              var v;
              function Duplex(options) {
                if (!(this instanceof Duplex))
                  return new Duplex(options);
                Readable.call(this, options);
                Writable.call(this, options);
                this.allowHalfOpen = true;
                if (options) {
                  if (options.readable === false)
                    this.readable = false;
                  if (options.writable === false)
                    this.writable = false;
                  if (options.allowHalfOpen === false) {
                    this.allowHalfOpen = false;
                    this.once("end", onend);
                  }
                }
              }
              Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  return this._writableState.highWaterMark;
                }
              });
              Object.defineProperty(Duplex.prototype, "writableBuffer", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._writableState && this._writableState.getBuffer();
                }
              });
              Object.defineProperty(Duplex.prototype, "writableLength", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  return this._writableState.length;
                }
              });
              function onend() {
                if (this._writableState.ended)
                  return;
                process.nextTick(onEndNT, this);
              }
              function onEndNT(self2) {
                self2.end();
              }
              Object.defineProperty(Duplex.prototype, "destroyed", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  if (this._readableState === void 0 || this._writableState === void 0) {
                    return false;
                  }
                  return this._readableState.destroyed && this._writableState.destroyed;
                },
                set(value) {
                  if (this._readableState === void 0 || this._writableState === void 0) {
                    return;
                  }
                  this._readableState.destroyed = value;
                  this._writableState.destroyed = value;
                }
              });
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
          var require_end_of_stream = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
              "use strict";
              var ERR_STREAM_PREMATURE_CLOSE = require_errors_browser().codes.ERR_STREAM_PREMATURE_CLOSE;
              function once(callback) {
                let called = false;
                return function () {
                  if (called)
                    return;
                  called = true;
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }
                  callback.apply(this, args);
                };
              }
              function noop2() {
              }
              function isRequest2(stream) {
                return stream.setHeader && typeof stream.abort === "function";
              }
              function eos(stream, opts, callback) {
                if (typeof opts === "function")
                  return eos(stream, null, opts);
                if (!opts)
                  opts = {};
                callback = once(callback || noop2);
                let readable = opts.readable || opts.readable !== false && stream.readable;
                let writable = opts.writable || opts.writable !== false && stream.writable;
                const onlegacyfinish = () => {
                  if (!stream.writable)
                    onfinish();
                };
                var writableEnded = stream._writableState && stream._writableState.finished;
                const onfinish = () => {
                  writable = false;
                  writableEnded = true;
                  if (!readable)
                    callback.call(stream);
                };
                var readableEnded = stream._readableState && stream._readableState.endEmitted;
                const onend = () => {
                  readable = false;
                  readableEnded = true;
                  if (!writable)
                    callback.call(stream);
                };
                const onerror = (err) => {
                  callback.call(stream, err);
                };
                const onclose = () => {
                  let err;
                  if (readable && !readableEnded) {
                    if (!stream._readableState || !stream._readableState.ended)
                      err = new ERR_STREAM_PREMATURE_CLOSE();
                    return callback.call(stream, err);
                  }
                  if (writable && !writableEnded) {
                    if (!stream._writableState || !stream._writableState.ended)
                      err = new ERR_STREAM_PREMATURE_CLOSE();
                    return callback.call(stream, err);
                  }
                };
                const onrequest = () => {
                  stream.req.on("finish", onfinish);
                };
                if (isRequest2(stream)) {
                  stream.on("complete", onfinish);
                  stream.on("abort", onclose);
                  if (stream.req)
                    onrequest();
                  else
                    stream.on("request", onrequest);
                } else if (writable && !stream._writableState) {
                  stream.on("end", onlegacyfinish);
                  stream.on("close", onlegacyfinish);
                }
                stream.on("end", onend);
                stream.on("finish", onfinish);
                if (opts.error !== false)
                  stream.on("error", onerror);
                stream.on("close", onclose);
                return function () {
                  stream.removeListener("complete", onfinish);
                  stream.removeListener("abort", onclose);
                  stream.removeListener("request", onrequest);
                  if (stream.req)
                    stream.req.removeListener("finish", onfinish);
                  stream.removeListener("end", onlegacyfinish);
                  stream.removeListener("close", onlegacyfinish);
                  stream.removeListener("finish", onfinish);
                  stream.removeListener("end", onend);
                  stream.removeListener("error", onerror);
                  stream.removeListener("close", onclose);
                };
              }
              module.exports = eos;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js
          var require_async_iterator = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
              "use strict";
              var finished = require_end_of_stream();
              var kLastResolve = Symbol("lastResolve");
              var kLastReject = Symbol("lastReject");
              var kError = Symbol("error");
              var kEnded = Symbol("ended");
              var kLastPromise = Symbol("lastPromise");
              var kHandlePromise = Symbol("handlePromise");
              var kStream = Symbol("stream");
              function createIterResult(value, done) {
                return {
                  value,
                  done
                };
              }
              function readAndResolve(iter) {
                const resolve = iter[kLastResolve];
                if (resolve !== null) {
                  const data = iter[kStream].read();
                  if (data !== null) {
                    iter[kLastPromise] = null;
                    iter[kLastResolve] = null;
                    iter[kLastReject] = null;
                    resolve(createIterResult(data, false));
                  }
                }
              }
              function onReadable(iter) {
                process.nextTick(readAndResolve, iter);
              }
              function wrapForNext(lastPromise, iter) {
                return (resolve, reject) => {
                  lastPromise.then(() => {
                    if (iter[kEnded]) {
                      resolve(createIterResult(void 0, true));
                      return;
                    }
                    iter[kHandlePromise](resolve, reject);
                  }, reject);
                };
              }
              var AsyncIteratorPrototype = Object.getPrototypeOf(function () {
              });
              var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf({
                get stream() {
                  return this[kStream];
                },
                next() {
                  const error = this[kError];
                  if (error !== null) {
                    return Promise.reject(error);
                  }
                  if (this[kEnded]) {
                    return Promise.resolve(createIterResult(void 0, true));
                  }
                  if (this[kStream].destroyed) {
                    return new Promise((resolve, reject) => {
                      process.nextTick(() => {
                        if (this[kError]) {
                          reject(this[kError]);
                        } else {
                          resolve(createIterResult(void 0, true));
                        }
                      });
                    });
                  }
                  const lastPromise = this[kLastPromise];
                  let promise;
                  if (lastPromise) {
                    promise = new Promise(wrapForNext(lastPromise, this));
                  } else {
                    const data = this[kStream].read();
                    if (data !== null) {
                      return Promise.resolve(createIterResult(data, false));
                    }
                    promise = new Promise(this[kHandlePromise]);
                  }
                  this[kLastPromise] = promise;
                  return promise;
                },
                [Symbol.asyncIterator]() {
                  return this;
                },
                return() {
                  return new Promise((resolve, reject) => {
                    this[kStream].destroy(null, (err) => {
                      if (err) {
                        reject(err);
                        return;
                      }
                      resolve(createIterResult(void 0, true));
                    });
                  });
                }
              }, AsyncIteratorPrototype);
              var createReadableStreamAsyncIterator = (stream) => {
                const iterator2 = Object.create(ReadableStreamAsyncIteratorPrototype, {
                  [kStream]: {
                    value: stream,
                    writable: true
                  },
                  [kLastResolve]: {
                    value: null,
                    writable: true
                  },
                  [kLastReject]: {
                    value: null,
                    writable: true
                  },
                  [kError]: {
                    value: null,
                    writable: true
                  },
                  [kEnded]: {
                    value: stream._readableState.endEmitted,
                    writable: true
                  },
                  // the function passed to new Promise
                  // is cached so we avoid allocating a new
                  // closure at every run
                  [kHandlePromise]: {
                    value: (resolve, reject) => {
                      const data = iterator2[kStream].read();
                      if (data) {
                        iterator2[kLastPromise] = null;
                        iterator2[kLastResolve] = null;
                        iterator2[kLastReject] = null;
                        resolve(createIterResult(data, false));
                      } else {
                        iterator2[kLastResolve] = resolve;
                        iterator2[kLastReject] = reject;
                      }
                    },
                    writable: true
                  }
                });
                iterator2[kLastPromise] = null;
                finished(stream, (err) => {
                  if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                    const reject = iterator2[kLastReject];
                    if (reject !== null) {
                      iterator2[kLastPromise] = null;
                      iterator2[kLastResolve] = null;
                      iterator2[kLastReject] = null;
                      reject(err);
                    }
                    iterator2[kError] = err;
                    return;
                  }
                  const resolve = iterator2[kLastResolve];
                  if (resolve !== null) {
                    iterator2[kLastPromise] = null;
                    iterator2[kLastResolve] = null;
                    iterator2[kLastReject] = null;
                    resolve(createIterResult(void 0, true));
                  }
                  iterator2[kEnded] = true;
                });
                stream.on("readable", onReadable.bind(null, iterator2));
                return iterator2;
              };
              module.exports = createReadableStreamAsyncIterator;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from-browser.js
          var require_from_browser = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from-browser.js"(exports, module) {
              module.exports = function () {
                throw new Error("Readable.from is not available in the browser");
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js
          var require_stream_readable2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
              "use strict";
              module.exports = Readable;
              var Duplex;
              Readable.ReadableState = ReadableState;
              var EE = require_events().EventEmitter;
              var EElistenerCount = function EElistenerCount2(emitter, type) {
                return emitter.listeners(type).length;
              };
              var Stream = require_stream_browser2();
              var Buffer2 = require_buffer2().Buffer;
              var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function () {
              };
              function _uint8ArrayToBuffer(chunk) {
                return Buffer2.from(chunk);
              }
              function _isUint8Array(obj) {
                return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
              }
              var debugUtil = require_util2();
              var debug;
              if (debugUtil && debugUtil.debuglog) {
                debug = debugUtil.debuglog("stream");
              } else {
                debug = function debug2() {
                };
              }
              var BufferList = require_buffer_list();
              var destroyImpl = require_destroy2();
              var _require = require_state();
              var getHighWaterMark = _require.getHighWaterMark;
              var _require$codes = require_errors_browser().codes;
              var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
              var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
              var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
              var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
              var StringDecoder;
              var createReadableStreamAsyncIterator;
              var from;
              require_inherits_browser()(Readable, Stream);
              var errorOrDestroy = destroyImpl.errorOrDestroy;
              var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
              function prependListener(emitter, event, fn) {
                if (typeof emitter.prependListener === "function")
                  return emitter.prependListener(event, fn);
                if (!emitter._events || !emitter._events[event])
                  emitter.on(event, fn);
                else if (Array.isArray(emitter._events[event]))
                  emitter._events[event].unshift(fn);
                else
                  emitter._events[event] = [fn, emitter._events[event]];
              }
              function ReadableState(options, stream, isDuplex) {
                Duplex = Duplex || require_stream_duplex2();
                options = options || {};
                if (typeof isDuplex !== "boolean")
                  isDuplex = stream instanceof Duplex;
                this.objectMode = !!options.objectMode;
                if (isDuplex)
                  this.objectMode = this.objectMode || !!options.readableObjectMode;
                this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
                this.buffer = new BufferList();
                this.length = 0;
                this.pipes = null;
                this.pipesCount = 0;
                this.flowing = null;
                this.ended = false;
                this.endEmitted = false;
                this.reading = false;
                this.sync = true;
                this.needReadable = false;
                this.emittedReadable = false;
                this.readableListening = false;
                this.resumeScheduled = false;
                this.paused = true;
                this.emitClose = options.emitClose !== false;
                this.autoDestroy = !!options.autoDestroy;
                this.destroyed = false;
                this.defaultEncoding = options.defaultEncoding || "utf8";
                this.awaitDrain = 0;
                this.readingMore = false;
                this.decoder = null;
                this.encoding = null;
                if (options.encoding) {
                  if (!StringDecoder)
                    StringDecoder = require_string_decoder2().StringDecoder;
                  this.decoder = new StringDecoder(options.encoding);
                  this.encoding = options.encoding;
                }
              }
              function Readable(options) {
                Duplex = Duplex || require_stream_duplex2();
                if (!(this instanceof Readable))
                  return new Readable(options);
                const isDuplex = this instanceof Duplex;
                this._readableState = new ReadableState(options, this, isDuplex);
                this.readable = true;
                if (options) {
                  if (typeof options.read === "function")
                    this._read = options.read;
                  if (typeof options.destroy === "function")
                    this._destroy = options.destroy;
                }
                Stream.call(this);
              }
              Object.defineProperty(Readable.prototype, "destroyed", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  if (this._readableState === void 0) {
                    return false;
                  }
                  return this._readableState.destroyed;
                },
                set(value) {
                  if (!this._readableState) {
                    return;
                  }
                  this._readableState.destroyed = value;
                }
              });
              Readable.prototype.destroy = destroyImpl.destroy;
              Readable.prototype._undestroy = destroyImpl.undestroy;
              Readable.prototype._destroy = function (err, cb) {
                cb(err);
              };
              Readable.prototype.push = function (chunk, encoding) {
                var state = this._readableState;
                var skipChunkCheck;
                if (!state.objectMode) {
                  if (typeof chunk === "string") {
                    encoding = encoding || state.defaultEncoding;
                    if (encoding !== state.encoding) {
                      chunk = Buffer2.from(chunk, encoding);
                      encoding = "";
                    }
                    skipChunkCheck = true;
                  }
                } else {
                  skipChunkCheck = true;
                }
                return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
              };
              Readable.prototype.unshift = function (chunk) {
                return readableAddChunk(this, chunk, null, true, false);
              };
              function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                debug("readableAddChunk", chunk);
                var state = stream._readableState;
                if (chunk === null) {
                  state.reading = false;
                  onEofChunk(stream, state);
                } else {
                  var er;
                  if (!skipChunkCheck)
                    er = chunkInvalid(state, chunk);
                  if (er) {
                    errorOrDestroy(stream, er);
                  } else if (state.objectMode || chunk && chunk.length > 0) {
                    if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
                      chunk = _uint8ArrayToBuffer(chunk);
                    }
                    if (addToFront) {
                      if (state.endEmitted)
                        errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                      else
                        addChunk(stream, state, chunk, true);
                    } else if (state.ended) {
                      errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                    } else if (state.destroyed) {
                      return false;
                    } else {
                      state.reading = false;
                      if (state.decoder && !encoding) {
                        chunk = state.decoder.write(chunk);
                        if (state.objectMode || chunk.length !== 0)
                          addChunk(stream, state, chunk, false);
                        else
                          maybeReadMore(stream, state);
                      } else {
                        addChunk(stream, state, chunk, false);
                      }
                    }
                  } else if (!addToFront) {
                    state.reading = false;
                    maybeReadMore(stream, state);
                  }
                }
                return !state.ended && (state.length < state.highWaterMark || state.length === 0);
              }
              function addChunk(stream, state, chunk, addToFront) {
                if (state.flowing && state.length === 0 && !state.sync) {
                  state.awaitDrain = 0;
                  stream.emit("data", chunk);
                } else {
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront)
                    state.buffer.unshift(chunk);
                  else
                    state.buffer.push(chunk);
                  if (state.needReadable)
                    emitReadable(stream);
                }
                maybeReadMore(stream, state);
              }
              function chunkInvalid(state, chunk) {
                var er;
                if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
                  er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
                }
                return er;
              }
              Readable.prototype.isPaused = function () {
                return this._readableState.flowing === false;
              };
              Readable.prototype.setEncoding = function (enc) {
                if (!StringDecoder)
                  StringDecoder = require_string_decoder2().StringDecoder;
                const decoder = new StringDecoder(enc);
                this._readableState.decoder = decoder;
                this._readableState.encoding = this._readableState.decoder.encoding;
                let p = this._readableState.buffer.head;
                let content = "";
                while (p !== null) {
                  content += decoder.write(p.data);
                  p = p.next;
                }
                this._readableState.buffer.clear();
                if (content !== "")
                  this._readableState.buffer.push(content);
                this._readableState.length = content.length;
                return this;
              };
              var MAX_HWM = 1073741824;
              function computeNewHighWaterMark(n) {
                if (n >= MAX_HWM) {
                  n = MAX_HWM;
                } else {
                  n--;
                  n |= n >>> 1;
                  n |= n >>> 2;
                  n |= n >>> 4;
                  n |= n >>> 8;
                  n |= n >>> 16;
                  n++;
                }
                return n;
              }
              function howMuchToRead(n, state) {
                if (n <= 0 || state.length === 0 && state.ended)
                  return 0;
                if (state.objectMode)
                  return 1;
                if (n !== n) {
                  if (state.flowing && state.length)
                    return state.buffer.head.data.length;
                  else
                    return state.length;
                }
                if (n > state.highWaterMark)
                  state.highWaterMark = computeNewHighWaterMark(n);
                if (n <= state.length)
                  return n;
                if (!state.ended) {
                  state.needReadable = true;
                  return 0;
                }
                return state.length;
              }
              Readable.prototype.read = function (n) {
                debug("read", n);
                n = parseInt(n, 10);
                var state = this._readableState;
                var nOrig = n;
                if (n !== 0)
                  state.emittedReadable = false;
                if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                  debug("read: emitReadable", state.length, state.ended);
                  if (state.length === 0 && state.ended)
                    endReadable(this);
                  else
                    emitReadable(this);
                  return null;
                }
                n = howMuchToRead(n, state);
                if (n === 0 && state.ended) {
                  if (state.length === 0)
                    endReadable(this);
                  return null;
                }
                var doRead = state.needReadable;
                debug("need readable", doRead);
                if (state.length === 0 || state.length - n < state.highWaterMark) {
                  doRead = true;
                  debug("length less than watermark", doRead);
                }
                if (state.ended || state.reading) {
                  doRead = false;
                  debug("reading or ended", doRead);
                } else if (doRead) {
                  debug("do read");
                  state.reading = true;
                  state.sync = true;
                  if (state.length === 0)
                    state.needReadable = true;
                  this._read(state.highWaterMark);
                  state.sync = false;
                  if (!state.reading)
                    n = howMuchToRead(nOrig, state);
                }
                var ret;
                if (n > 0)
                  ret = fromList(n, state);
                else
                  ret = null;
                if (ret === null) {
                  state.needReadable = state.length <= state.highWaterMark;
                  n = 0;
                } else {
                  state.length -= n;
                  state.awaitDrain = 0;
                }
                if (state.length === 0) {
                  if (!state.ended)
                    state.needReadable = true;
                  if (nOrig !== n && state.ended)
                    endReadable(this);
                }
                if (ret !== null)
                  this.emit("data", ret);
                return ret;
              };
              function onEofChunk(stream, state) {
                debug("onEofChunk");
                if (state.ended)
                  return;
                if (state.decoder) {
                  var chunk = state.decoder.end();
                  if (chunk && chunk.length) {
                    state.buffer.push(chunk);
                    state.length += state.objectMode ? 1 : chunk.length;
                  }
                }
                state.ended = true;
                if (state.sync) {
                  emitReadable(stream);
                } else {
                  state.needReadable = false;
                  if (!state.emittedReadable) {
                    state.emittedReadable = true;
                    emitReadable_(stream);
                  }
                }
              }
              function emitReadable(stream) {
                var state = stream._readableState;
                debug("emitReadable", state.needReadable, state.emittedReadable);
                state.needReadable = false;
                if (!state.emittedReadable) {
                  debug("emitReadable", state.flowing);
                  state.emittedReadable = true;
                  process.nextTick(emitReadable_, stream);
                }
              }
              function emitReadable_(stream) {
                var state = stream._readableState;
                debug("emitReadable_", state.destroyed, state.length, state.ended);
                if (!state.destroyed && (state.length || state.ended)) {
                  stream.emit("readable");
                  state.emittedReadable = false;
                }
                state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
                flow(stream);
              }
              function maybeReadMore(stream, state) {
                if (!state.readingMore) {
                  state.readingMore = true;
                  process.nextTick(maybeReadMore_, stream, state);
                }
              }
              function maybeReadMore_(stream, state) {
                while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
                  const len = state.length;
                  debug("maybeReadMore read 0");
                  stream.read(0);
                  if (len === state.length)
                    break;
                }
                state.readingMore = false;
              }
              Readable.prototype._read = function (n) {
                errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
              };
              Readable.prototype.pipe = function (dest, pipeOpts) {
                var src = this;
                var state = this._readableState;
                switch (state.pipesCount) {
                  case 0:
                    state.pipes = dest;
                    break;
                  case 1:
                    state.pipes = [state.pipes, dest];
                    break;
                  default:
                    state.pipes.push(dest);
                    break;
                }
                state.pipesCount += 1;
                debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
                var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                var endFn = doEnd ? onend : unpipe;
                if (state.endEmitted)
                  process.nextTick(endFn);
                else
                  src.once("end", endFn);
                dest.on("unpipe", onunpipe);
                function onunpipe(readable, unpipeInfo) {
                  debug("onunpipe");
                  if (readable === src) {
                    if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                      unpipeInfo.hasUnpiped = true;
                      cleanup();
                    }
                  }
                }
                function onend() {
                  debug("onend");
                  dest.end();
                }
                var ondrain = pipeOnDrain(src);
                dest.on("drain", ondrain);
                var cleanedUp = false;
                function cleanup() {
                  debug("cleanup");
                  dest.removeListener("close", onclose);
                  dest.removeListener("finish", onfinish);
                  dest.removeListener("drain", ondrain);
                  dest.removeListener("error", onerror);
                  dest.removeListener("unpipe", onunpipe);
                  src.removeListener("end", onend);
                  src.removeListener("end", unpipe);
                  src.removeListener("data", ondata);
                  cleanedUp = true;
                  if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
                    ondrain();
                }
                src.on("data", ondata);
                function ondata(chunk) {
                  debug("ondata");
                  var ret = dest.write(chunk);
                  debug("dest.write", ret);
                  if (ret === false) {
                    if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                      debug("false write response, pause", state.awaitDrain);
                      state.awaitDrain++;
                    }
                    src.pause();
                  }
                }
                function onerror(er) {
                  debug("onerror", er);
                  unpipe();
                  dest.removeListener("error", onerror);
                  if (EElistenerCount(dest, "error") === 0)
                    errorOrDestroy(dest, er);
                }
                prependListener(dest, "error", onerror);
                function onclose() {
                  dest.removeListener("finish", onfinish);
                  unpipe();
                }
                dest.once("close", onclose);
                function onfinish() {
                  debug("onfinish");
                  dest.removeListener("close", onclose);
                  unpipe();
                }
                dest.once("finish", onfinish);
                function unpipe() {
                  debug("unpipe");
                  src.unpipe(dest);
                }
                dest.emit("pipe", src);
                if (!state.flowing) {
                  debug("pipe resume");
                  src.resume();
                }
                return dest;
              };
              function pipeOnDrain(src) {
                return function pipeOnDrainFunctionResult() {
                  var state = src._readableState;
                  debug("pipeOnDrain", state.awaitDrain);
                  if (state.awaitDrain)
                    state.awaitDrain--;
                  if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                    state.flowing = true;
                    flow(src);
                  }
                };
              }
              Readable.prototype.unpipe = function (dest) {
                var state = this._readableState;
                var unpipeInfo = {
                  hasUnpiped: false
                };
                if (state.pipesCount === 0)
                  return this;
                if (state.pipesCount === 1) {
                  if (dest && dest !== state.pipes)
                    return this;
                  if (!dest)
                    dest = state.pipes;
                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;
                  if (dest)
                    dest.emit("unpipe", this, unpipeInfo);
                  return this;
                }
                if (!dest) {
                  var dests = state.pipes;
                  var len = state.pipesCount;
                  state.pipes = null;
                  state.pipesCount = 0;
                  state.flowing = false;
                  for (var i = 0; i < len; i++)
                    dests[i].emit("unpipe", this, {
                      hasUnpiped: false
                    });
                  return this;
                }
                var index = indexOf(state.pipes, dest);
                if (index === -1)
                  return this;
                state.pipes.splice(index, 1);
                state.pipesCount -= 1;
                if (state.pipesCount === 1)
                  state.pipes = state.pipes[0];
                dest.emit("unpipe", this, unpipeInfo);
                return this;
              };
              Readable.prototype.on = function (ev, fn) {
                const res = Stream.prototype.on.call(this, ev, fn);
                const state = this._readableState;
                if (ev === "data") {
                  state.readableListening = this.listenerCount("readable") > 0;
                  if (state.flowing !== false)
                    this.resume();
                } else if (ev === "readable") {
                  if (!state.endEmitted && !state.readableListening) {
                    state.readableListening = state.needReadable = true;
                    state.flowing = false;
                    state.emittedReadable = false;
                    debug("on readable", state.length, state.reading);
                    if (state.length) {
                      emitReadable(this);
                    } else if (!state.reading) {
                      process.nextTick(nReadingNextTick, this);
                    }
                  }
                }
                return res;
              };
              Readable.prototype.addListener = Readable.prototype.on;
              Readable.prototype.removeListener = function (ev, fn) {
                const res = Stream.prototype.removeListener.call(this, ev, fn);
                if (ev === "readable") {
                  process.nextTick(updateReadableListening, this);
                }
                return res;
              };
              Readable.prototype.removeAllListeners = function (ev) {
                const res = Stream.prototype.removeAllListeners.apply(this, arguments);
                if (ev === "readable" || ev === void 0) {
                  process.nextTick(updateReadableListening, this);
                }
                return res;
              };
              function updateReadableListening(self2) {
                const state = self2._readableState;
                state.readableListening = self2.listenerCount("readable") > 0;
                if (state.resumeScheduled && !state.paused) {
                  state.flowing = true;
                } else if (self2.listenerCount("data") > 0) {
                  self2.resume();
                }
              }
              function nReadingNextTick(self2) {
                debug("readable nexttick read 0");
                self2.read(0);
              }
              Readable.prototype.resume = function () {
                var state = this._readableState;
                if (!state.flowing) {
                  debug("resume");
                  state.flowing = !state.readableListening;
                  resume(this, state);
                }
                state.paused = false;
                return this;
              };
              function resume(stream, state) {
                if (!state.resumeScheduled) {
                  state.resumeScheduled = true;
                  process.nextTick(resume_, stream, state);
                }
              }
              function resume_(stream, state) {
                debug("resume", state.reading);
                if (!state.reading) {
                  stream.read(0);
                }
                state.resumeScheduled = false;
                stream.emit("resume");
                flow(stream);
                if (state.flowing && !state.reading)
                  stream.read(0);
              }
              Readable.prototype.pause = function () {
                debug("call pause flowing=%j", this._readableState.flowing);
                if (this._readableState.flowing !== false) {
                  debug("pause");
                  this._readableState.flowing = false;
                  this.emit("pause");
                }
                this._readableState.paused = true;
                return this;
              };
              function flow(stream) {
                const state = stream._readableState;
                debug("flow", state.flowing);
                while (state.flowing && stream.read() !== null)
                  ;
              }
              Readable.prototype.wrap = function (stream) {
                var state = this._readableState;
                var paused = false;
                stream.on("end", () => {
                  debug("wrapped end");
                  if (state.decoder && !state.ended) {
                    var chunk = state.decoder.end();
                    if (chunk && chunk.length)
                      this.push(chunk);
                  }
                  this.push(null);
                });
                stream.on("data", (chunk) => {
                  debug("wrapped data");
                  if (state.decoder)
                    chunk = state.decoder.write(chunk);
                  if (state.objectMode && (chunk === null || chunk === void 0))
                    return;
                  else if (!state.objectMode && (!chunk || !chunk.length))
                    return;
                  var ret = this.push(chunk);
                  if (!ret) {
                    paused = true;
                    stream.pause();
                  }
                });
                for (var i in stream) {
                  if (this[i] === void 0 && typeof stream[i] === "function") {
                    this[i] = function methodWrap(method) {
                      return function methodWrapReturnFunction() {
                        return stream[method].apply(stream, arguments);
                      };
                    }(i);
                  }
                }
                for (var n = 0; n < kProxyEvents.length; n++) {
                  stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
                }
                this._read = (n2) => {
                  debug("wrapped _read", n2);
                  if (paused) {
                    paused = false;
                    stream.resume();
                  }
                };
                return this;
              };
              if (typeof Symbol === "function") {
                Readable.prototype[Symbol.asyncIterator] = function () {
                  if (createReadableStreamAsyncIterator === void 0) {
                    createReadableStreamAsyncIterator = require_async_iterator();
                  }
                  return createReadableStreamAsyncIterator(this);
                };
              }
              Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState.highWaterMark;
                }
              });
              Object.defineProperty(Readable.prototype, "readableBuffer", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState && this._readableState.buffer;
                }
              });
              Object.defineProperty(Readable.prototype, "readableFlowing", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get: function get() {
                  return this._readableState.flowing;
                },
                set: function set(state) {
                  if (this._readableState) {
                    this._readableState.flowing = state;
                  }
                }
              });
              Readable._fromList = fromList;
              Object.defineProperty(Readable.prototype, "readableLength", {
                // making it explicit this property is not enumerable
                // because otherwise some prototype manipulation in
                // userland will fail
                enumerable: false,
                get() {
                  return this._readableState.length;
                }
              });
              function fromList(n, state) {
                if (state.length === 0)
                  return null;
                var ret;
                if (state.objectMode)
                  ret = state.buffer.shift();
                else if (!n || n >= state.length) {
                  if (state.decoder)
                    ret = state.buffer.join("");
                  else if (state.buffer.length === 1)
                    ret = state.buffer.first();
                  else
                    ret = state.buffer.concat(state.length);
                  state.buffer.clear();
                } else {
                  ret = state.buffer.consume(n, state.decoder);
                }
                return ret;
              }
              function endReadable(stream) {
                var state = stream._readableState;
                debug("endReadable", state.endEmitted);
                if (!state.endEmitted) {
                  state.ended = true;
                  process.nextTick(endReadableNT, state, stream);
                }
              }
              function endReadableNT(state, stream) {
                debug("endReadableNT", state.endEmitted, state.length);
                if (!state.endEmitted && state.length === 0) {
                  state.endEmitted = true;
                  stream.readable = false;
                  stream.emit("end");
                  if (state.autoDestroy) {
                    const wState = stream._writableState;
                    if (!wState || wState.autoDestroy && wState.finished) {
                      stream.destroy();
                    }
                  }
                }
              }
              if (typeof Symbol === "function") {
                Readable.from = function (iterable, opts) {
                  if (from === void 0) {
                    from = require_from_browser();
                  }
                  return from(Readable, iterable, opts);
                };
              }
              function indexOf(xs, x) {
                for (var i = 0, l = xs.length; i < l; i++) {
                  if (xs[i] === x)
                    return i;
                }
                return -1;
              }
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js
          var require_stream_transform2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
              "use strict";
              module.exports = Transform;
              var _require$codes = require_errors_browser().codes;
              var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
              var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
              var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
              var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
              var Duplex = require_stream_duplex2();
              require_inherits_browser()(Transform, Duplex);
              function afterTransform(er, data) {
                var ts = this._transformState;
                ts.transforming = false;
                var cb = ts.writecb;
                if (cb === null) {
                  return this.emit("error", new ERR_MULTIPLE_CALLBACK());
                }
                ts.writechunk = null;
                ts.writecb = null;
                if (data != null)
                  this.push(data);
                cb(er);
                var rs = this._readableState;
                rs.reading = false;
                if (rs.needReadable || rs.length < rs.highWaterMark) {
                  this._read(rs.highWaterMark);
                }
              }
              function Transform(options) {
                if (!(this instanceof Transform))
                  return new Transform(options);
                Duplex.call(this, options);
                this._transformState = {
                  afterTransform: afterTransform.bind(this),
                  needTransform: false,
                  transforming: false,
                  writecb: null,
                  writechunk: null,
                  writeencoding: null
                };
                this._readableState.needReadable = true;
                this._readableState.sync = false;
                if (options) {
                  if (typeof options.transform === "function")
                    this._transform = options.transform;
                  if (typeof options.flush === "function")
                    this._flush = options.flush;
                }
                this.on("prefinish", prefinish);
              }
              function prefinish() {
                if (typeof this._flush === "function" && !this._readableState.destroyed) {
                  this._flush((er, data) => {
                    done(this, er, data);
                  });
                } else {
                  done(this, null, null);
                }
              }
              Transform.prototype.push = function (chunk, encoding) {
                this._transformState.needTransform = false;
                return Duplex.prototype.push.call(this, chunk, encoding);
              };
              Transform.prototype._transform = function (chunk, encoding, cb) {
                cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
              };
              Transform.prototype._write = function (chunk, encoding, cb) {
                var ts = this._transformState;
                ts.writecb = cb;
                ts.writechunk = chunk;
                ts.writeencoding = encoding;
                if (!ts.transforming) {
                  var rs = this._readableState;
                  if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
                    this._read(rs.highWaterMark);
                }
              };
              Transform.prototype._read = function (n) {
                var ts = this._transformState;
                if (ts.writechunk !== null && !ts.transforming) {
                  ts.transforming = true;
                  this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                } else {
                  ts.needTransform = true;
                }
              };
              Transform.prototype._destroy = function (err, cb) {
                Duplex.prototype._destroy.call(this, err, (err2) => {
                  cb(err2);
                });
              };
              function done(stream, er, data) {
                if (er)
                  return stream.emit("error", er);
                if (data != null)
                  stream.push(data);
                if (stream._writableState.length)
                  throw new ERR_TRANSFORM_WITH_LENGTH_0();
                if (stream._transformState.transforming)
                  throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
                return stream.push(null);
              }
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js
          var require_stream_passthrough2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
              "use strict";
              module.exports = PassThrough;
              var Transform = require_stream_transform2();
              require_inherits_browser()(PassThrough, Transform);
              function PassThrough(options) {
                if (!(this instanceof PassThrough))
                  return new PassThrough(options);
                Transform.call(this, options);
              }
              PassThrough.prototype._transform = function (chunk, encoding, cb) {
                cb(null, chunk);
              };
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js
          var require_pipeline = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
              "use strict";
              var eos;
              function once(callback) {
                let called = false;
                return function () {
                  if (called)
                    return;
                  called = true;
                  callback(...arguments);
                };
              }
              var _require$codes = require_errors_browser().codes;
              var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
              var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
              function noop2(err) {
                if (err)
                  throw err;
              }
              function isRequest2(stream) {
                return stream.setHeader && typeof stream.abort === "function";
              }
              function destroyer(stream, reading, writing, callback) {
                callback = once(callback);
                let closed = false;
                stream.on("close", () => {
                  closed = true;
                });
                if (eos === void 0)
                  eos = require_end_of_stream();
                eos(stream, {
                  readable: reading,
                  writable: writing
                }, (err) => {
                  if (err)
                    return callback(err);
                  closed = true;
                  callback();
                });
                let destroyed = false;
                return (err) => {
                  if (closed)
                    return;
                  if (destroyed)
                    return;
                  destroyed = true;
                  if (isRequest2(stream))
                    return stream.abort();
                  if (typeof stream.destroy === "function")
                    return stream.destroy();
                  callback(err || new ERR_STREAM_DESTROYED("pipe"));
                };
              }
              function call(fn) {
                fn();
              }
              function pipe(from, to) {
                return from.pipe(to);
              }
              function popCallback(streams) {
                if (!streams.length)
                  return noop2;
                if (typeof streams[streams.length - 1] !== "function")
                  return noop2;
                return streams.pop();
              }
              function pipeline() {
                for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
                  streams[_key] = arguments[_key];
                }
                const callback = popCallback(streams);
                if (Array.isArray(streams[0]))
                  streams = streams[0];
                if (streams.length < 2) {
                  throw new ERR_MISSING_ARGS("streams");
                }
                let error;
                const destroys = streams.map(function (stream, i) {
                  const reading = i < streams.length - 1;
                  const writing = i > 0;
                  return destroyer(stream, reading, writing, function (err) {
                    if (!error)
                      error = err;
                    if (err)
                      destroys.forEach(call);
                    if (reading)
                      return;
                    destroys.forEach(call);
                    callback(error);
                  });
                });
                return streams.reduce(pipe);
              }
              module.exports = pipeline;
            }
          });

          // node_modules/hash-base/node_modules/readable-stream/readable-browser.js
          var require_readable_browser2 = __commonJS({
            "node_modules/hash-base/node_modules/readable-stream/readable-browser.js"(exports, module) {
              exports = module.exports = require_stream_readable2();
              exports.Stream = exports;
              exports.Readable = exports;
              exports.Writable = require_stream_writable2();
              exports.Duplex = require_stream_duplex2();
              exports.Transform = require_stream_transform2();
              exports.PassThrough = require_stream_passthrough2();
              exports.finished = require_end_of_stream();
              exports.pipeline = require_pipeline();
            }
          });

          // node_modules/hash-base/index.js
          var require_hash_base = __commonJS({
            "node_modules/hash-base/index.js"(exports, module) {
              "use strict";
              var Buffer2 = require_safe_buffer().Buffer;
              var Transform = require_readable_browser2().Transform;
              var inherits2 = require_inherits_browser();
              function throwIfNotStringOrBuffer(val, prefix) {
                if (!Buffer2.isBuffer(val) && typeof val !== "string") {
                  throw new TypeError(prefix + " must be a string or a buffer");
                }
              }
              function HashBase(blockSize) {
                Transform.call(this);
                this._block = Buffer2.allocUnsafe(blockSize);
                this._blockSize = blockSize;
                this._blockOffset = 0;
                this._length = [0, 0, 0, 0];
                this._finalized = false;
              }
              inherits2(HashBase, Transform);
              HashBase.prototype._transform = function (chunk, encoding, callback) {
                var error = null;
                try {
                  this.update(chunk, encoding);
                } catch (err) {
                  error = err;
                }
                callback(error);
              };
              HashBase.prototype._flush = function (callback) {
                var error = null;
                try {
                  this.push(this.digest());
                } catch (err) {
                  error = err;
                }
                callback(error);
              };
              HashBase.prototype.update = function (data, encoding) {
                throwIfNotStringOrBuffer(data, "Data");
                if (this._finalized)
                  throw new Error("Digest already called");
                if (!Buffer2.isBuffer(data))
                  data = Buffer2.from(data, encoding);
                var block = this._block;
                var offset = 0;
                while (this._blockOffset + data.length - offset >= this._blockSize) {
                  for (var i = this._blockOffset; i < this._blockSize;)
                    block[i++] = data[offset++];
                  this._update();
                  this._blockOffset = 0;
                }
                while (offset < data.length)
                  block[this._blockOffset++] = data[offset++];
                for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
                  this._length[j] += carry;
                  carry = this._length[j] / 4294967296 | 0;
                  if (carry > 0)
                    this._length[j] -= 4294967296 * carry;
                }
                return this;
              };
              HashBase.prototype._update = function () {
                throw new Error("_update is not implemented");
              };
              HashBase.prototype.digest = function (encoding) {
                if (this._finalized)
                  throw new Error("Digest already called");
                this._finalized = true;
                var digest = this._digest();
                if (encoding !== void 0)
                  digest = digest.toString(encoding);
                this._block.fill(0);
                this._blockOffset = 0;
                for (var i = 0; i < 4; ++i)
                  this._length[i] = 0;
                return digest;
              };
              HashBase.prototype._digest = function () {
                throw new Error("_digest is not implemented");
              };
              module.exports = HashBase;
            }
          });

          // node_modules/md5.js/index.js
          var require_md52 = __commonJS({
            "node_modules/md5.js/index.js"(exports, module) {
              "use strict";
              var inherits2 = require_inherits_browser();
              var HashBase = require_hash_base();
              var Buffer2 = require_safe_buffer().Buffer;
              var ARRAY16 = new Array(16);
              function MD5() {
                HashBase.call(this, 64);
                this._a = 1732584193;
                this._b = 4023233417;
                this._c = 2562383102;
                this._d = 271733878;
              }
              inherits2(MD5, HashBase);
              MD5.prototype._update = function () {
                var M = ARRAY16;
                for (var i = 0; i < 16; ++i)
                  M[i] = this._block.readInt32LE(i * 4);
                var a = this._a;
                var b = this._b;
                var c = this._c;
                var d = this._d;
                a = fnF(a, b, c, d, M[0], 3614090360, 7);
                d = fnF(d, a, b, c, M[1], 3905402710, 12);
                c = fnF(c, d, a, b, M[2], 606105819, 17);
                b = fnF(b, c, d, a, M[3], 3250441966, 22);
                a = fnF(a, b, c, d, M[4], 4118548399, 7);
                d = fnF(d, a, b, c, M[5], 1200080426, 12);
                c = fnF(c, d, a, b, M[6], 2821735955, 17);
                b = fnF(b, c, d, a, M[7], 4249261313, 22);
                a = fnF(a, b, c, d, M[8], 1770035416, 7);
                d = fnF(d, a, b, c, M[9], 2336552879, 12);
                c = fnF(c, d, a, b, M[10], 4294925233, 17);
                b = fnF(b, c, d, a, M[11], 2304563134, 22);
                a = fnF(a, b, c, d, M[12], 1804603682, 7);
                d = fnF(d, a, b, c, M[13], 4254626195, 12);
                c = fnF(c, d, a, b, M[14], 2792965006, 17);
                b = fnF(b, c, d, a, M[15], 1236535329, 22);
                a = fnG(a, b, c, d, M[1], 4129170786, 5);
                d = fnG(d, a, b, c, M[6], 3225465664, 9);
                c = fnG(c, d, a, b, M[11], 643717713, 14);
                b = fnG(b, c, d, a, M[0], 3921069994, 20);
                a = fnG(a, b, c, d, M[5], 3593408605, 5);
                d = fnG(d, a, b, c, M[10], 38016083, 9);
                c = fnG(c, d, a, b, M[15], 3634488961, 14);
                b = fnG(b, c, d, a, M[4], 3889429448, 20);
                a = fnG(a, b, c, d, M[9], 568446438, 5);
                d = fnG(d, a, b, c, M[14], 3275163606, 9);
                c = fnG(c, d, a, b, M[3], 4107603335, 14);
                b = fnG(b, c, d, a, M[8], 1163531501, 20);
                a = fnG(a, b, c, d, M[13], 2850285829, 5);
                d = fnG(d, a, b, c, M[2], 4243563512, 9);
                c = fnG(c, d, a, b, M[7], 1735328473, 14);
                b = fnG(b, c, d, a, M[12], 2368359562, 20);
                a = fnH(a, b, c, d, M[5], 4294588738, 4);
                d = fnH(d, a, b, c, M[8], 2272392833, 11);
                c = fnH(c, d, a, b, M[11], 1839030562, 16);
                b = fnH(b, c, d, a, M[14], 4259657740, 23);
                a = fnH(a, b, c, d, M[1], 2763975236, 4);
                d = fnH(d, a, b, c, M[4], 1272893353, 11);
                c = fnH(c, d, a, b, M[7], 4139469664, 16);
                b = fnH(b, c, d, a, M[10], 3200236656, 23);
                a = fnH(a, b, c, d, M[13], 681279174, 4);
                d = fnH(d, a, b, c, M[0], 3936430074, 11);
                c = fnH(c, d, a, b, M[3], 3572445317, 16);
                b = fnH(b, c, d, a, M[6], 76029189, 23);
                a = fnH(a, b, c, d, M[9], 3654602809, 4);
                d = fnH(d, a, b, c, M[12], 3873151461, 11);
                c = fnH(c, d, a, b, M[15], 530742520, 16);
                b = fnH(b, c, d, a, M[2], 3299628645, 23);
                a = fnI(a, b, c, d, M[0], 4096336452, 6);
                d = fnI(d, a, b, c, M[7], 1126891415, 10);
                c = fnI(c, d, a, b, M[14], 2878612391, 15);
                b = fnI(b, c, d, a, M[5], 4237533241, 21);
                a = fnI(a, b, c, d, M[12], 1700485571, 6);
                d = fnI(d, a, b, c, M[3], 2399980690, 10);
                c = fnI(c, d, a, b, M[10], 4293915773, 15);
                b = fnI(b, c, d, a, M[1], 2240044497, 21);
                a = fnI(a, b, c, d, M[8], 1873313359, 6);
                d = fnI(d, a, b, c, M[15], 4264355552, 10);
                c = fnI(c, d, a, b, M[6], 2734768916, 15);
                b = fnI(b, c, d, a, M[13], 1309151649, 21);
                a = fnI(a, b, c, d, M[4], 4149444226, 6);
                d = fnI(d, a, b, c, M[11], 3174756917, 10);
                c = fnI(c, d, a, b, M[2], 718787259, 15);
                b = fnI(b, c, d, a, M[9], 3951481745, 21);
                this._a = this._a + a | 0;
                this._b = this._b + b | 0;
                this._c = this._c + c | 0;
                this._d = this._d + d | 0;
              };
              MD5.prototype._digest = function () {
                this._block[this._blockOffset++] = 128;
                if (this._blockOffset > 56) {
                  this._block.fill(0, this._blockOffset, 64);
                  this._update();
                  this._blockOffset = 0;
                }
                this._block.fill(0, this._blockOffset, 56);
                this._block.writeUInt32LE(this._length[0], 56);
                this._block.writeUInt32LE(this._length[1], 60);
                this._update();
                var buffer = Buffer2.allocUnsafe(16);
                buffer.writeInt32LE(this._a, 0);
                buffer.writeInt32LE(this._b, 4);
                buffer.writeInt32LE(this._c, 8);
                buffer.writeInt32LE(this._d, 12);
                return buffer;
              };
              function rotl(x, n) {
                return x << n | x >>> 32 - n;
              }
              function fnF(a, b, c, d, m, k, s) {
                return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
              }
              function fnG(a, b, c, d, m, k, s) {
                return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
              }
              function fnH(a, b, c, d, m, k, s) {
                return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
              }
              function fnI(a, b, c, d, m, k, s) {
                return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
              }
              module.exports = MD5;
            }
          });

          // node_modules/create-hash/md5.js
          var require_md53 = __commonJS({
            "node_modules/create-hash/md5.js"(exports, module) {
              var MD5 = require_md52();
              module.exports = function (buffer) {
                return new MD5().update(buffer).digest();
              };
            }
          });

          // node_modules/ripemd160/index.js
          var require_ripemd1602 = __commonJS({
            "node_modules/ripemd160/index.js"(exports, module) {
              "use strict";
              var Buffer2 = require_buffer2().Buffer;
              var inherits2 = require_inherits_browser();
              var HashBase = require_hash_base();
              var ARRAY16 = new Array(16);
              var zl = [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                7,
                4,
                13,
                1,
                10,
                6,
                15,
                3,
                12,
                0,
                9,
                5,
                2,
                14,
                11,
                8,
                3,
                10,
                14,
                4,
                9,
                15,
                8,
                1,
                2,
                7,
                0,
                6,
                13,
                11,
                5,
                12,
                1,
                9,
                11,
                10,
                0,
                8,
                12,
                4,
                13,
                3,
                7,
                15,
                14,
                5,
                6,
                2,
                4,
                0,
                5,
                9,
                7,
                12,
                2,
                10,
                14,
                1,
                3,
                8,
                11,
                6,
                15,
                13
              ];
              var zr = [
                5,
                14,
                7,
                0,
                9,
                2,
                11,
                4,
                13,
                6,
                15,
                8,
                1,
                10,
                3,
                12,
                6,
                11,
                3,
                7,
                0,
                13,
                5,
                10,
                14,
                15,
                8,
                12,
                4,
                9,
                1,
                2,
                15,
                5,
                1,
                3,
                7,
                14,
                6,
                9,
                11,
                8,
                12,
                2,
                10,
                0,
                4,
                13,
                8,
                6,
                4,
                1,
                3,
                11,
                15,
                0,
                5,
                12,
                2,
                13,
                9,
                7,
                10,
                14,
                12,
                15,
                10,
                4,
                1,
                5,
                8,
                7,
                6,
                2,
                13,
                14,
                0,
                3,
                9,
                11
              ];
              var sl = [
                11,
                14,
                15,
                12,
                5,
                8,
                7,
                9,
                11,
                13,
                14,
                15,
                6,
                7,
                9,
                8,
                7,
                6,
                8,
                13,
                11,
                9,
                7,
                15,
                7,
                12,
                15,
                9,
                11,
                7,
                13,
                12,
                11,
                13,
                6,
                7,
                14,
                9,
                13,
                15,
                14,
                8,
                13,
                6,
                5,
                12,
                7,
                5,
                11,
                12,
                14,
                15,
                14,
                15,
                9,
                8,
                9,
                14,
                5,
                6,
                8,
                6,
                5,
                12,
                9,
                15,
                5,
                11,
                6,
                8,
                13,
                12,
                5,
                12,
                13,
                14,
                11,
                8,
                5,
                6
              ];
              var sr = [
                8,
                9,
                9,
                11,
                13,
                15,
                15,
                5,
                7,
                7,
                8,
                11,
                14,
                14,
                12,
                6,
                9,
                13,
                15,
                7,
                12,
                8,
                9,
                11,
                7,
                7,
                12,
                7,
                6,
                15,
                13,
                11,
                9,
                7,
                15,
                11,
                8,
                6,
                6,
                14,
                12,
                13,
                5,
                14,
                13,
                13,
                7,
                5,
                15,
                5,
                8,
                11,
                14,
                14,
                6,
                14,
                6,
                9,
                12,
                9,
                12,
                5,
                15,
                8,
                8,
                5,
                12,
                9,
                12,
                5,
                14,
                6,
                8,
                13,
                6,
                5,
                15,
                13,
                11,
                11
              ];
              var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
              var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];
              function RIPEMD160() {
                HashBase.call(this, 64);
                this._a = 1732584193;
                this._b = 4023233417;
                this._c = 2562383102;
                this._d = 271733878;
                this._e = 3285377520;
              }
              inherits2(RIPEMD160, HashBase);
              RIPEMD160.prototype._update = function () {
                var words = ARRAY16;
                for (var j = 0; j < 16; ++j)
                  words[j] = this._block.readInt32LE(j * 4);
                var al = this._a | 0;
                var bl = this._b | 0;
                var cl = this._c | 0;
                var dl = this._d | 0;
                var el = this._e | 0;
                var ar = this._a | 0;
                var br = this._b | 0;
                var cr = this._c | 0;
                var dr = this._d | 0;
                var er = this._e | 0;
                for (var i = 0; i < 80; i += 1) {
                  var tl;
                  var tr;
                  if (i < 16) {
                    tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
                    tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
                  } else if (i < 32) {
                    tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
                    tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
                  } else if (i < 48) {
                    tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
                    tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
                  } else if (i < 64) {
                    tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
                    tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
                  } else {
                    tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
                    tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
                  }
                  al = el;
                  el = dl;
                  dl = rotl(cl, 10);
                  cl = bl;
                  bl = tl;
                  ar = er;
                  er = dr;
                  dr = rotl(cr, 10);
                  cr = br;
                  br = tr;
                }
                var t = this._b + cl + dr | 0;
                this._b = this._c + dl + er | 0;
                this._c = this._d + el + ar | 0;
                this._d = this._e + al + br | 0;
                this._e = this._a + bl + cr | 0;
                this._a = t;
              };
              RIPEMD160.prototype._digest = function () {
                this._block[this._blockOffset++] = 128;
                if (this._blockOffset > 56) {
                  this._block.fill(0, this._blockOffset, 64);
                  this._update();
                  this._blockOffset = 0;
                }
                this._block.fill(0, this._blockOffset, 56);
                this._block.writeUInt32LE(this._length[0], 56);
                this._block.writeUInt32LE(this._length[1], 60);
                this._update();
                var buffer = Buffer2.alloc ? Buffer2.alloc(20) : new Buffer2(20);
                buffer.writeInt32LE(this._a, 0);
                buffer.writeInt32LE(this._b, 4);
                buffer.writeInt32LE(this._c, 8);
                buffer.writeInt32LE(this._d, 12);
                buffer.writeInt32LE(this._e, 16);
                return buffer;
              };
              function rotl(x, n) {
                return x << n | x >>> 32 - n;
              }
              function fn1(a, b, c, d, e, m, k, s) {
                return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
              }
              function fn2(a, b, c, d, e, m, k, s) {
                return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
              }
              function fn3(a, b, c, d, e, m, k, s) {
                return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
              }
              function fn4(a, b, c, d, e, m, k, s) {
                return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
              }
              function fn5(a, b, c, d, e, m, k, s) {
                return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
              }
              module.exports = RIPEMD160;
            }
          });

          // node_modules/sha.js/hash.js
          var require_hash2 = __commonJS({
            "node_modules/sha.js/hash.js"(exports, module) {
              var Buffer2 = require_safe_buffer().Buffer;
              function Hash(blockSize, finalSize) {
                this._block = Buffer2.alloc(blockSize);
                this._finalSize = finalSize;
                this._blockSize = blockSize;
                this._len = 0;
              }
              Hash.prototype.update = function (data, enc) {
                if (typeof data === "string") {
                  enc = enc || "utf8";
                  data = Buffer2.from(data, enc);
                }
                var block = this._block;
                var blockSize = this._blockSize;
                var length = data.length;
                var accum = this._len;
                for (var offset = 0; offset < length;) {
                  var assigned = accum % blockSize;
                  var remainder = Math.min(length - offset, blockSize - assigned);
                  for (var i = 0; i < remainder; i++) {
                    block[assigned + i] = data[offset + i];
                  }
                  accum += remainder;
                  offset += remainder;
                  if (accum % blockSize === 0) {
                    this._update(block);
                  }
                }
                this._len += length;
                return this;
              };
              Hash.prototype.digest = function (enc) {
                var rem = this._len % this._blockSize;
                this._block[rem] = 128;
                this._block.fill(0, rem + 1);
                if (rem >= this._finalSize) {
                  this._update(this._block);
                  this._block.fill(0);
                }
                var bits = this._len * 8;
                if (bits <= 4294967295) {
                  this._block.writeUInt32BE(bits, this._blockSize - 4);
                } else {
                  var lowBits = (bits & 4294967295) >>> 0;
                  var highBits = (bits - lowBits) / 4294967296;
                  this._block.writeUInt32BE(highBits, this._blockSize - 8);
                  this._block.writeUInt32BE(lowBits, this._blockSize - 4);
                }
                this._update(this._block);
                var hash = this._hash();
                return enc ? hash.toString(enc) : hash;
              };
              Hash.prototype._update = function () {
                throw new Error("_update must be implemented by subclass");
              };
              module.exports = Hash;
            }
          });

          // node_modules/sha.js/sha.js
          var require_sha2 = __commonJS({
            "node_modules/sha.js/sha.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var K = [
                1518500249,
                1859775393,
                2400959708 | 0,
                3395469782 | 0
              ];
              var W = new Array(80);
              function Sha() {
                this.init();
                this._w = W;
                Hash.call(this, 64, 56);
              }
              inherits2(Sha, Hash);
              Sha.prototype.init = function () {
                this._a = 1732584193;
                this._b = 4023233417;
                this._c = 2562383102;
                this._d = 271733878;
                this._e = 3285377520;
                return this;
              };
              function rotl5(num) {
                return num << 5 | num >>> 27;
              }
              function rotl30(num) {
                return num << 30 | num >>> 2;
              }
              function ft(s, b, c, d) {
                if (s === 0)
                  return b & c | ~b & d;
                if (s === 2)
                  return b & c | b & d | c & d;
                return b ^ c ^ d;
              }
              Sha.prototype._update = function (M) {
                var W2 = this._w;
                var a = this._a | 0;
                var b = this._b | 0;
                var c = this._c | 0;
                var d = this._d | 0;
                var e = this._e | 0;
                for (var i = 0; i < 16; ++i)
                  W2[i] = M.readInt32BE(i * 4);
                for (; i < 80; ++i)
                  W2[i] = W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16];
                for (var j = 0; j < 80; ++j) {
                  var s = ~~(j / 20);
                  var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
                  e = d;
                  d = c;
                  c = rotl30(b);
                  b = a;
                  a = t;
                }
                this._a = a + this._a | 0;
                this._b = b + this._b | 0;
                this._c = c + this._c | 0;
                this._d = d + this._d | 0;
                this._e = e + this._e | 0;
              };
              Sha.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(20);
                H.writeInt32BE(this._a | 0, 0);
                H.writeInt32BE(this._b | 0, 4);
                H.writeInt32BE(this._c | 0, 8);
                H.writeInt32BE(this._d | 0, 12);
                H.writeInt32BE(this._e | 0, 16);
                return H;
              };
              module.exports = Sha;
            }
          });

          // node_modules/sha.js/sha1.js
          var require_sha12 = __commonJS({
            "node_modules/sha.js/sha1.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var K = [
                1518500249,
                1859775393,
                2400959708 | 0,
                3395469782 | 0
              ];
              var W = new Array(80);
              function Sha1() {
                this.init();
                this._w = W;
                Hash.call(this, 64, 56);
              }
              inherits2(Sha1, Hash);
              Sha1.prototype.init = function () {
                this._a = 1732584193;
                this._b = 4023233417;
                this._c = 2562383102;
                this._d = 271733878;
                this._e = 3285377520;
                return this;
              };
              function rotl1(num) {
                return num << 1 | num >>> 31;
              }
              function rotl5(num) {
                return num << 5 | num >>> 27;
              }
              function rotl30(num) {
                return num << 30 | num >>> 2;
              }
              function ft(s, b, c, d) {
                if (s === 0)
                  return b & c | ~b & d;
                if (s === 2)
                  return b & c | b & d | c & d;
                return b ^ c ^ d;
              }
              Sha1.prototype._update = function (M) {
                var W2 = this._w;
                var a = this._a | 0;
                var b = this._b | 0;
                var c = this._c | 0;
                var d = this._d | 0;
                var e = this._e | 0;
                for (var i = 0; i < 16; ++i)
                  W2[i] = M.readInt32BE(i * 4);
                for (; i < 80; ++i)
                  W2[i] = rotl1(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16]);
                for (var j = 0; j < 80; ++j) {
                  var s = ~~(j / 20);
                  var t = rotl5(a) + ft(s, b, c, d) + e + W2[j] + K[s] | 0;
                  e = d;
                  d = c;
                  c = rotl30(b);
                  b = a;
                  a = t;
                }
                this._a = a + this._a | 0;
                this._b = b + this._b | 0;
                this._c = c + this._c | 0;
                this._d = d + this._d | 0;
                this._e = e + this._e | 0;
              };
              Sha1.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(20);
                H.writeInt32BE(this._a | 0, 0);
                H.writeInt32BE(this._b | 0, 4);
                H.writeInt32BE(this._c | 0, 8);
                H.writeInt32BE(this._d | 0, 12);
                H.writeInt32BE(this._e | 0, 16);
                return H;
              };
              module.exports = Sha1;
            }
          });

          // node_modules/sha.js/sha256.js
          var require_sha2562 = __commonJS({
            "node_modules/sha.js/sha256.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var K = [
                1116352408,
                1899447441,
                3049323471,
                3921009573,
                961987163,
                1508970993,
                2453635748,
                2870763221,
                3624381080,
                310598401,
                607225278,
                1426881987,
                1925078388,
                2162078206,
                2614888103,
                3248222580,
                3835390401,
                4022224774,
                264347078,
                604807628,
                770255983,
                1249150122,
                1555081692,
                1996064986,
                2554220882,
                2821834349,
                2952996808,
                3210313671,
                3336571891,
                3584528711,
                113926993,
                338241895,
                666307205,
                773529912,
                1294757372,
                1396182291,
                1695183700,
                1986661051,
                2177026350,
                2456956037,
                2730485921,
                2820302411,
                3259730800,
                3345764771,
                3516065817,
                3600352804,
                4094571909,
                275423344,
                430227734,
                506948616,
                659060556,
                883997877,
                958139571,
                1322822218,
                1537002063,
                1747873779,
                1955562222,
                2024104815,
                2227730452,
                2361852424,
                2428436474,
                2756734187,
                3204031479,
                3329325298
              ];
              var W = new Array(64);
              function Sha256() {
                this.init();
                this._w = W;
                Hash.call(this, 64, 56);
              }
              inherits2(Sha256, Hash);
              Sha256.prototype.init = function () {
                this._a = 1779033703;
                this._b = 3144134277;
                this._c = 1013904242;
                this._d = 2773480762;
                this._e = 1359893119;
                this._f = 2600822924;
                this._g = 528734635;
                this._h = 1541459225;
                return this;
              };
              function ch(x, y, z) {
                return z ^ x & (y ^ z);
              }
              function maj(x, y, z) {
                return x & y | z & (x | y);
              }
              function sigma0(x) {
                return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
              }
              function sigma1(x) {
                return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
              }
              function gamma0(x) {
                return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
              }
              function gamma1(x) {
                return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
              }
              Sha256.prototype._update = function (M) {
                var W2 = this._w;
                var a = this._a | 0;
                var b = this._b | 0;
                var c = this._c | 0;
                var d = this._d | 0;
                var e = this._e | 0;
                var f = this._f | 0;
                var g = this._g | 0;
                var h = this._h | 0;
                for (var i = 0; i < 16; ++i)
                  W2[i] = M.readInt32BE(i * 4);
                for (; i < 64; ++i)
                  W2[i] = gamma1(W2[i - 2]) + W2[i - 7] + gamma0(W2[i - 15]) + W2[i - 16] | 0;
                for (var j = 0; j < 64; ++j) {
                  var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W2[j] | 0;
                  var T2 = sigma0(a) + maj(a, b, c) | 0;
                  h = g;
                  g = f;
                  f = e;
                  e = d + T1 | 0;
                  d = c;
                  c = b;
                  b = a;
                  a = T1 + T2 | 0;
                }
                this._a = a + this._a | 0;
                this._b = b + this._b | 0;
                this._c = c + this._c | 0;
                this._d = d + this._d | 0;
                this._e = e + this._e | 0;
                this._f = f + this._f | 0;
                this._g = g + this._g | 0;
                this._h = h + this._h | 0;
              };
              Sha256.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(32);
                H.writeInt32BE(this._a, 0);
                H.writeInt32BE(this._b, 4);
                H.writeInt32BE(this._c, 8);
                H.writeInt32BE(this._d, 12);
                H.writeInt32BE(this._e, 16);
                H.writeInt32BE(this._f, 20);
                H.writeInt32BE(this._g, 24);
                H.writeInt32BE(this._h, 28);
                return H;
              };
              module.exports = Sha256;
            }
          });

          // node_modules/sha.js/sha224.js
          var require_sha2242 = __commonJS({
            "node_modules/sha.js/sha224.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var Sha256 = require_sha2562();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var W = new Array(64);
              function Sha224() {
                this.init();
                this._w = W;
                Hash.call(this, 64, 56);
              }
              inherits2(Sha224, Sha256);
              Sha224.prototype.init = function () {
                this._a = 3238371032;
                this._b = 914150663;
                this._c = 812702999;
                this._d = 4144912697;
                this._e = 4290775857;
                this._f = 1750603025;
                this._g = 1694076839;
                this._h = 3204075428;
                return this;
              };
              Sha224.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(28);
                H.writeInt32BE(this._a, 0);
                H.writeInt32BE(this._b, 4);
                H.writeInt32BE(this._c, 8);
                H.writeInt32BE(this._d, 12);
                H.writeInt32BE(this._e, 16);
                H.writeInt32BE(this._f, 20);
                H.writeInt32BE(this._g, 24);
                return H;
              };
              module.exports = Sha224;
            }
          });

          // node_modules/sha.js/sha512.js
          var require_sha5122 = __commonJS({
            "node_modules/sha.js/sha512.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var K = [
                1116352408,
                3609767458,
                1899447441,
                602891725,
                3049323471,
                3964484399,
                3921009573,
                2173295548,
                961987163,
                4081628472,
                1508970993,
                3053834265,
                2453635748,
                2937671579,
                2870763221,
                3664609560,
                3624381080,
                2734883394,
                310598401,
                1164996542,
                607225278,
                1323610764,
                1426881987,
                3590304994,
                1925078388,
                4068182383,
                2162078206,
                991336113,
                2614888103,
                633803317,
                3248222580,
                3479774868,
                3835390401,
                2666613458,
                4022224774,
                944711139,
                264347078,
                2341262773,
                604807628,
                2007800933,
                770255983,
                1495990901,
                1249150122,
                1856431235,
                1555081692,
                3175218132,
                1996064986,
                2198950837,
                2554220882,
                3999719339,
                2821834349,
                766784016,
                2952996808,
                2566594879,
                3210313671,
                3203337956,
                3336571891,
                1034457026,
                3584528711,
                2466948901,
                113926993,
                3758326383,
                338241895,
                168717936,
                666307205,
                1188179964,
                773529912,
                1546045734,
                1294757372,
                1522805485,
                1396182291,
                2643833823,
                1695183700,
                2343527390,
                1986661051,
                1014477480,
                2177026350,
                1206759142,
                2456956037,
                344077627,
                2730485921,
                1290863460,
                2820302411,
                3158454273,
                3259730800,
                3505952657,
                3345764771,
                106217008,
                3516065817,
                3606008344,
                3600352804,
                1432725776,
                4094571909,
                1467031594,
                275423344,
                851169720,
                430227734,
                3100823752,
                506948616,
                1363258195,
                659060556,
                3750685593,
                883997877,
                3785050280,
                958139571,
                3318307427,
                1322822218,
                3812723403,
                1537002063,
                2003034995,
                1747873779,
                3602036899,
                1955562222,
                1575990012,
                2024104815,
                1125592928,
                2227730452,
                2716904306,
                2361852424,
                442776044,
                2428436474,
                593698344,
                2756734187,
                3733110249,
                3204031479,
                2999351573,
                3329325298,
                3815920427,
                3391569614,
                3928383900,
                3515267271,
                566280711,
                3940187606,
                3454069534,
                4118630271,
                4000239992,
                116418474,
                1914138554,
                174292421,
                2731055270,
                289380356,
                3203993006,
                460393269,
                320620315,
                685471733,
                587496836,
                852142971,
                1086792851,
                1017036298,
                365543100,
                1126000580,
                2618297676,
                1288033470,
                3409855158,
                1501505948,
                4234509866,
                1607167915,
                987167468,
                1816402316,
                1246189591
              ];
              var W = new Array(160);
              function Sha512() {
                this.init();
                this._w = W;
                Hash.call(this, 128, 112);
              }
              inherits2(Sha512, Hash);
              Sha512.prototype.init = function () {
                this._ah = 1779033703;
                this._bh = 3144134277;
                this._ch = 1013904242;
                this._dh = 2773480762;
                this._eh = 1359893119;
                this._fh = 2600822924;
                this._gh = 528734635;
                this._hh = 1541459225;
                this._al = 4089235720;
                this._bl = 2227873595;
                this._cl = 4271175723;
                this._dl = 1595750129;
                this._el = 2917565137;
                this._fl = 725511199;
                this._gl = 4215389547;
                this._hl = 327033209;
                return this;
              };
              function Ch(x, y, z) {
                return z ^ x & (y ^ z);
              }
              function maj(x, y, z) {
                return x & y | z & (x | y);
              }
              function sigma0(x, xl) {
                return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
              }
              function sigma1(x, xl) {
                return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
              }
              function Gamma0(x, xl) {
                return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
              }
              function Gamma0l(x, xl) {
                return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
              }
              function Gamma1(x, xl) {
                return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
              }
              function Gamma1l(x, xl) {
                return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
              }
              function getCarry(a, b) {
                return a >>> 0 < b >>> 0 ? 1 : 0;
              }
              Sha512.prototype._update = function (M) {
                var W2 = this._w;
                var ah = this._ah | 0;
                var bh = this._bh | 0;
                var ch = this._ch | 0;
                var dh = this._dh | 0;
                var eh = this._eh | 0;
                var fh = this._fh | 0;
                var gh = this._gh | 0;
                var hh = this._hh | 0;
                var al = this._al | 0;
                var bl = this._bl | 0;
                var cl = this._cl | 0;
                var dl = this._dl | 0;
                var el = this._el | 0;
                var fl = this._fl | 0;
                var gl = this._gl | 0;
                var hl = this._hl | 0;
                for (var i = 0; i < 32; i += 2) {
                  W2[i] = M.readInt32BE(i * 4);
                  W2[i + 1] = M.readInt32BE(i * 4 + 4);
                }
                for (; i < 160; i += 2) {
                  var xh = W2[i - 15 * 2];
                  var xl = W2[i - 15 * 2 + 1];
                  var gamma0 = Gamma0(xh, xl);
                  var gamma0l = Gamma0l(xl, xh);
                  xh = W2[i - 2 * 2];
                  xl = W2[i - 2 * 2 + 1];
                  var gamma1 = Gamma1(xh, xl);
                  var gamma1l = Gamma1l(xl, xh);
                  var Wi7h = W2[i - 7 * 2];
                  var Wi7l = W2[i - 7 * 2 + 1];
                  var Wi16h = W2[i - 16 * 2];
                  var Wi16l = W2[i - 16 * 2 + 1];
                  var Wil = gamma0l + Wi7l | 0;
                  var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
                  Wil = Wil + gamma1l | 0;
                  Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
                  Wil = Wil + Wi16l | 0;
                  Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
                  W2[i] = Wih;
                  W2[i + 1] = Wil;
                }
                for (var j = 0; j < 160; j += 2) {
                  Wih = W2[j];
                  Wil = W2[j + 1];
                  var majh = maj(ah, bh, ch);
                  var majl = maj(al, bl, cl);
                  var sigma0h = sigma0(ah, al);
                  var sigma0l = sigma0(al, ah);
                  var sigma1h = sigma1(eh, el);
                  var sigma1l = sigma1(el, eh);
                  var Kih = K[j];
                  var Kil = K[j + 1];
                  var chh = Ch(eh, fh, gh);
                  var chl = Ch(el, fl, gl);
                  var t1l = hl + sigma1l | 0;
                  var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
                  t1l = t1l + chl | 0;
                  t1h = t1h + chh + getCarry(t1l, chl) | 0;
                  t1l = t1l + Kil | 0;
                  t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
                  t1l = t1l + Wil | 0;
                  t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
                  var t2l = sigma0l + majl | 0;
                  var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
                  hh = gh;
                  hl = gl;
                  gh = fh;
                  gl = fl;
                  fh = eh;
                  fl = el;
                  el = dl + t1l | 0;
                  eh = dh + t1h + getCarry(el, dl) | 0;
                  dh = ch;
                  dl = cl;
                  ch = bh;
                  cl = bl;
                  bh = ah;
                  bl = al;
                  al = t1l + t2l | 0;
                  ah = t1h + t2h + getCarry(al, t1l) | 0;
                }
                this._al = this._al + al | 0;
                this._bl = this._bl + bl | 0;
                this._cl = this._cl + cl | 0;
                this._dl = this._dl + dl | 0;
                this._el = this._el + el | 0;
                this._fl = this._fl + fl | 0;
                this._gl = this._gl + gl | 0;
                this._hl = this._hl + hl | 0;
                this._ah = this._ah + ah + getCarry(this._al, al) | 0;
                this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
                this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
                this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
                this._eh = this._eh + eh + getCarry(this._el, el) | 0;
                this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
                this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
                this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
              };
              Sha512.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(64);
                function writeInt64BE(h, l, offset) {
                  H.writeInt32BE(h, offset);
                  H.writeInt32BE(l, offset + 4);
                }
                writeInt64BE(this._ah, this._al, 0);
                writeInt64BE(this._bh, this._bl, 8);
                writeInt64BE(this._ch, this._cl, 16);
                writeInt64BE(this._dh, this._dl, 24);
                writeInt64BE(this._eh, this._el, 32);
                writeInt64BE(this._fh, this._fl, 40);
                writeInt64BE(this._gh, this._gl, 48);
                writeInt64BE(this._hh, this._hl, 56);
                return H;
              };
              module.exports = Sha512;
            }
          });

          // node_modules/sha.js/sha384.js
          var require_sha3842 = __commonJS({
            "node_modules/sha.js/sha384.js"(exports, module) {
              var inherits2 = require_inherits_browser();
              var SHA512 = require_sha5122();
              var Hash = require_hash2();
              var Buffer2 = require_safe_buffer().Buffer;
              var W = new Array(160);
              function Sha384() {
                this.init();
                this._w = W;
                Hash.call(this, 128, 112);
              }
              inherits2(Sha384, SHA512);
              Sha384.prototype.init = function () {
                this._ah = 3418070365;
                this._bh = 1654270250;
                this._ch = 2438529370;
                this._dh = 355462360;
                this._eh = 1731405415;
                this._fh = 2394180231;
                this._gh = 3675008525;
                this._hh = 1203062813;
                this._al = 3238371032;
                this._bl = 914150663;
                this._cl = 812702999;
                this._dl = 4144912697;
                this._el = 4290775857;
                this._fl = 1750603025;
                this._gl = 1694076839;
                this._hl = 3204075428;
                return this;
              };
              Sha384.prototype._hash = function () {
                var H = Buffer2.allocUnsafe(48);
                function writeInt64BE(h, l, offset) {
                  H.writeInt32BE(h, offset);
                  H.writeInt32BE(l, offset + 4);
                }
                writeInt64BE(this._ah, this._al, 0);
                writeInt64BE(this._bh, this._bl, 8);
                writeInt64BE(this._ch, this._cl, 16);
                writeInt64BE(this._dh, this._dl, 24);
                writeInt64BE(this._eh, this._el, 32);
                writeInt64BE(this._fh, this._fl, 40);
                return H;
              };
              module.exports = Sha384;
            }
          });

          // node_modules/sha.js/index.js
          var require_sha4 = __commonJS({
            "node_modules/sha.js/index.js"(exports, module) {
              var exports = module.exports = function SHA(algorithm) {
                algorithm = algorithm.toLowerCase();
                var Algorithm = exports[algorithm];
                if (!Algorithm)
                  throw new Error(algorithm + " is not supported (we accept pull requests)");
                return new Algorithm();
              };
              exports.sha = require_sha2();
              exports.sha1 = require_sha12();
              exports.sha224 = require_sha2242();
              exports.sha256 = require_sha2562();
              exports.sha384 = require_sha3842();
              exports.sha512 = require_sha5122();
            }
          });

          // node_modules/create-hmac/browser.js
          var require_browser2 = __commonJS({
            "node_modules/create-hmac/browser.js"(exports, module) {
              "use strict";
              var inherits2 = require_inherits_browser();
              var Legacy = require_legacy();
              var Base = require_cipher_base();
              var Buffer2 = require_safe_buffer().Buffer;
              var md5 = require_md53();
              var RIPEMD160 = require_ripemd1602();
              var sha = require_sha4();
              var ZEROS = Buffer2.alloc(128);
              function Hmac(alg, key) {
                Base.call(this, "digest");
                if (typeof key === "string") {
                  key = Buffer2.from(key);
                }
                var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
                this._alg = alg;
                this._key = key;
                if (key.length > blocksize) {
                  var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
                  key = hash.update(key).digest();
                } else if (key.length < blocksize) {
                  key = Buffer2.concat([key, ZEROS], blocksize);
                }
                var ipad = this._ipad = Buffer2.allocUnsafe(blocksize);
                var opad = this._opad = Buffer2.allocUnsafe(blocksize);
                for (var i = 0; i < blocksize; i++) {
                  ipad[i] = key[i] ^ 54;
                  opad[i] = key[i] ^ 92;
                }
                this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
                this._hash.update(ipad);
              }
              inherits2(Hmac, Base);
              Hmac.prototype._update = function (data) {
                this._hash.update(data);
              };
              Hmac.prototype._final = function () {
                var h = this._hash.digest();
                var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
                return hash.update(this._opad).update(h).digest();
              };
              module.exports = function createHmac(alg, key) {
                alg = alg.toLowerCase();
                if (alg === "rmd160" || alg === "ripemd160") {
                  return new Hmac("rmd160", key);
                }
                if (alg === "md5") {
                  return new Legacy(md5, key);
                }
                return new Hmac(alg, key);
              };
            }
          });

          // node_modules/tiny-secp256k1/rfc6979.js
          var require_rfc6979 = __commonJS({
            "node_modules/tiny-secp256k1/rfc6979.js"(exports, module) {
              var createHmac = require_browser2();
              var ONE1 = Buffer.alloc(1, 1);
              var ZERO1 = Buffer.alloc(1, 0);
              function deterministicGenerateK(hash, x, checkSig, isPrivate, extraEntropy) {
                let k = Buffer.alloc(32, 0);
                let v = Buffer.alloc(32, 1);
                k = createHmac("sha256", k).update(v).update(ZERO1).update(x).update(hash).update(extraEntropy || "").digest();
                v = createHmac("sha256", k).update(v).digest();
                k = createHmac("sha256", k).update(v).update(ONE1).update(x).update(hash).update(extraEntropy || "").digest();
                v = createHmac("sha256", k).update(v).digest();
                v = createHmac("sha256", k).update(v).digest();
                let T = v;
                while (!isPrivate(T) || !checkSig(T)) {
                  k = createHmac("sha256", k).update(v).update(ZERO1).digest();
                  v = createHmac("sha256", k).update(v).digest();
                  v = createHmac("sha256", k).update(v).digest();
                  T = v;
                }
                return T;
              }
              module.exports = deterministicGenerateK;
            }
          });

          // node_modules/tiny-secp256k1/js.js
          var require_js = __commonJS({
            "node_modules/tiny-secp256k1/js.js"(exports, module) {
              var BN = require_bn();
              var EC2 = require_elliptic().ec;
              var secp256k12 = new EC2("secp256k1");
              var deterministicGenerateK = require_rfc6979();
              var ZERO32 = Buffer.alloc(32, 0);
              var EC_GROUP_ORDER = Buffer.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", "hex");
              var EC_P = Buffer.from("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f", "hex");
              var n = secp256k12.curve.n;
              var nDiv2 = n.shrn(1);
              var G = secp256k12.curve.g;
              var THROW_BAD_PRIVATE = "Expected Private";
              var THROW_BAD_POINT = "Expected Point";
              var THROW_BAD_TWEAK = "Expected Tweak";
              var THROW_BAD_HASH = "Expected Hash";
              var THROW_BAD_SIGNATURE = "Expected Signature";
              var THROW_BAD_EXTRA_DATA = "Expected Extra Data (32 bytes)";
              function isScalar(x) {
                return Buffer.isBuffer(x) && x.length === 32;
              }
              function isOrderScalar(x) {
                if (!isScalar(x))
                  return false;
                return x.compare(EC_GROUP_ORDER) < 0;
              }
              function isPoint(p) {
                if (!Buffer.isBuffer(p))
                  return false;
                if (p.length < 33)
                  return false;
                const t = p[0];
                const x = p.slice(1, 33);
                if (x.compare(ZERO32) === 0)
                  return false;
                if (x.compare(EC_P) >= 0)
                  return false;
                if ((t === 2 || t === 3) && p.length === 33) {
                  try {
                    decodeFrom(p);
                  } catch (e) {
                    return false;
                  }
                  return true;
                }
                const y = p.slice(33);
                if (y.compare(ZERO32) === 0)
                  return false;
                if (y.compare(EC_P) >= 0)
                  return false;
                if (t === 4 && p.length === 65)
                  return true;
                return false;
              }
              function __isPointCompressed(p) {
                return p[0] !== 4;
              }
              function isPointCompressed(p) {
                if (!isPoint(p))
                  return false;
                return __isPointCompressed(p);
              }
              function isPrivate(x) {
                if (!isScalar(x))
                  return false;
                return x.compare(ZERO32) > 0 && // > 0
                  x.compare(EC_GROUP_ORDER) < 0;
              }
              function isSignature(value) {
                const r = value.slice(0, 32);
                const s = value.slice(32, 64);
                return Buffer.isBuffer(value) && value.length === 64 && r.compare(EC_GROUP_ORDER) < 0 && s.compare(EC_GROUP_ORDER) < 0;
              }
              function assumeCompression(value, pubkey) {
                if (value === void 0 && pubkey !== void 0)
                  return __isPointCompressed(pubkey);
                if (value === void 0)
                  return true;
                return value;
              }
              function fromBuffer(d) {
                return new BN(d);
              }
              function toBuffer(d) {
                return d.toArrayLike(Buffer, "be", 32);
              }
              function decodeFrom(P) {
                return secp256k12.curve.decodePoint(P);
              }
              function getEncoded(P, compressed) {
                return Buffer.from(P._encode(compressed));
              }
              function pointAdd(pA, pB, __compressed) {
                if (!isPoint(pA))
                  throw new TypeError(THROW_BAD_POINT);
                if (!isPoint(pB))
                  throw new TypeError(THROW_BAD_POINT);
                const a = decodeFrom(pA);
                const b = decodeFrom(pB);
                const pp = a.add(b);
                if (pp.isInfinity())
                  return null;
                const compressed = assumeCompression(__compressed, pA);
                return getEncoded(pp, compressed);
              }
              function pointAddScalar(p, tweak, __compressed) {
                if (!isPoint(p))
                  throw new TypeError(THROW_BAD_POINT);
                if (!isOrderScalar(tweak))
                  throw new TypeError(THROW_BAD_TWEAK);
                const compressed = assumeCompression(__compressed, p);
                const pp = decodeFrom(p);
                if (tweak.compare(ZERO32) === 0)
                  return getEncoded(pp, compressed);
                const tt = fromBuffer(tweak);
                const qq = G.mul(tt);
                const uu = pp.add(qq);
                if (uu.isInfinity())
                  return null;
                return getEncoded(uu, compressed);
              }
              function pointCompress(p, __compressed) {
                if (!isPoint(p))
                  throw new TypeError(THROW_BAD_POINT);
                const pp = decodeFrom(p);
                if (pp.isInfinity())
                  throw new TypeError(THROW_BAD_POINT);
                const compressed = assumeCompression(__compressed, p);
                return getEncoded(pp, compressed);
              }
              function pointFromScalar(d, __compressed) {
                if (!isPrivate(d))
                  throw new TypeError(THROW_BAD_PRIVATE);
                const dd = fromBuffer(d);
                const pp = G.mul(dd);
                if (pp.isInfinity())
                  return null;
                const compressed = assumeCompression(__compressed);
                return getEncoded(pp, compressed);
              }
              function pointMultiply(p, tweak, __compressed) {
                if (!isPoint(p))
                  throw new TypeError(THROW_BAD_POINT);
                if (!isOrderScalar(tweak))
                  throw new TypeError(THROW_BAD_TWEAK);
                const compressed = assumeCompression(__compressed, p);
                const pp = decodeFrom(p);
                const tt = fromBuffer(tweak);
                const qq = pp.mul(tt);
                if (qq.isInfinity())
                  return null;
                return getEncoded(qq, compressed);
              }
              function privateAdd(d, tweak) {
                if (!isPrivate(d))
                  throw new TypeError(THROW_BAD_PRIVATE);
                if (!isOrderScalar(tweak))
                  throw new TypeError(THROW_BAD_TWEAK);
                const dd = fromBuffer(d);
                const tt = fromBuffer(tweak);
                const dt = toBuffer(dd.add(tt).umod(n));
                if (!isPrivate(dt))
                  return null;
                return dt;
              }
              function privateSub(d, tweak) {
                if (!isPrivate(d))
                  throw new TypeError(THROW_BAD_PRIVATE);
                if (!isOrderScalar(tweak))
                  throw new TypeError(THROW_BAD_TWEAK);
                const dd = fromBuffer(d);
                const tt = fromBuffer(tweak);
                const dt = toBuffer(dd.sub(tt).umod(n));
                if (!isPrivate(dt))
                  return null;
                return dt;
              }
              function sign(hash, x) {
                return __sign(hash, x);
              }
              function signWithEntropy(hash, x, addData) {
                return __sign(hash, x, addData);
              }
              function __sign(hash, x, addData) {
                if (!isScalar(hash))
                  throw new TypeError(THROW_BAD_HASH);
                if (!isPrivate(x))
                  throw new TypeError(THROW_BAD_PRIVATE);
                if (addData !== void 0 && !isScalar(addData))
                  throw new TypeError(THROW_BAD_EXTRA_DATA);
                const d = fromBuffer(x);
                const e = fromBuffer(hash);
                let r, s;
                const checkSig = function (k) {
                  const kI = fromBuffer(k);
                  const Q = G.mul(kI);
                  if (Q.isInfinity())
                    return false;
                  r = Q.x.umod(n);
                  if (r.isZero() === 0)
                    return false;
                  s = kI.invm(n).mul(e.add(d.mul(r))).umod(n);
                  if (s.isZero() === 0)
                    return false;
                  return true;
                };
                deterministicGenerateK(hash, x, checkSig, isPrivate, addData);
                if (s.cmp(nDiv2) > 0) {
                  s = n.sub(s);
                }
                const buffer = Buffer.allocUnsafe(64);
                toBuffer(r).copy(buffer, 0);
                toBuffer(s).copy(buffer, 32);
                return buffer;
              }
              function verify(hash, q, signature, strict) {
                if (!isScalar(hash))
                  throw new TypeError(THROW_BAD_HASH);
                if (!isPoint(q))
                  throw new TypeError(THROW_BAD_POINT);
                if (!isSignature(signature))
                  throw new TypeError(THROW_BAD_SIGNATURE);
                const Q = decodeFrom(q);
                const r = fromBuffer(signature.slice(0, 32));
                const s = fromBuffer(signature.slice(32, 64));
                if (strict && s.cmp(nDiv2) > 0) {
                  return false;
                }
                if (r.gtn(0) <= 0)
                  return false;
                if (s.gtn(0) <= 0)
                  return false;
                const e = fromBuffer(hash);
                const sInv = s.invm(n);
                const u1 = e.mul(sInv).umod(n);
                const u2 = r.mul(sInv).umod(n);
                const R = G.mulAdd(u1, Q, u2);
                if (R.isInfinity())
                  return false;
                const xR = R.x;
                const v = xR.umod(n);
                return v.eq(r);
              }
              module.exports = {
                isPoint,
                isPointCompressed,
                isPrivate,
                pointAdd,
                pointAddScalar,
                pointCompress,
                pointFromScalar,
                pointMultiply,
                privateAdd,
                privateSub,
                sign,
                signWithEntropy,
                verify
              };
            }
          });

          // node_modules/create-hash/browser.js
          var require_browser3 = __commonJS({
            "node_modules/create-hash/browser.js"(exports, module) {
              "use strict";
              var inherits2 = require_inherits_browser();
              var MD5 = require_md52();
              var RIPEMD160 = require_ripemd1602();
              var sha = require_sha4();
              var Base = require_cipher_base();
              function Hash(hash) {
                Base.call(this, "digest");
                this._hash = hash;
              }
              inherits2(Hash, Base);
              Hash.prototype._update = function (data) {
                this._hash.update(data);
              };
              Hash.prototype._final = function () {
                return this._hash.digest();
              };
              module.exports = function createHash(alg) {
                alg = alg.toLowerCase();
                if (alg === "md5")
                  return new MD5();
                if (alg === "rmd160" || alg === "ripemd160")
                  return new RIPEMD160();
                return new Hash(sha(alg));
              };
            }
          });

          // node_modules/pbkdf2/lib/precondition.js
          var require_precondition = __commonJS({
            "node_modules/pbkdf2/lib/precondition.js"(exports, module) {
              var MAX_ALLOC = Math.pow(2, 30) - 1;
              module.exports = function (iterations, keylen) {
                if (typeof iterations !== "number") {
                  throw new TypeError("Iterations not a number");
                }
                if (iterations < 0) {
                  throw new TypeError("Bad iterations");
                }
                if (typeof keylen !== "number") {
                  throw new TypeError("Key length not a number");
                }
                if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
                  throw new TypeError("Bad key length");
                }
              };
            }
          });

          // node_modules/pbkdf2/lib/default-encoding.js
          var require_default_encoding = __commonJS({
            "node_modules/pbkdf2/lib/default-encoding.js"(exports, module) {
              var defaultEncoding;
              if (global.process && global.process.browser) {
                defaultEncoding = "utf-8";
              } else if (global.process && global.process.version) {
                pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
                defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
              } else {
                defaultEncoding = "utf-8";
              }
              var pVersionMajor;
              module.exports = defaultEncoding;
            }
          });

          // node_modules/pbkdf2/lib/to-buffer.js
          var require_to_buffer = __commonJS({
            "node_modules/pbkdf2/lib/to-buffer.js"(exports, module) {
              var Buffer2 = require_safe_buffer().Buffer;
              module.exports = function (thing, encoding, name) {
                if (Buffer2.isBuffer(thing)) {
                  return thing;
                } else if (typeof thing === "string") {
                  return Buffer2.from(thing, encoding);
                } else if (ArrayBuffer.isView(thing)) {
                  return Buffer2.from(thing.buffer);
                } else {
                  throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
                }
              };
            }
          });

          // node_modules/pbkdf2/lib/sync-browser.js
          var require_sync_browser = __commonJS({
            "node_modules/pbkdf2/lib/sync-browser.js"(exports, module) {
              var md5 = require_md53();
              var RIPEMD160 = require_ripemd1602();
              var sha = require_sha4();
              var Buffer2 = require_safe_buffer().Buffer;
              var checkParameters = require_precondition();
              var defaultEncoding = require_default_encoding();
              var toBuffer = require_to_buffer();
              var ZEROS = Buffer2.alloc(128);
              var sizes = {
                md5: 16,
                sha1: 20,
                sha224: 28,
                sha256: 32,
                sha384: 48,
                sha512: 64,
                rmd160: 20,
                ripemd160: 20
              };
              function Hmac(alg, key, saltLen) {
                var hash = getDigest(alg);
                var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
                if (key.length > blocksize) {
                  key = hash(key);
                } else if (key.length < blocksize) {
                  key = Buffer2.concat([key, ZEROS], blocksize);
                }
                var ipad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
                var opad = Buffer2.allocUnsafe(blocksize + sizes[alg]);
                for (var i = 0; i < blocksize; i++) {
                  ipad[i] = key[i] ^ 54;
                  opad[i] = key[i] ^ 92;
                }
                var ipad1 = Buffer2.allocUnsafe(blocksize + saltLen + 4);
                ipad.copy(ipad1, 0, 0, blocksize);
                this.ipad1 = ipad1;
                this.ipad2 = ipad;
                this.opad = opad;
                this.alg = alg;
                this.blocksize = blocksize;
                this.hash = hash;
                this.size = sizes[alg];
              }
              Hmac.prototype.run = function (data, ipad) {
                data.copy(ipad, this.blocksize);
                var h = this.hash(ipad);
                h.copy(this.opad, this.blocksize);
                return this.hash(this.opad);
              };
              function getDigest(alg) {
                function shaFunc(data) {
                  return sha(alg).update(data).digest();
                }
                function rmd160Func(data) {
                  return new RIPEMD160().update(data).digest();
                }
                if (alg === "rmd160" || alg === "ripemd160")
                  return rmd160Func;
                if (alg === "md5")
                  return md5;
                return shaFunc;
              }
              function pbkdf2(password, salt, iterations, keylen, digest) {
                checkParameters(iterations, keylen);
                password = toBuffer(password, defaultEncoding, "Password");
                salt = toBuffer(salt, defaultEncoding, "Salt");
                digest = digest || "sha1";
                var hmac = new Hmac(digest, password, salt.length);
                var DK = Buffer2.allocUnsafe(keylen);
                var block1 = Buffer2.allocUnsafe(salt.length + 4);
                salt.copy(block1, 0, 0, salt.length);
                var destPos = 0;
                var hLen = sizes[digest];
                var l = Math.ceil(keylen / hLen);
                for (var i = 1; i <= l; i++) {
                  block1.writeUInt32BE(i, salt.length);
                  var T = hmac.run(block1, hmac.ipad1);
                  var U = T;
                  for (var j = 1; j < iterations; j++) {
                    U = hmac.run(U, hmac.ipad2);
                    for (var k = 0; k < hLen; k++)
                      T[k] ^= U[k];
                  }
                  T.copy(DK, destPos);
                  destPos += hLen;
                }
                return DK;
              }
              module.exports = pbkdf2;
            }
          });

          // node_modules/pbkdf2/lib/async.js
          var require_async = __commonJS({
            "node_modules/pbkdf2/lib/async.js"(exports, module) {
              var Buffer2 = require_safe_buffer().Buffer;
              var checkParameters = require_precondition();
              var defaultEncoding = require_default_encoding();
              var sync = require_sync_browser();
              var toBuffer = require_to_buffer();
              var ZERO_BUF;
              var subtle = global.crypto && global.crypto.subtle;
              var toBrowser = {
                sha: "SHA-1",
                "sha-1": "SHA-1",
                sha1: "SHA-1",
                sha256: "SHA-256",
                "sha-256": "SHA-256",
                sha384: "SHA-384",
                "sha-384": "SHA-384",
                "sha-512": "SHA-512",
                sha512: "SHA-512"
              };
              var checks = [];
              function checkNative(algo) {
                if (global.process && !global.process.browser) {
                  return Promise.resolve(false);
                }
                if (!subtle || !subtle.importKey || !subtle.deriveBits) {
                  return Promise.resolve(false);
                }
                if (checks[algo] !== void 0) {
                  return checks[algo];
                }
                ZERO_BUF = ZERO_BUF || Buffer2.alloc(8);
                var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
                  return true;
                }).catch(function () {
                  return false;
                });
                checks[algo] = prom;
                return prom;
              }
              var nextTick;
              function getNextTick() {
                if (nextTick) {
                  return nextTick;
                }
                if (global.process && global.process.nextTick) {
                  nextTick = global.process.nextTick;
                } else if (global.queueMicrotask) {
                  nextTick = global.queueMicrotask;
                } else if (global.setImmediate) {
                  nextTick = global.setImmediate;
                } else {
                  nextTick = global.setTimeout;
                }
                return nextTick;
              }
              function browserPbkdf2(password, salt, iterations, length, algo) {
                return subtle.importKey(
                  "raw",
                  password,
                  { name: "PBKDF2" },
                  false,
                  ["deriveBits"]
                ).then(function (key) {
                  return subtle.deriveBits({
                    name: "PBKDF2",
                    salt,
                    iterations,
                    hash: {
                      name: algo
                    }
                  }, key, length << 3);
                }).then(function (res) {
                  return Buffer2.from(res);
                });
              }
              function resolvePromise(promise, callback) {
                promise.then(function (out) {
                  getNextTick()(function () {
                    callback(null, out);
                  });
                }, function (e) {
                  getNextTick()(function () {
                    callback(e);
                  });
                });
              }
              module.exports = function (password, salt, iterations, keylen, digest, callback) {
                if (typeof digest === "function") {
                  callback = digest;
                  digest = void 0;
                }
                digest = digest || "sha1";
                var algo = toBrowser[digest.toLowerCase()];
                if (!algo || typeof global.Promise !== "function") {
                  getNextTick()(function () {
                    var out;
                    try {
                      out = sync(password, salt, iterations, keylen, digest);
                    } catch (e) {
                      return callback(e);
                    }
                    callback(null, out);
                  });
                  return;
                }
                checkParameters(iterations, keylen);
                password = toBuffer(password, defaultEncoding, "Password");
                salt = toBuffer(salt, defaultEncoding, "Salt");
                if (typeof callback !== "function")
                  throw new Error("No callback provided to pbkdf2");
                resolvePromise(checkNative(algo).then(function (resp) {
                  if (resp)
                    return browserPbkdf2(password, salt, iterations, keylen, algo);
                  return sync(password, salt, iterations, keylen, digest);
                }), callback);
              };
            }
          });

          // node_modules/pbkdf2/browser.js
          var require_browser4 = __commonJS({
            "node_modules/pbkdf2/browser.js"(exports) {
              exports.pbkdf2 = require_async();
              exports.pbkdf2Sync = require_sync_browser();
            }
          });

          // node_modules/randombytes/browser.js
          var require_browser5 = __commonJS({
            "node_modules/randombytes/browser.js"(exports, module) {
              "use strict";
              var MAX_BYTES = 65536;
              var MAX_UINT32 = 4294967295;
              function oldBrowser() {
                throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
              }
              var Buffer2 = require_safe_buffer().Buffer;
              var crypto = global.crypto || global.msCrypto;
              if (crypto && crypto.getRandomValues) {
                module.exports = randomBytes;
              } else {
                module.exports = oldBrowser;
              }
              function randomBytes(size, cb) {
                if (size > MAX_UINT32)
                  throw new RangeError("requested too many random bytes");
                var bytes = Buffer2.allocUnsafe(size);
                if (size > 0) {
                  if (size > MAX_BYTES) {
                    for (var generated = 0; generated < size; generated += MAX_BYTES) {
                      crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
                    }
                  } else {
                    crypto.getRandomValues(bytes);
                  }
                }
                if (typeof cb === "function") {
                  return process.nextTick(function () {
                    cb(null, bytes);
                  });
                }
                return bytes;
              }
            }
          });

          // node_modules/bip39/src/wordlists/chinese_simplified.json
          var require_chinese_simplified = __commonJS({
            "node_modules/bip39/src/wordlists/chinese_simplified.json"(exports, module) {
              module.exports = [
                "\u7684",
                "\u4E00",
                "\u662F",
                "\u5728",
                "\u4E0D",
                "\u4E86",
                "\u6709",
                "\u548C",
                "\u4EBA",
                "\u8FD9",
                "\u4E2D",
                "\u5927",
                "\u4E3A",
                "\u4E0A",
                "\u4E2A",
                "\u56FD",
                "\u6211",
                "\u4EE5",
                "\u8981",
                "\u4ED6",
                "\u65F6",
                "\u6765",
                "\u7528",
                "\u4EEC",
                "\u751F",
                "\u5230",
                "\u4F5C",
                "\u5730",
                "\u4E8E",
                "\u51FA",
                "\u5C31",
                "\u5206",
                "\u5BF9",
                "\u6210",
                "\u4F1A",
                "\u53EF",
                "\u4E3B",
                "\u53D1",
                "\u5E74",
                "\u52A8",
                "\u540C",
                "\u5DE5",
                "\u4E5F",
                "\u80FD",
                "\u4E0B",
                "\u8FC7",
                "\u5B50",
                "\u8BF4",
                "\u4EA7",
                "\u79CD",
                "\u9762",
                "\u800C",
                "\u65B9",
                "\u540E",
                "\u591A",
                "\u5B9A",
                "\u884C",
                "\u5B66",
                "\u6CD5",
                "\u6240",
                "\u6C11",
                "\u5F97",
                "\u7ECF",
                "\u5341",
                "\u4E09",
                "\u4E4B",
                "\u8FDB",
                "\u7740",
                "\u7B49",
                "\u90E8",
                "\u5EA6",
                "\u5BB6",
                "\u7535",
                "\u529B",
                "\u91CC",
                "\u5982",
                "\u6C34",
                "\u5316",
                "\u9AD8",
                "\u81EA",
                "\u4E8C",
                "\u7406",
                "\u8D77",
                "\u5C0F",
                "\u7269",
                "\u73B0",
                "\u5B9E",
                "\u52A0",
                "\u91CF",
                "\u90FD",
                "\u4E24",
                "\u4F53",
                "\u5236",
                "\u673A",
                "\u5F53",
                "\u4F7F",
                "\u70B9",
                "\u4ECE",
                "\u4E1A",
                "\u672C",
                "\u53BB",
                "\u628A",
                "\u6027",
                "\u597D",
                "\u5E94",
                "\u5F00",
                "\u5B83",
                "\u5408",
                "\u8FD8",
                "\u56E0",
                "\u7531",
                "\u5176",
                "\u4E9B",
                "\u7136",
                "\u524D",
                "\u5916",
                "\u5929",
                "\u653F",
                "\u56DB",
                "\u65E5",
                "\u90A3",
                "\u793E",
                "\u4E49",
                "\u4E8B",
                "\u5E73",
                "\u5F62",
                "\u76F8",
                "\u5168",
                "\u8868",
                "\u95F4",
                "\u6837",
                "\u4E0E",
                "\u5173",
                "\u5404",
                "\u91CD",
                "\u65B0",
                "\u7EBF",
                "\u5185",
                "\u6570",
                "\u6B63",
                "\u5FC3",
                "\u53CD",
                "\u4F60",
                "\u660E",
                "\u770B",
                "\u539F",
                "\u53C8",
                "\u4E48",
                "\u5229",
                "\u6BD4",
                "\u6216",
                "\u4F46",
                "\u8D28",
                "\u6C14",
                "\u7B2C",
                "\u5411",
                "\u9053",
                "\u547D",
                "\u6B64",
                "\u53D8",
                "\u6761",
                "\u53EA",
                "\u6CA1",
                "\u7ED3",
                "\u89E3",
                "\u95EE",
                "\u610F",
                "\u5EFA",
                "\u6708",
                "\u516C",
                "\u65E0",
                "\u7CFB",
                "\u519B",
                "\u5F88",
                "\u60C5",
                "\u8005",
                "\u6700",
                "\u7ACB",
                "\u4EE3",
                "\u60F3",
                "\u5DF2",
                "\u901A",
                "\u5E76",
                "\u63D0",
                "\u76F4",
                "\u9898",
                "\u515A",
                "\u7A0B",
                "\u5C55",
                "\u4E94",
                "\u679C",
                "\u6599",
                "\u8C61",
                "\u5458",
                "\u9769",
                "\u4F4D",
                "\u5165",
                "\u5E38",
                "\u6587",
                "\u603B",
                "\u6B21",
                "\u54C1",
                "\u5F0F",
                "\u6D3B",
                "\u8BBE",
                "\u53CA",
                "\u7BA1",
                "\u7279",
                "\u4EF6",
                "\u957F",
                "\u6C42",
                "\u8001",
                "\u5934",
                "\u57FA",
                "\u8D44",
                "\u8FB9",
                "\u6D41",
                "\u8DEF",
                "\u7EA7",
                "\u5C11",
                "\u56FE",
                "\u5C71",
                "\u7EDF",
                "\u63A5",
                "\u77E5",
                "\u8F83",
                "\u5C06",
                "\u7EC4",
                "\u89C1",
                "\u8BA1",
                "\u522B",
                "\u5979",
                "\u624B",
                "\u89D2",
                "\u671F",
                "\u6839",
                "\u8BBA",
                "\u8FD0",
                "\u519C",
                "\u6307",
                "\u51E0",
                "\u4E5D",
                "\u533A",
                "\u5F3A",
                "\u653E",
                "\u51B3",
                "\u897F",
                "\u88AB",
                "\u5E72",
                "\u505A",
                "\u5FC5",
                "\u6218",
                "\u5148",
                "\u56DE",
                "\u5219",
                "\u4EFB",
                "\u53D6",
                "\u636E",
                "\u5904",
                "\u961F",
                "\u5357",
                "\u7ED9",
                "\u8272",
                "\u5149",
                "\u95E8",
                "\u5373",
                "\u4FDD",
                "\u6CBB",
                "\u5317",
                "\u9020",
                "\u767E",
                "\u89C4",
                "\u70ED",
                "\u9886",
                "\u4E03",
                "\u6D77",
                "\u53E3",
                "\u4E1C",
                "\u5BFC",
                "\u5668",
                "\u538B",
                "\u5FD7",
                "\u4E16",
                "\u91D1",
                "\u589E",
                "\u4E89",
                "\u6D4E",
                "\u9636",
                "\u6CB9",
                "\u601D",
                "\u672F",
                "\u6781",
                "\u4EA4",
                "\u53D7",
                "\u8054",
                "\u4EC0",
                "\u8BA4",
                "\u516D",
                "\u5171",
                "\u6743",
                "\u6536",
                "\u8BC1",
                "\u6539",
                "\u6E05",
                "\u7F8E",
                "\u518D",
                "\u91C7",
                "\u8F6C",
                "\u66F4",
                "\u5355",
                "\u98CE",
                "\u5207",
                "\u6253",
                "\u767D",
                "\u6559",
                "\u901F",
                "\u82B1",
                "\u5E26",
                "\u5B89",
                "\u573A",
                "\u8EAB",
                "\u8F66",
                "\u4F8B",
                "\u771F",
                "\u52A1",
                "\u5177",
                "\u4E07",
                "\u6BCF",
                "\u76EE",
                "\u81F3",
                "\u8FBE",
                "\u8D70",
                "\u79EF",
                "\u793A",
                "\u8BAE",
                "\u58F0",
                "\u62A5",
                "\u6597",
                "\u5B8C",
                "\u7C7B",
                "\u516B",
                "\u79BB",
                "\u534E",
                "\u540D",
                "\u786E",
                "\u624D",
                "\u79D1",
                "\u5F20",
                "\u4FE1",
                "\u9A6C",
                "\u8282",
                "\u8BDD",
                "\u7C73",
                "\u6574",
                "\u7A7A",
                "\u5143",
                "\u51B5",
                "\u4ECA",
                "\u96C6",
                "\u6E29",
                "\u4F20",
                "\u571F",
                "\u8BB8",
                "\u6B65",
                "\u7FA4",
                "\u5E7F",
                "\u77F3",
                "\u8BB0",
                "\u9700",
                "\u6BB5",
                "\u7814",
                "\u754C",
                "\u62C9",
                "\u6797",
                "\u5F8B",
                "\u53EB",
                "\u4E14",
                "\u7A76",
                "\u89C2",
                "\u8D8A",
                "\u7EC7",
                "\u88C5",
                "\u5F71",
                "\u7B97",
                "\u4F4E",
                "\u6301",
                "\u97F3",
                "\u4F17",
                "\u4E66",
                "\u5E03",
                "\u590D",
                "\u5BB9",
                "\u513F",
                "\u987B",
                "\u9645",
                "\u5546",
                "\u975E",
                "\u9A8C",
                "\u8FDE",
                "\u65AD",
                "\u6DF1",
                "\u96BE",
                "\u8FD1",
                "\u77FF",
                "\u5343",
                "\u5468",
                "\u59D4",
                "\u7D20",
                "\u6280",
                "\u5907",
                "\u534A",
                "\u529E",
                "\u9752",
                "\u7701",
                "\u5217",
                "\u4E60",
                "\u54CD",
                "\u7EA6",
                "\u652F",
                "\u822C",
                "\u53F2",
                "\u611F",
                "\u52B3",
                "\u4FBF",
                "\u56E2",
                "\u5F80",
                "\u9178",
                "\u5386",
                "\u5E02",
                "\u514B",
                "\u4F55",
                "\u9664",
                "\u6D88",
                "\u6784",
                "\u5E9C",
                "\u79F0",
                "\u592A",
                "\u51C6",
                "\u7CBE",
                "\u503C",
                "\u53F7",
                "\u7387",
                "\u65CF",
                "\u7EF4",
                "\u5212",
                "\u9009",
                "\u6807",
                "\u5199",
                "\u5B58",
                "\u5019",
                "\u6BDB",
                "\u4EB2",
                "\u5FEB",
                "\u6548",
                "\u65AF",
                "\u9662",
                "\u67E5",
                "\u6C5F",
                "\u578B",
                "\u773C",
                "\u738B",
                "\u6309",
                "\u683C",
                "\u517B",
                "\u6613",
                "\u7F6E",
                "\u6D3E",
                "\u5C42",
                "\u7247",
                "\u59CB",
                "\u5374",
                "\u4E13",
                "\u72B6",
                "\u80B2",
                "\u5382",
                "\u4EAC",
                "\u8BC6",
                "\u9002",
                "\u5C5E",
                "\u5706",
                "\u5305",
                "\u706B",
                "\u4F4F",
                "\u8C03",
                "\u6EE1",
                "\u53BF",
                "\u5C40",
                "\u7167",
                "\u53C2",
                "\u7EA2",
                "\u7EC6",
                "\u5F15",
                "\u542C",
                "\u8BE5",
                "\u94C1",
                "\u4EF7",
                "\u4E25",
                "\u9996",
                "\u5E95",
                "\u6DB2",
                "\u5B98",
                "\u5FB7",
                "\u968F",
                "\u75C5",
                "\u82CF",
                "\u5931",
                "\u5C14",
                "\u6B7B",
                "\u8BB2",
                "\u914D",
                "\u5973",
                "\u9EC4",
                "\u63A8",
                "\u663E",
                "\u8C08",
                "\u7F6A",
                "\u795E",
                "\u827A",
                "\u5462",
                "\u5E2D",
                "\u542B",
                "\u4F01",
                "\u671B",
                "\u5BC6",
                "\u6279",
                "\u8425",
                "\u9879",
                "\u9632",
                "\u4E3E",
                "\u7403",
                "\u82F1",
                "\u6C27",
                "\u52BF",
                "\u544A",
                "\u674E",
                "\u53F0",
                "\u843D",
                "\u6728",
                "\u5E2E",
                "\u8F6E",
                "\u7834",
                "\u4E9A",
                "\u5E08",
                "\u56F4",
                "\u6CE8",
                "\u8FDC",
                "\u5B57",
                "\u6750",
                "\u6392",
                "\u4F9B",
                "\u6CB3",
                "\u6001",
                "\u5C01",
                "\u53E6",
                "\u65BD",
                "\u51CF",
                "\u6811",
                "\u6EB6",
                "\u600E",
                "\u6B62",
                "\u6848",
                "\u8A00",
                "\u58EB",
                "\u5747",
                "\u6B66",
                "\u56FA",
                "\u53F6",
                "\u9C7C",
                "\u6CE2",
                "\u89C6",
                "\u4EC5",
                "\u8D39",
                "\u7D27",
                "\u7231",
                "\u5DE6",
                "\u7AE0",
                "\u65E9",
                "\u671D",
                "\u5BB3",
                "\u7EED",
                "\u8F7B",
                "\u670D",
                "\u8BD5",
                "\u98DF",
                "\u5145",
                "\u5175",
                "\u6E90",
                "\u5224",
                "\u62A4",
                "\u53F8",
                "\u8DB3",
                "\u67D0",
                "\u7EC3",
                "\u5DEE",
                "\u81F4",
                "\u677F",
                "\u7530",
                "\u964D",
                "\u9ED1",
                "\u72AF",
                "\u8D1F",
                "\u51FB",
                "\u8303",
                "\u7EE7",
                "\u5174",
                "\u4F3C",
                "\u4F59",
                "\u575A",
                "\u66F2",
                "\u8F93",
                "\u4FEE",
                "\u6545",
                "\u57CE",
                "\u592B",
                "\u591F",
                "\u9001",
                "\u7B14",
                "\u8239",
                "\u5360",
                "\u53F3",
                "\u8D22",
                "\u5403",
                "\u5BCC",
                "\u6625",
                "\u804C",
                "\u89C9",
                "\u6C49",
                "\u753B",
                "\u529F",
                "\u5DF4",
                "\u8DDF",
                "\u867D",
                "\u6742",
                "\u98DE",
                "\u68C0",
                "\u5438",
                "\u52A9",
                "\u5347",
                "\u9633",
                "\u4E92",
                "\u521D",
                "\u521B",
                "\u6297",
                "\u8003",
                "\u6295",
                "\u574F",
                "\u7B56",
                "\u53E4",
                "\u5F84",
                "\u6362",
                "\u672A",
                "\u8DD1",
                "\u7559",
                "\u94A2",
                "\u66FE",
                "\u7AEF",
                "\u8D23",
                "\u7AD9",
                "\u7B80",
                "\u8FF0",
                "\u94B1",
                "\u526F",
                "\u5C3D",
                "\u5E1D",
                "\u5C04",
                "\u8349",
                "\u51B2",
                "\u627F",
                "\u72EC",
                "\u4EE4",
                "\u9650",
                "\u963F",
                "\u5BA3",
                "\u73AF",
                "\u53CC",
                "\u8BF7",
                "\u8D85",
                "\u5FAE",
                "\u8BA9",
                "\u63A7",
                "\u5DDE",
                "\u826F",
                "\u8F74",
                "\u627E",
                "\u5426",
                "\u7EAA",
                "\u76CA",
                "\u4F9D",
                "\u4F18",
                "\u9876",
                "\u7840",
                "\u8F7D",
                "\u5012",
                "\u623F",
                "\u7A81",
                "\u5750",
                "\u7C89",
                "\u654C",
                "\u7565",
                "\u5BA2",
                "\u8881",
                "\u51B7",
                "\u80DC",
                "\u7EDD",
                "\u6790",
                "\u5757",
                "\u5242",
                "\u6D4B",
                "\u4E1D",
                "\u534F",
                "\u8BC9",
                "\u5FF5",
                "\u9648",
                "\u4ECD",
                "\u7F57",
                "\u76D0",
                "\u53CB",
                "\u6D0B",
                "\u9519",
                "\u82E6",
                "\u591C",
                "\u5211",
                "\u79FB",
                "\u9891",
                "\u9010",
                "\u9760",
                "\u6DF7",
                "\u6BCD",
                "\u77ED",
                "\u76AE",
                "\u7EC8",
                "\u805A",
                "\u6C7D",
                "\u6751",
                "\u4E91",
                "\u54EA",
                "\u65E2",
                "\u8DDD",
                "\u536B",
                "\u505C",
                "\u70C8",
                "\u592E",
                "\u5BDF",
                "\u70E7",
                "\u8FC5",
                "\u5883",
                "\u82E5",
                "\u5370",
                "\u6D32",
                "\u523B",
                "\u62EC",
                "\u6FC0",
                "\u5B54",
                "\u641E",
                "\u751A",
                "\u5BA4",
                "\u5F85",
                "\u6838",
                "\u6821",
                "\u6563",
                "\u4FB5",
                "\u5427",
                "\u7532",
                "\u6E38",
                "\u4E45",
                "\u83DC",
                "\u5473",
                "\u65E7",
                "\u6A21",
                "\u6E56",
                "\u8D27",
                "\u635F",
                "\u9884",
                "\u963B",
                "\u6BEB",
                "\u666E",
                "\u7A33",
                "\u4E59",
                "\u5988",
                "\u690D",
                "\u606F",
                "\u6269",
                "\u94F6",
                "\u8BED",
                "\u6325",
                "\u9152",
                "\u5B88",
                "\u62FF",
                "\u5E8F",
                "\u7EB8",
                "\u533B",
                "\u7F3A",
                "\u96E8",
                "\u5417",
                "\u9488",
                "\u5218",
                "\u554A",
                "\u6025",
                "\u5531",
                "\u8BEF",
                "\u8BAD",
                "\u613F",
                "\u5BA1",
                "\u9644",
                "\u83B7",
                "\u8336",
                "\u9C9C",
                "\u7CAE",
                "\u65A4",
                "\u5B69",
                "\u8131",
                "\u786B",
                "\u80A5",
                "\u5584",
                "\u9F99",
                "\u6F14",
                "\u7236",
                "\u6E10",
                "\u8840",
                "\u6B22",
                "\u68B0",
                "\u638C",
                "\u6B4C",
                "\u6C99",
                "\u521A",
                "\u653B",
                "\u8C13",
                "\u76FE",
                "\u8BA8",
                "\u665A",
                "\u7C92",
                "\u4E71",
                "\u71C3",
                "\u77DB",
                "\u4E4E",
                "\u6740",
                "\u836F",
                "\u5B81",
                "\u9C81",
                "\u8D35",
                "\u949F",
                "\u7164",
                "\u8BFB",
                "\u73ED",
                "\u4F2F",
                "\u9999",
                "\u4ECB",
                "\u8FEB",
                "\u53E5",
                "\u4E30",
                "\u57F9",
                "\u63E1",
                "\u5170",
                "\u62C5",
                "\u5F26",
                "\u86CB",
                "\u6C89",
                "\u5047",
                "\u7A7F",
                "\u6267",
                "\u7B54",
                "\u4E50",
                "\u8C01",
                "\u987A",
                "\u70DF",
                "\u7F29",
                "\u5F81",
                "\u8138",
                "\u559C",
                "\u677E",
                "\u811A",
                "\u56F0",
                "\u5F02",
                "\u514D",
                "\u80CC",
                "\u661F",
                "\u798F",
                "\u4E70",
                "\u67D3",
                "\u4E95",
                "\u6982",
                "\u6162",
                "\u6015",
                "\u78C1",
                "\u500D",
                "\u7956",
                "\u7687",
                "\u4FC3",
                "\u9759",
                "\u8865",
                "\u8BC4",
                "\u7FFB",
                "\u8089",
                "\u8DF5",
                "\u5C3C",
                "\u8863",
                "\u5BBD",
                "\u626C",
                "\u68C9",
                "\u5E0C",
                "\u4F24",
                "\u64CD",
                "\u5782",
                "\u79CB",
                "\u5B9C",
                "\u6C22",
                "\u5957",
                "\u7763",
                "\u632F",
                "\u67B6",
                "\u4EAE",
                "\u672B",
                "\u5BAA",
                "\u5E86",
                "\u7F16",
                "\u725B",
                "\u89E6",
                "\u6620",
                "\u96F7",
                "\u9500",
                "\u8BD7",
                "\u5EA7",
                "\u5C45",
                "\u6293",
                "\u88C2",
                "\u80DE",
                "\u547C",
                "\u5A18",
                "\u666F",
                "\u5A01",
                "\u7EFF",
                "\u6676",
                "\u539A",
                "\u76DF",
                "\u8861",
                "\u9E21",
                "\u5B59",
                "\u5EF6",
                "\u5371",
                "\u80F6",
                "\u5C4B",
                "\u4E61",
                "\u4E34",
                "\u9646",
                "\u987E",
                "\u6389",
                "\u5440",
                "\u706F",
                "\u5C81",
                "\u63AA",
                "\u675F",
                "\u8010",
                "\u5267",
                "\u7389",
                "\u8D75",
                "\u8DF3",
                "\u54E5",
                "\u5B63",
                "\u8BFE",
                "\u51EF",
                "\u80E1",
                "\u989D",
                "\u6B3E",
                "\u7ECD",
                "\u5377",
                "\u9F50",
                "\u4F1F",
                "\u84B8",
                "\u6B96",
                "\u6C38",
                "\u5B97",
                "\u82D7",
                "\u5DDD",
                "\u7089",
                "\u5CA9",
                "\u5F31",
                "\u96F6",
                "\u6768",
                "\u594F",
                "\u6CBF",
                "\u9732",
                "\u6746",
                "\u63A2",
                "\u6ED1",
                "\u9547",
                "\u996D",
                "\u6D53",
                "\u822A",
                "\u6000",
                "\u8D76",
                "\u5E93",
                "\u593A",
                "\u4F0A",
                "\u7075",
                "\u7A0E",
                "\u9014",
                "\u706D",
                "\u8D5B",
                "\u5F52",
                "\u53EC",
                "\u9F13",
                "\u64AD",
                "\u76D8",
                "\u88C1",
                "\u9669",
                "\u5EB7",
                "\u552F",
                "\u5F55",
                "\u83CC",
                "\u7EAF",
                "\u501F",
                "\u7CD6",
                "\u76D6",
                "\u6A2A",
                "\u7B26",
                "\u79C1",
                "\u52AA",
                "\u5802",
                "\u57DF",
                "\u67AA",
                "\u6DA6",
                "\u5E45",
                "\u54C8",
                "\u7ADF",
                "\u719F",
                "\u866B",
                "\u6CFD",
                "\u8111",
                "\u58E4",
                "\u78B3",
                "\u6B27",
                "\u904D",
                "\u4FA7",
                "\u5BE8",
                "\u6562",
                "\u5F7B",
                "\u8651",
                "\u659C",
                "\u8584",
                "\u5EAD",
                "\u7EB3",
                "\u5F39",
                "\u9972",
                "\u4F38",
                "\u6298",
                "\u9EA6",
                "\u6E7F",
                "\u6697",
                "\u8377",
                "\u74E6",
                "\u585E",
                "\u5E8A",
                "\u7B51",
                "\u6076",
                "\u6237",
                "\u8BBF",
                "\u5854",
                "\u5947",
                "\u900F",
                "\u6881",
                "\u5200",
                "\u65CB",
                "\u8FF9",
                "\u5361",
                "\u6C2F",
                "\u9047",
                "\u4EFD",
                "\u6BD2",
                "\u6CE5",
                "\u9000",
                "\u6D17",
                "\u6446",
                "\u7070",
                "\u5F69",
                "\u5356",
                "\u8017",
                "\u590F",
                "\u62E9",
                "\u5FD9",
                "\u94DC",
                "\u732E",
                "\u786C",
                "\u4E88",
                "\u7E41",
                "\u5708",
                "\u96EA",
                "\u51FD",
                "\u4EA6",
                "\u62BD",
                "\u7BC7",
                "\u9635",
                "\u9634",
                "\u4E01",
                "\u5C3A",
                "\u8FFD",
                "\u5806",
                "\u96C4",
                "\u8FCE",
                "\u6CDB",
                "\u7238",
                "\u697C",
                "\u907F",
                "\u8C0B",
                "\u5428",
                "\u91CE",
                "\u732A",
                "\u65D7",
                "\u7D2F",
                "\u504F",
                "\u5178",
                "\u9986",
                "\u7D22",
                "\u79E6",
                "\u8102",
                "\u6F6E",
                "\u7237",
                "\u8C46",
                "\u5FFD",
                "\u6258",
                "\u60CA",
                "\u5851",
                "\u9057",
                "\u6108",
                "\u6731",
                "\u66FF",
                "\u7EA4",
                "\u7C97",
                "\u503E",
                "\u5C1A",
                "\u75DB",
                "\u695A",
                "\u8C22",
                "\u594B",
                "\u8D2D",
                "\u78E8",
                "\u541B",
                "\u6C60",
                "\u65C1",
                "\u788E",
                "\u9AA8",
                "\u76D1",
                "\u6355",
                "\u5F1F",
                "\u66B4",
                "\u5272",
                "\u8D2F",
                "\u6B8A",
                "\u91CA",
                "\u8BCD",
                "\u4EA1",
                "\u58C1",
                "\u987F",
                "\u5B9D",
                "\u5348",
                "\u5C18",
                "\u95FB",
                "\u63ED",
                "\u70AE",
                "\u6B8B",
                "\u51AC",
                "\u6865",
                "\u5987",
                "\u8B66",
                "\u7EFC",
                "\u62DB",
                "\u5434",
                "\u4ED8",
                "\u6D6E",
                "\u906D",
                "\u5F90",
                "\u60A8",
                "\u6447",
                "\u8C37",
                "\u8D5E",
                "\u7BB1",
                "\u9694",
                "\u8BA2",
                "\u7537",
                "\u5439",
                "\u56ED",
                "\u7EB7",
                "\u5510",
                "\u8D25",
                "\u5B8B",
                "\u73BB",
                "\u5DE8",
                "\u8015",
                "\u5766",
                "\u8363",
                "\u95ED",
                "\u6E7E",
                "\u952E",
                "\u51E1",
                "\u9A7B",
                "\u9505",
                "\u6551",
                "\u6069",
                "\u5265",
                "\u51DD",
                "\u78B1",
                "\u9F7F",
                "\u622A",
                "\u70BC",
                "\u9EBB",
                "\u7EBA",
                "\u7981",
                "\u5E9F",
                "\u76DB",
                "\u7248",
                "\u7F13",
                "\u51C0",
                "\u775B",
                "\u660C",
                "\u5A5A",
                "\u6D89",
                "\u7B52",
                "\u5634",
                "\u63D2",
                "\u5CB8",
                "\u6717",
                "\u5E84",
                "\u8857",
                "\u85CF",
                "\u59D1",
                "\u8D38",
                "\u8150",
                "\u5974",
                "\u5566",
                "\u60EF",
                "\u4E58",
                "\u4F19",
                "\u6062",
                "\u5300",
                "\u7EB1",
                "\u624E",
                "\u8FA9",
                "\u8033",
                "\u5F6A",
                "\u81E3",
                "\u4EBF",
                "\u7483",
                "\u62B5",
                "\u8109",
                "\u79C0",
                "\u8428",
                "\u4FC4",
                "\u7F51",
                "\u821E",
                "\u5E97",
                "\u55B7",
                "\u7EB5",
                "\u5BF8",
                "\u6C57",
                "\u6302",
                "\u6D2A",
                "\u8D3A",
                "\u95EA",
                "\u67EC",
                "\u7206",
                "\u70EF",
                "\u6D25",
                "\u7A3B",
                "\u5899",
                "\u8F6F",
                "\u52C7",
                "\u50CF",
                "\u6EDA",
                "\u5398",
                "\u8499",
                "\u82B3",
                "\u80AF",
                "\u5761",
                "\u67F1",
                "\u8361",
                "\u817F",
                "\u4EEA",
                "\u65C5",
                "\u5C3E",
                "\u8F67",
                "\u51B0",
                "\u8D21",
                "\u767B",
                "\u9ECE",
                "\u524A",
                "\u94BB",
                "\u52D2",
                "\u9003",
                "\u969C",
                "\u6C28",
                "\u90ED",
                "\u5CF0",
                "\u5E01",
                "\u6E2F",
                "\u4F0F",
                "\u8F68",
                "\u4EA9",
                "\u6BD5",
                "\u64E6",
                "\u83AB",
                "\u523A",
                "\u6D6A",
                "\u79D8",
                "\u63F4",
                "\u682A",
                "\u5065",
                "\u552E",
                "\u80A1",
                "\u5C9B",
                "\u7518",
                "\u6CE1",
                "\u7761",
                "\u7AE5",
                "\u94F8",
                "\u6C64",
                "\u9600",
                "\u4F11",
                "\u6C47",
                "\u820D",
                "\u7267",
                "\u7ED5",
                "\u70B8",
                "\u54F2",
                "\u78F7",
                "\u7EE9",
                "\u670B",
                "\u6DE1",
                "\u5C16",
                "\u542F",
                "\u9677",
                "\u67F4",
                "\u5448",
                "\u5F92",
                "\u989C",
                "\u6CEA",
                "\u7A0D",
                "\u5FD8",
                "\u6CF5",
                "\u84DD",
                "\u62D6",
                "\u6D1E",
                "\u6388",
                "\u955C",
                "\u8F9B",
                "\u58EE",
                "\u950B",
                "\u8D2B",
                "\u865A",
                "\u5F2F",
                "\u6469",
                "\u6CF0",
                "\u5E7C",
                "\u5EF7",
                "\u5C0A",
                "\u7A97",
                "\u7EB2",
                "\u5F04",
                "\u96B6",
                "\u7591",
                "\u6C0F",
                "\u5BAB",
                "\u59D0",
                "\u9707",
                "\u745E",
                "\u602A",
                "\u5C24",
                "\u7434",
                "\u5FAA",
                "\u63CF",
                "\u819C",
                "\u8FDD",
                "\u5939",
                "\u8170",
                "\u7F18",
                "\u73E0",
                "\u7A77",
                "\u68EE",
                "\u679D",
                "\u7AF9",
                "\u6C9F",
                "\u50AC",
                "\u7EF3",
                "\u5FC6",
                "\u90A6",
                "\u5269",
                "\u5E78",
                "\u6D46",
                "\u680F",
                "\u62E5",
                "\u7259",
                "\u8D2E",
                "\u793C",
                "\u6EE4",
                "\u94A0",
                "\u7EB9",
                "\u7F62",
                "\u62CD",
                "\u54B1",
                "\u558A",
                "\u8896",
                "\u57C3",
                "\u52E4",
                "\u7F5A",
                "\u7126",
                "\u6F5C",
                "\u4F0D",
                "\u58A8",
                "\u6B32",
                "\u7F1D",
                "\u59D3",
                "\u520A",
                "\u9971",
                "\u4EFF",
                "\u5956",
                "\u94DD",
                "\u9B3C",
                "\u4E3D",
                "\u8DE8",
                "\u9ED8",
                "\u6316",
                "\u94FE",
                "\u626B",
                "\u559D",
                "\u888B",
                "\u70AD",
                "\u6C61",
                "\u5E55",
                "\u8BF8",
                "\u5F27",
                "\u52B1",
                "\u6885",
                "\u5976",
                "\u6D01",
                "\u707E",
                "\u821F",
                "\u9274",
                "\u82EF",
                "\u8BBC",
                "\u62B1",
                "\u6BC1",
                "\u61C2",
                "\u5BD2",
                "\u667A",
                "\u57D4",
                "\u5BC4",
                "\u5C4A",
                "\u8DC3",
                "\u6E21",
                "\u6311",
                "\u4E39",
                "\u8270",
                "\u8D1D",
                "\u78B0",
                "\u62D4",
                "\u7239",
                "\u6234",
                "\u7801",
                "\u68A6",
                "\u82BD",
                "\u7194",
                "\u8D64",
                "\u6E14",
                "\u54ED",
                "\u656C",
                "\u9897",
                "\u5954",
                "\u94C5",
                "\u4EF2",
                "\u864E",
                "\u7A00",
                "\u59B9",
                "\u4E4F",
                "\u73CD",
                "\u7533",
                "\u684C",
                "\u9075",
                "\u5141",
                "\u9686",
                "\u87BA",
                "\u4ED3",
                "\u9B4F",
                "\u9510",
                "\u6653",
                "\u6C2E",
                "\u517C",
                "\u9690",
                "\u788D",
                "\u8D6B",
                "\u62E8",
                "\u5FE0",
                "\u8083",
                "\u7F38",
                "\u7275",
                "\u62A2",
                "\u535A",
                "\u5DE7",
                "\u58F3",
                "\u5144",
                "\u675C",
                "\u8BAF",
                "\u8BDA",
                "\u78A7",
                "\u7965",
                "\u67EF",
                "\u9875",
                "\u5DE1",
                "\u77E9",
                "\u60B2",
                "\u704C",
                "\u9F84",
                "\u4F26",
                "\u7968",
                "\u5BFB",
                "\u6842",
                "\u94FA",
                "\u5723",
                "\u6050",
                "\u6070",
                "\u90D1",
                "\u8DA3",
                "\u62AC",
                "\u8352",
                "\u817E",
                "\u8D34",
                "\u67D4",
                "\u6EF4",
                "\u731B",
                "\u9614",
                "\u8F86",
                "\u59BB",
                "\u586B",
                "\u64A4",
                "\u50A8",
                "\u7B7E",
                "\u95F9",
                "\u6270",
                "\u7D2B",
                "\u7802",
                "\u9012",
                "\u620F",
                "\u540A",
                "\u9676",
                "\u4F10",
                "\u5582",
                "\u7597",
                "\u74F6",
                "\u5A46",
                "\u629A",
                "\u81C2",
                "\u6478",
                "\u5FCD",
                "\u867E",
                "\u8721",
                "\u90BB",
                "\u80F8",
                "\u5DE9",
                "\u6324",
                "\u5076",
                "\u5F03",
                "\u69FD",
                "\u52B2",
                "\u4E73",
                "\u9093",
                "\u5409",
                "\u4EC1",
                "\u70C2",
                "\u7816",
                "\u79DF",
                "\u4E4C",
                "\u8230",
                "\u4F34",
                "\u74DC",
                "\u6D45",
                "\u4E19",
                "\u6682",
                "\u71E5",
                "\u6A61",
                "\u67F3",
                "\u8FF7",
                "\u6696",
                "\u724C",
                "\u79E7",
                "\u80C6",
                "\u8BE6",
                "\u7C27",
                "\u8E0F",
                "\u74F7",
                "\u8C31",
                "\u5446",
                "\u5BBE",
                "\u7CCA",
                "\u6D1B",
                "\u8F89",
                "\u6124",
                "\u7ADE",
                "\u9699",
                "\u6012",
                "\u7C98",
                "\u4E43",
                "\u7EEA",
                "\u80A9",
                "\u7C4D",
                "\u654F",
                "\u6D82",
                "\u7199",
                "\u7686",
                "\u4FA6",
                "\u60AC",
                "\u6398",
                "\u4EAB",
                "\u7EA0",
                "\u9192",
                "\u72C2",
                "\u9501",
                "\u6DC0",
                "\u6068",
                "\u7272",
                "\u9738",
                "\u722C",
                "\u8D4F",
                "\u9006",
                "\u73A9",
                "\u9675",
                "\u795D",
                "\u79D2",
                "\u6D59",
                "\u8C8C",
                "\u5F79",
                "\u5F7C",
                "\u6089",
                "\u9E2D",
                "\u8D8B",
                "\u51E4",
                "\u6668",
                "\u755C",
                "\u8F88",
                "\u79E9",
                "\u5375",
                "\u7F72",
                "\u68AF",
                "\u708E",
                "\u6EE9",
                "\u68CB",
                "\u9A71",
                "\u7B5B",
                "\u5CE1",
                "\u5192",
                "\u5565",
                "\u5BFF",
                "\u8BD1",
                "\u6D78",
                "\u6CC9",
                "\u5E3D",
                "\u8FDF",
                "\u7845",
                "\u7586",
                "\u8D37",
                "\u6F0F",
                "\u7A3F",
                "\u51A0",
                "\u5AE9",
                "\u80C1",
                "\u82AF",
                "\u7262",
                "\u53DB",
                "\u8680",
                "\u5965",
                "\u9E23",
                "\u5CAD",
                "\u7F8A",
                "\u51ED",
                "\u4E32",
                "\u5858",
                "\u7ED8",
                "\u9175",
                "\u878D",
                "\u76C6",
                "\u9521",
                "\u5E99",
                "\u7B79",
                "\u51BB",
                "\u8F85",
                "\u6444",
                "\u88AD",
                "\u7B4B",
                "\u62D2",
                "\u50DA",
                "\u65F1",
                "\u94BE",
                "\u9E1F",
                "\u6F06",
                "\u6C88",
                "\u7709",
                "\u758F",
                "\u6DFB",
                "\u68D2",
                "\u7A57",
                "\u785D",
                "\u97E9",
                "\u903C",
                "\u626D",
                "\u4FA8",
                "\u51C9",
                "\u633A",
                "\u7897",
                "\u683D",
                "\u7092",
                "\u676F",
                "\u60A3",
                "\u998F",
                "\u529D",
                "\u8C6A",
                "\u8FBD",
                "\u52C3",
                "\u9E3F",
                "\u65E6",
                "\u540F",
                "\u62DC",
                "\u72D7",
                "\u57CB",
                "\u8F8A",
                "\u63A9",
                "\u996E",
                "\u642C",
                "\u9A82",
                "\u8F9E",
                "\u52FE",
                "\u6263",
                "\u4F30",
                "\u848B",
                "\u7ED2",
                "\u96FE",
                "\u4E08",
                "\u6735",
                "\u59C6",
                "\u62DF",
                "\u5B87",
                "\u8F91",
                "\u9655",
                "\u96D5",
                "\u507F",
                "\u84C4",
                "\u5D07",
                "\u526A",
                "\u5021",
                "\u5385",
                "\u54AC",
                "\u9A76",
                "\u85AF",
                "\u5237",
                "\u65A5",
                "\u756A",
                "\u8D4B",
                "\u5949",
                "\u4F5B",
                "\u6D47",
                "\u6F2B",
                "\u66FC",
                "\u6247",
                "\u9499",
                "\u6843",
                "\u6276",
                "\u4ED4",
                "\u8FD4",
                "\u4FD7",
                "\u4E8F",
                "\u8154",
                "\u978B",
                "\u68F1",
                "\u8986",
                "\u6846",
                "\u6084",
                "\u53D4",
                "\u649E",
                "\u9A97",
                "\u52D8",
                "\u65FA",
                "\u6CB8",
                "\u5B64",
                "\u5410",
                "\u5B5F",
                "\u6E20",
                "\u5C48",
                "\u75BE",
                "\u5999",
                "\u60DC",
                "\u4EF0",
                "\u72E0",
                "\u80C0",
                "\u8C10",
                "\u629B",
                "\u9709",
                "\u6851",
                "\u5C97",
                "\u561B",
                "\u8870",
                "\u76D7",
                "\u6E17",
                "\u810F",
                "\u8D56",
                "\u6D8C",
                "\u751C",
                "\u66F9",
                "\u9605",
                "\u808C",
                "\u54E9",
                "\u5389",
                "\u70C3",
                "\u7EAC",
                "\u6BC5",
                "\u6628",
                "\u4F2A",
                "\u75C7",
                "\u716E",
                "\u53F9",
                "\u9489",
                "\u642D",
                "\u830E",
                "\u7B3C",
                "\u9177",
                "\u5077",
                "\u5F13",
                "\u9525",
                "\u6052",
                "\u6770",
                "\u5751",
                "\u9F3B",
                "\u7FFC",
                "\u7EB6",
                "\u53D9",
                "\u72F1",
                "\u902E",
                "\u7F50",
                "\u7EDC",
                "\u68DA",
                "\u6291",
                "\u81A8",
                "\u852C",
                "\u5BFA",
                "\u9AA4",
                "\u7A46",
                "\u51B6",
                "\u67AF",
                "\u518C",
                "\u5C38",
                "\u51F8",
                "\u7EC5",
                "\u576F",
                "\u727A",
                "\u7130",
                "\u8F70",
                "\u6B23",
                "\u664B",
                "\u7626",
                "\u5FA1",
                "\u952D",
                "\u9526",
                "\u4E27",
                "\u65EC",
                "\u953B",
                "\u5784",
                "\u641C",
                "\u6251",
                "\u9080",
                "\u4EAD",
                "\u916F",
                "\u8FC8",
                "\u8212",
                "\u8106",
                "\u9176",
                "\u95F2",
                "\u5FE7",
                "\u915A",
                "\u987D",
                "\u7FBD",
                "\u6DA8",
                "\u5378",
                "\u4ED7",
                "\u966A",
                "\u8F9F",
                "\u60E9",
                "\u676D",
                "\u59DA",
                "\u809A",
                "\u6349",
                "\u98D8",
                "\u6F02",
                "\u6606",
                "\u6B3A",
                "\u543E",
                "\u90CE",
                "\u70F7",
                "\u6C41",
                "\u5475",
                "\u9970",
                "\u8427",
                "\u96C5",
                "\u90AE",
                "\u8FC1",
                "\u71D5",
                "\u6492",
                "\u59FB",
                "\u8D74",
                "\u5BB4",
                "\u70E6",
                "\u503A",
                "\u5E10",
                "\u6591",
                "\u94C3",
                "\u65E8",
                "\u9187",
                "\u8463",
                "\u997C",
                "\u96CF",
                "\u59FF",
                "\u62CC",
                "\u5085",
                "\u8179",
                "\u59A5",
                "\u63C9",
                "\u8D24",
                "\u62C6",
                "\u6B6A",
                "\u8461",
                "\u80FA",
                "\u4E22",
                "\u6D69",
                "\u5FBD",
                "\u6602",
                "\u57AB",
                "\u6321",
                "\u89C8",
                "\u8D2A",
                "\u6170",
                "\u7F34",
                "\u6C6A",
                "\u614C",
                "\u51AF",
                "\u8BFA",
                "\u59DC",
                "\u8C0A",
                "\u51F6",
                "\u52A3",
                "\u8BEC",
                "\u8000",
                "\u660F",
                "\u8EBA",
                "\u76C8",
                "\u9A91",
                "\u4E54",
                "\u6EAA",
                "\u4E1B",
                "\u5362",
                "\u62B9",
                "\u95F7",
                "\u54A8",
                "\u522E",
                "\u9A7E",
                "\u7F06",
                "\u609F",
                "\u6458",
                "\u94D2",
                "\u63B7",
                "\u9887",
                "\u5E7B",
                "\u67C4",
                "\u60E0",
                "\u60E8",
                "\u4F73",
                "\u4EC7",
                "\u814A",
                "\u7A9D",
                "\u6DA4",
                "\u5251",
                "\u77A7",
                "\u5821",
                "\u6CFC",
                "\u8471",
                "\u7F69",
                "\u970D",
                "\u635E",
                "\u80CE",
                "\u82CD",
                "\u6EE8",
                "\u4FE9",
                "\u6345",
                "\u6E58",
                "\u780D",
                "\u971E",
                "\u90B5",
                "\u8404",
                "\u75AF",
                "\u6DEE",
                "\u9042",
                "\u718A",
                "\u7CAA",
                "\u70D8",
                "\u5BBF",
                "\u6863",
                "\u6208",
                "\u9A73",
                "\u5AC2",
                "\u88D5",
                "\u5F99",
                "\u7BAD",
                "\u6350",
                "\u80A0",
                "\u6491",
                "\u6652",
                "\u8FA8",
                "\u6BBF",
                "\u83B2",
                "\u644A",
                "\u6405",
                "\u9171",
                "\u5C4F",
                "\u75AB",
                "\u54C0",
                "\u8521",
                "\u5835",
                "\u6CAB",
                "\u76B1",
                "\u7545",
                "\u53E0",
                "\u9601",
                "\u83B1",
                "\u6572",
                "\u8F96",
                "\u94A9",
                "\u75D5",
                "\u575D",
                "\u5DF7",
                "\u997F",
                "\u7978",
                "\u4E18",
                "\u7384",
                "\u6E9C",
                "\u66F0",
                "\u903B",
                "\u5F6D",
                "\u5C1D",
                "\u537F",
                "\u59A8",
                "\u8247",
                "\u541E",
                "\u97E6",
                "\u6028",
                "\u77EE",
                "\u6B47"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/chinese_traditional.json
          var require_chinese_traditional = __commonJS({
            "node_modules/bip39/src/wordlists/chinese_traditional.json"(exports, module) {
              module.exports = [
                "\u7684",
                "\u4E00",
                "\u662F",
                "\u5728",
                "\u4E0D",
                "\u4E86",
                "\u6709",
                "\u548C",
                "\u4EBA",
                "\u9019",
                "\u4E2D",
                "\u5927",
                "\u70BA",
                "\u4E0A",
                "\u500B",
                "\u570B",
                "\u6211",
                "\u4EE5",
                "\u8981",
                "\u4ED6",
                "\u6642",
                "\u4F86",
                "\u7528",
                "\u5011",
                "\u751F",
                "\u5230",
                "\u4F5C",
                "\u5730",
                "\u65BC",
                "\u51FA",
                "\u5C31",
                "\u5206",
                "\u5C0D",
                "\u6210",
                "\u6703",
                "\u53EF",
                "\u4E3B",
                "\u767C",
                "\u5E74",
                "\u52D5",
                "\u540C",
                "\u5DE5",
                "\u4E5F",
                "\u80FD",
                "\u4E0B",
                "\u904E",
                "\u5B50",
                "\u8AAA",
                "\u7522",
                "\u7A2E",
                "\u9762",
                "\u800C",
                "\u65B9",
                "\u5F8C",
                "\u591A",
                "\u5B9A",
                "\u884C",
                "\u5B78",
                "\u6CD5",
                "\u6240",
                "\u6C11",
                "\u5F97",
                "\u7D93",
                "\u5341",
                "\u4E09",
                "\u4E4B",
                "\u9032",
                "\u8457",
                "\u7B49",
                "\u90E8",
                "\u5EA6",
                "\u5BB6",
                "\u96FB",
                "\u529B",
                "\u88E1",
                "\u5982",
                "\u6C34",
                "\u5316",
                "\u9AD8",
                "\u81EA",
                "\u4E8C",
                "\u7406",
                "\u8D77",
                "\u5C0F",
                "\u7269",
                "\u73FE",
                "\u5BE6",
                "\u52A0",
                "\u91CF",
                "\u90FD",
                "\u5169",
                "\u9AD4",
                "\u5236",
                "\u6A5F",
                "\u7576",
                "\u4F7F",
                "\u9EDE",
                "\u5F9E",
                "\u696D",
                "\u672C",
                "\u53BB",
                "\u628A",
                "\u6027",
                "\u597D",
                "\u61C9",
                "\u958B",
                "\u5B83",
                "\u5408",
                "\u9084",
                "\u56E0",
                "\u7531",
                "\u5176",
                "\u4E9B",
                "\u7136",
                "\u524D",
                "\u5916",
                "\u5929",
                "\u653F",
                "\u56DB",
                "\u65E5",
                "\u90A3",
                "\u793E",
                "\u7FA9",
                "\u4E8B",
                "\u5E73",
                "\u5F62",
                "\u76F8",
                "\u5168",
                "\u8868",
                "\u9593",
                "\u6A23",
                "\u8207",
                "\u95DC",
                "\u5404",
                "\u91CD",
                "\u65B0",
                "\u7DDA",
                "\u5167",
                "\u6578",
                "\u6B63",
                "\u5FC3",
                "\u53CD",
                "\u4F60",
                "\u660E",
                "\u770B",
                "\u539F",
                "\u53C8",
                "\u9EBC",
                "\u5229",
                "\u6BD4",
                "\u6216",
                "\u4F46",
                "\u8CEA",
                "\u6C23",
                "\u7B2C",
                "\u5411",
                "\u9053",
                "\u547D",
                "\u6B64",
                "\u8B8A",
                "\u689D",
                "\u53EA",
                "\u6C92",
                "\u7D50",
                "\u89E3",
                "\u554F",
                "\u610F",
                "\u5EFA",
                "\u6708",
                "\u516C",
                "\u7121",
                "\u7CFB",
                "\u8ECD",
                "\u5F88",
                "\u60C5",
                "\u8005",
                "\u6700",
                "\u7ACB",
                "\u4EE3",
                "\u60F3",
                "\u5DF2",
                "\u901A",
                "\u4E26",
                "\u63D0",
                "\u76F4",
                "\u984C",
                "\u9EE8",
                "\u7A0B",
                "\u5C55",
                "\u4E94",
                "\u679C",
                "\u6599",
                "\u8C61",
                "\u54E1",
                "\u9769",
                "\u4F4D",
                "\u5165",
                "\u5E38",
                "\u6587",
                "\u7E3D",
                "\u6B21",
                "\u54C1",
                "\u5F0F",
                "\u6D3B",
                "\u8A2D",
                "\u53CA",
                "\u7BA1",
                "\u7279",
                "\u4EF6",
                "\u9577",
                "\u6C42",
                "\u8001",
                "\u982D",
                "\u57FA",
                "\u8CC7",
                "\u908A",
                "\u6D41",
                "\u8DEF",
                "\u7D1A",
                "\u5C11",
                "\u5716",
                "\u5C71",
                "\u7D71",
                "\u63A5",
                "\u77E5",
                "\u8F03",
                "\u5C07",
                "\u7D44",
                "\u898B",
                "\u8A08",
                "\u5225",
                "\u5979",
                "\u624B",
                "\u89D2",
                "\u671F",
                "\u6839",
                "\u8AD6",
                "\u904B",
                "\u8FB2",
                "\u6307",
                "\u5E7E",
                "\u4E5D",
                "\u5340",
                "\u5F37",
                "\u653E",
                "\u6C7A",
                "\u897F",
                "\u88AB",
                "\u5E79",
                "\u505A",
                "\u5FC5",
                "\u6230",
                "\u5148",
                "\u56DE",
                "\u5247",
                "\u4EFB",
                "\u53D6",
                "\u64DA",
                "\u8655",
                "\u968A",
                "\u5357",
                "\u7D66",
                "\u8272",
                "\u5149",
                "\u9580",
                "\u5373",
                "\u4FDD",
                "\u6CBB",
                "\u5317",
                "\u9020",
                "\u767E",
                "\u898F",
                "\u71B1",
                "\u9818",
                "\u4E03",
                "\u6D77",
                "\u53E3",
                "\u6771",
                "\u5C0E",
                "\u5668",
                "\u58D3",
                "\u5FD7",
                "\u4E16",
                "\u91D1",
                "\u589E",
                "\u722D",
                "\u6FDF",
                "\u968E",
                "\u6CB9",
                "\u601D",
                "\u8853",
                "\u6975",
                "\u4EA4",
                "\u53D7",
                "\u806F",
                "\u4EC0",
                "\u8A8D",
                "\u516D",
                "\u5171",
                "\u6B0A",
                "\u6536",
                "\u8B49",
                "\u6539",
                "\u6E05",
                "\u7F8E",
                "\u518D",
                "\u63A1",
                "\u8F49",
                "\u66F4",
                "\u55AE",
                "\u98A8",
                "\u5207",
                "\u6253",
                "\u767D",
                "\u6559",
                "\u901F",
                "\u82B1",
                "\u5E36",
                "\u5B89",
                "\u5834",
                "\u8EAB",
                "\u8ECA",
                "\u4F8B",
                "\u771F",
                "\u52D9",
                "\u5177",
                "\u842C",
                "\u6BCF",
                "\u76EE",
                "\u81F3",
                "\u9054",
                "\u8D70",
                "\u7A4D",
                "\u793A",
                "\u8B70",
                "\u8072",
                "\u5831",
                "\u9B25",
                "\u5B8C",
                "\u985E",
                "\u516B",
                "\u96E2",
                "\u83EF",
                "\u540D",
                "\u78BA",
                "\u624D",
                "\u79D1",
                "\u5F35",
                "\u4FE1",
                "\u99AC",
                "\u7BC0",
                "\u8A71",
                "\u7C73",
                "\u6574",
                "\u7A7A",
                "\u5143",
                "\u6CC1",
                "\u4ECA",
                "\u96C6",
                "\u6EAB",
                "\u50B3",
                "\u571F",
                "\u8A31",
                "\u6B65",
                "\u7FA4",
                "\u5EE3",
                "\u77F3",
                "\u8A18",
                "\u9700",
                "\u6BB5",
                "\u7814",
                "\u754C",
                "\u62C9",
                "\u6797",
                "\u5F8B",
                "\u53EB",
                "\u4E14",
                "\u7A76",
                "\u89C0",
                "\u8D8A",
                "\u7E54",
                "\u88DD",
                "\u5F71",
                "\u7B97",
                "\u4F4E",
                "\u6301",
                "\u97F3",
                "\u773E",
                "\u66F8",
                "\u5E03",
                "\u590D",
                "\u5BB9",
                "\u5152",
                "\u9808",
                "\u969B",
                "\u5546",
                "\u975E",
                "\u9A57",
                "\u9023",
                "\u65B7",
                "\u6DF1",
                "\u96E3",
                "\u8FD1",
                "\u7926",
                "\u5343",
                "\u9031",
                "\u59D4",
                "\u7D20",
                "\u6280",
                "\u5099",
                "\u534A",
                "\u8FA6",
                "\u9752",
                "\u7701",
                "\u5217",
                "\u7FD2",
                "\u97FF",
                "\u7D04",
                "\u652F",
                "\u822C",
                "\u53F2",
                "\u611F",
                "\u52DE",
                "\u4FBF",
                "\u5718",
                "\u5F80",
                "\u9178",
                "\u6B77",
                "\u5E02",
                "\u514B",
                "\u4F55",
                "\u9664",
                "\u6D88",
                "\u69CB",
                "\u5E9C",
                "\u7A31",
                "\u592A",
                "\u6E96",
                "\u7CBE",
                "\u503C",
                "\u865F",
                "\u7387",
                "\u65CF",
                "\u7DAD",
                "\u5283",
                "\u9078",
                "\u6A19",
                "\u5BEB",
                "\u5B58",
                "\u5019",
                "\u6BDB",
                "\u89AA",
                "\u5FEB",
                "\u6548",
                "\u65AF",
                "\u9662",
                "\u67E5",
                "\u6C5F",
                "\u578B",
                "\u773C",
                "\u738B",
                "\u6309",
                "\u683C",
                "\u990A",
                "\u6613",
                "\u7F6E",
                "\u6D3E",
                "\u5C64",
                "\u7247",
                "\u59CB",
                "\u537B",
                "\u5C08",
                "\u72C0",
                "\u80B2",
                "\u5EE0",
                "\u4EAC",
                "\u8B58",
                "\u9069",
                "\u5C6C",
                "\u5713",
                "\u5305",
                "\u706B",
                "\u4F4F",
                "\u8ABF",
                "\u6EFF",
                "\u7E23",
                "\u5C40",
                "\u7167",
                "\u53C3",
                "\u7D05",
                "\u7D30",
                "\u5F15",
                "\u807D",
                "\u8A72",
                "\u9435",
                "\u50F9",
                "\u56B4",
                "\u9996",
                "\u5E95",
                "\u6DB2",
                "\u5B98",
                "\u5FB7",
                "\u96A8",
                "\u75C5",
                "\u8607",
                "\u5931",
                "\u723E",
                "\u6B7B",
                "\u8B1B",
                "\u914D",
                "\u5973",
                "\u9EC3",
                "\u63A8",
                "\u986F",
                "\u8AC7",
                "\u7F6A",
                "\u795E",
                "\u85DD",
                "\u5462",
                "\u5E2D",
                "\u542B",
                "\u4F01",
                "\u671B",
                "\u5BC6",
                "\u6279",
                "\u71DF",
                "\u9805",
                "\u9632",
                "\u8209",
                "\u7403",
                "\u82F1",
                "\u6C27",
                "\u52E2",
                "\u544A",
                "\u674E",
                "\u53F0",
                "\u843D",
                "\u6728",
                "\u5E6B",
                "\u8F2A",
                "\u7834",
                "\u4E9E",
                "\u5E2B",
                "\u570D",
                "\u6CE8",
                "\u9060",
                "\u5B57",
                "\u6750",
                "\u6392",
                "\u4F9B",
                "\u6CB3",
                "\u614B",
                "\u5C01",
                "\u53E6",
                "\u65BD",
                "\u6E1B",
                "\u6A39",
                "\u6EB6",
                "\u600E",
                "\u6B62",
                "\u6848",
                "\u8A00",
                "\u58EB",
                "\u5747",
                "\u6B66",
                "\u56FA",
                "\u8449",
                "\u9B5A",
                "\u6CE2",
                "\u8996",
                "\u50C5",
                "\u8CBB",
                "\u7DCA",
                "\u611B",
                "\u5DE6",
                "\u7AE0",
                "\u65E9",
                "\u671D",
                "\u5BB3",
                "\u7E8C",
                "\u8F15",
                "\u670D",
                "\u8A66",
                "\u98DF",
                "\u5145",
                "\u5175",
                "\u6E90",
                "\u5224",
                "\u8B77",
                "\u53F8",
                "\u8DB3",
                "\u67D0",
                "\u7DF4",
                "\u5DEE",
                "\u81F4",
                "\u677F",
                "\u7530",
                "\u964D",
                "\u9ED1",
                "\u72AF",
                "\u8CA0",
                "\u64CA",
                "\u8303",
                "\u7E7C",
                "\u8208",
                "\u4F3C",
                "\u9918",
                "\u5805",
                "\u66F2",
                "\u8F38",
                "\u4FEE",
                "\u6545",
                "\u57CE",
                "\u592B",
                "\u5920",
                "\u9001",
                "\u7B46",
                "\u8239",
                "\u4F54",
                "\u53F3",
                "\u8CA1",
                "\u5403",
                "\u5BCC",
                "\u6625",
                "\u8077",
                "\u89BA",
                "\u6F22",
                "\u756B",
                "\u529F",
                "\u5DF4",
                "\u8DDF",
                "\u96D6",
                "\u96DC",
                "\u98DB",
                "\u6AA2",
                "\u5438",
                "\u52A9",
                "\u6607",
                "\u967D",
                "\u4E92",
                "\u521D",
                "\u5275",
                "\u6297",
                "\u8003",
                "\u6295",
                "\u58DE",
                "\u7B56",
                "\u53E4",
                "\u5F91",
                "\u63DB",
                "\u672A",
                "\u8DD1",
                "\u7559",
                "\u92FC",
                "\u66FE",
                "\u7AEF",
                "\u8CAC",
                "\u7AD9",
                "\u7C21",
                "\u8FF0",
                "\u9322",
                "\u526F",
                "\u76E1",
                "\u5E1D",
                "\u5C04",
                "\u8349",
                "\u885D",
                "\u627F",
                "\u7368",
                "\u4EE4",
                "\u9650",
                "\u963F",
                "\u5BA3",
                "\u74B0",
                "\u96D9",
                "\u8ACB",
                "\u8D85",
                "\u5FAE",
                "\u8B93",
                "\u63A7",
                "\u5DDE",
                "\u826F",
                "\u8EF8",
                "\u627E",
                "\u5426",
                "\u7D00",
                "\u76CA",
                "\u4F9D",
                "\u512A",
                "\u9802",
                "\u790E",
                "\u8F09",
                "\u5012",
                "\u623F",
                "\u7A81",
                "\u5750",
                "\u7C89",
                "\u6575",
                "\u7565",
                "\u5BA2",
                "\u8881",
                "\u51B7",
                "\u52DD",
                "\u7D55",
                "\u6790",
                "\u584A",
                "\u5291",
                "\u6E2C",
                "\u7D72",
                "\u5354",
                "\u8A34",
                "\u5FF5",
                "\u9673",
                "\u4ECD",
                "\u7F85",
                "\u9E7D",
                "\u53CB",
                "\u6D0B",
                "\u932F",
                "\u82E6",
                "\u591C",
                "\u5211",
                "\u79FB",
                "\u983B",
                "\u9010",
                "\u9760",
                "\u6DF7",
                "\u6BCD",
                "\u77ED",
                "\u76AE",
                "\u7D42",
                "\u805A",
                "\u6C7D",
                "\u6751",
                "\u96F2",
                "\u54EA",
                "\u65E2",
                "\u8DDD",
                "\u885B",
                "\u505C",
                "\u70C8",
                "\u592E",
                "\u5BDF",
                "\u71D2",
                "\u8FC5",
                "\u5883",
                "\u82E5",
                "\u5370",
                "\u6D32",
                "\u523B",
                "\u62EC",
                "\u6FC0",
                "\u5B54",
                "\u641E",
                "\u751A",
                "\u5BA4",
                "\u5F85",
                "\u6838",
                "\u6821",
                "\u6563",
                "\u4FB5",
                "\u5427",
                "\u7532",
                "\u904A",
                "\u4E45",
                "\u83DC",
                "\u5473",
                "\u820A",
                "\u6A21",
                "\u6E56",
                "\u8CA8",
                "\u640D",
                "\u9810",
                "\u963B",
                "\u6BEB",
                "\u666E",
                "\u7A69",
                "\u4E59",
                "\u5ABD",
                "\u690D",
                "\u606F",
                "\u64F4",
                "\u9280",
                "\u8A9E",
                "\u63EE",
                "\u9152",
                "\u5B88",
                "\u62FF",
                "\u5E8F",
                "\u7D19",
                "\u91AB",
                "\u7F3A",
                "\u96E8",
                "\u55CE",
                "\u91DD",
                "\u5289",
                "\u554A",
                "\u6025",
                "\u5531",
                "\u8AA4",
                "\u8A13",
                "\u9858",
                "\u5BE9",
                "\u9644",
                "\u7372",
                "\u8336",
                "\u9BAE",
                "\u7CE7",
                "\u65A4",
                "\u5B69",
                "\u812B",
                "\u786B",
                "\u80A5",
                "\u5584",
                "\u9F8D",
                "\u6F14",
                "\u7236",
                "\u6F38",
                "\u8840",
                "\u6B61",
                "\u68B0",
                "\u638C",
                "\u6B4C",
                "\u6C99",
                "\u525B",
                "\u653B",
                "\u8B02",
                "\u76FE",
                "\u8A0E",
                "\u665A",
                "\u7C92",
                "\u4E82",
                "\u71C3",
                "\u77DB",
                "\u4E4E",
                "\u6BBA",
                "\u85E5",
                "\u5BE7",
                "\u9B6F",
                "\u8CB4",
                "\u9418",
                "\u7164",
                "\u8B80",
                "\u73ED",
                "\u4F2F",
                "\u9999",
                "\u4ECB",
                "\u8FEB",
                "\u53E5",
                "\u8C50",
                "\u57F9",
                "\u63E1",
                "\u862D",
                "\u64D4",
                "\u5F26",
                "\u86CB",
                "\u6C89",
                "\u5047",
                "\u7A7F",
                "\u57F7",
                "\u7B54",
                "\u6A02",
                "\u8AB0",
                "\u9806",
                "\u7159",
                "\u7E2E",
                "\u5FB5",
                "\u81C9",
                "\u559C",
                "\u677E",
                "\u8173",
                "\u56F0",
                "\u7570",
                "\u514D",
                "\u80CC",
                "\u661F",
                "\u798F",
                "\u8CB7",
                "\u67D3",
                "\u4E95",
                "\u6982",
                "\u6162",
                "\u6015",
                "\u78C1",
                "\u500D",
                "\u7956",
                "\u7687",
                "\u4FC3",
                "\u975C",
                "\u88DC",
                "\u8A55",
                "\u7FFB",
                "\u8089",
                "\u8E10",
                "\u5C3C",
                "\u8863",
                "\u5BEC",
                "\u63DA",
                "\u68C9",
                "\u5E0C",
                "\u50B7",
                "\u64CD",
                "\u5782",
                "\u79CB",
                "\u5B9C",
                "\u6C2B",
                "\u5957",
                "\u7763",
                "\u632F",
                "\u67B6",
                "\u4EAE",
                "\u672B",
                "\u61B2",
                "\u6176",
                "\u7DE8",
                "\u725B",
                "\u89F8",
                "\u6620",
                "\u96F7",
                "\u92B7",
                "\u8A69",
                "\u5EA7",
                "\u5C45",
                "\u6293",
                "\u88C2",
                "\u80DE",
                "\u547C",
                "\u5A18",
                "\u666F",
                "\u5A01",
                "\u7DA0",
                "\u6676",
                "\u539A",
                "\u76DF",
                "\u8861",
                "\u96DE",
                "\u5B6B",
                "\u5EF6",
                "\u5371",
                "\u81A0",
                "\u5C4B",
                "\u9109",
                "\u81E8",
                "\u9678",
                "\u9867",
                "\u6389",
                "\u5440",
                "\u71C8",
                "\u6B72",
                "\u63AA",
                "\u675F",
                "\u8010",
                "\u5287",
                "\u7389",
                "\u8D99",
                "\u8DF3",
                "\u54E5",
                "\u5B63",
                "\u8AB2",
                "\u51F1",
                "\u80E1",
                "\u984D",
                "\u6B3E",
                "\u7D39",
                "\u5377",
                "\u9F4A",
                "\u5049",
                "\u84B8",
                "\u6B96",
                "\u6C38",
                "\u5B97",
                "\u82D7",
                "\u5DDD",
                "\u7210",
                "\u5CA9",
                "\u5F31",
                "\u96F6",
                "\u694A",
                "\u594F",
                "\u6CBF",
                "\u9732",
                "\u687F",
                "\u63A2",
                "\u6ED1",
                "\u93AE",
                "\u98EF",
                "\u6FC3",
                "\u822A",
                "\u61F7",
                "\u8D95",
                "\u5EAB",
                "\u596A",
                "\u4F0A",
                "\u9748",
                "\u7A05",
                "\u9014",
                "\u6EC5",
                "\u8CFD",
                "\u6B78",
                "\u53EC",
                "\u9F13",
                "\u64AD",
                "\u76E4",
                "\u88C1",
                "\u96AA",
                "\u5EB7",
                "\u552F",
                "\u9304",
                "\u83CC",
                "\u7D14",
                "\u501F",
                "\u7CD6",
                "\u84CB",
                "\u6A6B",
                "\u7B26",
                "\u79C1",
                "\u52AA",
                "\u5802",
                "\u57DF",
                "\u69CD",
                "\u6F64",
                "\u5E45",
                "\u54C8",
                "\u7ADF",
                "\u719F",
                "\u87F2",
                "\u6FA4",
                "\u8166",
                "\u58E4",
                "\u78B3",
                "\u6B50",
                "\u904D",
                "\u5074",
                "\u5BE8",
                "\u6562",
                "\u5FB9",
                "\u616E",
                "\u659C",
                "\u8584",
                "\u5EAD",
                "\u7D0D",
                "\u5F48",
                "\u98FC",
                "\u4F38",
                "\u6298",
                "\u9EA5",
                "\u6FD5",
                "\u6697",
                "\u8377",
                "\u74E6",
                "\u585E",
                "\u5E8A",
                "\u7BC9",
                "\u60E1",
                "\u6236",
                "\u8A2A",
                "\u5854",
                "\u5947",
                "\u900F",
                "\u6881",
                "\u5200",
                "\u65CB",
                "\u8DE1",
                "\u5361",
                "\u6C2F",
                "\u9047",
                "\u4EFD",
                "\u6BD2",
                "\u6CE5",
                "\u9000",
                "\u6D17",
                "\u64FA",
                "\u7070",
                "\u5F69",
                "\u8CE3",
                "\u8017",
                "\u590F",
                "\u64C7",
                "\u5FD9",
                "\u9285",
                "\u737B",
                "\u786C",
                "\u4E88",
                "\u7E41",
                "\u5708",
                "\u96EA",
                "\u51FD",
                "\u4EA6",
                "\u62BD",
                "\u7BC7",
                "\u9663",
                "\u9670",
                "\u4E01",
                "\u5C3A",
                "\u8FFD",
                "\u5806",
                "\u96C4",
                "\u8FCE",
                "\u6CDB",
                "\u7238",
                "\u6A13",
                "\u907F",
                "\u8B00",
                "\u5678",
                "\u91CE",
                "\u8C6C",
                "\u65D7",
                "\u7D2F",
                "\u504F",
                "\u5178",
                "\u9928",
                "\u7D22",
                "\u79E6",
                "\u8102",
                "\u6F6E",
                "\u723A",
                "\u8C46",
                "\u5FFD",
                "\u6258",
                "\u9A5A",
                "\u5851",
                "\u907A",
                "\u6108",
                "\u6731",
                "\u66FF",
                "\u7E96",
                "\u7C97",
                "\u50BE",
                "\u5C1A",
                "\u75DB",
                "\u695A",
                "\u8B1D",
                "\u596E",
                "\u8CFC",
                "\u78E8",
                "\u541B",
                "\u6C60",
                "\u65C1",
                "\u788E",
                "\u9AA8",
                "\u76E3",
                "\u6355",
                "\u5F1F",
                "\u66B4",
                "\u5272",
                "\u8CAB",
                "\u6B8A",
                "\u91CB",
                "\u8A5E",
                "\u4EA1",
                "\u58C1",
                "\u9813",
                "\u5BF6",
                "\u5348",
                "\u5875",
                "\u805E",
                "\u63ED",
                "\u70AE",
                "\u6B98",
                "\u51AC",
                "\u6A4B",
                "\u5A66",
                "\u8B66",
                "\u7D9C",
                "\u62DB",
                "\u5433",
                "\u4ED8",
                "\u6D6E",
                "\u906D",
                "\u5F90",
                "\u60A8",
                "\u6416",
                "\u8C37",
                "\u8D0A",
                "\u7BB1",
                "\u9694",
                "\u8A02",
                "\u7537",
                "\u5439",
                "\u5712",
                "\u7D1B",
                "\u5510",
                "\u6557",
                "\u5B8B",
                "\u73BB",
                "\u5DE8",
                "\u8015",
                "\u5766",
                "\u69AE",
                "\u9589",
                "\u7063",
                "\u9375",
                "\u51E1",
                "\u99D0",
                "\u934B",
                "\u6551",
                "\u6069",
                "\u525D",
                "\u51DD",
                "\u9E7C",
                "\u9F52",
                "\u622A",
                "\u7149",
                "\u9EBB",
                "\u7D21",
                "\u7981",
                "\u5EE2",
                "\u76DB",
                "\u7248",
                "\u7DE9",
                "\u6DE8",
                "\u775B",
                "\u660C",
                "\u5A5A",
                "\u6D89",
                "\u7B52",
                "\u5634",
                "\u63D2",
                "\u5CB8",
                "\u6717",
                "\u838A",
                "\u8857",
                "\u85CF",
                "\u59D1",
                "\u8CBF",
                "\u8150",
                "\u5974",
                "\u5566",
                "\u6163",
                "\u4E58",
                "\u5925",
                "\u6062",
                "\u52FB",
                "\u7D17",
                "\u624E",
                "\u8FAF",
                "\u8033",
                "\u5F6A",
                "\u81E3",
                "\u5104",
                "\u7483",
                "\u62B5",
                "\u8108",
                "\u79C0",
                "\u85A9",
                "\u4FC4",
                "\u7DB2",
                "\u821E",
                "\u5E97",
                "\u5674",
                "\u7E31",
                "\u5BF8",
                "\u6C57",
                "\u639B",
                "\u6D2A",
                "\u8CC0",
                "\u9583",
                "\u67EC",
                "\u7206",
                "\u70EF",
                "\u6D25",
                "\u7A3B",
                "\u7246",
                "\u8EDF",
                "\u52C7",
                "\u50CF",
                "\u6EFE",
                "\u5398",
                "\u8499",
                "\u82B3",
                "\u80AF",
                "\u5761",
                "\u67F1",
                "\u76EA",
                "\u817F",
                "\u5100",
                "\u65C5",
                "\u5C3E",
                "\u8ECB",
                "\u51B0",
                "\u8CA2",
                "\u767B",
                "\u9ECE",
                "\u524A",
                "\u947D",
                "\u52D2",
                "\u9003",
                "\u969C",
                "\u6C28",
                "\u90ED",
                "\u5CF0",
                "\u5E63",
                "\u6E2F",
                "\u4F0F",
                "\u8ECC",
                "\u755D",
                "\u7562",
                "\u64E6",
                "\u83AB",
                "\u523A",
                "\u6D6A",
                "\u79D8",
                "\u63F4",
                "\u682A",
                "\u5065",
                "\u552E",
                "\u80A1",
                "\u5CF6",
                "\u7518",
                "\u6CE1",
                "\u7761",
                "\u7AE5",
                "\u9444",
                "\u6E6F",
                "\u95A5",
                "\u4F11",
                "\u532F",
                "\u820D",
                "\u7267",
                "\u7E5E",
                "\u70B8",
                "\u54F2",
                "\u78F7",
                "\u7E3E",
                "\u670B",
                "\u6DE1",
                "\u5C16",
                "\u555F",
                "\u9677",
                "\u67F4",
                "\u5448",
                "\u5F92",
                "\u984F",
                "\u6DDA",
                "\u7A0D",
                "\u5FD8",
                "\u6CF5",
                "\u85CD",
                "\u62D6",
                "\u6D1E",
                "\u6388",
                "\u93E1",
                "\u8F9B",
                "\u58EF",
                "\u92D2",
                "\u8CA7",
                "\u865B",
                "\u5F4E",
                "\u6469",
                "\u6CF0",
                "\u5E7C",
                "\u5EF7",
                "\u5C0A",
                "\u7A97",
                "\u7DB1",
                "\u5F04",
                "\u96B8",
                "\u7591",
                "\u6C0F",
                "\u5BAE",
                "\u59D0",
                "\u9707",
                "\u745E",
                "\u602A",
                "\u5C24",
                "\u7434",
                "\u5FAA",
                "\u63CF",
                "\u819C",
                "\u9055",
                "\u593E",
                "\u8170",
                "\u7DE3",
                "\u73E0",
                "\u7AAE",
                "\u68EE",
                "\u679D",
                "\u7AF9",
                "\u6E9D",
                "\u50AC",
                "\u7E69",
                "\u61B6",
                "\u90A6",
                "\u5269",
                "\u5E78",
                "\u6F3F",
                "\u6B04",
                "\u64C1",
                "\u7259",
                "\u8CAF",
                "\u79AE",
                "\u6FFE",
                "\u9209",
                "\u7D0B",
                "\u7F77",
                "\u62CD",
                "\u54B1",
                "\u558A",
                "\u8896",
                "\u57C3",
                "\u52E4",
                "\u7F70",
                "\u7126",
                "\u6F5B",
                "\u4F0D",
                "\u58A8",
                "\u6B32",
                "\u7E2B",
                "\u59D3",
                "\u520A",
                "\u98FD",
                "\u4EFF",
                "\u734E",
                "\u92C1",
                "\u9B3C",
                "\u9E97",
                "\u8DE8",
                "\u9ED8",
                "\u6316",
                "\u93C8",
                "\u6383",
                "\u559D",
                "\u888B",
                "\u70AD",
                "\u6C61",
                "\u5E55",
                "\u8AF8",
                "\u5F27",
                "\u52F5",
                "\u6885",
                "\u5976",
                "\u6F54",
                "\u707D",
                "\u821F",
                "\u9451",
                "\u82EF",
                "\u8A1F",
                "\u62B1",
                "\u6BC0",
                "\u61C2",
                "\u5BD2",
                "\u667A",
                "\u57D4",
                "\u5BC4",
                "\u5C46",
                "\u8E8D",
                "\u6E21",
                "\u6311",
                "\u4E39",
                "\u8271",
                "\u8C9D",
                "\u78B0",
                "\u62D4",
                "\u7239",
                "\u6234",
                "\u78BC",
                "\u5922",
                "\u82BD",
                "\u7194",
                "\u8D64",
                "\u6F01",
                "\u54ED",
                "\u656C",
                "\u9846",
                "\u5954",
                "\u925B",
                "\u4EF2",
                "\u864E",
                "\u7A00",
                "\u59B9",
                "\u4E4F",
                "\u73CD",
                "\u7533",
                "\u684C",
                "\u9075",
                "\u5141",
                "\u9686",
                "\u87BA",
                "\u5009",
                "\u9B4F",
                "\u92B3",
                "\u66C9",
                "\u6C2E",
                "\u517C",
                "\u96B1",
                "\u7919",
                "\u8D6B",
                "\u64A5",
                "\u5FE0",
                "\u8085",
                "\u7F38",
                "\u727D",
                "\u6436",
                "\u535A",
                "\u5DE7",
                "\u6BBC",
                "\u5144",
                "\u675C",
                "\u8A0A",
                "\u8AA0",
                "\u78A7",
                "\u7965",
                "\u67EF",
                "\u9801",
                "\u5DE1",
                "\u77E9",
                "\u60B2",
                "\u704C",
                "\u9F61",
                "\u502B",
                "\u7968",
                "\u5C0B",
                "\u6842",
                "\u92EA",
                "\u8056",
                "\u6050",
                "\u6070",
                "\u912D",
                "\u8DA3",
                "\u62AC",
                "\u8352",
                "\u9A30",
                "\u8CBC",
                "\u67D4",
                "\u6EF4",
                "\u731B",
                "\u95CA",
                "\u8F1B",
                "\u59BB",
                "\u586B",
                "\u64A4",
                "\u5132",
                "\u7C3D",
                "\u9B27",
                "\u64FE",
                "\u7D2B",
                "\u7802",
                "\u905E",
                "\u6232",
                "\u540A",
                "\u9676",
                "\u4F10",
                "\u9935",
                "\u7642",
                "\u74F6",
                "\u5A46",
                "\u64AB",
                "\u81C2",
                "\u6478",
                "\u5FCD",
                "\u8766",
                "\u881F",
                "\u9130",
                "\u80F8",
                "\u978F",
                "\u64E0",
                "\u5076",
                "\u68C4",
                "\u69FD",
                "\u52C1",
                "\u4E73",
                "\u9127",
                "\u5409",
                "\u4EC1",
                "\u721B",
                "\u78DA",
                "\u79DF",
                "\u70CF",
                "\u8266",
                "\u4F34",
                "\u74DC",
                "\u6DFA",
                "\u4E19",
                "\u66AB",
                "\u71E5",
                "\u6A61",
                "\u67F3",
                "\u8FF7",
                "\u6696",
                "\u724C",
                "\u79E7",
                "\u81BD",
                "\u8A73",
                "\u7C27",
                "\u8E0F",
                "\u74F7",
                "\u8B5C",
                "\u5446",
                "\u8CD3",
                "\u7CCA",
                "\u6D1B",
                "\u8F1D",
                "\u61A4",
                "\u7AF6",
                "\u9699",
                "\u6012",
                "\u7C98",
                "\u4E43",
                "\u7DD2",
                "\u80A9",
                "\u7C4D",
                "\u654F",
                "\u5857",
                "\u7199",
                "\u7686",
                "\u5075",
                "\u61F8",
                "\u6398",
                "\u4EAB",
                "\u7CFE",
                "\u9192",
                "\u72C2",
                "\u9396",
                "\u6DC0",
                "\u6068",
                "\u7272",
                "\u9738",
                "\u722C",
                "\u8CDE",
                "\u9006",
                "\u73A9",
                "\u9675",
                "\u795D",
                "\u79D2",
                "\u6D59",
                "\u8C8C",
                "\u5F79",
                "\u5F7C",
                "\u6089",
                "\u9D28",
                "\u8DA8",
                "\u9CF3",
                "\u6668",
                "\u755C",
                "\u8F29",
                "\u79E9",
                "\u5375",
                "\u7F72",
                "\u68AF",
                "\u708E",
                "\u7058",
                "\u68CB",
                "\u9A45",
                "\u7BE9",
                "\u5CFD",
                "\u5192",
                "\u5565",
                "\u58FD",
                "\u8B6F",
                "\u6D78",
                "\u6CC9",
                "\u5E3D",
                "\u9072",
                "\u77FD",
                "\u7586",
                "\u8CB8",
                "\u6F0F",
                "\u7A3F",
                "\u51A0",
                "\u5AE9",
                "\u8105",
                "\u82AF",
                "\u7262",
                "\u53DB",
                "\u8755",
                "\u5967",
                "\u9CF4",
                "\u5DBA",
                "\u7F8A",
                "\u6191",
                "\u4E32",
                "\u5858",
                "\u7E6A",
                "\u9175",
                "\u878D",
                "\u76C6",
                "\u932B",
                "\u5EDF",
                "\u7C4C",
                "\u51CD",
                "\u8F14",
                "\u651D",
                "\u8972",
                "\u7B4B",
                "\u62D2",
                "\u50DA",
                "\u65F1",
                "\u9240",
                "\u9CE5",
                "\u6F06",
                "\u6C88",
                "\u7709",
                "\u758F",
                "\u6DFB",
                "\u68D2",
                "\u7A57",
                "\u785D",
                "\u97D3",
                "\u903C",
                "\u626D",
                "\u50D1",
                "\u6DBC",
                "\u633A",
                "\u7897",
                "\u683D",
                "\u7092",
                "\u676F",
                "\u60A3",
                "\u993E",
                "\u52F8",
                "\u8C6A",
                "\u907C",
                "\u52C3",
                "\u9D3B",
                "\u65E6",
                "\u540F",
                "\u62DC",
                "\u72D7",
                "\u57CB",
                "\u8F25",
                "\u63A9",
                "\u98F2",
                "\u642C",
                "\u7F75",
                "\u8FAD",
                "\u52FE",
                "\u6263",
                "\u4F30",
                "\u8523",
                "\u7D68",
                "\u9727",
                "\u4E08",
                "\u6735",
                "\u59C6",
                "\u64EC",
                "\u5B87",
                "\u8F2F",
                "\u965D",
                "\u96D5",
                "\u511F",
                "\u84C4",
                "\u5D07",
                "\u526A",
                "\u5021",
                "\u5EF3",
                "\u54AC",
                "\u99DB",
                "\u85AF",
                "\u5237",
                "\u65A5",
                "\u756A",
                "\u8CE6",
                "\u5949",
                "\u4F5B",
                "\u6F86",
                "\u6F2B",
                "\u66FC",
                "\u6247",
                "\u9223",
                "\u6843",
                "\u6276",
                "\u4ED4",
                "\u8FD4",
                "\u4FD7",
                "\u8667",
                "\u8154",
                "\u978B",
                "\u68F1",
                "\u8986",
                "\u6846",
                "\u6084",
                "\u53D4",
                "\u649E",
                "\u9A19",
                "\u52D8",
                "\u65FA",
                "\u6CB8",
                "\u5B64",
                "\u5410",
                "\u5B5F",
                "\u6E20",
                "\u5C48",
                "\u75BE",
                "\u5999",
                "\u60DC",
                "\u4EF0",
                "\u72E0",
                "\u8139",
                "\u8AE7",
                "\u62CB",
                "\u9EF4",
                "\u6851",
                "\u5D17",
                "\u561B",
                "\u8870",
                "\u76DC",
                "\u6EF2",
                "\u81DF",
                "\u8CF4",
                "\u6E67",
                "\u751C",
                "\u66F9",
                "\u95B1",
                "\u808C",
                "\u54E9",
                "\u53B2",
                "\u70F4",
                "\u7DEF",
                "\u6BC5",
                "\u6628",
                "\u507D",
                "\u75C7",
                "\u716E",
                "\u5606",
                "\u91D8",
                "\u642D",
                "\u8396",
                "\u7C60",
                "\u9177",
                "\u5077",
                "\u5F13",
                "\u9310",
                "\u6046",
                "\u5091",
                "\u5751",
                "\u9F3B",
                "\u7FFC",
                "\u7DB8",
                "\u6558",
                "\u7344",
                "\u902E",
                "\u7F50",
                "\u7D61",
                "\u68DA",
                "\u6291",
                "\u81A8",
                "\u852C",
                "\u5BFA",
                "\u9A5F",
                "\u7A46",
                "\u51B6",
                "\u67AF",
                "\u518A",
                "\u5C4D",
                "\u51F8",
                "\u7D33",
                "\u576F",
                "\u72A7",
                "\u7130",
                "\u8F5F",
                "\u6B23",
                "\u6649",
                "\u7626",
                "\u79A6",
                "\u9320",
                "\u9326",
                "\u55AA",
                "\u65EC",
                "\u935B",
                "\u58DF",
                "\u641C",
                "\u64B2",
                "\u9080",
                "\u4EAD",
                "\u916F",
                "\u9081",
                "\u8212",
                "\u8106",
                "\u9176",
                "\u9592",
                "\u6182",
                "\u915A",
                "\u9811",
                "\u7FBD",
                "\u6F32",
                "\u5378",
                "\u4ED7",
                "\u966A",
                "\u95E2",
                "\u61F2",
                "\u676D",
                "\u59DA",
                "\u809A",
                "\u6349",
                "\u98C4",
                "\u6F02",
                "\u6606",
                "\u6B3A",
                "\u543E",
                "\u90CE",
                "\u70F7",
                "\u6C41",
                "\u5475",
                "\u98FE",
                "\u856D",
                "\u96C5",
                "\u90F5",
                "\u9077",
                "\u71D5",
                "\u6492",
                "\u59FB",
                "\u8D74",
                "\u5BB4",
                "\u7169",
                "\u50B5",
                "\u5E33",
                "\u6591",
                "\u9234",
                "\u65E8",
                "\u9187",
                "\u8463",
                "\u9905",
                "\u96DB",
                "\u59FF",
                "\u62CC",
                "\u5085",
                "\u8179",
                "\u59A5",
                "\u63C9",
                "\u8CE2",
                "\u62C6",
                "\u6B6A",
                "\u8461",
                "\u80FA",
                "\u4E1F",
                "\u6D69",
                "\u5FBD",
                "\u6602",
                "\u588A",
                "\u64CB",
                "\u89BD",
                "\u8CAA",
                "\u6170",
                "\u7E73",
                "\u6C6A",
                "\u614C",
                "\u99AE",
                "\u8AFE",
                "\u59DC",
                "\u8ABC",
                "\u5147",
                "\u52A3",
                "\u8AA3",
                "\u8000",
                "\u660F",
                "\u8EBA",
                "\u76C8",
                "\u9A0E",
                "\u55AC",
                "\u6EAA",
                "\u53E2",
                "\u76E7",
                "\u62B9",
                "\u60B6",
                "\u8AEE",
                "\u522E",
                "\u99D5",
                "\u7E9C",
                "\u609F",
                "\u6458",
                "\u927A",
                "\u64F2",
                "\u9817",
                "\u5E7B",
                "\u67C4",
                "\u60E0",
                "\u6158",
                "\u4F73",
                "\u4EC7",
                "\u81D8",
                "\u7AA9",
                "\u6ECC",
                "\u528D",
                "\u77A7",
                "\u5821",
                "\u6F51",
                "\u8525",
                "\u7F69",
                "\u970D",
                "\u6488",
                "\u80CE",
                "\u84BC",
                "\u6FF1",
                "\u5006",
                "\u6345",
                "\u6E58",
                "\u780D",
                "\u971E",
                "\u90B5",
                "\u8404",
                "\u760B",
                "\u6DEE",
                "\u9042",
                "\u718A",
                "\u7CDE",
                "\u70D8",
                "\u5BBF",
                "\u6A94",
                "\u6208",
                "\u99C1",
                "\u5AC2",
                "\u88D5",
                "\u5F99",
                "\u7BAD",
                "\u6350",
                "\u8178",
                "\u6490",
                "\u66EC",
                "\u8FA8",
                "\u6BBF",
                "\u84EE",
                "\u6524",
                "\u652A",
                "\u91AC",
                "\u5C4F",
                "\u75AB",
                "\u54C0",
                "\u8521",
                "\u5835",
                "\u6CAB",
                "\u76BA",
                "\u66A2",
                "\u758A",
                "\u95A3",
                "\u840A",
                "\u6572",
                "\u8F44",
                "\u9264",
                "\u75D5",
                "\u58E9",
                "\u5DF7",
                "\u9913",
                "\u798D",
                "\u4E18",
                "\u7384",
                "\u6E9C",
                "\u66F0",
                "\u908F",
                "\u5F6D",
                "\u5617",
                "\u537F",
                "\u59A8",
                "\u8247",
                "\u541E",
                "\u97CB",
                "\u6028",
                "\u77EE",
                "\u6B47"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/korean.json
          var require_korean = __commonJS({
            "node_modules/bip39/src/wordlists/korean.json"(exports, module) {
              module.exports = [
                "\u1100\u1161\u1100\u1167\u11A8",
                "\u1100\u1161\u1101\u1173\u11B7",
                "\u1100\u1161\u1102\u1161\u11AB",
                "\u1100\u1161\u1102\u1173\u11BC",
                "\u1100\u1161\u1103\u1173\u11A8",
                "\u1100\u1161\u1105\u1173\u110E\u1175\u11B7",
                "\u1100\u1161\u1106\u116E\u11B7",
                "\u1100\u1161\u1107\u1161\u11BC",
                "\u1100\u1161\u1109\u1161\u11BC",
                "\u1100\u1161\u1109\u1173\u11B7",
                "\u1100\u1161\u110B\u116E\u11AB\u1103\u1166",
                "\u1100\u1161\u110B\u1173\u11AF",
                "\u1100\u1161\u110B\u1175\u1103\u1173",
                "\u1100\u1161\u110B\u1175\u11B8",
                "\u1100\u1161\u110C\u1161\u11BC",
                "\u1100\u1161\u110C\u1165\u11BC",
                "\u1100\u1161\u110C\u1169\u11A8",
                "\u1100\u1161\u110C\u116E\u11A8",
                "\u1100\u1161\u11A8\u110B\u1169",
                "\u1100\u1161\u11A8\u110C\u1161",
                "\u1100\u1161\u11AB\u1100\u1167\u11A8",
                "\u1100\u1161\u11AB\u1107\u116E",
                "\u1100\u1161\u11AB\u1109\u1165\u11B8",
                "\u1100\u1161\u11AB\u110C\u1161\u11BC",
                "\u1100\u1161\u11AB\u110C\u1165\u11B8",
                "\u1100\u1161\u11AB\u1111\u1161\u11AB",
                "\u1100\u1161\u11AF\u1103\u1173\u11BC",
                "\u1100\u1161\u11AF\u1107\u1175",
                "\u1100\u1161\u11AF\u1109\u1162\u11A8",
                "\u1100\u1161\u11AF\u110C\u1173\u11BC",
                "\u1100\u1161\u11B7\u1100\u1161\u11A8",
                "\u1100\u1161\u11B7\u1100\u1175",
                "\u1100\u1161\u11B7\u1109\u1169",
                "\u1100\u1161\u11B7\u1109\u116E\u1109\u1165\u11BC",
                "\u1100\u1161\u11B7\u110C\u1161",
                "\u1100\u1161\u11B7\u110C\u1165\u11BC",
                "\u1100\u1161\u11B8\u110C\u1161\u1100\u1175",
                "\u1100\u1161\u11BC\u1102\u1161\u11B7",
                "\u1100\u1161\u11BC\u1103\u1161\u11BC",
                "\u1100\u1161\u11BC\u1103\u1169",
                "\u1100\u1161\u11BC\u1105\u1167\u11A8\u1112\u1175",
                "\u1100\u1161\u11BC\u1107\u1167\u11AB",
                "\u1100\u1161\u11BC\u1107\u116E\u11A8",
                "\u1100\u1161\u11BC\u1109\u1161",
                "\u1100\u1161\u11BC\u1109\u116E\u1105\u1163\u11BC",
                "\u1100\u1161\u11BC\u110B\u1161\u110C\u1175",
                "\u1100\u1161\u11BC\u110B\u116F\u11AB\u1103\u1169",
                "\u1100\u1161\u11BC\u110B\u1174",
                "\u1100\u1161\u11BC\u110C\u1166",
                "\u1100\u1161\u11BC\u110C\u1169",
                "\u1100\u1161\u11C0\u110B\u1175",
                "\u1100\u1162\u1100\u116E\u1105\u1175",
                "\u1100\u1162\u1102\u1161\u1105\u1175",
                "\u1100\u1162\u1107\u1161\u11BC",
                "\u1100\u1162\u1107\u1167\u11AF",
                "\u1100\u1162\u1109\u1165\u11AB",
                "\u1100\u1162\u1109\u1165\u11BC",
                "\u1100\u1162\u110B\u1175\u11AB",
                "\u1100\u1162\u11A8\u1100\u116A\u11AB\u110C\u1165\u11A8",
                "\u1100\u1165\u1109\u1175\u11AF",
                "\u1100\u1165\u110B\u1162\u11A8",
                "\u1100\u1165\u110B\u116E\u11AF",
                "\u1100\u1165\u110C\u1175\u11BA",
                "\u1100\u1165\u1111\u116E\u11B7",
                "\u1100\u1165\u11A8\u110C\u1165\u11BC",
                "\u1100\u1165\u11AB\u1100\u1161\u11BC",
                "\u1100\u1165\u11AB\u1106\u116E\u11AF",
                "\u1100\u1165\u11AB\u1109\u1165\u11AF",
                "\u1100\u1165\u11AB\u110C\u1169",
                "\u1100\u1165\u11AB\u110E\u116E\u11A8",
                "\u1100\u1165\u11AF\u110B\u1173\u11B7",
                "\u1100\u1165\u11B7\u1109\u1161",
                "\u1100\u1165\u11B7\u1110\u1169",
                "\u1100\u1166\u1109\u1175\u1111\u1161\u11AB",
                "\u1100\u1166\u110B\u1175\u11B7",
                "\u1100\u1167\u110B\u116E\u11AF",
                "\u1100\u1167\u11AB\u1112\u1162",
                "\u1100\u1167\u11AF\u1100\u116A",
                "\u1100\u1167\u11AF\u1100\u116E\u11A8",
                "\u1100\u1167\u11AF\u1105\u1169\u11AB",
                "\u1100\u1167\u11AF\u1109\u1165\u11A8",
                "\u1100\u1167\u11AF\u1109\u1173\u11BC",
                "\u1100\u1167\u11AF\u1109\u1175\u11B7",
                "\u1100\u1167\u11AF\u110C\u1165\u11BC",
                "\u1100\u1167\u11AF\u1112\u1169\u11AB",
                "\u1100\u1167\u11BC\u1100\u1168",
                "\u1100\u1167\u11BC\u1100\u1169",
                "\u1100\u1167\u11BC\u1100\u1175",
                "\u1100\u1167\u11BC\u1105\u1167\u11A8",
                "\u1100\u1167\u11BC\u1107\u1169\u11A8\u1100\u116E\u11BC",
                "\u1100\u1167\u11BC\u1107\u1175",
                "\u1100\u1167\u11BC\u1109\u1161\u11BC\u1103\u1169",
                "\u1100\u1167\u11BC\u110B\u1167\u11BC",
                "\u1100\u1167\u11BC\u110B\u116E",
                "\u1100\u1167\u11BC\u110C\u1162\u11BC",
                "\u1100\u1167\u11BC\u110C\u1166",
                "\u1100\u1167\u11BC\u110C\u116E",
                "\u1100\u1167\u11BC\u110E\u1161\u11AF",
                "\u1100\u1167\u11BC\u110E\u1175",
                "\u1100\u1167\u11BC\u1112\u1163\u11BC",
                "\u1100\u1167\u11BC\u1112\u1165\u11B7",
                "\u1100\u1168\u1100\u1169\u11A8",
                "\u1100\u1168\u1103\u1161\u11AB",
                "\u1100\u1168\u1105\u1161\u11AB",
                "\u1100\u1168\u1109\u1161\u11AB",
                "\u1100\u1168\u1109\u1169\u11A8",
                "\u1100\u1168\u110B\u1163\u11A8",
                "\u1100\u1168\u110C\u1165\u11AF",
                "\u1100\u1168\u110E\u1173\u11BC",
                "\u1100\u1168\u1112\u116C\u11A8",
                "\u1100\u1169\u1100\u1162\u11A8",
                "\u1100\u1169\u1100\u116E\u1105\u1167",
                "\u1100\u1169\u1100\u116E\u11BC",
                "\u1100\u1169\u1100\u1173\u11B8",
                "\u1100\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
                "\u1100\u1169\u1106\u116E\u1109\u1175\u11AB",
                "\u1100\u1169\u1106\u1175\u11AB",
                "\u1100\u1169\u110B\u1163\u11BC\u110B\u1175",
                "\u1100\u1169\u110C\u1161\u11BC",
                "\u1100\u1169\u110C\u1165\u11AB",
                "\u1100\u1169\u110C\u1175\u11B8",
                "\u1100\u1169\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
                "\u1100\u1169\u1110\u1169\u11BC",
                "\u1100\u1169\u1112\u1163\u11BC",
                "\u1100\u1169\u11A8\u1109\u1175\u11A8",
                "\u1100\u1169\u11AF\u1106\u1169\u11A8",
                "\u1100\u1169\u11AF\u110D\u1161\u1100\u1175",
                "\u1100\u1169\u11AF\u1111\u1173",
                "\u1100\u1169\u11BC\u1100\u1161\u11AB",
                "\u1100\u1169\u11BC\u1100\u1162",
                "\u1100\u1169\u11BC\u1100\u1167\u11A8",
                "\u1100\u1169\u11BC\u1100\u116E\u11AB",
                "\u1100\u1169\u11BC\u1100\u1173\u11B8",
                "\u1100\u1169\u11BC\u1100\u1175",
                "\u1100\u1169\u11BC\u1103\u1169\u11BC",
                "\u1100\u1169\u11BC\u1106\u116E\u110B\u116F\u11AB",
                "\u1100\u1169\u11BC\u1107\u116E",
                "\u1100\u1169\u11BC\u1109\u1161",
                "\u1100\u1169\u11BC\u1109\u1175\u11A8",
                "\u1100\u1169\u11BC\u110B\u1165\u11B8",
                "\u1100\u1169\u11BC\u110B\u1167\u11AB",
                "\u1100\u1169\u11BC\u110B\u116F\u11AB",
                "\u1100\u1169\u11BC\u110C\u1161\u11BC",
                "\u1100\u1169\u11BC\u110D\u1161",
                "\u1100\u1169\u11BC\u110E\u1162\u11A8",
                "\u1100\u1169\u11BC\u1110\u1169\u11BC",
                "\u1100\u1169\u11BC\u1111\u1169",
                "\u1100\u1169\u11BC\u1112\u1161\u11BC",
                "\u1100\u1169\u11BC\u1112\u1172\u110B\u1175\u11AF",
                "\u1100\u116A\u1106\u1169\u11A8",
                "\u1100\u116A\u110B\u1175\u11AF",
                "\u1100\u116A\u110C\u1161\u11BC",
                "\u1100\u116A\u110C\u1165\u11BC",
                "\u1100\u116A\u1112\u1161\u11A8",
                "\u1100\u116A\u11AB\u1100\u1162\u11A8",
                "\u1100\u116A\u11AB\u1100\u1168",
                "\u1100\u116A\u11AB\u1100\u116A\u11BC",
                "\u1100\u116A\u11AB\u1102\u1167\u11B7",
                "\u1100\u116A\u11AB\u1105\u1161\u11B7",
                "\u1100\u116A\u11AB\u1105\u1167\u11AB",
                "\u1100\u116A\u11AB\u1105\u1175",
                "\u1100\u116A\u11AB\u1109\u1173\u11B8",
                "\u1100\u116A\u11AB\u1109\u1175\u11B7",
                "\u1100\u116A\u11AB\u110C\u1165\u11B7",
                "\u1100\u116A\u11AB\u110E\u1161\u11AF",
                "\u1100\u116A\u11BC\u1100\u1167\u11BC",
                "\u1100\u116A\u11BC\u1100\u1169",
                "\u1100\u116A\u11BC\u110C\u1161\u11BC",
                "\u1100\u116A\u11BC\u110C\u116E",
                "\u1100\u116C\u1105\u1169\u110B\u116E\u11B7",
                "\u1100\u116C\u11BC\u110C\u1161\u11BC\u1112\u1175",
                "\u1100\u116D\u1100\u116A\u1109\u1165",
                "\u1100\u116D\u1106\u116E\u11AB",
                "\u1100\u116D\u1107\u1169\u11A8",
                "\u1100\u116D\u1109\u1175\u11AF",
                "\u1100\u116D\u110B\u1163\u11BC",
                "\u1100\u116D\u110B\u1172\u11A8",
                "\u1100\u116D\u110C\u1161\u11BC",
                "\u1100\u116D\u110C\u1175\u11A8",
                "\u1100\u116D\u1110\u1169\u11BC",
                "\u1100\u116D\u1112\u116A\u11AB",
                "\u1100\u116D\u1112\u116E\u11AB",
                "\u1100\u116E\u1100\u1167\u11BC",
                "\u1100\u116E\u1105\u1173\u11B7",
                "\u1100\u116E\u1106\u1165\u11BC",
                "\u1100\u116E\u1107\u1167\u11AF",
                "\u1100\u116E\u1107\u116E\u11AB",
                "\u1100\u116E\u1109\u1165\u11A8",
                "\u1100\u116E\u1109\u1165\u11BC",
                "\u1100\u116E\u1109\u1169\u11A8",
                "\u1100\u116E\u110B\u1167\u11A8",
                "\u1100\u116E\u110B\u1175\u11B8",
                "\u1100\u116E\u110E\u1165\u11BC",
                "\u1100\u116E\u110E\u1166\u110C\u1165\u11A8",
                "\u1100\u116E\u11A8\u1100\u1161",
                "\u1100\u116E\u11A8\u1100\u1175",
                "\u1100\u116E\u11A8\u1102\u1162",
                "\u1100\u116E\u11A8\u1105\u1175\u11B8",
                "\u1100\u116E\u11A8\u1106\u116E\u11AF",
                "\u1100\u116E\u11A8\u1106\u1175\u11AB",
                "\u1100\u116E\u11A8\u1109\u116E",
                "\u1100\u116E\u11A8\u110B\u1165",
                "\u1100\u116E\u11A8\u110B\u116A\u11BC",
                "\u1100\u116E\u11A8\u110C\u1165\u11A8",
                "\u1100\u116E\u11A8\u110C\u1166",
                "\u1100\u116E\u11A8\u1112\u116C",
                "\u1100\u116E\u11AB\u1103\u1162",
                "\u1100\u116E\u11AB\u1109\u1161",
                "\u1100\u116E\u11AB\u110B\u1175\u11AB",
                "\u1100\u116E\u11BC\u1100\u1173\u11A8\u110C\u1165\u11A8",
                "\u1100\u116F\u11AB\u1105\u1175",
                "\u1100\u116F\u11AB\u110B\u1171",
                "\u1100\u116F\u11AB\u1110\u116E",
                "\u1100\u1171\u1100\u116E\u11A8",
                "\u1100\u1171\u1109\u1175\u11AB",
                "\u1100\u1172\u110C\u1165\u11BC",
                "\u1100\u1172\u110E\u1175\u11A8",
                "\u1100\u1172\u11AB\u1112\u1167\u11BC",
                "\u1100\u1173\u1102\u1161\u11AF",
                "\u1100\u1173\u1102\u1163\u11BC",
                "\u1100\u1173\u1102\u1173\u11AF",
                "\u1100\u1173\u1105\u1165\u1102\u1161",
                "\u1100\u1173\u1105\u116E\u11B8",
                "\u1100\u1173\u1105\u1173\u11BA",
                "\u1100\u1173\u1105\u1175\u11B7",
                "\u1100\u1173\u110C\u1166\u1109\u1165\u110B\u1163",
                "\u1100\u1173\u1110\u1169\u1105\u1169\u11A8",
                "\u1100\u1173\u11A8\u1107\u1169\u11A8",
                "\u1100\u1173\u11A8\u1112\u1175",
                "\u1100\u1173\u11AB\u1100\u1165",
                "\u1100\u1173\u11AB\u1100\u116D",
                "\u1100\u1173\u11AB\u1105\u1162",
                "\u1100\u1173\u11AB\u1105\u1169",
                "\u1100\u1173\u11AB\u1106\u116E",
                "\u1100\u1173\u11AB\u1107\u1169\u11AB",
                "\u1100\u1173\u11AB\u110B\u116F\u11AB",
                "\u1100\u1173\u11AB\u110B\u1172\u11A8",
                "\u1100\u1173\u11AB\u110E\u1165",
                "\u1100\u1173\u11AF\u110A\u1175",
                "\u1100\u1173\u11AF\u110C\u1161",
                "\u1100\u1173\u11B7\u1100\u1161\u11BC\u1109\u1161\u11AB",
                "\u1100\u1173\u11B7\u1100\u1169",
                "\u1100\u1173\u11B7\u1102\u1167\u11AB",
                "\u1100\u1173\u11B7\u1106\u1166\u1103\u1161\u11AF",
                "\u1100\u1173\u11B7\u110B\u1162\u11A8",
                "\u1100\u1173\u11B7\u110B\u1167\u11AB",
                "\u1100\u1173\u11B7\u110B\u116D\u110B\u1175\u11AF",
                "\u1100\u1173\u11B7\u110C\u1175",
                "\u1100\u1173\u11BC\u110C\u1165\u11BC\u110C\u1165\u11A8",
                "\u1100\u1175\u1100\u1161\u11AB",
                "\u1100\u1175\u1100\u116A\u11AB",
                "\u1100\u1175\u1102\u1167\u11B7",
                "\u1100\u1175\u1102\u1173\u11BC",
                "\u1100\u1175\u1103\u1169\u11A8\u1100\u116D",
                "\u1100\u1175\u1103\u116E\u11BC",
                "\u1100\u1175\u1105\u1169\u11A8",
                "\u1100\u1175\u1105\u1173\u11B7",
                "\u1100\u1175\u1107\u1165\u11B8",
                "\u1100\u1175\u1107\u1169\u11AB",
                "\u1100\u1175\u1107\u116E\u11AB",
                "\u1100\u1175\u1108\u1173\u11B7",
                "\u1100\u1175\u1109\u116E\u11A8\u1109\u1161",
                "\u1100\u1175\u1109\u116E\u11AF",
                "\u1100\u1175\u110B\u1165\u11A8",
                "\u1100\u1175\u110B\u1165\u11B8",
                "\u1100\u1175\u110B\u1169\u11AB",
                "\u1100\u1175\u110B\u116E\u11AB",
                "\u1100\u1175\u110B\u116F\u11AB",
                "\u1100\u1175\u110C\u1165\u11A8",
                "\u1100\u1175\u110C\u116E\u11AB",
                "\u1100\u1175\u110E\u1175\u11B7",
                "\u1100\u1175\u1112\u1169\u11AB",
                "\u1100\u1175\u1112\u116C\u11A8",
                "\u1100\u1175\u11AB\u1100\u1173\u11B8",
                "\u1100\u1175\u11AB\u110C\u1161\u11BC",
                "\u1100\u1175\u11AF\u110B\u1175",
                "\u1100\u1175\u11B7\u1107\u1161\u11B8",
                "\u1100\u1175\u11B7\u110E\u1175",
                "\u1100\u1175\u11B7\u1111\u1169\u1100\u1169\u11BC\u1112\u1161\u11BC",
                "\u1101\u1161\u11A8\u1103\u116E\u1100\u1175",
                "\u1101\u1161\u11B7\u1108\u1161\u11A8",
                "\u1101\u1162\u1103\u1161\u11AF\u110B\u1173\u11B7",
                "\u1101\u1162\u1109\u1169\u1100\u1173\u11B7",
                "\u1101\u1165\u11B8\u110C\u1175\u11AF",
                "\u1101\u1169\u11A8\u1103\u1162\u1100\u1175",
                "\u1101\u1169\u11BE\u110B\u1175\u11C1",
                "\u1102\u1161\u1103\u1173\u11AF\u110B\u1175",
                "\u1102\u1161\u1105\u1161\u11AB\u1112\u1175",
                "\u1102\u1161\u1106\u1165\u110C\u1175",
                "\u1102\u1161\u1106\u116E\u11AF",
                "\u1102\u1161\u110E\u1175\u11B7\u1107\u1161\u11AB",
                "\u1102\u1161\u1112\u1173\u11AF",
                "\u1102\u1161\u11A8\u110B\u1167\u11B8",
                "\u1102\u1161\u11AB\u1107\u1161\u11BC",
                "\u1102\u1161\u11AF\u1100\u1162",
                "\u1102\u1161\u11AF\u110A\u1175",
                "\u1102\u1161\u11AF\u110D\u1161",
                "\u1102\u1161\u11B7\u1102\u1167",
                "\u1102\u1161\u11B7\u1103\u1162\u1106\u116E\u11AB",
                "\u1102\u1161\u11B7\u1106\u1162",
                "\u1102\u1161\u11B7\u1109\u1161\u11AB",
                "\u1102\u1161\u11B7\u110C\u1161",
                "\u1102\u1161\u11B7\u1111\u1167\u11AB",
                "\u1102\u1161\u11B7\u1112\u1161\u11A8\u1109\u1162\u11BC",
                "\u1102\u1161\u11BC\u1107\u1175",
                "\u1102\u1161\u11C0\u1106\u1161\u11AF",
                "\u1102\u1162\u1102\u1167\u11AB",
                "\u1102\u1162\u110B\u116D\u11BC",
                "\u1102\u1162\u110B\u1175\u11AF",
                "\u1102\u1162\u11B7\u1107\u1175",
                "\u1102\u1162\u11B7\u1109\u1162",
                "\u1102\u1162\u11BA\u1106\u116E\u11AF",
                "\u1102\u1162\u11BC\u1103\u1169\u11BC",
                "\u1102\u1162\u11BC\u1106\u1167\u11AB",
                "\u1102\u1162\u11BC\u1107\u1161\u11BC",
                "\u1102\u1162\u11BC\u110C\u1161\u11BC\u1100\u1169",
                "\u1102\u1166\u11A8\u1110\u1161\u110B\u1175",
                "\u1102\u1166\u11BA\u110D\u1162",
                "\u1102\u1169\u1103\u1169\u11BC",
                "\u1102\u1169\u1105\u1161\u11AB\u1109\u1162\u11A8",
                "\u1102\u1169\u1105\u1167\u11A8",
                "\u1102\u1169\u110B\u1175\u11AB",
                "\u1102\u1169\u11A8\u110B\u1173\u11B7",
                "\u1102\u1169\u11A8\u110E\u1161",
                "\u1102\u1169\u11A8\u1112\u116A",
                "\u1102\u1169\u11AB\u1105\u1175",
                "\u1102\u1169\u11AB\u1106\u116E\u11AB",
                "\u1102\u1169\u11AB\u110C\u1162\u11BC",
                "\u1102\u1169\u11AF\u110B\u1175",
                "\u1102\u1169\u11BC\u1100\u116E",
                "\u1102\u1169\u11BC\u1103\u1161\u11B7",
                "\u1102\u1169\u11BC\u1106\u1175\u11AB",
                "\u1102\u1169\u11BC\u1107\u116E",
                "\u1102\u1169\u11BC\u110B\u1165\u11B8",
                "\u1102\u1169\u11BC\u110C\u1161\u11BC",
                "\u1102\u1169\u11BC\u110E\u1169\u11AB",
                "\u1102\u1169\u11C1\u110B\u1175",
                "\u1102\u116E\u11AB\u1103\u1169\u11BC\u110C\u1161",
                "\u1102\u116E\u11AB\u1106\u116E\u11AF",
                "\u1102\u116E\u11AB\u110A\u1165\u11B8",
                "\u1102\u1172\u110B\u116D\u11A8",
                "\u1102\u1173\u1101\u1175\u11B7",
                "\u1102\u1173\u11A8\u1103\u1162",
                "\u1102\u1173\u11BC\u1103\u1169\u11BC\u110C\u1165\u11A8",
                "\u1102\u1173\u11BC\u1105\u1167\u11A8",
                "\u1103\u1161\u1107\u1161\u11BC",
                "\u1103\u1161\u110B\u1163\u11BC\u1109\u1165\u11BC",
                "\u1103\u1161\u110B\u1173\u11B7",
                "\u1103\u1161\u110B\u1175\u110B\u1165\u1110\u1173",
                "\u1103\u1161\u1112\u1162\u11BC",
                "\u1103\u1161\u11AB\u1100\u1168",
                "\u1103\u1161\u11AB\u1100\u1169\u11AF",
                "\u1103\u1161\u11AB\u1103\u1169\u11A8",
                "\u1103\u1161\u11AB\u1106\u1161\u11BA",
                "\u1103\u1161\u11AB\u1109\u116E\u11AB",
                "\u1103\u1161\u11AB\u110B\u1165",
                "\u1103\u1161\u11AB\u110B\u1171",
                "\u1103\u1161\u11AB\u110C\u1165\u11B7",
                "\u1103\u1161\u11AB\u110E\u1166",
                "\u1103\u1161\u11AB\u110E\u116E",
                "\u1103\u1161\u11AB\u1111\u1167\u11AB",
                "\u1103\u1161\u11AB\u1111\u116E\u11BC",
                "\u1103\u1161\u11AF\u1100\u1163\u11AF",
                "\u1103\u1161\u11AF\u1105\u1165",
                "\u1103\u1161\u11AF\u1105\u1167\u11A8",
                "\u1103\u1161\u11AF\u1105\u1175",
                "\u1103\u1161\u11B0\u1100\u1169\u1100\u1175",
                "\u1103\u1161\u11B7\u1103\u1161\u11BC",
                "\u1103\u1161\u11B7\u1107\u1162",
                "\u1103\u1161\u11B7\u110B\u116D",
                "\u1103\u1161\u11B7\u110B\u1175\u11B7",
                "\u1103\u1161\u11B8\u1107\u1167\u11AB",
                "\u1103\u1161\u11B8\u110C\u1161\u11BC",
                "\u1103\u1161\u11BC\u1100\u1173\u11AB",
                "\u1103\u1161\u11BC\u1107\u116E\u11AB\u1100\u1161\u11AB",
                "\u1103\u1161\u11BC\u110B\u1167\u11AB\u1112\u1175",
                "\u1103\u1161\u11BC\u110C\u1161\u11BC",
                "\u1103\u1162\u1100\u1172\u1106\u1169",
                "\u1103\u1162\u1102\u1161\u11BD",
                "\u1103\u1162\u1103\u1161\u11AB\u1112\u1175",
                "\u1103\u1162\u1103\u1161\u11B8",
                "\u1103\u1162\u1103\u1169\u1109\u1175",
                "\u1103\u1162\u1105\u1163\u11A8",
                "\u1103\u1162\u1105\u1163\u11BC",
                "\u1103\u1162\u1105\u1172\u11A8",
                "\u1103\u1162\u1106\u116E\u11AB",
                "\u1103\u1162\u1107\u116E\u1107\u116E\u11AB",
                "\u1103\u1162\u1109\u1175\u11AB",
                "\u1103\u1162\u110B\u1173\u11BC",
                "\u1103\u1162\u110C\u1161\u11BC",
                "\u1103\u1162\u110C\u1165\u11AB",
                "\u1103\u1162\u110C\u1165\u11B8",
                "\u1103\u1162\u110C\u116E\u11BC",
                "\u1103\u1162\u110E\u1162\u11A8",
                "\u1103\u1162\u110E\u116E\u11AF",
                "\u1103\u1162\u110E\u116E\u11BC",
                "\u1103\u1162\u1110\u1169\u11BC\u1105\u1167\u11BC",
                "\u1103\u1162\u1112\u1161\u11A8",
                "\u1103\u1162\u1112\u1161\u11AB\u1106\u1175\u11AB\u1100\u116E\u11A8",
                "\u1103\u1162\u1112\u1161\u11B8\u1109\u1175\u11AF",
                "\u1103\u1162\u1112\u1167\u11BC",
                "\u1103\u1165\u11BC\u110B\u1165\u1105\u1175",
                "\u1103\u1166\u110B\u1175\u1110\u1173",
                "\u1103\u1169\u1103\u1162\u110E\u1166",
                "\u1103\u1169\u1103\u1165\u11A8",
                "\u1103\u1169\u1103\u116E\u11A8",
                "\u1103\u1169\u1106\u1161\u11BC",
                "\u1103\u1169\u1109\u1165\u1100\u116A\u11AB",
                "\u1103\u1169\u1109\u1175\u11B7",
                "\u1103\u1169\u110B\u116E\u11B7",
                "\u1103\u1169\u110B\u1175\u11B8",
                "\u1103\u1169\u110C\u1161\u1100\u1175",
                "\u1103\u1169\u110C\u1165\u1112\u1175",
                "\u1103\u1169\u110C\u1165\u11AB",
                "\u1103\u1169\u110C\u116E\u11BC",
                "\u1103\u1169\u110E\u1161\u11A8",
                "\u1103\u1169\u11A8\u1100\u1161\u11B7",
                "\u1103\u1169\u11A8\u1105\u1175\u11B8",
                "\u1103\u1169\u11A8\u1109\u1165",
                "\u1103\u1169\u11A8\u110B\u1175\u11AF",
                "\u1103\u1169\u11A8\u110E\u1161\u11BC\u110C\u1165\u11A8",
                "\u1103\u1169\u11BC\u1112\u116A\u110E\u1162\u11A8",
                "\u1103\u1171\u11BA\u1106\u1169\u1109\u1173\u11B8",
                "\u1103\u1171\u11BA\u1109\u1161\u11AB",
                "\u1104\u1161\u11AF\u110B\u1161\u110B\u1175",
                "\u1106\u1161\u1102\u116E\u1105\u1161",
                "\u1106\u1161\u1102\u1173\u11AF",
                "\u1106\u1161\u1103\u1161\u11BC",
                "\u1106\u1161\u1105\u1161\u1110\u1169\u11AB",
                "\u1106\u1161\u1105\u1167\u11AB",
                "\u1106\u1161\u1106\u116E\u1105\u1175",
                "\u1106\u1161\u1109\u1161\u110C\u1175",
                "\u1106\u1161\u110B\u1163\u11A8",
                "\u1106\u1161\u110B\u116D\u1102\u1166\u110C\u1173",
                "\u1106\u1161\u110B\u1173\u11AF",
                "\u1106\u1161\u110B\u1173\u11B7",
                "\u1106\u1161\u110B\u1175\u110F\u1173",
                "\u1106\u1161\u110C\u116E\u11BC",
                "\u1106\u1161\u110C\u1175\u1106\u1161\u11A8",
                "\u1106\u1161\u110E\u1161\u11AB\u1100\u1161\u110C\u1175",
                "\u1106\u1161\u110E\u1161\u11AF",
                "\u1106\u1161\u1112\u1173\u11AB",
                "\u1106\u1161\u11A8\u1100\u1165\u11AF\u1105\u1175",
                "\u1106\u1161\u11A8\u1102\u1162",
                "\u1106\u1161\u11A8\u1109\u1161\u11BC",
                "\u1106\u1161\u11AB\u1102\u1161\u11B7",
                "\u1106\u1161\u11AB\u1103\u116E",
                "\u1106\u1161\u11AB\u1109\u1166",
                "\u1106\u1161\u11AB\u110B\u1163\u11A8",
                "\u1106\u1161\u11AB\u110B\u1175\u11AF",
                "\u1106\u1161\u11AB\u110C\u1165\u11B7",
                "\u1106\u1161\u11AB\u110C\u1169\u11A8",
                "\u1106\u1161\u11AB\u1112\u116A",
                "\u1106\u1161\u11AD\u110B\u1175",
                "\u1106\u1161\u11AF\u1100\u1175",
                "\u1106\u1161\u11AF\u110A\u1173\u11B7",
                "\u1106\u1161\u11AF\u1110\u116E",
                "\u1106\u1161\u11B7\u1103\u1162\u1105\u1169",
                "\u1106\u1161\u11BC\u110B\u116F\u11AB\u1100\u1167\u11BC",
                "\u1106\u1162\u1102\u1167\u11AB",
                "\u1106\u1162\u1103\u1161\u11AF",
                "\u1106\u1162\u1105\u1167\u11A8",
                "\u1106\u1162\u1107\u1165\u11AB",
                "\u1106\u1162\u1109\u1173\u110F\u1165\u11B7",
                "\u1106\u1162\u110B\u1175\u11AF",
                "\u1106\u1162\u110C\u1161\u11BC",
                "\u1106\u1162\u11A8\u110C\u116E",
                "\u1106\u1165\u11A8\u110B\u1175",
                "\u1106\u1165\u11AB\u110C\u1165",
                "\u1106\u1165\u11AB\u110C\u1175",
                "\u1106\u1165\u11AF\u1105\u1175",
                "\u1106\u1166\u110B\u1175\u11AF",
                "\u1106\u1167\u1102\u1173\u1105\u1175",
                "\u1106\u1167\u110E\u1175\u11AF",
                "\u1106\u1167\u11AB\u1103\u1161\u11B7",
                "\u1106\u1167\u11AF\u110E\u1175",
                "\u1106\u1167\u11BC\u1103\u1161\u11AB",
                "\u1106\u1167\u11BC\u1105\u1167\u11BC",
                "\u1106\u1167\u11BC\u110B\u1168",
                "\u1106\u1167\u11BC\u110B\u1174",
                "\u1106\u1167\u11BC\u110C\u1165\u11AF",
                "\u1106\u1167\u11BC\u110E\u1175\u11BC",
                "\u1106\u1167\u11BC\u1112\u1161\u11B7",
                "\u1106\u1169\u1100\u1173\u11B7",
                "\u1106\u1169\u1102\u1175\u1110\u1165",
                "\u1106\u1169\u1103\u1166\u11AF",
                "\u1106\u1169\u1103\u1173\u11AB",
                "\u1106\u1169\u1107\u1165\u11B7",
                "\u1106\u1169\u1109\u1173\u11B8",
                "\u1106\u1169\u110B\u1163\u11BC",
                "\u1106\u1169\u110B\u1175\u11B7",
                "\u1106\u1169\u110C\u1169\u1105\u1175",
                "\u1106\u1169\u110C\u1175\u11B8",
                "\u1106\u1169\u1110\u116E\u11BC\u110B\u1175",
                "\u1106\u1169\u11A8\u1100\u1165\u11AF\u110B\u1175",
                "\u1106\u1169\u11A8\u1105\u1169\u11A8",
                "\u1106\u1169\u11A8\u1109\u1161",
                "\u1106\u1169\u11A8\u1109\u1169\u1105\u1175",
                "\u1106\u1169\u11A8\u1109\u116E\u11B7",
                "\u1106\u1169\u11A8\u110C\u1165\u11A8",
                "\u1106\u1169\u11A8\u1111\u116D",
                "\u1106\u1169\u11AF\u1105\u1162",
                "\u1106\u1169\u11B7\u1106\u1162",
                "\u1106\u1169\u11B7\u1106\u116E\u1100\u1166",
                "\u1106\u1169\u11B7\u1109\u1161\u11AF",
                "\u1106\u1169\u11B7\u1109\u1169\u11A8",
                "\u1106\u1169\u11B7\u110C\u1175\u11BA",
                "\u1106\u1169\u11B7\u1110\u1169\u11BC",
                "\u1106\u1169\u11B8\u1109\u1175",
                "\u1106\u116E\u1100\u116A\u11AB\u1109\u1175\u11B7",
                "\u1106\u116E\u1100\u116E\u11BC\u1112\u116A",
                "\u1106\u116E\u1103\u1165\u110B\u1171",
                "\u1106\u116E\u1103\u1165\u11B7",
                "\u1106\u116E\u1105\u1173\u11C1",
                "\u1106\u116E\u1109\u1173\u11AB",
                "\u1106\u116E\u110B\u1165\u11BA",
                "\u1106\u116E\u110B\u1167\u11A8",
                "\u1106\u116E\u110B\u116D\u11BC",
                "\u1106\u116E\u110C\u1169\u1100\u1165\u11AB",
                "\u1106\u116E\u110C\u1175\u1100\u1162",
                "\u1106\u116E\u110E\u1165\u11A8",
                "\u1106\u116E\u11AB\u1100\u116E",
                "\u1106\u116E\u11AB\u1103\u1173\u11A8",
                "\u1106\u116E\u11AB\u1107\u1165\u11B8",
                "\u1106\u116E\u11AB\u1109\u1165",
                "\u1106\u116E\u11AB\u110C\u1166",
                "\u1106\u116E\u11AB\u1112\u1161\u11A8",
                "\u1106\u116E\u11AB\u1112\u116A",
                "\u1106\u116E\u11AF\u1100\u1161",
                "\u1106\u116E\u11AF\u1100\u1165\u11AB",
                "\u1106\u116E\u11AF\u1100\u1167\u11AF",
                "\u1106\u116E\u11AF\u1100\u1169\u1100\u1175",
                "\u1106\u116E\u11AF\u1105\u1169\u11AB",
                "\u1106\u116E\u11AF\u1105\u1175\u1112\u1161\u11A8",
                "\u1106\u116E\u11AF\u110B\u1173\u11B7",
                "\u1106\u116E\u11AF\u110C\u1175\u11AF",
                "\u1106\u116E\u11AF\u110E\u1166",
                "\u1106\u1175\u1100\u116E\u11A8",
                "\u1106\u1175\u1103\u1175\u110B\u1165",
                "\u1106\u1175\u1109\u1161\u110B\u1175\u11AF",
                "\u1106\u1175\u1109\u116E\u11AF",
                "\u1106\u1175\u110B\u1167\u11A8",
                "\u1106\u1175\u110B\u116D\u11BC\u1109\u1175\u11AF",
                "\u1106\u1175\u110B\u116E\u11B7",
                "\u1106\u1175\u110B\u1175\u11AB",
                "\u1106\u1175\u1110\u1175\u11BC",
                "\u1106\u1175\u1112\u1169\u11AB",
                "\u1106\u1175\u11AB\u1100\u1161\u11AB",
                "\u1106\u1175\u11AB\u110C\u1169\u11A8",
                "\u1106\u1175\u11AB\u110C\u116E",
                "\u1106\u1175\u11AE\u110B\u1173\u11B7",
                "\u1106\u1175\u11AF\u1100\u1161\u1105\u116E",
                "\u1106\u1175\u11AF\u1105\u1175\u1106\u1175\u1110\u1165",
                "\u1106\u1175\u11C0\u1107\u1161\u1103\u1161\u11A8",
                "\u1107\u1161\u1100\u1161\u110C\u1175",
                "\u1107\u1161\u1100\u116E\u1102\u1175",
                "\u1107\u1161\u1102\u1161\u1102\u1161",
                "\u1107\u1161\u1102\u1173\u11AF",
                "\u1107\u1161\u1103\u1161\u11A8",
                "\u1107\u1161\u1103\u1161\u11BA\u1100\u1161",
                "\u1107\u1161\u1105\u1161\u11B7",
                "\u1107\u1161\u110B\u1175\u1105\u1165\u1109\u1173",
                "\u1107\u1161\u1110\u1161\u11BC",
                "\u1107\u1161\u11A8\u1106\u116E\u11AF\u1100\u116A\u11AB",
                "\u1107\u1161\u11A8\u1109\u1161",
                "\u1107\u1161\u11A8\u1109\u116E",
                "\u1107\u1161\u11AB\u1103\u1162",
                "\u1107\u1161\u11AB\u1103\u1173\u1109\u1175",
                "\u1107\u1161\u11AB\u1106\u1161\u11AF",
                "\u1107\u1161\u11AB\u1107\u1161\u11AF",
                "\u1107\u1161\u11AB\u1109\u1165\u11BC",
                "\u1107\u1161\u11AB\u110B\u1173\u11BC",
                "\u1107\u1161\u11AB\u110C\u1161\u11BC",
                "\u1107\u1161\u11AB\u110C\u116E\u11A8",
                "\u1107\u1161\u11AB\u110C\u1175",
                "\u1107\u1161\u11AB\u110E\u1161\u11AB",
                "\u1107\u1161\u11AE\u110E\u1175\u11B7",
                "\u1107\u1161\u11AF\u1100\u1161\u1105\u1161\u11A8",
                "\u1107\u1161\u11AF\u1100\u1165\u11AF\u110B\u1173\u11B7",
                "\u1107\u1161\u11AF\u1100\u1167\u11AB",
                "\u1107\u1161\u11AF\u1103\u1161\u11AF",
                "\u1107\u1161\u11AF\u1105\u1166",
                "\u1107\u1161\u11AF\u1106\u1169\u11A8",
                "\u1107\u1161\u11AF\u1107\u1161\u1103\u1161\u11A8",
                "\u1107\u1161\u11AF\u1109\u1162\u11BC",
                "\u1107\u1161\u11AF\u110B\u1173\u11B7",
                "\u1107\u1161\u11AF\u110C\u1161\u1100\u116E\u11A8",
                "\u1107\u1161\u11AF\u110C\u1165\u11AB",
                "\u1107\u1161\u11AF\u1110\u1169\u11B8",
                "\u1107\u1161\u11AF\u1111\u116D",
                "\u1107\u1161\u11B7\u1112\u1161\u1102\u1173\u11AF",
                "\u1107\u1161\u11B8\u1100\u1173\u1105\u1173\u11BA",
                "\u1107\u1161\u11B8\u1106\u1161\u11BA",
                "\u1107\u1161\u11B8\u1109\u1161\u11BC",
                "\u1107\u1161\u11B8\u1109\u1169\u11C0",
                "\u1107\u1161\u11BC\u1100\u1173\u11B7",
                "\u1107\u1161\u11BC\u1106\u1167\u11AB",
                "\u1107\u1161\u11BC\u1106\u116E\u11AB",
                "\u1107\u1161\u11BC\u1107\u1161\u1103\u1161\u11A8",
                "\u1107\u1161\u11BC\u1107\u1165\u11B8",
                "\u1107\u1161\u11BC\u1109\u1169\u11BC",
                "\u1107\u1161\u11BC\u1109\u1175\u11A8",
                "\u1107\u1161\u11BC\u110B\u1161\u11AB",
                "\u1107\u1161\u11BC\u110B\u116E\u11AF",
                "\u1107\u1161\u11BC\u110C\u1175",
                "\u1107\u1161\u11BC\u1112\u1161\u11A8",
                "\u1107\u1161\u11BC\u1112\u1162",
                "\u1107\u1161\u11BC\u1112\u1163\u11BC",
                "\u1107\u1162\u1100\u1167\u11BC",
                "\u1107\u1162\u1101\u1169\u11B8",
                "\u1107\u1162\u1103\u1161\u11AF",
                "\u1107\u1162\u1103\u1173\u1106\u1175\u11AB\u1110\u1165\u11AB",
                "\u1107\u1162\u11A8\u1103\u116E\u1109\u1161\u11AB",
                "\u1107\u1162\u11A8\u1109\u1162\u11A8",
                "\u1107\u1162\u11A8\u1109\u1165\u11BC",
                "\u1107\u1162\u11A8\u110B\u1175\u11AB",
                "\u1107\u1162\u11A8\u110C\u1166",
                "\u1107\u1162\u11A8\u1112\u116A\u110C\u1165\u11B7",
                "\u1107\u1165\u1105\u1173\u11BA",
                "\u1107\u1165\u1109\u1165\u11BA",
                "\u1107\u1165\u1110\u1173\u11AB",
                "\u1107\u1165\u11AB\u1100\u1162",
                "\u1107\u1165\u11AB\u110B\u1167\u11A8",
                "\u1107\u1165\u11AB\u110C\u1175",
                "\u1107\u1165\u11AB\u1112\u1169",
                "\u1107\u1165\u11AF\u1100\u1173\u11B7",
                "\u1107\u1165\u11AF\u1105\u1166",
                "\u1107\u1165\u11AF\u110A\u1165",
                "\u1107\u1165\u11B7\u110B\u1171",
                "\u1107\u1165\u11B7\u110B\u1175\u11AB",
                "\u1107\u1165\u11B7\u110C\u116C",
                "\u1107\u1165\u11B8\u1105\u1172\u11AF",
                "\u1107\u1165\u11B8\u110B\u116F\u11AB",
                "\u1107\u1165\u11B8\u110C\u1165\u11A8",
                "\u1107\u1165\u11B8\u110E\u1175\u11A8",
                "\u1107\u1166\u110B\u1175\u110C\u1175\u11BC",
                "\u1107\u1166\u11AF\u1110\u1173",
                "\u1107\u1167\u11AB\u1100\u1167\u11BC",
                "\u1107\u1167\u11AB\u1103\u1169\u11BC",
                "\u1107\u1167\u11AB\u1106\u1167\u11BC",
                "\u1107\u1167\u11AB\u1109\u1175\u11AB",
                "\u1107\u1167\u11AB\u1112\u1169\u1109\u1161",
                "\u1107\u1167\u11AB\u1112\u116A",
                "\u1107\u1167\u11AF\u1103\u1169",
                "\u1107\u1167\u11AF\u1106\u1167\u11BC",
                "\u1107\u1167\u11AF\u110B\u1175\u11AF",
                "\u1107\u1167\u11BC\u1109\u1175\u11AF",
                "\u1107\u1167\u11BC\u110B\u1161\u1105\u1175",
                "\u1107\u1167\u11BC\u110B\u116F\u11AB",
                "\u1107\u1169\u1100\u116A\u11AB",
                "\u1107\u1169\u1102\u1165\u1109\u1173",
                "\u1107\u1169\u1105\u1161\u1109\u1162\u11A8",
                "\u1107\u1169\u1105\u1161\u11B7",
                "\u1107\u1169\u1105\u1173\u11B7",
                "\u1107\u1169\u1109\u1161\u11BC",
                "\u1107\u1169\u110B\u1161\u11AB",
                "\u1107\u1169\u110C\u1161\u1100\u1175",
                "\u1107\u1169\u110C\u1161\u11BC",
                "\u1107\u1169\u110C\u1165\u11AB",
                "\u1107\u1169\u110C\u1169\u11AB",
                "\u1107\u1169\u1110\u1169\u11BC",
                "\u1107\u1169\u1111\u1167\u11AB\u110C\u1165\u11A8",
                "\u1107\u1169\u1112\u1165\u11B7",
                "\u1107\u1169\u11A8\u1103\u1169",
                "\u1107\u1169\u11A8\u1109\u1161",
                "\u1107\u1169\u11A8\u1109\u116E\u11BC\u110B\u1161",
                "\u1107\u1169\u11A8\u1109\u1173\u11B8",
                "\u1107\u1169\u11A9\u110B\u1173\u11B7",
                "\u1107\u1169\u11AB\u1100\u1167\u11A8\u110C\u1165\u11A8",
                "\u1107\u1169\u11AB\u1105\u1162",
                "\u1107\u1169\u11AB\u1107\u116E",
                "\u1107\u1169\u11AB\u1109\u1161",
                "\u1107\u1169\u11AB\u1109\u1165\u11BC",
                "\u1107\u1169\u11AB\u110B\u1175\u11AB",
                "\u1107\u1169\u11AB\u110C\u1175\u11AF",
                "\u1107\u1169\u11AF\u1111\u1166\u11AB",
                "\u1107\u1169\u11BC\u1109\u1161",
                "\u1107\u1169\u11BC\u110C\u1175",
                "\u1107\u1169\u11BC\u1110\u116E",
                "\u1107\u116E\u1100\u1173\u11AB",
                "\u1107\u116E\u1101\u1173\u1105\u1165\u110B\u116E\u11B7",
                "\u1107\u116E\u1103\u1161\u11B7",
                "\u1107\u116E\u1103\u1169\u11BC\u1109\u1161\u11AB",
                "\u1107\u116E\u1106\u116E\u11AB",
                "\u1107\u116E\u1107\u116E\u11AB",
                "\u1107\u116E\u1109\u1161\u11AB",
                "\u1107\u116E\u1109\u1161\u11BC",
                "\u1107\u116E\u110B\u1165\u11BF",
                "\u1107\u116E\u110B\u1175\u11AB",
                "\u1107\u116E\u110C\u1161\u11A8\u110B\u116D\u11BC",
                "\u1107\u116E\u110C\u1161\u11BC",
                "\u1107\u116E\u110C\u1165\u11BC",
                "\u1107\u116E\u110C\u1169\u11A8",
                "\u1107\u116E\u110C\u1175\u1105\u1165\u11AB\u1112\u1175",
                "\u1107\u116E\u110E\u1175\u11AB",
                "\u1107\u116E\u1110\u1161\u11A8",
                "\u1107\u116E\u1111\u116E\u11B7",
                "\u1107\u116E\u1112\u116C\u110C\u1161\u11BC",
                "\u1107\u116E\u11A8\u1107\u116E",
                "\u1107\u116E\u11A8\u1112\u1161\u11AB",
                "\u1107\u116E\u11AB\u1102\u1169",
                "\u1107\u116E\u11AB\u1105\u1163\u11BC",
                "\u1107\u116E\u11AB\u1105\u1175",
                "\u1107\u116E\u11AB\u1106\u1167\u11BC",
                "\u1107\u116E\u11AB\u1109\u1165\u11A8",
                "\u1107\u116E\u11AB\u110B\u1163",
                "\u1107\u116E\u11AB\u110B\u1171\u1100\u1175",
                "\u1107\u116E\u11AB\u1111\u1175\u11AF",
                "\u1107\u116E\u11AB\u1112\u1169\u11BC\u1109\u1162\u11A8",
                "\u1107\u116E\u11AF\u1100\u1169\u1100\u1175",
                "\u1107\u116E\u11AF\u1100\u116A",
                "\u1107\u116E\u11AF\u1100\u116D",
                "\u1107\u116E\u11AF\u1101\u1169\u11BE",
                "\u1107\u116E\u11AF\u1106\u1161\u11AB",
                "\u1107\u116E\u11AF\u1107\u1165\u11B8",
                "\u1107\u116E\u11AF\u1107\u1175\u11BE",
                "\u1107\u116E\u11AF\u110B\u1161\u11AB",
                "\u1107\u116E\u11AF\u110B\u1175\u110B\u1175\u11A8",
                "\u1107\u116E\u11AF\u1112\u1162\u11BC",
                "\u1107\u1173\u1105\u1162\u11AB\u1103\u1173",
                "\u1107\u1175\u1100\u1173\u11A8",
                "\u1107\u1175\u1102\u1161\u11AB",
                "\u1107\u1175\u1102\u1175\u11AF",
                "\u1107\u1175\u1103\u116E\u11AF\u1100\u1175",
                "\u1107\u1175\u1103\u1175\u110B\u1169",
                "\u1107\u1175\u1105\u1169\u1109\u1169",
                "\u1107\u1175\u1106\u1161\u11AB",
                "\u1107\u1175\u1106\u1167\u11BC",
                "\u1107\u1175\u1106\u1175\u11AF",
                "\u1107\u1175\u1107\u1161\u1105\u1161\u11B7",
                "\u1107\u1175\u1107\u1175\u11B7\u1107\u1161\u11B8",
                "\u1107\u1175\u1109\u1161\u11BC",
                "\u1107\u1175\u110B\u116D\u11BC",
                "\u1107\u1175\u110B\u1172\u11AF",
                "\u1107\u1175\u110C\u116E\u11BC",
                "\u1107\u1175\u1110\u1161\u1106\u1175\u11AB",
                "\u1107\u1175\u1111\u1161\u11AB",
                "\u1107\u1175\u11AF\u1103\u1175\u11BC",
                "\u1107\u1175\u11BA\u1106\u116E\u11AF",
                "\u1107\u1175\u11BA\u1107\u1161\u11BC\u110B\u116E\u11AF",
                "\u1107\u1175\u11BA\u110C\u116E\u11AF\u1100\u1175",
                "\u1107\u1175\u11BE\u1101\u1161\u11AF",
                "\u1108\u1161\u11AF\u1100\u1161\u11AB\u1109\u1162\u11A8",
                "\u1108\u1161\u11AF\u1105\u1162",
                "\u1108\u1161\u11AF\u1105\u1175",
                "\u1109\u1161\u1100\u1165\u11AB",
                "\u1109\u1161\u1100\u1168\u110C\u1165\u11AF",
                "\u1109\u1161\u1102\u1161\u110B\u1175",
                "\u1109\u1161\u1102\u1163\u11BC",
                "\u1109\u1161\u1105\u1161\u11B7",
                "\u1109\u1161\u1105\u1161\u11BC",
                "\u1109\u1161\u1105\u1175\u11B8",
                "\u1109\u1161\u1106\u1169\u1102\u1175\u11B7",
                "\u1109\u1161\u1106\u116E\u11AF",
                "\u1109\u1161\u1107\u1161\u11BC",
                "\u1109\u1161\u1109\u1161\u11BC",
                "\u1109\u1161\u1109\u1162\u11BC\u1112\u116A\u11AF",
                "\u1109\u1161\u1109\u1165\u11AF",
                "\u1109\u1161\u1109\u1173\u11B7",
                "\u1109\u1161\u1109\u1175\u11AF",
                "\u1109\u1161\u110B\u1165\u11B8",
                "\u1109\u1161\u110B\u116D\u11BC",
                "\u1109\u1161\u110B\u116F\u11AF",
                "\u1109\u1161\u110C\u1161\u11BC",
                "\u1109\u1161\u110C\u1165\u11AB",
                "\u1109\u1161\u110C\u1175\u11AB",
                "\u1109\u1161\u110E\u1169\u11AB",
                "\u1109\u1161\u110E\u116E\u11AB\u1100\u1175",
                "\u1109\u1161\u1110\u1161\u11BC",
                "\u1109\u1161\u1110\u116E\u1105\u1175",
                "\u1109\u1161\u1112\u1173\u11AF",
                "\u1109\u1161\u11AB\u1100\u1175\u11AF",
                "\u1109\u1161\u11AB\u1107\u116E\u110B\u1175\u11AB\u1100\u116A",
                "\u1109\u1161\u11AB\u110B\u1165\u11B8",
                "\u1109\u1161\u11AB\u110E\u1162\u11A8",
                "\u1109\u1161\u11AF\u1105\u1175\u11B7",
                "\u1109\u1161\u11AF\u110B\u1175\u11AB",
                "\u1109\u1161\u11AF\u110D\u1161\u11A8",
                "\u1109\u1161\u11B7\u1100\u1168\u1110\u1161\u11BC",
                "\u1109\u1161\u11B7\u1100\u116E\u11A8",
                "\u1109\u1161\u11B7\u1109\u1175\u11B8",
                "\u1109\u1161\u11B7\u110B\u116F\u11AF",
                "\u1109\u1161\u11B7\u110E\u1169\u11AB",
                "\u1109\u1161\u11BC\u1100\u116A\u11AB",
                "\u1109\u1161\u11BC\u1100\u1173\u11B7",
                "\u1109\u1161\u11BC\u1103\u1162",
                "\u1109\u1161\u11BC\u1105\u1172",
                "\u1109\u1161\u11BC\u1107\u1161\u11AB\u1100\u1175",
                "\u1109\u1161\u11BC\u1109\u1161\u11BC",
                "\u1109\u1161\u11BC\u1109\u1175\u11A8",
                "\u1109\u1161\u11BC\u110B\u1165\u11B8",
                "\u1109\u1161\u11BC\u110B\u1175\u11AB",
                "\u1109\u1161\u11BC\u110C\u1161",
                "\u1109\u1161\u11BC\u110C\u1165\u11B7",
                "\u1109\u1161\u11BC\u110E\u1165",
                "\u1109\u1161\u11BC\u110E\u116E",
                "\u1109\u1161\u11BC\u1110\u1162",
                "\u1109\u1161\u11BC\u1111\u116D",
                "\u1109\u1161\u11BC\u1111\u116E\u11B7",
                "\u1109\u1161\u11BC\u1112\u116A\u11BC",
                "\u1109\u1162\u1107\u1167\u11A8",
                "\u1109\u1162\u11A8\u1101\u1161\u11AF",
                "\u1109\u1162\u11A8\u110B\u1167\u11AB\u1111\u1175\u11AF",
                "\u1109\u1162\u11BC\u1100\u1161\u11A8",
                "\u1109\u1162\u11BC\u1106\u1167\u11BC",
                "\u1109\u1162\u11BC\u1106\u116E\u11AF",
                "\u1109\u1162\u11BC\u1107\u1161\u11BC\u1109\u1169\u11BC",
                "\u1109\u1162\u11BC\u1109\u1161\u11AB",
                "\u1109\u1162\u11BC\u1109\u1165\u11AB",
                "\u1109\u1162\u11BC\u1109\u1175\u11AB",
                "\u1109\u1162\u11BC\u110B\u1175\u11AF",
                "\u1109\u1162\u11BC\u1112\u116A\u11AF",
                "\u1109\u1165\u1105\u1161\u11B8",
                "\u1109\u1165\u1105\u1173\u11AB",
                "\u1109\u1165\u1106\u1167\u11BC",
                "\u1109\u1165\u1106\u1175\u11AB",
                "\u1109\u1165\u1107\u1175\u1109\u1173",
                "\u1109\u1165\u110B\u1163\u11BC",
                "\u1109\u1165\u110B\u116E\u11AF",
                "\u1109\u1165\u110C\u1165\u11A8",
                "\u1109\u1165\u110C\u1165\u11B7",
                "\u1109\u1165\u110D\u1169\u11A8",
                "\u1109\u1165\u110F\u1173\u11AF",
                "\u1109\u1165\u11A8\u1109\u1161",
                "\u1109\u1165\u11A8\u110B\u1172",
                "\u1109\u1165\u11AB\u1100\u1165",
                "\u1109\u1165\u11AB\u1106\u116E\u11AF",
                "\u1109\u1165\u11AB\u1107\u1162",
                "\u1109\u1165\u11AB\u1109\u1162\u11BC",
                "\u1109\u1165\u11AB\u1109\u116E",
                "\u1109\u1165\u11AB\u110B\u116F\u11AB",
                "\u1109\u1165\u11AB\u110C\u1161\u11BC",
                "\u1109\u1165\u11AB\u110C\u1165\u11AB",
                "\u1109\u1165\u11AB\u1110\u1162\u11A8",
                "\u1109\u1165\u11AB\u1111\u116E\u11BC\u1100\u1175",
                "\u1109\u1165\u11AF\u1100\u1165\u110C\u1175",
                "\u1109\u1165\u11AF\u1102\u1161\u11AF",
                "\u1109\u1165\u11AF\u1105\u1165\u11BC\u1110\u1161\u11BC",
                "\u1109\u1165\u11AF\u1106\u1167\u11BC",
                "\u1109\u1165\u11AF\u1106\u116E\u11AB",
                "\u1109\u1165\u11AF\u1109\u1161",
                "\u1109\u1165\u11AF\u110B\u1161\u11A8\u1109\u1161\u11AB",
                "\u1109\u1165\u11AF\u110E\u1175",
                "\u1109\u1165\u11AF\u1110\u1161\u11BC",
                "\u1109\u1165\u11B8\u110A\u1175",
                "\u1109\u1165\u11BC\u1100\u1169\u11BC",
                "\u1109\u1165\u11BC\u1103\u1161\u11BC",
                "\u1109\u1165\u11BC\u1106\u1167\u11BC",
                "\u1109\u1165\u11BC\u1107\u1167\u11AF",
                "\u1109\u1165\u11BC\u110B\u1175\u11AB",
                "\u1109\u1165\u11BC\u110C\u1161\u11BC",
                "\u1109\u1165\u11BC\u110C\u1165\u11A8",
                "\u1109\u1165\u11BC\u110C\u1175\u11AF",
                "\u1109\u1165\u11BC\u1112\u1161\u11B7",
                "\u1109\u1166\u1100\u1173\u11B7",
                "\u1109\u1166\u1106\u1175\u1102\u1161",
                "\u1109\u1166\u1109\u1161\u11BC",
                "\u1109\u1166\u110B\u116F\u11AF",
                "\u1109\u1166\u110C\u1169\u11BC\u1103\u1162\u110B\u116A\u11BC",
                "\u1109\u1166\u1110\u1161\u11A8",
                "\u1109\u1166\u11AB\u1110\u1165",
                "\u1109\u1166\u11AB\u1110\u1175\u1106\u1175\u1110\u1165",
                "\u1109\u1166\u11BA\u110D\u1162",
                "\u1109\u1169\u1100\u1172\u1106\u1169",
                "\u1109\u1169\u1100\u1173\u11A8\u110C\u1165\u11A8",
                "\u1109\u1169\u1100\u1173\u11B7",
                "\u1109\u1169\u1102\u1161\u1100\u1175",
                "\u1109\u1169\u1102\u1167\u11AB",
                "\u1109\u1169\u1103\u1173\u11A8",
                "\u1109\u1169\u1106\u1161\u11BC",
                "\u1109\u1169\u1106\u116E\u11AB",
                "\u1109\u1169\u1109\u1165\u11AF",
                "\u1109\u1169\u1109\u1169\u11A8",
                "\u1109\u1169\u110B\u1161\u1100\u116A",
                "\u1109\u1169\u110B\u116D\u11BC",
                "\u1109\u1169\u110B\u116F\u11AB",
                "\u1109\u1169\u110B\u1173\u11B7",
                "\u1109\u1169\u110C\u116E\u11BC\u1112\u1175",
                "\u1109\u1169\u110C\u1175\u1111\u116E\u11B7",
                "\u1109\u1169\u110C\u1175\u11AF",
                "\u1109\u1169\u1111\u116E\u11BC",
                "\u1109\u1169\u1112\u1167\u11BC",
                "\u1109\u1169\u11A8\u1103\u1161\u11B7",
                "\u1109\u1169\u11A8\u1103\u1169",
                "\u1109\u1169\u11A8\u110B\u1169\u11BA",
                "\u1109\u1169\u11AB\u1100\u1161\u1105\u1161\u11A8",
                "\u1109\u1169\u11AB\u1100\u1175\u11AF",
                "\u1109\u1169\u11AB\u1102\u1167",
                "\u1109\u1169\u11AB\u1102\u1175\u11B7",
                "\u1109\u1169\u11AB\u1103\u1173\u11BC",
                "\u1109\u1169\u11AB\u1106\u1169\u11A8",
                "\u1109\u1169\u11AB\u1108\u1167\u11A8",
                "\u1109\u1169\u11AB\u1109\u1175\u11AF",
                "\u1109\u1169\u11AB\u110C\u1175\u11AF",
                "\u1109\u1169\u11AB\u1110\u1169\u11B8",
                "\u1109\u1169\u11AB\u1112\u1162",
                "\u1109\u1169\u11AF\u110C\u1175\u11A8\u1112\u1175",
                "\u1109\u1169\u11B7\u110A\u1175",
                "\u1109\u1169\u11BC\u110B\u1161\u110C\u1175",
                "\u1109\u1169\u11BC\u110B\u1175",
                "\u1109\u1169\u11BC\u1111\u1167\u11AB",
                "\u1109\u116C\u1100\u1169\u1100\u1175",
                "\u1109\u116D\u1111\u1175\u11BC",
                "\u1109\u116E\u1100\u1165\u11AB",
                "\u1109\u116E\u1102\u1167\u11AB",
                "\u1109\u116E\u1103\u1161\u11AB",
                "\u1109\u116E\u1103\u1169\u11BA\u1106\u116E\u11AF",
                "\u1109\u116E\u1103\u1169\u11BC\u110C\u1165\u11A8",
                "\u1109\u116E\u1106\u1167\u11AB",
                "\u1109\u116E\u1106\u1167\u11BC",
                "\u1109\u116E\u1107\u1161\u11A8",
                "\u1109\u116E\u1109\u1161\u11BC",
                "\u1109\u116E\u1109\u1165\u11A8",
                "\u1109\u116E\u1109\u116E\u11AF",
                "\u1109\u116E\u1109\u1175\u1105\u1169",
                "\u1109\u116E\u110B\u1165\u11B8",
                "\u1109\u116E\u110B\u1167\u11B7",
                "\u1109\u116E\u110B\u1167\u11BC",
                "\u1109\u116E\u110B\u1175\u11B8",
                "\u1109\u116E\u110C\u116E\u11AB",
                "\u1109\u116E\u110C\u1175\u11B8",
                "\u1109\u116E\u110E\u116E\u11AF",
                "\u1109\u116E\u110F\u1165\u11BA",
                "\u1109\u116E\u1111\u1175\u11AF",
                "\u1109\u116E\u1112\u1161\u11A8",
                "\u1109\u116E\u1112\u1165\u11B7\u1109\u1162\u11BC",
                "\u1109\u116E\u1112\u116A\u1100\u1175",
                "\u1109\u116E\u11A8\u1102\u1167",
                "\u1109\u116E\u11A8\u1109\u1169",
                "\u1109\u116E\u11A8\u110C\u1166",
                "\u1109\u116E\u11AB\u1100\u1161\u11AB",
                "\u1109\u116E\u11AB\u1109\u1165",
                "\u1109\u116E\u11AB\u1109\u116E",
                "\u1109\u116E\u11AB\u1109\u1175\u11A8\u1100\u1161\u11AB",
                "\u1109\u116E\u11AB\u110B\u1171",
                "\u1109\u116E\u11AE\u1100\u1161\u1105\u1161\u11A8",
                "\u1109\u116E\u11AF\u1107\u1167\u11BC",
                "\u1109\u116E\u11AF\u110C\u1175\u11B8",
                "\u1109\u116E\u11BA\u110C\u1161",
                "\u1109\u1173\u1102\u1175\u11B7",
                "\u1109\u1173\u1106\u116E\u11AF",
                "\u1109\u1173\u1109\u1173\u1105\u1169",
                "\u1109\u1173\u1109\u1173\u11BC",
                "\u1109\u1173\u110B\u1170\u1110\u1165",
                "\u1109\u1173\u110B\u1171\u110E\u1175",
                "\u1109\u1173\u110F\u1166\u110B\u1175\u1110\u1173",
                "\u1109\u1173\u1110\u1172\u1103\u1175\u110B\u1169",
                "\u1109\u1173\u1110\u1173\u1105\u1166\u1109\u1173",
                "\u1109\u1173\u1111\u1169\u110E\u1173",
                "\u1109\u1173\u11AF\u110D\u1165\u11A8",
                "\u1109\u1173\u11AF\u1111\u1173\u11B7",
                "\u1109\u1173\u11B8\u1100\u116A\u11AB",
                "\u1109\u1173\u11B8\u1100\u1175",
                "\u1109\u1173\u11BC\u1100\u1162\u11A8",
                "\u1109\u1173\u11BC\u1105\u1175",
                "\u1109\u1173\u11BC\u1107\u116E",
                "\u1109\u1173\u11BC\u110B\u116D\u11BC\u110E\u1161",
                "\u1109\u1173\u11BC\u110C\u1175\u11AB",
                "\u1109\u1175\u1100\u1161\u11A8",
                "\u1109\u1175\u1100\u1161\u11AB",
                "\u1109\u1175\u1100\u1169\u11AF",
                "\u1109\u1175\u1100\u1173\u11B7\u110E\u1175",
                "\u1109\u1175\u1102\u1161\u1105\u1175\u110B\u1169",
                "\u1109\u1175\u1103\u1162\u11A8",
                "\u1109\u1175\u1105\u1175\u110C\u1173",
                "\u1109\u1175\u1106\u1166\u11AB\u1110\u1173",
                "\u1109\u1175\u1106\u1175\u11AB",
                "\u1109\u1175\u1107\u116E\u1106\u1169",
                "\u1109\u1175\u1109\u1165\u11AB",
                "\u1109\u1175\u1109\u1165\u11AF",
                "\u1109\u1175\u1109\u1173\u1110\u1166\u11B7",
                "\u1109\u1175\u110B\u1161\u1107\u1165\u110C\u1175",
                "\u1109\u1175\u110B\u1165\u1106\u1165\u1102\u1175",
                "\u1109\u1175\u110B\u116F\u11AF",
                "\u1109\u1175\u110B\u1175\u11AB",
                "\u1109\u1175\u110B\u1175\u11AF",
                "\u1109\u1175\u110C\u1161\u11A8",
                "\u1109\u1175\u110C\u1161\u11BC",
                "\u1109\u1175\u110C\u1165\u11AF",
                "\u1109\u1175\u110C\u1165\u11B7",
                "\u1109\u1175\u110C\u116E\u11BC",
                "\u1109\u1175\u110C\u1173\u11AB",
                "\u1109\u1175\u110C\u1175\u11B8",
                "\u1109\u1175\u110E\u1165\u11BC",
                "\u1109\u1175\u1112\u1161\u11B8",
                "\u1109\u1175\u1112\u1165\u11B7",
                "\u1109\u1175\u11A8\u1100\u116E",
                "\u1109\u1175\u11A8\u1100\u1175",
                "\u1109\u1175\u11A8\u1103\u1161\u11BC",
                "\u1109\u1175\u11A8\u1105\u1163\u11BC",
                "\u1109\u1175\u11A8\u1105\u116D\u1111\u116E\u11B7",
                "\u1109\u1175\u11A8\u1106\u116E\u11AF",
                "\u1109\u1175\u11A8\u1108\u1161\u11BC",
                "\u1109\u1175\u11A8\u1109\u1161",
                "\u1109\u1175\u11A8\u1109\u1162\u11BC\u1112\u116A\u11AF",
                "\u1109\u1175\u11A8\u110E\u1169",
                "\u1109\u1175\u11A8\u1110\u1161\u11A8",
                "\u1109\u1175\u11A8\u1111\u116E\u11B7",
                "\u1109\u1175\u11AB\u1100\u1169",
                "\u1109\u1175\u11AB\u1100\u1172",
                "\u1109\u1175\u11AB\u1102\u1167\u11B7",
                "\u1109\u1175\u11AB\u1106\u116E\u11AB",
                "\u1109\u1175\u11AB\u1107\u1161\u11AF",
                "\u1109\u1175\u11AB\u1107\u1175",
                "\u1109\u1175\u11AB\u1109\u1161",
                "\u1109\u1175\u11AB\u1109\u1166",
                "\u1109\u1175\u11AB\u110B\u116D\u11BC",
                "\u1109\u1175\u11AB\u110C\u1166\u1111\u116E\u11B7",
                "\u1109\u1175\u11AB\u110E\u1165\u11BC",
                "\u1109\u1175\u11AB\u110E\u1166",
                "\u1109\u1175\u11AB\u1112\u116A",
                "\u1109\u1175\u11AF\u1100\u1161\u11B7",
                "\u1109\u1175\u11AF\u1102\u1162",
                "\u1109\u1175\u11AF\u1105\u1167\u11A8",
                "\u1109\u1175\u11AF\u1105\u1168",
                "\u1109\u1175\u11AF\u1106\u1161\u11BC",
                "\u1109\u1175\u11AF\u1109\u116E",
                "\u1109\u1175\u11AF\u1109\u1173\u11B8",
                "\u1109\u1175\u11AF\u1109\u1175",
                "\u1109\u1175\u11AF\u110C\u1161\u11BC",
                "\u1109\u1175\u11AF\u110C\u1165\u11BC",
                "\u1109\u1175\u11AF\u110C\u1175\u11AF\u110C\u1165\u11A8",
                "\u1109\u1175\u11AF\u110E\u1165\u11AB",
                "\u1109\u1175\u11AF\u110E\u1166",
                "\u1109\u1175\u11AF\u110F\u1165\u11BA",
                "\u1109\u1175\u11AF\u1110\u1162",
                "\u1109\u1175\u11AF\u1111\u1162",
                "\u1109\u1175\u11AF\u1112\u1165\u11B7",
                "\u1109\u1175\u11AF\u1112\u1167\u11AB",
                "\u1109\u1175\u11B7\u1105\u1175",
                "\u1109\u1175\u11B7\u1107\u116E\u1105\u1173\u11B7",
                "\u1109\u1175\u11B7\u1109\u1161",
                "\u1109\u1175\u11B7\u110C\u1161\u11BC",
                "\u1109\u1175\u11B7\u110C\u1165\u11BC",
                "\u1109\u1175\u11B7\u1111\u1161\u11AB",
                "\u110A\u1161\u11BC\u1103\u116E\u11BC\u110B\u1175",
                "\u110A\u1175\u1105\u1173\u11B7",
                "\u110A\u1175\u110B\u1161\u11BA",
                "\u110B\u1161\u1100\u1161\u110A\u1175",
                "\u110B\u1161\u1102\u1161\u110B\u116E\u11AB\u1109\u1165",
                "\u110B\u1161\u1103\u1173\u1102\u1175\u11B7",
                "\u110B\u1161\u1103\u1173\u11AF",
                "\u110B\u1161\u1109\u1171\u110B\u116E\u11B7",
                "\u110B\u1161\u1109\u1173\u1111\u1161\u11AF\u1110\u1173",
                "\u110B\u1161\u1109\u1175\u110B\u1161",
                "\u110B\u1161\u110B\u116E\u11AF\u1105\u1165",
                "\u110B\u1161\u110C\u1165\u110A\u1175",
                "\u110B\u1161\u110C\u116E\u11B7\u1106\u1161",
                "\u110B\u1161\u110C\u1175\u11A8",
                "\u110B\u1161\u110E\u1175\u11B7",
                "\u110B\u1161\u1111\u1161\u1110\u1173",
                "\u110B\u1161\u1111\u1173\u1105\u1175\u110F\u1161",
                "\u110B\u1161\u1111\u1173\u11B7",
                "\u110B\u1161\u1112\u1169\u11B8",
                "\u110B\u1161\u1112\u1173\u11AB",
                "\u110B\u1161\u11A8\u1100\u1175",
                "\u110B\u1161\u11A8\u1106\u1169\u11BC",
                "\u110B\u1161\u11A8\u1109\u116E",
                "\u110B\u1161\u11AB\u1100\u1162",
                "\u110B\u1161\u11AB\u1100\u1167\u11BC",
                "\u110B\u1161\u11AB\u1100\u116A",
                "\u110B\u1161\u11AB\u1102\u1162",
                "\u110B\u1161\u11AB\u1102\u1167\u11BC",
                "\u110B\u1161\u11AB\u1103\u1169\u11BC",
                "\u110B\u1161\u11AB\u1107\u1161\u11BC",
                "\u110B\u1161\u11AB\u1107\u116E",
                "\u110B\u1161\u11AB\u110C\u116E",
                "\u110B\u1161\u11AF\u1105\u116E\u1106\u1175\u1102\u1172\u11B7",
                "\u110B\u1161\u11AF\u110F\u1169\u110B\u1169\u11AF",
                "\u110B\u1161\u11B7\u1109\u1175",
                "\u110B\u1161\u11B7\u110F\u1165\u11BA",
                "\u110B\u1161\u11B8\u1105\u1167\u11A8",
                "\u110B\u1161\u11C1\u1102\u1161\u11AF",
                "\u110B\u1161\u11C1\u1106\u116E\u11AB",
                "\u110B\u1162\u110B\u1175\u11AB",
                "\u110B\u1162\u110C\u1165\u11BC",
                "\u110B\u1162\u11A8\u1109\u116E",
                "\u110B\u1162\u11AF\u1107\u1165\u11B7",
                "\u110B\u1163\u1100\u1161\u11AB",
                "\u110B\u1163\u1103\u1161\u11AB",
                "\u110B\u1163\u110B\u1169\u11BC",
                "\u110B\u1163\u11A8\u1100\u1161\u11AB",
                "\u110B\u1163\u11A8\u1100\u116E\u11A8",
                "\u110B\u1163\u11A8\u1109\u1169\u11A8",
                "\u110B\u1163\u11A8\u1109\u116E",
                "\u110B\u1163\u11A8\u110C\u1165\u11B7",
                "\u110B\u1163\u11A8\u1111\u116E\u11B7",
                "\u110B\u1163\u11A8\u1112\u1169\u11AB\u1102\u1167",
                "\u110B\u1163\u11BC\u1102\u1167\u11B7",
                "\u110B\u1163\u11BC\u1105\u1167\u11A8",
                "\u110B\u1163\u11BC\u1106\u1161\u11AF",
                "\u110B\u1163\u11BC\u1107\u1162\u110E\u116E",
                "\u110B\u1163\u11BC\u110C\u116E",
                "\u110B\u1163\u11BC\u1111\u1161",
                "\u110B\u1165\u1103\u116E\u11B7",
                "\u110B\u1165\u1105\u1167\u110B\u116E\u11B7",
                "\u110B\u1165\u1105\u1173\u11AB",
                "\u110B\u1165\u110C\u1166\u11BA\u1107\u1161\u11B7",
                "\u110B\u1165\u110D\u1162\u11BB\u1103\u1173\u11AB",
                "\u110B\u1165\u110D\u1165\u1103\u1161\u1100\u1161",
                "\u110B\u1165\u110D\u1165\u11AB\u110C\u1175",
                "\u110B\u1165\u11AB\u1102\u1175",
                "\u110B\u1165\u11AB\u1103\u1165\u11A8",
                "\u110B\u1165\u11AB\u1105\u1169\u11AB",
                "\u110B\u1165\u11AB\u110B\u1165",
                "\u110B\u1165\u11AF\u1100\u116E\u11AF",
                "\u110B\u1165\u11AF\u1105\u1173\u11AB",
                "\u110B\u1165\u11AF\u110B\u1173\u11B7",
                "\u110B\u1165\u11AF\u1111\u1175\u11BA",
                "\u110B\u1165\u11B7\u1106\u1161",
                "\u110B\u1165\u11B8\u1106\u116E",
                "\u110B\u1165\u11B8\u110C\u1169\u11BC",
                "\u110B\u1165\u11B8\u110E\u1166",
                "\u110B\u1165\u11BC\u1103\u1165\u11BC\u110B\u1175",
                "\u110B\u1165\u11BC\u1106\u1161\u11BC",
                "\u110B\u1165\u11BC\u1110\u1165\u1105\u1175",
                "\u110B\u1165\u11BD\u1100\u1173\u110C\u1166",
                "\u110B\u1166\u1102\u1165\u110C\u1175",
                "\u110B\u1166\u110B\u1165\u110F\u1165\u11AB",
                "\u110B\u1166\u11AB\u110C\u1175\u11AB",
                "\u110B\u1167\u1100\u1165\u11AB",
                "\u110B\u1167\u1100\u1169\u1109\u1162\u11BC",
                "\u110B\u1167\u1100\u116A\u11AB",
                "\u110B\u1167\u1100\u116E\u11AB",
                "\u110B\u1167\u1100\u116F\u11AB",
                "\u110B\u1167\u1103\u1162\u1109\u1162\u11BC",
                "\u110B\u1167\u1103\u1165\u11B2",
                "\u110B\u1167\u1103\u1169\u11BC\u1109\u1162\u11BC",
                "\u110B\u1167\u1103\u1173\u11AB",
                "\u110B\u1167\u1105\u1169\u11AB",
                "\u110B\u1167\u1105\u1173\u11B7",
                "\u110B\u1167\u1109\u1165\u11BA",
                "\u110B\u1167\u1109\u1165\u11BC",
                "\u110B\u1167\u110B\u116A\u11BC",
                "\u110B\u1167\u110B\u1175\u11AB",
                "\u110B\u1167\u110C\u1165\u11AB\u1112\u1175",
                "\u110B\u1167\u110C\u1175\u11A8\u110B\u116F\u11AB",
                "\u110B\u1167\u1112\u1161\u11A8\u1109\u1162\u11BC",
                "\u110B\u1167\u1112\u1162\u11BC",
                "\u110B\u1167\u11A8\u1109\u1161",
                "\u110B\u1167\u11A8\u1109\u1175",
                "\u110B\u1167\u11A8\u1112\u1161\u11AF",
                "\u110B\u1167\u11AB\u1100\u1167\u11AF",
                "\u110B\u1167\u11AB\u1100\u116E",
                "\u110B\u1167\u11AB\u1100\u1173\u11A8",
                "\u110B\u1167\u11AB\u1100\u1175",
                "\u110B\u1167\u11AB\u1105\u1161\u11A8",
                "\u110B\u1167\u11AB\u1109\u1165\u11AF",
                "\u110B\u1167\u11AB\u1109\u1166",
                "\u110B\u1167\u11AB\u1109\u1169\u11A8",
                "\u110B\u1167\u11AB\u1109\u1173\u11B8",
                "\u110B\u1167\u11AB\u110B\u1162",
                "\u110B\u1167\u11AB\u110B\u1168\u110B\u1175\u11AB",
                "\u110B\u1167\u11AB\u110B\u1175\u11AB",
                "\u110B\u1167\u11AB\u110C\u1161\u11BC",
                "\u110B\u1167\u11AB\u110C\u116E",
                "\u110B\u1167\u11AB\u110E\u116E\u11AF",
                "\u110B\u1167\u11AB\u1111\u1175\u11AF",
                "\u110B\u1167\u11AB\u1112\u1161\u11B8",
                "\u110B\u1167\u11AB\u1112\u1172",
                "\u110B\u1167\u11AF\u1100\u1175",
                "\u110B\u1167\u11AF\u1106\u1162",
                "\u110B\u1167\u11AF\u1109\u116C",
                "\u110B\u1167\u11AF\u1109\u1175\u11B7\u1112\u1175",
                "\u110B\u1167\u11AF\u110C\u1165\u11BC",
                "\u110B\u1167\u11AF\u110E\u1161",
                "\u110B\u1167\u11AF\u1112\u1173\u11AF",
                "\u110B\u1167\u11B7\u1105\u1167",
                "\u110B\u1167\u11B8\u1109\u1165",
                "\u110B\u1167\u11BC\u1100\u116E\u11A8",
                "\u110B\u1167\u11BC\u1102\u1161\u11B7",
                "\u110B\u1167\u11BC\u1109\u1161\u11BC",
                "\u110B\u1167\u11BC\u110B\u1163\u11BC",
                "\u110B\u1167\u11BC\u110B\u1167\u11A8",
                "\u110B\u1167\u11BC\u110B\u116E\u11BC",
                "\u110B\u1167\u11BC\u110B\u116F\u11AB\u1112\u1175",
                "\u110B\u1167\u11BC\u1112\u1161",
                "\u110B\u1167\u11BC\u1112\u1163\u11BC",
                "\u110B\u1167\u11BC\u1112\u1169\u11AB",
                "\u110B\u1167\u11BC\u1112\u116A",
                "\u110B\u1167\u11C1\u1100\u116E\u1105\u1175",
                "\u110B\u1167\u11C1\u1107\u1161\u11BC",
                "\u110B\u1167\u11C1\u110C\u1175\u11B8",
                "\u110B\u1168\u1100\u1161\u11B7",
                "\u110B\u1168\u1100\u1173\u11B7",
                "\u110B\u1168\u1107\u1161\u11BC",
                "\u110B\u1168\u1109\u1161\u11AB",
                "\u110B\u1168\u1109\u1161\u11BC",
                "\u110B\u1168\u1109\u1165\u11AB",
                "\u110B\u1168\u1109\u116E\u11AF",
                "\u110B\u1168\u1109\u1173\u11B8",
                "\u110B\u1168\u1109\u1175\u11A8\u110C\u1161\u11BC",
                "\u110B\u1168\u110B\u1163\u11A8",
                "\u110B\u1168\u110C\u1165\u11AB",
                "\u110B\u1168\u110C\u1165\u11AF",
                "\u110B\u1168\u110C\u1165\u11BC",
                "\u110B\u1168\u110F\u1165\u11AB\u1103\u1162",
                "\u110B\u1168\u11BA\u1102\u1161\u11AF",
                "\u110B\u1169\u1102\u1173\u11AF",
                "\u110B\u1169\u1105\u1161\u11A8",
                "\u110B\u1169\u1105\u1162\u11BA\u1103\u1169\u11BC\u110B\u1161\u11AB",
                "\u110B\u1169\u1105\u1166\u11AB\u110C\u1175",
                "\u110B\u1169\u1105\u1169\u110C\u1175",
                "\u110B\u1169\u1105\u1173\u11AB\u1107\u1161\u11AF",
                "\u110B\u1169\u1107\u1173\u11AB",
                "\u110B\u1169\u1109\u1175\u11B8",
                "\u110B\u1169\u110B\u1167\u11B7",
                "\u110B\u1169\u110B\u116F\u11AF",
                "\u110B\u1169\u110C\u1165\u11AB",
                "\u110B\u1169\u110C\u1175\u11A8",
                "\u110B\u1169\u110C\u1175\u11BC\u110B\u1165",
                "\u110B\u1169\u1111\u1166\u1105\u1161",
                "\u110B\u1169\u1111\u1175\u1109\u1173\u1110\u1166\u11AF",
                "\u110B\u1169\u1112\u1175\u1105\u1167",
                "\u110B\u1169\u11A8\u1109\u1161\u11BC",
                "\u110B\u1169\u11A8\u1109\u116E\u1109\u116E",
                "\u110B\u1169\u11AB\u1100\u1161\u11BD",
                "\u110B\u1169\u11AB\u1105\u1161\u110B\u1175\u11AB",
                "\u110B\u1169\u11AB\u1106\u1169\u11B7",
                "\u110B\u1169\u11AB\u110C\u1169\u11BC\u110B\u1175\u11AF",
                "\u110B\u1169\u11AB\u1110\u1169\u11BC",
                "\u110B\u1169\u11AF\u1100\u1161\u110B\u1173\u11AF",
                "\u110B\u1169\u11AF\u1105\u1175\u11B7\u1111\u1175\u11A8",
                "\u110B\u1169\u11AF\u1112\u1162",
                "\u110B\u1169\u11BA\u110E\u1161\u1105\u1175\u11B7",
                "\u110B\u116A\u110B\u1175\u1109\u1167\u110E\u1173",
                "\u110B\u116A\u110B\u1175\u11AB",
                "\u110B\u116A\u11AB\u1109\u1165\u11BC",
                "\u110B\u116A\u11AB\u110C\u1165\u11AB",
                "\u110B\u116A\u11BC\u1107\u1175",
                "\u110B\u116A\u11BC\u110C\u1161",
                "\u110B\u116B\u1102\u1163\u1112\u1161\u1106\u1167\u11AB",
                "\u110B\u116B\u11AB\u110C\u1175",
                "\u110B\u116C\u1100\u1161\u11BA\u110C\u1175\u11B8",
                "\u110B\u116C\u1100\u116E\u11A8",
                "\u110B\u116C\u1105\u1169\u110B\u116E\u11B7",
                "\u110B\u116C\u1109\u1161\u11B7\u110E\u1169\u11AB",
                "\u110B\u116C\u110E\u116E\u11AF",
                "\u110B\u116C\u110E\u1175\u11B7",
                "\u110B\u116C\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
                "\u110B\u116C\u11AB\u1107\u1161\u11AF",
                "\u110B\u116C\u11AB\u1109\u1169\u11AB",
                "\u110B\u116C\u11AB\u110D\u1169\u11A8",
                "\u110B\u116D\u1100\u1173\u11B7",
                "\u110B\u116D\u110B\u1175\u11AF",
                "\u110B\u116D\u110C\u1173\u11B7",
                "\u110B\u116D\u110E\u1165\u11BC",
                "\u110B\u116D\u11BC\u1100\u1175",
                "\u110B\u116D\u11BC\u1109\u1165",
                "\u110B\u116D\u11BC\u110B\u1165",
                "\u110B\u116E\u1109\u1161\u11AB",
                "\u110B\u116E\u1109\u1165\u11AB",
                "\u110B\u116E\u1109\u1173\u11BC",
                "\u110B\u116E\u110B\u1167\u11AB\u1112\u1175",
                "\u110B\u116E\u110C\u1165\u11BC",
                "\u110B\u116E\u110E\u1166\u1100\u116E\u11A8",
                "\u110B\u116E\u1111\u1167\u11AB",
                "\u110B\u116E\u11AB\u1103\u1169\u11BC",
                "\u110B\u116E\u11AB\u1106\u1167\u11BC",
                "\u110B\u116E\u11AB\u1107\u1161\u11AB",
                "\u110B\u116E\u11AB\u110C\u1165\u11AB",
                "\u110B\u116E\u11AB\u1112\u1162\u11BC",
                "\u110B\u116E\u11AF\u1109\u1161\u11AB",
                "\u110B\u116E\u11AF\u110B\u1173\u11B7",
                "\u110B\u116E\u11B7\u110C\u1175\u11A8\u110B\u1175\u11B7",
                "\u110B\u116E\u11BA\u110B\u1165\u1105\u1173\u11AB",
                "\u110B\u116E\u11BA\u110B\u1173\u11B7",
                "\u110B\u116F\u1102\u1161\u11A8",
                "\u110B\u116F\u11AB\u1100\u1169",
                "\u110B\u116F\u11AB\u1105\u1162",
                "\u110B\u116F\u11AB\u1109\u1165",
                "\u110B\u116F\u11AB\u1109\u116E\u11BC\u110B\u1175",
                "\u110B\u116F\u11AB\u110B\u1175\u11AB",
                "\u110B\u116F\u11AB\u110C\u1161\u11BC",
                "\u110B\u116F\u11AB\u1111\u1175\u1109\u1173",
                "\u110B\u116F\u11AF\u1100\u1173\u11B8",
                "\u110B\u116F\u11AF\u1103\u1173\u110F\u1165\u11B8",
                "\u110B\u116F\u11AF\u1109\u1166",
                "\u110B\u116F\u11AF\u110B\u116D\u110B\u1175\u11AF",
                "\u110B\u1170\u110B\u1175\u1110\u1165",
                "\u110B\u1171\u1107\u1161\u11AB",
                "\u110B\u1171\u1107\u1165\u11B8",
                "\u110B\u1171\u1109\u1165\u11BC",
                "\u110B\u1171\u110B\u116F\u11AB",
                "\u110B\u1171\u1112\u1165\u11B7",
                "\u110B\u1171\u1112\u1167\u11B8",
                "\u110B\u1171\u11BA\u1109\u1161\u1105\u1161\u11B7",
                "\u110B\u1172\u1102\u1161\u11AB\u1112\u1175",
                "\u110B\u1172\u1105\u1165\u11B8",
                "\u110B\u1172\u1106\u1167\u11BC",
                "\u110B\u1172\u1106\u116E\u11AF",
                "\u110B\u1172\u1109\u1161\u11AB",
                "\u110B\u1172\u110C\u1165\u11A8",
                "\u110B\u1172\u110E\u1175\u110B\u116F\u11AB",
                "\u110B\u1172\u1112\u1161\u11A8",
                "\u110B\u1172\u1112\u1162\u11BC",
                "\u110B\u1172\u1112\u1167\u11BC",
                "\u110B\u1172\u11A8\u1100\u116E\u11AB",
                "\u110B\u1172\u11A8\u1109\u1161\u11BC",
                "\u110B\u1172\u11A8\u1109\u1175\u11B8",
                "\u110B\u1172\u11A8\u110E\u1166",
                "\u110B\u1173\u11AB\u1112\u1162\u11BC",
                "\u110B\u1173\u11B7\u1105\u1167\u11A8",
                "\u110B\u1173\u11B7\u1105\u116D",
                "\u110B\u1173\u11B7\u1107\u1161\u11AB",
                "\u110B\u1173\u11B7\u1109\u1165\u11BC",
                "\u110B\u1173\u11B7\u1109\u1175\u11A8",
                "\u110B\u1173\u11B7\u110B\u1161\u11A8",
                "\u110B\u1173\u11B7\u110C\u116E",
                "\u110B\u1174\u1100\u1167\u11AB",
                "\u110B\u1174\u1102\u1169\u11AB",
                "\u110B\u1174\u1106\u116E\u11AB",
                "\u110B\u1174\u1107\u1169\u11A8",
                "\u110B\u1174\u1109\u1175\u11A8",
                "\u110B\u1174\u1109\u1175\u11B7",
                "\u110B\u1174\u110B\u116C\u1105\u1169",
                "\u110B\u1174\u110B\u116D\u11A8",
                "\u110B\u1174\u110B\u116F\u11AB",
                "\u110B\u1174\u1112\u1161\u11A8",
                "\u110B\u1175\u1100\u1165\u11BA",
                "\u110B\u1175\u1100\u1169\u11BA",
                "\u110B\u1175\u1102\u1167\u11B7",
                "\u110B\u1175\u1102\u1169\u11B7",
                "\u110B\u1175\u1103\u1161\u11AF",
                "\u110B\u1175\u1103\u1162\u1105\u1169",
                "\u110B\u1175\u1103\u1169\u11BC",
                "\u110B\u1175\u1105\u1165\u11C2\u1100\u1166",
                "\u110B\u1175\u1105\u1167\u11A8\u1109\u1165",
                "\u110B\u1175\u1105\u1169\u11AB\u110C\u1165\u11A8",
                "\u110B\u1175\u1105\u1173\u11B7",
                "\u110B\u1175\u1106\u1175\u11AB",
                "\u110B\u1175\u1107\u1161\u11AF\u1109\u1169",
                "\u110B\u1175\u1107\u1167\u11AF",
                "\u110B\u1175\u1107\u116E\u11AF",
                "\u110B\u1175\u1108\u1161\u11AF",
                "\u110B\u1175\u1109\u1161\u11BC",
                "\u110B\u1175\u1109\u1165\u11BC",
                "\u110B\u1175\u1109\u1173\u11AF",
                "\u110B\u1175\u110B\u1163\u1100\u1175",
                "\u110B\u1175\u110B\u116D\u11BC",
                "\u110B\u1175\u110B\u116E\u11BA",
                "\u110B\u1175\u110B\u116F\u11AF",
                "\u110B\u1175\u110B\u1173\u11A8\u1100\u1169",
                "\u110B\u1175\u110B\u1175\u11A8",
                "\u110B\u1175\u110C\u1165\u11AB",
                "\u110B\u1175\u110C\u116E\u11BC",
                "\u110B\u1175\u1110\u1173\u11AE\u1102\u1161\u11AF",
                "\u110B\u1175\u1110\u1173\u11AF",
                "\u110B\u1175\u1112\u1169\u11AB",
                "\u110B\u1175\u11AB\u1100\u1161\u11AB",
                "\u110B\u1175\u11AB\u1100\u1167\u11A8",
                "\u110B\u1175\u11AB\u1100\u1169\u11BC",
                "\u110B\u1175\u11AB\u1100\u116E",
                "\u110B\u1175\u11AB\u1100\u1173\u11AB",
                "\u110B\u1175\u11AB\u1100\u1175",
                "\u110B\u1175\u11AB\u1103\u1169",
                "\u110B\u1175\u11AB\u1105\u1172",
                "\u110B\u1175\u11AB\u1106\u116E\u11AF",
                "\u110B\u1175\u11AB\u1109\u1162\u11BC",
                "\u110B\u1175\u11AB\u1109\u116B",
                "\u110B\u1175\u11AB\u110B\u1167\u11AB",
                "\u110B\u1175\u11AB\u110B\u116F\u11AB",
                "\u110B\u1175\u11AB\u110C\u1162",
                "\u110B\u1175\u11AB\u110C\u1169\u11BC",
                "\u110B\u1175\u11AB\u110E\u1165\u11AB",
                "\u110B\u1175\u11AB\u110E\u1166",
                "\u110B\u1175\u11AB\u1110\u1165\u1102\u1166\u11BA",
                "\u110B\u1175\u11AB\u1112\u1161",
                "\u110B\u1175\u11AB\u1112\u1167\u11BC",
                "\u110B\u1175\u11AF\u1100\u1169\u11B8",
                "\u110B\u1175\u11AF\u1100\u1175",
                "\u110B\u1175\u11AF\u1103\u1161\u11AB",
                "\u110B\u1175\u11AF\u1103\u1162",
                "\u110B\u1175\u11AF\u1103\u1173\u11BC",
                "\u110B\u1175\u11AF\u1107\u1161\u11AB",
                "\u110B\u1175\u11AF\u1107\u1169\u11AB",
                "\u110B\u1175\u11AF\u1107\u116E",
                "\u110B\u1175\u11AF\u1109\u1161\u11BC",
                "\u110B\u1175\u11AF\u1109\u1162\u11BC",
                "\u110B\u1175\u11AF\u1109\u1169\u11AB",
                "\u110B\u1175\u11AF\u110B\u116D\u110B\u1175\u11AF",
                "\u110B\u1175\u11AF\u110B\u116F\u11AF",
                "\u110B\u1175\u11AF\u110C\u1165\u11BC",
                "\u110B\u1175\u11AF\u110C\u1169\u11BC",
                "\u110B\u1175\u11AF\u110C\u116E\u110B\u1175\u11AF",
                "\u110B\u1175\u11AF\u110D\u1175\u11A8",
                "\u110B\u1175\u11AF\u110E\u1166",
                "\u110B\u1175\u11AF\u110E\u1175",
                "\u110B\u1175\u11AF\u1112\u1162\u11BC",
                "\u110B\u1175\u11AF\u1112\u116C\u110B\u116D\u11BC",
                "\u110B\u1175\u11B7\u1100\u1173\u11B7",
                "\u110B\u1175\u11B7\u1106\u116E",
                "\u110B\u1175\u11B8\u1103\u1162",
                "\u110B\u1175\u11B8\u1105\u1167\u11A8",
                "\u110B\u1175\u11B8\u1106\u1161\u11BA",
                "\u110B\u1175\u11B8\u1109\u1161",
                "\u110B\u1175\u11B8\u1109\u116E\u11AF",
                "\u110B\u1175\u11B8\u1109\u1175",
                "\u110B\u1175\u11B8\u110B\u116F\u11AB",
                "\u110B\u1175\u11B8\u110C\u1161\u11BC",
                "\u110B\u1175\u11B8\u1112\u1161\u11A8",
                "\u110C\u1161\u1100\u1161\u110B\u116D\u11BC",
                "\u110C\u1161\u1100\u1167\u11A8",
                "\u110C\u1161\u1100\u1173\u11A8",
                "\u110C\u1161\u1103\u1169\u11BC",
                "\u110C\u1161\u1105\u1161\u11BC",
                "\u110C\u1161\u1107\u116E\u1109\u1175\u11B7",
                "\u110C\u1161\u1109\u1175\u11A8",
                "\u110C\u1161\u1109\u1175\u11AB",
                "\u110C\u1161\u110B\u1167\u11AB",
                "\u110C\u1161\u110B\u116F\u11AB",
                "\u110C\u1161\u110B\u1172\u11AF",
                "\u110C\u1161\u110C\u1165\u11AB\u1100\u1165",
                "\u110C\u1161\u110C\u1165\u11BC",
                "\u110C\u1161\u110C\u1169\u11AB\u1109\u1175\u11B7",
                "\u110C\u1161\u1111\u1161\u11AB",
                "\u110C\u1161\u11A8\u1100\u1161",
                "\u110C\u1161\u11A8\u1102\u1167\u11AB",
                "\u110C\u1161\u11A8\u1109\u1165\u11BC",
                "\u110C\u1161\u11A8\u110B\u1165\u11B8",
                "\u110C\u1161\u11A8\u110B\u116D\u11BC",
                "\u110C\u1161\u11A8\u110B\u1173\u11AB\u1104\u1161\u11AF",
                "\u110C\u1161\u11A8\u1111\u116E\u11B7",
                "\u110C\u1161\u11AB\u1103\u1175",
                "\u110C\u1161\u11AB\u1104\u1173\u11A8",
                "\u110C\u1161\u11AB\u110E\u1175",
                "\u110C\u1161\u11AF\u1106\u1169\u11BA",
                "\u110C\u1161\u11B7\u1101\u1161\u11AB",
                "\u110C\u1161\u11B7\u1109\u116E\u1112\u1161\u11B7",
                "\u110C\u1161\u11B7\u1109\u1175",
                "\u110C\u1161\u11B7\u110B\u1169\u11BA",
                "\u110C\u1161\u11B7\u110C\u1161\u1105\u1175",
                "\u110C\u1161\u11B8\u110C\u1175",
                "\u110C\u1161\u11BC\u1100\u116A\u11AB",
                "\u110C\u1161\u11BC\u1100\u116E\u11AB",
                "\u110C\u1161\u11BC\u1100\u1175\u1100\u1161\u11AB",
                "\u110C\u1161\u11BC\u1105\u1162",
                "\u110C\u1161\u11BC\u1105\u1168",
                "\u110C\u1161\u11BC\u1105\u1173",
                "\u110C\u1161\u11BC\u1106\u1161",
                "\u110C\u1161\u11BC\u1106\u1167\u11AB",
                "\u110C\u1161\u11BC\u1106\u1169",
                "\u110C\u1161\u11BC\u1106\u1175",
                "\u110C\u1161\u11BC\u1107\u1175",
                "\u110C\u1161\u11BC\u1109\u1161",
                "\u110C\u1161\u11BC\u1109\u1169",
                "\u110C\u1161\u11BC\u1109\u1175\u11A8",
                "\u110C\u1161\u11BC\u110B\u1162\u110B\u1175\u11AB",
                "\u110C\u1161\u11BC\u110B\u1175\u11AB",
                "\u110C\u1161\u11BC\u110C\u1165\u11B7",
                "\u110C\u1161\u11BC\u110E\u1161",
                "\u110C\u1161\u11BC\u1112\u1161\u11A8\u1100\u1173\u11B7",
                "\u110C\u1162\u1102\u1173\u11BC",
                "\u110C\u1162\u1108\u1161\u11AF\u1105\u1175",
                "\u110C\u1162\u1109\u1161\u11AB",
                "\u110C\u1162\u1109\u1162\u11BC",
                "\u110C\u1162\u110C\u1161\u11A8\u1102\u1167\u11AB",
                "\u110C\u1162\u110C\u1165\u11BC",
                "\u110C\u1162\u110E\u1162\u1100\u1175",
                "\u110C\u1162\u1111\u1161\u11AB",
                "\u110C\u1162\u1112\u1161\u11A8",
                "\u110C\u1162\u1112\u116A\u11AF\u110B\u116D\u11BC",
                "\u110C\u1165\u1100\u1165\u11BA",
                "\u110C\u1165\u1100\u1169\u1105\u1175",
                "\u110C\u1165\u1100\u1169\u11BA",
                "\u110C\u1165\u1102\u1167\u11A8",
                "\u110C\u1165\u1105\u1165\u11AB",
                "\u110C\u1165\u1105\u1165\u11C2\u1100\u1166",
                "\u110C\u1165\u1107\u1165\u11AB",
                "\u110C\u1165\u110B\u116E\u11AF",
                "\u110C\u1165\u110C\u1165\u11AF\u1105\u1169",
                "\u110C\u1165\u110E\u116E\u11A8",
                "\u110C\u1165\u11A8\u1100\u1173\u11A8",
                "\u110C\u1165\u11A8\u1103\u1161\u11BC\u1112\u1175",
                "\u110C\u1165\u11A8\u1109\u1165\u11BC",
                "\u110C\u1165\u11A8\u110B\u116D\u11BC",
                "\u110C\u1165\u11A8\u110B\u1173\u11BC",
                "\u110C\u1165\u11AB\u1100\u1162",
                "\u110C\u1165\u11AB\u1100\u1169\u11BC",
                "\u110C\u1165\u11AB\u1100\u1175",
                "\u110C\u1165\u11AB\u1103\u1161\u11AF",
                "\u110C\u1165\u11AB\u1105\u1161\u1103\u1169",
                "\u110C\u1165\u11AB\u1106\u1161\u11BC",
                "\u110C\u1165\u11AB\u1106\u116E\u11AB",
                "\u110C\u1165\u11AB\u1107\u1161\u11AB",
                "\u110C\u1165\u11AB\u1107\u116E",
                "\u110C\u1165\u11AB\u1109\u1166",
                "\u110C\u1165\u11AB\u1109\u1175",
                "\u110C\u1165\u11AB\u110B\u116D\u11BC",
                "\u110C\u1165\u11AB\u110C\u1161",
                "\u110C\u1165\u11AB\u110C\u1162\u11BC",
                "\u110C\u1165\u11AB\u110C\u116E",
                "\u110C\u1165\u11AB\u110E\u1165\u11AF",
                "\u110C\u1165\u11AB\u110E\u1166",
                "\u110C\u1165\u11AB\u1110\u1169\u11BC",
                "\u110C\u1165\u11AB\u1112\u1167",
                "\u110C\u1165\u11AB\u1112\u116E",
                "\u110C\u1165\u11AF\u1103\u1162",
                "\u110C\u1165\u11AF\u1106\u1161\u11BC",
                "\u110C\u1165\u11AF\u1107\u1161\u11AB",
                "\u110C\u1165\u11AF\u110B\u1163\u11A8",
                "\u110C\u1165\u11AF\u110E\u1161",
                "\u110C\u1165\u11B7\u1100\u1165\u11B7",
                "\u110C\u1165\u11B7\u1109\u116E",
                "\u110C\u1165\u11B7\u1109\u1175\u11B7",
                "\u110C\u1165\u11B7\u110B\u116F\u11AB",
                "\u110C\u1165\u11B7\u110C\u1165\u11B7",
                "\u110C\u1165\u11B7\u110E\u1161",
                "\u110C\u1165\u11B8\u1100\u1173\u11AB",
                "\u110C\u1165\u11B8\u1109\u1175",
                "\u110C\u1165\u11B8\u110E\u1169\u11A8",
                "\u110C\u1165\u11BA\u1100\u1161\u1105\u1161\u11A8",
                "\u110C\u1165\u11BC\u1100\u1165\u110C\u1161\u11BC",
                "\u110C\u1165\u11BC\u1103\u1169",
                "\u110C\u1165\u11BC\u1105\u1172\u110C\u1161\u11BC",
                "\u110C\u1165\u11BC\u1105\u1175",
                "\u110C\u1165\u11BC\u1106\u1161\u11AF",
                "\u110C\u1165\u11BC\u1106\u1167\u11AB",
                "\u110C\u1165\u11BC\u1106\u116E\u11AB",
                "\u110C\u1165\u11BC\u1107\u1161\u11AB\u1103\u1162",
                "\u110C\u1165\u11BC\u1107\u1169",
                "\u110C\u1165\u11BC\u1107\u116E",
                "\u110C\u1165\u11BC\u1107\u1175",
                "\u110C\u1165\u11BC\u1109\u1161\u11BC",
                "\u110C\u1165\u11BC\u1109\u1165\u11BC",
                "\u110C\u1165\u11BC\u110B\u1169",
                "\u110C\u1165\u11BC\u110B\u116F\u11AB",
                "\u110C\u1165\u11BC\u110C\u1161\u11BC",
                "\u110C\u1165\u11BC\u110C\u1175",
                "\u110C\u1165\u11BC\u110E\u1175",
                "\u110C\u1165\u11BC\u1112\u116A\u11A8\u1112\u1175",
                "\u110C\u1166\u1100\u1169\u11BC",
                "\u110C\u1166\u1100\u116A\u110C\u1165\u11B7",
                "\u110C\u1166\u1103\u1162\u1105\u1169",
                "\u110C\u1166\u1106\u1169\u11A8",
                "\u110C\u1166\u1107\u1161\u11AF",
                "\u110C\u1166\u1107\u1165\u11B8",
                "\u110C\u1166\u1109\u1161\u11BA\u1102\u1161\u11AF",
                "\u110C\u1166\u110B\u1161\u11AB",
                "\u110C\u1166\u110B\u1175\u11AF",
                "\u110C\u1166\u110C\u1161\u11A8",
                "\u110C\u1166\u110C\u116E\u1103\u1169",
                "\u110C\u1166\u110E\u116E\u11AF",
                "\u110C\u1166\u1111\u116E\u11B7",
                "\u110C\u1166\u1112\u1161\u11AB",
                "\u110C\u1169\u1100\u1161\u11A8",
                "\u110C\u1169\u1100\u1165\u11AB",
                "\u110C\u1169\u1100\u1173\u11B7",
                "\u110C\u1169\u1100\u1175\u11BC",
                "\u110C\u1169\u1106\u1167\u11BC",
                "\u110C\u1169\u1106\u1175\u1105\u116D",
                "\u110C\u1169\u1109\u1161\u11BC",
                "\u110C\u1169\u1109\u1165\u11AB",
                "\u110C\u1169\u110B\u116D\u11BC\u1112\u1175",
                "\u110C\u1169\u110C\u1165\u11AF",
                "\u110C\u1169\u110C\u1165\u11BC",
                "\u110C\u1169\u110C\u1175\u11A8",
                "\u110C\u1169\u11AB\u1103\u1162\u11BA\u1106\u1161\u11AF",
                "\u110C\u1169\u11AB\u110C\u1162",
                "\u110C\u1169\u11AF\u110B\u1165\u11B8",
                "\u110C\u1169\u11AF\u110B\u1173\u11B7",
                "\u110C\u1169\u11BC\u1100\u116D",
                "\u110C\u1169\u11BC\u1105\u1169",
                "\u110C\u1169\u11BC\u1105\u1172",
                "\u110C\u1169\u11BC\u1109\u1169\u1105\u1175",
                "\u110C\u1169\u11BC\u110B\u1165\u11B8\u110B\u116F\u11AB",
                "\u110C\u1169\u11BC\u110C\u1169\u11BC",
                "\u110C\u1169\u11BC\u1112\u1161\u11B8",
                "\u110C\u116A\u1109\u1165\u11A8",
                "\u110C\u116C\u110B\u1175\u11AB",
                "\u110C\u116E\u1100\u116A\u11AB\u110C\u1165\u11A8",
                "\u110C\u116E\u1105\u1173\u11B7",
                "\u110C\u116E\u1106\u1161\u11AF",
                "\u110C\u116E\u1106\u1165\u1102\u1175",
                "\u110C\u116E\u1106\u1165\u11A8",
                "\u110C\u116E\u1106\u116E\u11AB",
                "\u110C\u116E\u1106\u1175\u11AB",
                "\u110C\u116E\u1107\u1161\u11BC",
                "\u110C\u116E\u1107\u1167\u11AB",
                "\u110C\u116E\u1109\u1175\u11A8",
                "\u110C\u116E\u110B\u1175\u11AB",
                "\u110C\u116E\u110B\u1175\u11AF",
                "\u110C\u116E\u110C\u1161\u11BC",
                "\u110C\u116E\u110C\u1165\u11AB\u110C\u1161",
                "\u110C\u116E\u1110\u1162\u11A8",
                "\u110C\u116E\u11AB\u1107\u1175",
                "\u110C\u116E\u11AF\u1100\u1165\u1105\u1175",
                "\u110C\u116E\u11AF\u1100\u1175",
                "\u110C\u116E\u11AF\u1106\u116E\u1102\u1174",
                "\u110C\u116E\u11BC\u1100\u1161\u11AB",
                "\u110C\u116E\u11BC\u1100\u1168\u1107\u1161\u11BC\u1109\u1169\u11BC",
                "\u110C\u116E\u11BC\u1100\u116E\u11A8",
                "\u110C\u116E\u11BC\u1102\u1167\u11AB",
                "\u110C\u116E\u11BC\u1103\u1161\u11AB",
                "\u110C\u116E\u11BC\u1103\u1169\u11A8",
                "\u110C\u116E\u11BC\u1107\u1161\u11AB",
                "\u110C\u116E\u11BC\u1107\u116E",
                "\u110C\u116E\u11BC\u1109\u1166",
                "\u110C\u116E\u11BC\u1109\u1169\u1100\u1175\u110B\u1165\u11B8",
                "\u110C\u116E\u11BC\u1109\u116E\u11AB",
                "\u110C\u116E\u11BC\u110B\u1161\u11BC",
                "\u110C\u116E\u11BC\u110B\u116D",
                "\u110C\u116E\u11BC\u1112\u1161\u11A8\u1100\u116D",
                "\u110C\u1173\u11A8\u1109\u1165\u11A8",
                "\u110C\u1173\u11A8\u1109\u1175",
                "\u110C\u1173\u11AF\u1100\u1165\u110B\u116E\u11B7",
                "\u110C\u1173\u11BC\u1100\u1161",
                "\u110C\u1173\u11BC\u1100\u1165",
                "\u110C\u1173\u11BC\u1100\u116F\u11AB",
                "\u110C\u1173\u11BC\u1109\u1161\u11BC",
                "\u110C\u1173\u11BC\u1109\u1166",
                "\u110C\u1175\u1100\u1161\u11A8",
                "\u110C\u1175\u1100\u1161\u11B8",
                "\u110C\u1175\u1100\u1167\u11BC",
                "\u110C\u1175\u1100\u1173\u11A8\u1112\u1175",
                "\u110C\u1175\u1100\u1173\u11B7",
                "\u110C\u1175\u1100\u1173\u11B8",
                "\u110C\u1175\u1102\u1173\u11BC",
                "\u110C\u1175\u1105\u1173\u11B7\u1100\u1175\u11AF",
                "\u110C\u1175\u1105\u1175\u1109\u1161\u11AB",
                "\u110C\u1175\u1107\u1161\u11BC",
                "\u110C\u1175\u1107\u116E\u11BC",
                "\u110C\u1175\u1109\u1175\u11A8",
                "\u110C\u1175\u110B\u1167\u11A8",
                "\u110C\u1175\u110B\u116E\u1100\u1162",
                "\u110C\u1175\u110B\u116F\u11AB",
                "\u110C\u1175\u110C\u1165\u11A8",
                "\u110C\u1175\u110C\u1165\u11B7",
                "\u110C\u1175\u110C\u1175\u11AB",
                "\u110C\u1175\u110E\u116E\u11AF",
                "\u110C\u1175\u11A8\u1109\u1165\u11AB",
                "\u110C\u1175\u11A8\u110B\u1165\u11B8",
                "\u110C\u1175\u11A8\u110B\u116F\u11AB",
                "\u110C\u1175\u11A8\u110C\u1161\u11BC",
                "\u110C\u1175\u11AB\u1100\u1173\u11B8",
                "\u110C\u1175\u11AB\u1103\u1169\u11BC",
                "\u110C\u1175\u11AB\u1105\u1169",
                "\u110C\u1175\u11AB\u1105\u116D",
                "\u110C\u1175\u11AB\u1105\u1175",
                "\u110C\u1175\u11AB\u110D\u1161",
                "\u110C\u1175\u11AB\u110E\u1161\u11AF",
                "\u110C\u1175\u11AB\u110E\u116E\u11AF",
                "\u110C\u1175\u11AB\u1110\u1169\u11BC",
                "\u110C\u1175\u11AB\u1112\u1162\u11BC",
                "\u110C\u1175\u11AF\u1106\u116E\u11AB",
                "\u110C\u1175\u11AF\u1107\u1167\u11BC",
                "\u110C\u1175\u11AF\u1109\u1165",
                "\u110C\u1175\u11B7\u110C\u1161\u11A8",
                "\u110C\u1175\u11B8\u1103\u1161\u11AB",
                "\u110C\u1175\u11B8\u110B\u1161\u11AB",
                "\u110C\u1175\u11B8\u110C\u116E\u11BC",
                "\u110D\u1161\u110C\u1173\u11BC",
                "\u110D\u1175\u1101\u1165\u1100\u1175",
                "\u110E\u1161\u1102\u1161\u11B7",
                "\u110E\u1161\u1105\u1161\u1105\u1175",
                "\u110E\u1161\u1105\u1163\u11BC",
                "\u110E\u1161\u1105\u1175\u11B7",
                "\u110E\u1161\u1107\u1167\u11AF",
                "\u110E\u1161\u1109\u1165\u11AB",
                "\u110E\u1161\u110E\u1173\u11B7",
                "\u110E\u1161\u11A8\u1100\u1161\u11A8",
                "\u110E\u1161\u11AB\u1106\u116E\u11AF",
                "\u110E\u1161\u11AB\u1109\u1165\u11BC",
                "\u110E\u1161\u11B7\u1100\u1161",
                "\u110E\u1161\u11B7\u1100\u1175\u1105\u1173\u11B7",
                "\u110E\u1161\u11B7\u1109\u1162",
                "\u110E\u1161\u11B7\u1109\u1165\u11A8",
                "\u110E\u1161\u11B7\u110B\u1167",
                "\u110E\u1161\u11B7\u110B\u116C",
                "\u110E\u1161\u11B7\u110C\u1169",
                "\u110E\u1161\u11BA\u110C\u1161\u11AB",
                "\u110E\u1161\u11BC\u1100\u1161",
                "\u110E\u1161\u11BC\u1100\u1169",
                "\u110E\u1161\u11BC\u1100\u116E",
                "\u110E\u1161\u11BC\u1106\u116E\u11AB",
                "\u110E\u1161\u11BC\u1107\u1161\u11A9",
                "\u110E\u1161\u11BC\u110C\u1161\u11A8",
                "\u110E\u1161\u11BC\u110C\u1169",
                "\u110E\u1162\u1102\u1165\u11AF",
                "\u110E\u1162\u110C\u1165\u11B7",
                "\u110E\u1162\u11A8\u1100\u1161\u1107\u1161\u11BC",
                "\u110E\u1162\u11A8\u1107\u1161\u11BC",
                "\u110E\u1162\u11A8\u1109\u1161\u11BC",
                "\u110E\u1162\u11A8\u110B\u1175\u11B7",
                "\u110E\u1162\u11B7\u1111\u1175\u110B\u1165\u11AB",
                "\u110E\u1165\u1107\u1165\u11AF",
                "\u110E\u1165\u110B\u1173\u11B7",
                "\u110E\u1165\u11AB\u1100\u116E\u11A8",
                "\u110E\u1165\u11AB\u1103\u116E\u11BC",
                "\u110E\u1165\u11AB\u110C\u1161\u11BC",
                "\u110E\u1165\u11AB\u110C\u1162",
                "\u110E\u1165\u11AB\u110E\u1165\u11AB\u1112\u1175",
                "\u110E\u1165\u11AF\u1103\u1169",
                "\u110E\u1165\u11AF\u110C\u1165\u1112\u1175",
                "\u110E\u1165\u11AF\u1112\u1161\u11A8",
                "\u110E\u1165\u11BA\u1102\u1161\u11AF",
                "\u110E\u1165\u11BA\u110D\u1162",
                "\u110E\u1165\u11BC\u1102\u1167\u11AB",
                "\u110E\u1165\u11BC\u1107\u1161\u110C\u1175",
                "\u110E\u1165\u11BC\u1109\u1169",
                "\u110E\u1165\u11BC\u110E\u116E\u11AB",
                "\u110E\u1166\u1100\u1168",
                "\u110E\u1166\u1105\u1167\u11A8",
                "\u110E\u1166\u110B\u1169\u11AB",
                "\u110E\u1166\u110B\u1172\u11A8",
                "\u110E\u1166\u110C\u116E\u11BC",
                "\u110E\u1166\u1112\u1165\u11B7",
                "\u110E\u1169\u1103\u1173\u11BC\u1112\u1161\u11A8\u1109\u1162\u11BC",
                "\u110E\u1169\u1107\u1161\u11AB",
                "\u110E\u1169\u1107\u1161\u11B8",
                "\u110E\u1169\u1109\u1161\u11BC\u1112\u116A",
                "\u110E\u1169\u1109\u116E\u11AB",
                "\u110E\u1169\u110B\u1167\u1105\u1173\u11B7",
                "\u110E\u1169\u110B\u116F\u11AB",
                "\u110E\u1169\u110C\u1165\u1102\u1167\u11A8",
                "\u110E\u1169\u110C\u1165\u11B7",
                "\u110E\u1169\u110E\u1165\u11BC",
                "\u110E\u1169\u110F\u1169\u11AF\u1105\u1175\u11BA",
                "\u110E\u1169\u11BA\u1107\u116E\u11AF",
                "\u110E\u1169\u11BC\u1100\u1161\u11A8",
                "\u110E\u1169\u11BC\u1105\u1175",
                "\u110E\u1169\u11BC\u110C\u1161\u11BC",
                "\u110E\u116A\u11AF\u110B\u1167\u11BC",
                "\u110E\u116C\u1100\u1173\u11AB",
                "\u110E\u116C\u1109\u1161\u11BC",
                "\u110E\u116C\u1109\u1165\u11AB",
                "\u110E\u116C\u1109\u1175\u11AB",
                "\u110E\u116C\u110B\u1161\u11A8",
                "\u110E\u116C\u110C\u1169\u11BC",
                "\u110E\u116E\u1109\u1165\u11A8",
                "\u110E\u116E\u110B\u1165\u11A8",
                "\u110E\u116E\u110C\u1175\u11AB",
                "\u110E\u116E\u110E\u1165\u11AB",
                "\u110E\u116E\u110E\u1173\u11A8",
                "\u110E\u116E\u11A8\u1100\u116E",
                "\u110E\u116E\u11A8\u1109\u1169",
                "\u110E\u116E\u11A8\u110C\u1166",
                "\u110E\u116E\u11A8\u1112\u1161",
                "\u110E\u116E\u11AF\u1100\u1173\u11AB",
                "\u110E\u116E\u11AF\u1107\u1161\u11AF",
                "\u110E\u116E\u11AF\u1109\u1161\u11AB",
                "\u110E\u116E\u11AF\u1109\u1175\u11AB",
                "\u110E\u116E\u11AF\u110B\u1167\u11AB",
                "\u110E\u116E\u11AF\u110B\u1175\u11B8",
                "\u110E\u116E\u11AF\u110C\u1161\u11BC",
                "\u110E\u116E\u11AF\u1111\u1161\u11AB",
                "\u110E\u116E\u11BC\u1100\u1167\u11A8",
                "\u110E\u116E\u11BC\u1100\u1169",
                "\u110E\u116E\u11BC\u1103\u1169\u11AF",
                "\u110E\u116E\u11BC\u1107\u116E\u11AB\u1112\u1175",
                "\u110E\u116E\u11BC\u110E\u1165\u11BC\u1103\u1169",
                "\u110E\u1171\u110B\u1165\u11B8",
                "\u110E\u1171\u110C\u1175\u11A8",
                "\u110E\u1171\u1112\u1163\u11BC",
                "\u110E\u1175\u110B\u1163\u11A8",
                "\u110E\u1175\u11AB\u1100\u116E",
                "\u110E\u1175\u11AB\u110E\u1165\u11A8",
                "\u110E\u1175\u11AF\u1109\u1175\u11B8",
                "\u110E\u1175\u11AF\u110B\u116F\u11AF",
                "\u110E\u1175\u11AF\u1111\u1161\u11AB",
                "\u110E\u1175\u11B7\u1103\u1162",
                "\u110E\u1175\u11B7\u1106\u116E\u11A8",
                "\u110E\u1175\u11B7\u1109\u1175\u11AF",
                "\u110E\u1175\u11BA\u1109\u1169\u11AF",
                "\u110E\u1175\u11BC\u110E\u1161\u11AB",
                "\u110F\u1161\u1106\u1166\u1105\u1161",
                "\u110F\u1161\u110B\u116E\u11AB\u1110\u1165",
                "\u110F\u1161\u11AF\u1100\u116E\u11A8\u1109\u116E",
                "\u110F\u1162\u1105\u1175\u11A8\u1110\u1165",
                "\u110F\u1162\u11B7\u1111\u1165\u1109\u1173",
                "\u110F\u1162\u11B7\u1111\u1166\u110B\u1175\u11AB",
                "\u110F\u1165\u1110\u1173\u11AB",
                "\u110F\u1165\u11AB\u1103\u1175\u1109\u1167\u11AB",
                "\u110F\u1165\u11AF\u1105\u1165",
                "\u110F\u1165\u11B7\u1111\u1172\u1110\u1165",
                "\u110F\u1169\u1101\u1175\u1105\u1175",
                "\u110F\u1169\u1106\u1175\u1103\u1175",
                "\u110F\u1169\u11AB\u1109\u1165\u1110\u1173",
                "\u110F\u1169\u11AF\u1105\u1161",
                "\u110F\u1169\u11B7\u1111\u1173\u11AF\u1105\u1166\u11A8\u1109\u1173",
                "\u110F\u1169\u11BC\u1102\u1161\u1106\u116E\u11AF",
                "\u110F\u116B\u1100\u1161\u11B7",
                "\u110F\u116E\u1103\u1166\u1110\u1161",
                "\u110F\u1173\u1105\u1175\u11B7",
                "\u110F\u1173\u11AB\u1100\u1175\u11AF",
                "\u110F\u1173\u11AB\u1104\u1161\u11AF",
                "\u110F\u1173\u11AB\u1109\u1169\u1105\u1175",
                "\u110F\u1173\u11AB\u110B\u1161\u1103\u1173\u11AF",
                "\u110F\u1173\u11AB\u110B\u1165\u1106\u1165\u1102\u1175",
                "\u110F\u1173\u11AB\u110B\u1175\u11AF",
                "\u110F\u1173\u11AB\u110C\u1165\u11AF",
                "\u110F\u1173\u11AF\u1105\u1162\u1109\u1175\u11A8",
                "\u110F\u1173\u11AF\u1105\u1165\u11B8",
                "\u110F\u1175\u11AF\u1105\u1169",
                "\u1110\u1161\u110B\u1175\u11B8",
                "\u1110\u1161\u110C\u1161\u1100\u1175",
                "\u1110\u1161\u11A8\u1100\u116E",
                "\u1110\u1161\u11A8\u110C\u1161",
                "\u1110\u1161\u11AB\u1109\u1162\u11BC",
                "\u1110\u1162\u1100\u116F\u11AB\u1103\u1169",
                "\u1110\u1162\u110B\u1163\u11BC",
                "\u1110\u1162\u1111\u116E\u11BC",
                "\u1110\u1162\u11A8\u1109\u1175",
                "\u1110\u1162\u11AF\u1105\u1165\u11AB\u1110\u1173",
                "\u1110\u1165\u1102\u1165\u11AF",
                "\u1110\u1165\u1106\u1175\u1102\u1165\u11AF",
                "\u1110\u1166\u1102\u1175\u1109\u1173",
                "\u1110\u1166\u1109\u1173\u1110\u1173",
                "\u1110\u1166\u110B\u1175\u1107\u1173\u11AF",
                "\u1110\u1166\u11AF\u1105\u1166\u1107\u1175\u110C\u1165\u11AB",
                "\u1110\u1169\u1105\u1169\u11AB",
                "\u1110\u1169\u1106\u1161\u1110\u1169",
                "\u1110\u1169\u110B\u116D\u110B\u1175\u11AF",
                "\u1110\u1169\u11BC\u1100\u1168",
                "\u1110\u1169\u11BC\u1100\u116A",
                "\u1110\u1169\u11BC\u1105\u1169",
                "\u1110\u1169\u11BC\u1109\u1175\u11AB",
                "\u1110\u1169\u11BC\u110B\u1167\u11A8",
                "\u1110\u1169\u11BC\u110B\u1175\u11AF",
                "\u1110\u1169\u11BC\u110C\u1161\u11BC",
                "\u1110\u1169\u11BC\u110C\u1166",
                "\u1110\u1169\u11BC\u110C\u1173\u11BC",
                "\u1110\u1169\u11BC\u1112\u1161\u11B8",
                "\u1110\u1169\u11BC\u1112\u116A",
                "\u1110\u116C\u1100\u1173\u11AB",
                "\u1110\u116C\u110B\u116F\u11AB",
                "\u1110\u116C\u110C\u1175\u11A8\u1100\u1173\u11B7",
                "\u1110\u1171\u1100\u1175\u11B7",
                "\u1110\u1173\u1105\u1165\u11A8",
                "\u1110\u1173\u11A8\u1100\u1173\u11B8",
                "\u1110\u1173\u11A8\u1107\u1167\u11AF",
                "\u1110\u1173\u11A8\u1109\u1165\u11BC",
                "\u1110\u1173\u11A8\u1109\u116E",
                "\u1110\u1173\u11A8\u110C\u1175\u11BC",
                "\u1110\u1173\u11A8\u1112\u1175",
                "\u1110\u1173\u11AB\u1110\u1173\u11AB\u1112\u1175",
                "\u1110\u1175\u1109\u1167\u110E\u1173",
                "\u1111\u1161\u1105\u1161\u11AB\u1109\u1162\u11A8",
                "\u1111\u1161\u110B\u1175\u11AF",
                "\u1111\u1161\u110E\u116E\u11AF\u1109\u1169",
                "\u1111\u1161\u11AB\u1100\u1167\u11AF",
                "\u1111\u1161\u11AB\u1103\u1161\u11AB",
                "\u1111\u1161\u11AB\u1106\u1162",
                "\u1111\u1161\u11AB\u1109\u1161",
                "\u1111\u1161\u11AF\u1109\u1175\u11B8",
                "\u1111\u1161\u11AF\u110B\u116F\u11AF",
                "\u1111\u1161\u11B8\u1109\u1169\u11BC",
                "\u1111\u1162\u1109\u1167\u11AB",
                "\u1111\u1162\u11A8\u1109\u1173",
                "\u1111\u1162\u11A8\u1109\u1175\u1106\u1175\u11AF\u1105\u1175",
                "\u1111\u1162\u11AB\u1110\u1175",
                "\u1111\u1165\u1109\u1166\u11AB\u1110\u1173",
                "\u1111\u1166\u110B\u1175\u11AB\u1110\u1173",
                "\u1111\u1167\u11AB\u1100\u1167\u11AB",
                "\u1111\u1167\u11AB\u110B\u1174",
                "\u1111\u1167\u11AB\u110C\u1175",
                "\u1111\u1167\u11AB\u1112\u1175",
                "\u1111\u1167\u11BC\u1100\u1161",
                "\u1111\u1167\u11BC\u1100\u1172\u11AB",
                "\u1111\u1167\u11BC\u1109\u1162\u11BC",
                "\u1111\u1167\u11BC\u1109\u1169",
                "\u1111\u1167\u11BC\u110B\u1163\u11BC",
                "\u1111\u1167\u11BC\u110B\u1175\u11AF",
                "\u1111\u1167\u11BC\u1112\u116A",
                "\u1111\u1169\u1109\u1173\u1110\u1165",
                "\u1111\u1169\u110B\u1175\u11AB\u1110\u1173",
                "\u1111\u1169\u110C\u1161\u11BC",
                "\u1111\u1169\u1112\u1161\u11B7",
                "\u1111\u116D\u1106\u1167\u11AB",
                "\u1111\u116D\u110C\u1165\u11BC",
                "\u1111\u116D\u110C\u116E\u11AB",
                "\u1111\u116D\u1112\u1167\u11AB",
                "\u1111\u116E\u11B7\u1106\u1169\u11A8",
                "\u1111\u116E\u11B7\u110C\u1175\u11AF",
                "\u1111\u116E\u11BC\u1100\u1167\u11BC",
                "\u1111\u116E\u11BC\u1109\u1169\u11A8",
                "\u1111\u116E\u11BC\u1109\u1173\u11B8",
                "\u1111\u1173\u1105\u1161\u11BC\u1109\u1173",
                "\u1111\u1173\u1105\u1175\u11AB\u1110\u1165",
                "\u1111\u1173\u11AF\u1105\u1161\u1109\u1173\u1110\u1175\u11A8",
                "\u1111\u1175\u1100\u1169\u11AB",
                "\u1111\u1175\u1106\u1161\u11BC",
                "\u1111\u1175\u110B\u1161\u1102\u1169",
                "\u1111\u1175\u11AF\u1105\u1173\u11B7",
                "\u1111\u1175\u11AF\u1109\u116E",
                "\u1111\u1175\u11AF\u110B\u116D",
                "\u1111\u1175\u11AF\u110C\u1161",
                "\u1111\u1175\u11AF\u1110\u1169\u11BC",
                "\u1111\u1175\u11BC\u1100\u1168",
                "\u1112\u1161\u1102\u1173\u1102\u1175\u11B7",
                "\u1112\u1161\u1102\u1173\u11AF",
                "\u1112\u1161\u1103\u1173\u110B\u1170\u110B\u1165",
                "\u1112\u1161\u1105\u116E\u11BA\u1107\u1161\u11B7",
                "\u1112\u1161\u1107\u1161\u11AB\u1100\u1175",
                "\u1112\u1161\u1109\u116E\u11A8\u110C\u1175\u11B8",
                "\u1112\u1161\u1109\u116E\u11AB",
                "\u1112\u1161\u110B\u1167\u1110\u1173\u11AB",
                "\u1112\u1161\u110C\u1175\u1106\u1161\u11AB",
                "\u1112\u1161\u110E\u1165\u11AB",
                "\u1112\u1161\u1111\u116E\u11B7",
                "\u1112\u1161\u1111\u1175\u11AF",
                "\u1112\u1161\u11A8\u1100\u116A",
                "\u1112\u1161\u11A8\u1100\u116D",
                "\u1112\u1161\u11A8\u1100\u1173\u11B8",
                "\u1112\u1161\u11A8\u1100\u1175",
                "\u1112\u1161\u11A8\u1102\u1167\u11AB",
                "\u1112\u1161\u11A8\u1105\u1167\u11A8",
                "\u1112\u1161\u11A8\u1107\u1165\u11AB",
                "\u1112\u1161\u11A8\u1107\u116E\u1106\u1169",
                "\u1112\u1161\u11A8\u1107\u1175",
                "\u1112\u1161\u11A8\u1109\u1162\u11BC",
                "\u1112\u1161\u11A8\u1109\u116E\u11AF",
                "\u1112\u1161\u11A8\u1109\u1173\u11B8",
                "\u1112\u1161\u11A8\u110B\u116D\u11BC\u1111\u116E\u11B7",
                "\u1112\u1161\u11A8\u110B\u116F\u11AB",
                "\u1112\u1161\u11A8\u110B\u1171",
                "\u1112\u1161\u11A8\u110C\u1161",
                "\u1112\u1161\u11A8\u110C\u1165\u11B7",
                "\u1112\u1161\u11AB\u1100\u1168",
                "\u1112\u1161\u11AB\u1100\u1173\u11AF",
                "\u1112\u1161\u11AB\u1101\u1165\u1107\u1165\u11AB\u110B\u1166",
                "\u1112\u1161\u11AB\u1102\u1161\u11BD",
                "\u1112\u1161\u11AB\u1102\u116E\u11AB",
                "\u1112\u1161\u11AB\u1103\u1169\u11BC\u110B\u1161\u11AB",
                "\u1112\u1161\u11AB\u1104\u1162",
                "\u1112\u1161\u11AB\u1105\u1161\u1109\u1161\u11AB",
                "\u1112\u1161\u11AB\u1106\u1161\u1103\u1175",
                "\u1112\u1161\u11AB\u1106\u116E\u11AB",
                "\u1112\u1161\u11AB\u1107\u1165\u11AB",
                "\u1112\u1161\u11AB\u1107\u1169\u11A8",
                "\u1112\u1161\u11AB\u1109\u1175\u11A8",
                "\u1112\u1161\u11AB\u110B\u1167\u1105\u1173\u11B7",
                "\u1112\u1161\u11AB\u110D\u1169\u11A8",
                "\u1112\u1161\u11AF\u1106\u1165\u1102\u1175",
                "\u1112\u1161\u11AF\u110B\u1161\u1107\u1165\u110C\u1175",
                "\u1112\u1161\u11AF\u110B\u1175\u11AB",
                "\u1112\u1161\u11B7\u1101\u1166",
                "\u1112\u1161\u11B7\u1107\u116E\u1105\u1169",
                "\u1112\u1161\u11B8\u1100\u1167\u11A8",
                "\u1112\u1161\u11B8\u1105\u1175\u110C\u1165\u11A8",
                "\u1112\u1161\u11BC\u1100\u1169\u11BC",
                "\u1112\u1161\u11BC\u1100\u116E",
                "\u1112\u1161\u11BC\u1109\u1161\u11BC",
                "\u1112\u1161\u11BC\u110B\u1174",
                "\u1112\u1162\u1100\u1167\u11AF",
                "\u1112\u1162\u1100\u116E\u11AB",
                "\u1112\u1162\u1103\u1161\u11B8",
                "\u1112\u1162\u1103\u1161\u11BC",
                "\u1112\u1162\u1106\u116E\u11AF",
                "\u1112\u1162\u1109\u1165\u11A8",
                "\u1112\u1162\u1109\u1165\u11AF",
                "\u1112\u1162\u1109\u116E\u110B\u116D\u11A8\u110C\u1161\u11BC",
                "\u1112\u1162\u110B\u1161\u11AB",
                "\u1112\u1162\u11A8\u1109\u1175\u11B7",
                "\u1112\u1162\u11AB\u1103\u1173\u1107\u1162\u11A8",
                "\u1112\u1162\u11B7\u1107\u1165\u1100\u1165",
                "\u1112\u1162\u11BA\u1107\u1167\u11C0",
                "\u1112\u1162\u11BA\u1109\u1161\u11AF",
                "\u1112\u1162\u11BC\u1103\u1169\u11BC",
                "\u1112\u1162\u11BC\u1107\u1169\u11A8",
                "\u1112\u1162\u11BC\u1109\u1161",
                "\u1112\u1162\u11BC\u110B\u116E\u11AB",
                "\u1112\u1162\u11BC\u110B\u1171",
                "\u1112\u1163\u11BC\u1100\u1175",
                "\u1112\u1163\u11BC\u1109\u1161\u11BC",
                "\u1112\u1163\u11BC\u1109\u116E",
                "\u1112\u1165\u1105\u1161\u11A8",
                "\u1112\u1165\u110B\u116D\u11BC",
                "\u1112\u1166\u11AF\u1100\u1175",
                "\u1112\u1167\u11AB\u1100\u116A\u11AB",
                "\u1112\u1167\u11AB\u1100\u1173\u11B7",
                "\u1112\u1167\u11AB\u1103\u1162",
                "\u1112\u1167\u11AB\u1109\u1161\u11BC",
                "\u1112\u1167\u11AB\u1109\u1175\u11AF",
                "\u1112\u1167\u11AB\u110C\u1161\u11BC",
                "\u1112\u1167\u11AB\u110C\u1162",
                "\u1112\u1167\u11AB\u110C\u1175",
                "\u1112\u1167\u11AF\u110B\u1162\u11A8",
                "\u1112\u1167\u11B8\u1105\u1167\u11A8",
                "\u1112\u1167\u11BC\u1107\u116E",
                "\u1112\u1167\u11BC\u1109\u1161",
                "\u1112\u1167\u11BC\u1109\u116E",
                "\u1112\u1167\u11BC\u1109\u1175\u11A8",
                "\u1112\u1167\u11BC\u110C\u1166",
                "\u1112\u1167\u11BC\u1110\u1162",
                "\u1112\u1167\u11BC\u1111\u1167\u11AB",
                "\u1112\u1168\u1110\u1162\u11A8",
                "\u1112\u1169\u1100\u1175\u1109\u1175\u11B7",
                "\u1112\u1169\u1102\u1161\u11B7",
                "\u1112\u1169\u1105\u1161\u11BC\u110B\u1175",
                "\u1112\u1169\u1107\u1161\u11A8",
                "\u1112\u1169\u1110\u1166\u11AF",
                "\u1112\u1169\u1112\u1173\u11B8",
                "\u1112\u1169\u11A8\u1109\u1175",
                "\u1112\u1169\u11AF\u1105\u1169",
                "\u1112\u1169\u11B7\u1111\u1166\u110B\u1175\u110C\u1175",
                "\u1112\u1169\u11BC\u1107\u1169",
                "\u1112\u1169\u11BC\u1109\u116E",
                "\u1112\u1169\u11BC\u110E\u1161",
                "\u1112\u116A\u1106\u1167\u11AB",
                "\u1112\u116A\u1107\u116E\u11AB",
                "\u1112\u116A\u1109\u1161\u11AF",
                "\u1112\u116A\u110B\u116D\u110B\u1175\u11AF",
                "\u1112\u116A\u110C\u1161\u11BC",
                "\u1112\u116A\u1112\u1161\u11A8",
                "\u1112\u116A\u11A8\u1107\u1169",
                "\u1112\u116A\u11A8\u110B\u1175\u11AB",
                "\u1112\u116A\u11A8\u110C\u1161\u11BC",
                "\u1112\u116A\u11A8\u110C\u1165\u11BC",
                "\u1112\u116A\u11AB\u1100\u1161\u11B8",
                "\u1112\u116A\u11AB\u1100\u1167\u11BC",
                "\u1112\u116A\u11AB\u110B\u1167\u11BC",
                "\u1112\u116A\u11AB\u110B\u1172\u11AF",
                "\u1112\u116A\u11AB\u110C\u1161",
                "\u1112\u116A\u11AF\u1100\u1175",
                "\u1112\u116A\u11AF\u1103\u1169\u11BC",
                "\u1112\u116A\u11AF\u1107\u1161\u11AF\u1112\u1175",
                "\u1112\u116A\u11AF\u110B\u116D\u11BC",
                "\u1112\u116A\u11AF\u110D\u1161\u11A8",
                "\u1112\u116C\u1100\u1167\u11AB",
                "\u1112\u116C\u1100\u116A\u11AB",
                "\u1112\u116C\u1107\u1169\u11A8",
                "\u1112\u116C\u1109\u1162\u11A8",
                "\u1112\u116C\u110B\u116F\u11AB",
                "\u1112\u116C\u110C\u1161\u11BC",
                "\u1112\u116C\u110C\u1165\u11AB",
                "\u1112\u116C\u11BA\u1109\u116E",
                "\u1112\u116C\u11BC\u1103\u1161\u11AB\u1107\u1169\u1103\u1169",
                "\u1112\u116D\u110B\u1172\u11AF\u110C\u1165\u11A8",
                "\u1112\u116E\u1107\u1161\u11AB",
                "\u1112\u116E\u110E\u116E\u11BA\u1100\u1161\u1105\u116E",
                "\u1112\u116E\u11AB\u1105\u1167\u11AB",
                "\u1112\u116F\u11AF\u110A\u1175\u11AB",
                "\u1112\u1172\u1109\u1175\u11A8",
                "\u1112\u1172\u110B\u1175\u11AF",
                "\u1112\u1172\u11BC\u1102\u1162",
                "\u1112\u1173\u1105\u1173\u11B7",
                "\u1112\u1173\u11A8\u1107\u1162\u11A8",
                "\u1112\u1173\u11A8\u110B\u1175\u11AB",
                "\u1112\u1173\u11AB\u110C\u1165\u11A8",
                "\u1112\u1173\u11AB\u1112\u1175",
                "\u1112\u1173\u11BC\u1106\u1175",
                "\u1112\u1173\u11BC\u1107\u116E\u11AB",
                "\u1112\u1174\u1100\u1169\u11A8",
                "\u1112\u1174\u1106\u1161\u11BC",
                "\u1112\u1174\u1109\u1162\u11BC",
                "\u1112\u1174\u11AB\u1109\u1162\u11A8",
                "\u1112\u1175\u11B7\u1101\u1165\u11BA"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/french.json
          var require_french = __commonJS({
            "node_modules/bip39/src/wordlists/french.json"(exports, module) {
              module.exports = [
                "abaisser",
                "abandon",
                "abdiquer",
                "abeille",
                "abolir",
                "aborder",
                "aboutir",
                "aboyer",
                "abrasif",
                "abreuver",
                "abriter",
                "abroger",
                "abrupt",
                "absence",
                "absolu",
                "absurde",
                "abusif",
                "abyssal",
                "acade\u0301mie",
                "acajou",
                "acarien",
                "accabler",
                "accepter",
                "acclamer",
                "accolade",
                "accroche",
                "accuser",
                "acerbe",
                "achat",
                "acheter",
                "aciduler",
                "acier",
                "acompte",
                "acque\u0301rir",
                "acronyme",
                "acteur",
                "actif",
                "actuel",
                "adepte",
                "ade\u0301quat",
                "adhe\u0301sif",
                "adjectif",
                "adjuger",
                "admettre",
                "admirer",
                "adopter",
                "adorer",
                "adoucir",
                "adresse",
                "adroit",
                "adulte",
                "adverbe",
                "ae\u0301rer",
                "ae\u0301ronef",
                "affaire",
                "affecter",
                "affiche",
                "affreux",
                "affubler",
                "agacer",
                "agencer",
                "agile",
                "agiter",
                "agrafer",
                "agre\u0301able",
                "agrume",
                "aider",
                "aiguille",
                "ailier",
                "aimable",
                "aisance",
                "ajouter",
                "ajuster",
                "alarmer",
                "alchimie",
                "alerte",
                "alge\u0300bre",
                "algue",
                "alie\u0301ner",
                "aliment",
                "alle\u0301ger",
                "alliage",
                "allouer",
                "allumer",
                "alourdir",
                "alpaga",
                "altesse",
                "alve\u0301ole",
                "amateur",
                "ambigu",
                "ambre",
                "ame\u0301nager",
                "amertume",
                "amidon",
                "amiral",
                "amorcer",
                "amour",
                "amovible",
                "amphibie",
                "ampleur",
                "amusant",
                "analyse",
                "anaphore",
                "anarchie",
                "anatomie",
                "ancien",
                "ane\u0301antir",
                "angle",
                "angoisse",
                "anguleux",
                "animal",
                "annexer",
                "annonce",
                "annuel",
                "anodin",
                "anomalie",
                "anonyme",
                "anormal",
                "antenne",
                "antidote",
                "anxieux",
                "apaiser",
                "ape\u0301ritif",
                "aplanir",
                "apologie",
                "appareil",
                "appeler",
                "apporter",
                "appuyer",
                "aquarium",
                "aqueduc",
                "arbitre",
                "arbuste",
                "ardeur",
                "ardoise",
                "argent",
                "arlequin",
                "armature",
                "armement",
                "armoire",
                "armure",
                "arpenter",
                "arracher",
                "arriver",
                "arroser",
                "arsenic",
                "arte\u0301riel",
                "article",
                "aspect",
                "asphalte",
                "aspirer",
                "assaut",
                "asservir",
                "assiette",
                "associer",
                "assurer",
                "asticot",
                "astre",
                "astuce",
                "atelier",
                "atome",
                "atrium",
                "atroce",
                "attaque",
                "attentif",
                "attirer",
                "attraper",
                "aubaine",
                "auberge",
                "audace",
                "audible",
                "augurer",
                "aurore",
                "automne",
                "autruche",
                "avaler",
                "avancer",
                "avarice",
                "avenir",
                "averse",
                "aveugle",
                "aviateur",
                "avide",
                "avion",
                "aviser",
                "avoine",
                "avouer",
                "avril",
                "axial",
                "axiome",
                "badge",
                "bafouer",
                "bagage",
                "baguette",
                "baignade",
                "balancer",
                "balcon",
                "baleine",
                "balisage",
                "bambin",
                "bancaire",
                "bandage",
                "banlieue",
                "bannie\u0300re",
                "banquier",
                "barbier",
                "baril",
                "baron",
                "barque",
                "barrage",
                "bassin",
                "bastion",
                "bataille",
                "bateau",
                "batterie",
                "baudrier",
                "bavarder",
                "belette",
                "be\u0301lier",
                "belote",
                "be\u0301ne\u0301fice",
                "berceau",
                "berger",
                "berline",
                "bermuda",
                "besace",
                "besogne",
                "be\u0301tail",
                "beurre",
                "biberon",
                "bicycle",
                "bidule",
                "bijou",
                "bilan",
                "bilingue",
                "billard",
                "binaire",
                "biologie",
                "biopsie",
                "biotype",
                "biscuit",
                "bison",
                "bistouri",
                "bitume",
                "bizarre",
                "blafard",
                "blague",
                "blanchir",
                "blessant",
                "blinder",
                "blond",
                "bloquer",
                "blouson",
                "bobard",
                "bobine",
                "boire",
                "boiser",
                "bolide",
                "bonbon",
                "bondir",
                "bonheur",
                "bonifier",
                "bonus",
                "bordure",
                "borne",
                "botte",
                "boucle",
                "boueux",
                "bougie",
                "boulon",
                "bouquin",
                "bourse",
                "boussole",
                "boutique",
                "boxeur",
                "branche",
                "brasier",
                "brave",
                "brebis",
                "bre\u0300che",
                "breuvage",
                "bricoler",
                "brigade",
                "brillant",
                "brioche",
                "brique",
                "brochure",
                "broder",
                "bronzer",
                "brousse",
                "broyeur",
                "brume",
                "brusque",
                "brutal",
                "bruyant",
                "buffle",
                "buisson",
                "bulletin",
                "bureau",
                "burin",
                "bustier",
                "butiner",
                "butoir",
                "buvable",
                "buvette",
                "cabanon",
                "cabine",
                "cachette",
                "cadeau",
                "cadre",
                "cafe\u0301ine",
                "caillou",
                "caisson",
                "calculer",
                "calepin",
                "calibre",
                "calmer",
                "calomnie",
                "calvaire",
                "camarade",
                "came\u0301ra",
                "camion",
                "campagne",
                "canal",
                "caneton",
                "canon",
                "cantine",
                "canular",
                "capable",
                "caporal",
                "caprice",
                "capsule",
                "capter",
                "capuche",
                "carabine",
                "carbone",
                "caresser",
                "caribou",
                "carnage",
                "carotte",
                "carreau",
                "carton",
                "cascade",
                "casier",
                "casque",
                "cassure",
                "causer",
                "caution",
                "cavalier",
                "caverne",
                "caviar",
                "ce\u0301dille",
                "ceinture",
                "ce\u0301leste",
                "cellule",
                "cendrier",
                "censurer",
                "central",
                "cercle",
                "ce\u0301re\u0301bral",
                "cerise",
                "cerner",
                "cerveau",
                "cesser",
                "chagrin",
                "chaise",
                "chaleur",
                "chambre",
                "chance",
                "chapitre",
                "charbon",
                "chasseur",
                "chaton",
                "chausson",
                "chavirer",
                "chemise",
                "chenille",
                "che\u0301quier",
                "chercher",
                "cheval",
                "chien",
                "chiffre",
                "chignon",
                "chime\u0300re",
                "chiot",
                "chlorure",
                "chocolat",
                "choisir",
                "chose",
                "chouette",
                "chrome",
                "chute",
                "cigare",
                "cigogne",
                "cimenter",
                "cine\u0301ma",
                "cintrer",
                "circuler",
                "cirer",
                "cirque",
                "citerne",
                "citoyen",
                "citron",
                "civil",
                "clairon",
                "clameur",
                "claquer",
                "classe",
                "clavier",
                "client",
                "cligner",
                "climat",
                "clivage",
                "cloche",
                "clonage",
                "cloporte",
                "cobalt",
                "cobra",
                "cocasse",
                "cocotier",
                "coder",
                "codifier",
                "coffre",
                "cogner",
                "cohe\u0301sion",
                "coiffer",
                "coincer",
                "cole\u0300re",
                "colibri",
                "colline",
                "colmater",
                "colonel",
                "combat",
                "come\u0301die",
                "commande",
                "compact",
                "concert",
                "conduire",
                "confier",
                "congeler",
                "connoter",
                "consonne",
                "contact",
                "convexe",
                "copain",
                "copie",
                "corail",
                "corbeau",
                "cordage",
                "corniche",
                "corpus",
                "correct",
                "corte\u0300ge",
                "cosmique",
                "costume",
                "coton",
                "coude",
                "coupure",
                "courage",
                "couteau",
                "couvrir",
                "coyote",
                "crabe",
                "crainte",
                "cravate",
                "crayon",
                "cre\u0301ature",
                "cre\u0301diter",
                "cre\u0301meux",
                "creuser",
                "crevette",
                "cribler",
                "crier",
                "cristal",
                "crite\u0300re",
                "croire",
                "croquer",
                "crotale",
                "crucial",
                "cruel",
                "crypter",
                "cubique",
                "cueillir",
                "cuille\u0300re",
                "cuisine",
                "cuivre",
                "culminer",
                "cultiver",
                "cumuler",
                "cupide",
                "curatif",
                "curseur",
                "cyanure",
                "cycle",
                "cylindre",
                "cynique",
                "daigner",
                "damier",
                "danger",
                "danseur",
                "dauphin",
                "de\u0301battre",
                "de\u0301biter",
                "de\u0301border",
                "de\u0301brider",
                "de\u0301butant",
                "de\u0301caler",
                "de\u0301cembre",
                "de\u0301chirer",
                "de\u0301cider",
                "de\u0301clarer",
                "de\u0301corer",
                "de\u0301crire",
                "de\u0301cupler",
                "de\u0301dale",
                "de\u0301ductif",
                "de\u0301esse",
                "de\u0301fensif",
                "de\u0301filer",
                "de\u0301frayer",
                "de\u0301gager",
                "de\u0301givrer",
                "de\u0301glutir",
                "de\u0301grafer",
                "de\u0301jeuner",
                "de\u0301lice",
                "de\u0301loger",
                "demander",
                "demeurer",
                "de\u0301molir",
                "de\u0301nicher",
                "de\u0301nouer",
                "dentelle",
                "de\u0301nuder",
                "de\u0301part",
                "de\u0301penser",
                "de\u0301phaser",
                "de\u0301placer",
                "de\u0301poser",
                "de\u0301ranger",
                "de\u0301rober",
                "de\u0301sastre",
                "descente",
                "de\u0301sert",
                "de\u0301signer",
                "de\u0301sobe\u0301ir",
                "dessiner",
                "destrier",
                "de\u0301tacher",
                "de\u0301tester",
                "de\u0301tourer",
                "de\u0301tresse",
                "devancer",
                "devenir",
                "deviner",
                "devoir",
                "diable",
                "dialogue",
                "diamant",
                "dicter",
                "diffe\u0301rer",
                "dige\u0301rer",
                "digital",
                "digne",
                "diluer",
                "dimanche",
                "diminuer",
                "dioxyde",
                "directif",
                "diriger",
                "discuter",
                "disposer",
                "dissiper",
                "distance",
                "divertir",
                "diviser",
                "docile",
                "docteur",
                "dogme",
                "doigt",
                "domaine",
                "domicile",
                "dompter",
                "donateur",
                "donjon",
                "donner",
                "dopamine",
                "dortoir",
                "dorure",
                "dosage",
                "doseur",
                "dossier",
                "dotation",
                "douanier",
                "double",
                "douceur",
                "douter",
                "doyen",
                "dragon",
                "draper",
                "dresser",
                "dribbler",
                "droiture",
                "duperie",
                "duplexe",
                "durable",
                "durcir",
                "dynastie",
                "e\u0301blouir",
                "e\u0301carter",
                "e\u0301charpe",
                "e\u0301chelle",
                "e\u0301clairer",
                "e\u0301clipse",
                "e\u0301clore",
                "e\u0301cluse",
                "e\u0301cole",
                "e\u0301conomie",
                "e\u0301corce",
                "e\u0301couter",
                "e\u0301craser",
                "e\u0301cre\u0301mer",
                "e\u0301crivain",
                "e\u0301crou",
                "e\u0301cume",
                "e\u0301cureuil",
                "e\u0301difier",
                "e\u0301duquer",
                "effacer",
                "effectif",
                "effigie",
                "effort",
                "effrayer",
                "effusion",
                "e\u0301galiser",
                "e\u0301garer",
                "e\u0301jecter",
                "e\u0301laborer",
                "e\u0301largir",
                "e\u0301lectron",
                "e\u0301le\u0301gant",
                "e\u0301le\u0301phant",
                "e\u0301le\u0300ve",
                "e\u0301ligible",
                "e\u0301litisme",
                "e\u0301loge",
                "e\u0301lucider",
                "e\u0301luder",
                "emballer",
                "embellir",
                "embryon",
                "e\u0301meraude",
                "e\u0301mission",
                "emmener",
                "e\u0301motion",
                "e\u0301mouvoir",
                "empereur",
                "employer",
                "emporter",
                "emprise",
                "e\u0301mulsion",
                "encadrer",
                "enche\u0300re",
                "enclave",
                "encoche",
                "endiguer",
                "endosser",
                "endroit",
                "enduire",
                "e\u0301nergie",
                "enfance",
                "enfermer",
                "enfouir",
                "engager",
                "engin",
                "englober",
                "e\u0301nigme",
                "enjamber",
                "enjeu",
                "enlever",
                "ennemi",
                "ennuyeux",
                "enrichir",
                "enrobage",
                "enseigne",
                "entasser",
                "entendre",
                "entier",
                "entourer",
                "entraver",
                "e\u0301nume\u0301rer",
                "envahir",
                "enviable",
                "envoyer",
                "enzyme",
                "e\u0301olien",
                "e\u0301paissir",
                "e\u0301pargne",
                "e\u0301patant",
                "e\u0301paule",
                "e\u0301picerie",
                "e\u0301pide\u0301mie",
                "e\u0301pier",
                "e\u0301pilogue",
                "e\u0301pine",
                "e\u0301pisode",
                "e\u0301pitaphe",
                "e\u0301poque",
                "e\u0301preuve",
                "e\u0301prouver",
                "e\u0301puisant",
                "e\u0301querre",
                "e\u0301quipe",
                "e\u0301riger",
                "e\u0301rosion",
                "erreur",
                "e\u0301ruption",
                "escalier",
                "espadon",
                "espe\u0300ce",
                "espie\u0300gle",
                "espoir",
                "esprit",
                "esquiver",
                "essayer",
                "essence",
                "essieu",
                "essorer",
                "estime",
                "estomac",
                "estrade",
                "e\u0301tage\u0300re",
                "e\u0301taler",
                "e\u0301tanche",
                "e\u0301tatique",
                "e\u0301teindre",
                "e\u0301tendoir",
                "e\u0301ternel",
                "e\u0301thanol",
                "e\u0301thique",
                "ethnie",
                "e\u0301tirer",
                "e\u0301toffer",
                "e\u0301toile",
                "e\u0301tonnant",
                "e\u0301tourdir",
                "e\u0301trange",
                "e\u0301troit",
                "e\u0301tude",
                "euphorie",
                "e\u0301valuer",
                "e\u0301vasion",
                "e\u0301ventail",
                "e\u0301vidence",
                "e\u0301viter",
                "e\u0301volutif",
                "e\u0301voquer",
                "exact",
                "exage\u0301rer",
                "exaucer",
                "exceller",
                "excitant",
                "exclusif",
                "excuse",
                "exe\u0301cuter",
                "exemple",
                "exercer",
                "exhaler",
                "exhorter",
                "exigence",
                "exiler",
                "exister",
                "exotique",
                "expe\u0301dier",
                "explorer",
                "exposer",
                "exprimer",
                "exquis",
                "extensif",
                "extraire",
                "exulter",
                "fable",
                "fabuleux",
                "facette",
                "facile",
                "facture",
                "faiblir",
                "falaise",
                "fameux",
                "famille",
                "farceur",
                "farfelu",
                "farine",
                "farouche",
                "fasciner",
                "fatal",
                "fatigue",
                "faucon",
                "fautif",
                "faveur",
                "favori",
                "fe\u0301brile",
                "fe\u0301conder",
                "fe\u0301de\u0301rer",
                "fe\u0301lin",
                "femme",
                "fe\u0301mur",
                "fendoir",
                "fe\u0301odal",
                "fermer",
                "fe\u0301roce",
                "ferveur",
                "festival",
                "feuille",
                "feutre",
                "fe\u0301vrier",
                "fiasco",
                "ficeler",
                "fictif",
                "fide\u0300le",
                "figure",
                "filature",
                "filetage",
                "filie\u0300re",
                "filleul",
                "filmer",
                "filou",
                "filtrer",
                "financer",
                "finir",
                "fiole",
                "firme",
                "fissure",
                "fixer",
                "flairer",
                "flamme",
                "flasque",
                "flatteur",
                "fle\u0301au",
                "fle\u0300che",
                "fleur",
                "flexion",
                "flocon",
                "flore",
                "fluctuer",
                "fluide",
                "fluvial",
                "folie",
                "fonderie",
                "fongible",
                "fontaine",
                "forcer",
                "forgeron",
                "formuler",
                "fortune",
                "fossile",
                "foudre",
                "fouge\u0300re",
                "fouiller",
                "foulure",
                "fourmi",
                "fragile",
                "fraise",
                "franchir",
                "frapper",
                "frayeur",
                "fre\u0301gate",
                "freiner",
                "frelon",
                "fre\u0301mir",
                "fre\u0301ne\u0301sie",
                "fre\u0300re",
                "friable",
                "friction",
                "frisson",
                "frivole",
                "froid",
                "fromage",
                "frontal",
                "frotter",
                "fruit",
                "fugitif",
                "fuite",
                "fureur",
                "furieux",
                "furtif",
                "fusion",
                "futur",
                "gagner",
                "galaxie",
                "galerie",
                "gambader",
                "garantir",
                "gardien",
                "garnir",
                "garrigue",
                "gazelle",
                "gazon",
                "ge\u0301ant",
                "ge\u0301latine",
                "ge\u0301lule",
                "gendarme",
                "ge\u0301ne\u0301ral",
                "ge\u0301nie",
                "genou",
                "gentil",
                "ge\u0301ologie",
                "ge\u0301ome\u0300tre",
                "ge\u0301ranium",
                "germe",
                "gestuel",
                "geyser",
                "gibier",
                "gicler",
                "girafe",
                "givre",
                "glace",
                "glaive",
                "glisser",
                "globe",
                "gloire",
                "glorieux",
                "golfeur",
                "gomme",
                "gonfler",
                "gorge",
                "gorille",
                "goudron",
                "gouffre",
                "goulot",
                "goupille",
                "gourmand",
                "goutte",
                "graduel",
                "graffiti",
                "graine",
                "grand",
                "grappin",
                "gratuit",
                "gravir",
                "grenat",
                "griffure",
                "griller",
                "grimper",
                "grogner",
                "gronder",
                "grotte",
                "groupe",
                "gruger",
                "grutier",
                "gruye\u0300re",
                "gue\u0301pard",
                "guerrier",
                "guide",
                "guimauve",
                "guitare",
                "gustatif",
                "gymnaste",
                "gyrostat",
                "habitude",
                "hachoir",
                "halte",
                "hameau",
                "hangar",
                "hanneton",
                "haricot",
                "harmonie",
                "harpon",
                "hasard",
                "he\u0301lium",
                "he\u0301matome",
                "herbe",
                "he\u0301risson",
                "hermine",
                "he\u0301ron",
                "he\u0301siter",
                "heureux",
                "hiberner",
                "hibou",
                "hilarant",
                "histoire",
                "hiver",
                "homard",
                "hommage",
                "homoge\u0300ne",
                "honneur",
                "honorer",
                "honteux",
                "horde",
                "horizon",
                "horloge",
                "hormone",
                "horrible",
                "houleux",
                "housse",
                "hublot",
                "huileux",
                "humain",
                "humble",
                "humide",
                "humour",
                "hurler",
                "hydromel",
                "hygie\u0300ne",
                "hymne",
                "hypnose",
                "idylle",
                "ignorer",
                "iguane",
                "illicite",
                "illusion",
                "image",
                "imbiber",
                "imiter",
                "immense",
                "immobile",
                "immuable",
                "impact",
                "impe\u0301rial",
                "implorer",
                "imposer",
                "imprimer",
                "imputer",
                "incarner",
                "incendie",
                "incident",
                "incliner",
                "incolore",
                "indexer",
                "indice",
                "inductif",
                "ine\u0301dit",
                "ineptie",
                "inexact",
                "infini",
                "infliger",
                "informer",
                "infusion",
                "inge\u0301rer",
                "inhaler",
                "inhiber",
                "injecter",
                "injure",
                "innocent",
                "inoculer",
                "inonder",
                "inscrire",
                "insecte",
                "insigne",
                "insolite",
                "inspirer",
                "instinct",
                "insulter",
                "intact",
                "intense",
                "intime",
                "intrigue",
                "intuitif",
                "inutile",
                "invasion",
                "inventer",
                "inviter",
                "invoquer",
                "ironique",
                "irradier",
                "irre\u0301el",
                "irriter",
                "isoler",
                "ivoire",
                "ivresse",
                "jaguar",
                "jaillir",
                "jambe",
                "janvier",
                "jardin",
                "jauger",
                "jaune",
                "javelot",
                "jetable",
                "jeton",
                "jeudi",
                "jeunesse",
                "joindre",
                "joncher",
                "jongler",
                "joueur",
                "jouissif",
                "journal",
                "jovial",
                "joyau",
                "joyeux",
                "jubiler",
                "jugement",
                "junior",
                "jupon",
                "juriste",
                "justice",
                "juteux",
                "juve\u0301nile",
                "kayak",
                "kimono",
                "kiosque",
                "label",
                "labial",
                "labourer",
                "lace\u0301rer",
                "lactose",
                "lagune",
                "laine",
                "laisser",
                "laitier",
                "lambeau",
                "lamelle",
                "lampe",
                "lanceur",
                "langage",
                "lanterne",
                "lapin",
                "largeur",
                "larme",
                "laurier",
                "lavabo",
                "lavoir",
                "lecture",
                "le\u0301gal",
                "le\u0301ger",
                "le\u0301gume",
                "lessive",
                "lettre",
                "levier",
                "lexique",
                "le\u0301zard",
                "liasse",
                "libe\u0301rer",
                "libre",
                "licence",
                "licorne",
                "lie\u0300ge",
                "lie\u0300vre",
                "ligature",
                "ligoter",
                "ligue",
                "limer",
                "limite",
                "limonade",
                "limpide",
                "line\u0301aire",
                "lingot",
                "lionceau",
                "liquide",
                "lisie\u0300re",
                "lister",
                "lithium",
                "litige",
                "littoral",
                "livreur",
                "logique",
                "lointain",
                "loisir",
                "lombric",
                "loterie",
                "louer",
                "lourd",
                "loutre",
                "louve",
                "loyal",
                "lubie",
                "lucide",
                "lucratif",
                "lueur",
                "lugubre",
                "luisant",
                "lumie\u0300re",
                "lunaire",
                "lundi",
                "luron",
                "lutter",
                "luxueux",
                "machine",
                "magasin",
                "magenta",
                "magique",
                "maigre",
                "maillon",
                "maintien",
                "mairie",
                "maison",
                "majorer",
                "malaxer",
                "male\u0301fice",
                "malheur",
                "malice",
                "mallette",
                "mammouth",
                "mandater",
                "maniable",
                "manquant",
                "manteau",
                "manuel",
                "marathon",
                "marbre",
                "marchand",
                "mardi",
                "maritime",
                "marqueur",
                "marron",
                "marteler",
                "mascotte",
                "massif",
                "mate\u0301riel",
                "matie\u0300re",
                "matraque",
                "maudire",
                "maussade",
                "mauve",
                "maximal",
                "me\u0301chant",
                "me\u0301connu",
                "me\u0301daille",
                "me\u0301decin",
                "me\u0301diter",
                "me\u0301duse",
                "meilleur",
                "me\u0301lange",
                "me\u0301lodie",
                "membre",
                "me\u0301moire",
                "menacer",
                "mener",
                "menhir",
                "mensonge",
                "mentor",
                "mercredi",
                "me\u0301rite",
                "merle",
                "messager",
                "mesure",
                "me\u0301tal",
                "me\u0301te\u0301ore",
                "me\u0301thode",
                "me\u0301tier",
                "meuble",
                "miauler",
                "microbe",
                "miette",
                "mignon",
                "migrer",
                "milieu",
                "million",
                "mimique",
                "mince",
                "mine\u0301ral",
                "minimal",
                "minorer",
                "minute",
                "miracle",
                "miroiter",
                "missile",
                "mixte",
                "mobile",
                "moderne",
                "moelleux",
                "mondial",
                "moniteur",
                "monnaie",
                "monotone",
                "monstre",
                "montagne",
                "monument",
                "moqueur",
                "morceau",
                "morsure",
                "mortier",
                "moteur",
                "motif",
                "mouche",
                "moufle",
                "moulin",
                "mousson",
                "mouton",
                "mouvant",
                "multiple",
                "munition",
                "muraille",
                "mure\u0300ne",
                "murmure",
                "muscle",
                "muse\u0301um",
                "musicien",
                "mutation",
                "muter",
                "mutuel",
                "myriade",
                "myrtille",
                "myste\u0300re",
                "mythique",
                "nageur",
                "nappe",
                "narquois",
                "narrer",
                "natation",
                "nation",
                "nature",
                "naufrage",
                "nautique",
                "navire",
                "ne\u0301buleux",
                "nectar",
                "ne\u0301faste",
                "ne\u0301gation",
                "ne\u0301gliger",
                "ne\u0301gocier",
                "neige",
                "nerveux",
                "nettoyer",
                "neurone",
                "neutron",
                "neveu",
                "niche",
                "nickel",
                "nitrate",
                "niveau",
                "noble",
                "nocif",
                "nocturne",
                "noirceur",
                "noisette",
                "nomade",
                "nombreux",
                "nommer",
                "normatif",
                "notable",
                "notifier",
                "notoire",
                "nourrir",
                "nouveau",
                "novateur",
                "novembre",
                "novice",
                "nuage",
                "nuancer",
                "nuire",
                "nuisible",
                "nume\u0301ro",
                "nuptial",
                "nuque",
                "nutritif",
                "obe\u0301ir",
                "objectif",
                "obliger",
                "obscur",
                "observer",
                "obstacle",
                "obtenir",
                "obturer",
                "occasion",
                "occuper",
                "oce\u0301an",
                "octobre",
                "octroyer",
                "octupler",
                "oculaire",
                "odeur",
                "odorant",
                "offenser",
                "officier",
                "offrir",
                "ogive",
                "oiseau",
                "oisillon",
                "olfactif",
                "olivier",
                "ombrage",
                "omettre",
                "onctueux",
                "onduler",
                "one\u0301reux",
                "onirique",
                "opale",
                "opaque",
                "ope\u0301rer",
                "opinion",
                "opportun",
                "opprimer",
                "opter",
                "optique",
                "orageux",
                "orange",
                "orbite",
                "ordonner",
                "oreille",
                "organe",
                "orgueil",
                "orifice",
                "ornement",
                "orque",
                "ortie",
                "osciller",
                "osmose",
                "ossature",
                "otarie",
                "ouragan",
                "ourson",
                "outil",
                "outrager",
                "ouvrage",
                "ovation",
                "oxyde",
                "oxyge\u0300ne",
                "ozone",
                "paisible",
                "palace",
                "palmare\u0300s",
                "palourde",
                "palper",
                "panache",
                "panda",
                "pangolin",
                "paniquer",
                "panneau",
                "panorama",
                "pantalon",
                "papaye",
                "papier",
                "papoter",
                "papyrus",
                "paradoxe",
                "parcelle",
                "paresse",
                "parfumer",
                "parler",
                "parole",
                "parrain",
                "parsemer",
                "partager",
                "parure",
                "parvenir",
                "passion",
                "paste\u0300que",
                "paternel",
                "patience",
                "patron",
                "pavillon",
                "pavoiser",
                "payer",
                "paysage",
                "peigne",
                "peintre",
                "pelage",
                "pe\u0301lican",
                "pelle",
                "pelouse",
                "peluche",
                "pendule",
                "pe\u0301ne\u0301trer",
                "pe\u0301nible",
                "pensif",
                "pe\u0301nurie",
                "pe\u0301pite",
                "pe\u0301plum",
                "perdrix",
                "perforer",
                "pe\u0301riode",
                "permuter",
                "perplexe",
                "persil",
                "perte",
                "peser",
                "pe\u0301tale",
                "petit",
                "pe\u0301trir",
                "peuple",
                "pharaon",
                "phobie",
                "phoque",
                "photon",
                "phrase",
                "physique",
                "piano",
                "pictural",
                "pie\u0300ce",
                "pierre",
                "pieuvre",
                "pilote",
                "pinceau",
                "pipette",
                "piquer",
                "pirogue",
                "piscine",
                "piston",
                "pivoter",
                "pixel",
                "pizza",
                "placard",
                "plafond",
                "plaisir",
                "planer",
                "plaque",
                "plastron",
                "plateau",
                "pleurer",
                "plexus",
                "pliage",
                "plomb",
                "plonger",
                "pluie",
                "plumage",
                "pochette",
                "poe\u0301sie",
                "poe\u0300te",
                "pointe",
                "poirier",
                "poisson",
                "poivre",
                "polaire",
                "policier",
                "pollen",
                "polygone",
                "pommade",
                "pompier",
                "ponctuel",
                "ponde\u0301rer",
                "poney",
                "portique",
                "position",
                "posse\u0301der",
                "posture",
                "potager",
                "poteau",
                "potion",
                "pouce",
                "poulain",
                "poumon",
                "pourpre",
                "poussin",
                "pouvoir",
                "prairie",
                "pratique",
                "pre\u0301cieux",
                "pre\u0301dire",
                "pre\u0301fixe",
                "pre\u0301lude",
                "pre\u0301nom",
                "pre\u0301sence",
                "pre\u0301texte",
                "pre\u0301voir",
                "primitif",
                "prince",
                "prison",
                "priver",
                "proble\u0300me",
                "proce\u0301der",
                "prodige",
                "profond",
                "progre\u0300s",
                "proie",
                "projeter",
                "prologue",
                "promener",
                "propre",
                "prospe\u0300re",
                "prote\u0301ger",
                "prouesse",
                "proverbe",
                "prudence",
                "pruneau",
                "psychose",
                "public",
                "puceron",
                "puiser",
                "pulpe",
                "pulsar",
                "punaise",
                "punitif",
                "pupitre",
                "purifier",
                "puzzle",
                "pyramide",
                "quasar",
                "querelle",
                "question",
                "quie\u0301tude",
                "quitter",
                "quotient",
                "racine",
                "raconter",
                "radieux",
                "ragondin",
                "raideur",
                "raisin",
                "ralentir",
                "rallonge",
                "ramasser",
                "rapide",
                "rasage",
                "ratisser",
                "ravager",
                "ravin",
                "rayonner",
                "re\u0301actif",
                "re\u0301agir",
                "re\u0301aliser",
                "re\u0301animer",
                "recevoir",
                "re\u0301citer",
                "re\u0301clamer",
                "re\u0301colter",
                "recruter",
                "reculer",
                "recycler",
                "re\u0301diger",
                "redouter",
                "refaire",
                "re\u0301flexe",
                "re\u0301former",
                "refrain",
                "refuge",
                "re\u0301galien",
                "re\u0301gion",
                "re\u0301glage",
                "re\u0301gulier",
                "re\u0301ite\u0301rer",
                "rejeter",
                "rejouer",
                "relatif",
                "relever",
                "relief",
                "remarque",
                "reme\u0300de",
                "remise",
                "remonter",
                "remplir",
                "remuer",
                "renard",
                "renfort",
                "renifler",
                "renoncer",
                "rentrer",
                "renvoi",
                "replier",
                "reporter",
                "reprise",
                "reptile",
                "requin",
                "re\u0301serve",
                "re\u0301sineux",
                "re\u0301soudre",
                "respect",
                "rester",
                "re\u0301sultat",
                "re\u0301tablir",
                "retenir",
                "re\u0301ticule",
                "retomber",
                "retracer",
                "re\u0301union",
                "re\u0301ussir",
                "revanche",
                "revivre",
                "re\u0301volte",
                "re\u0301vulsif",
                "richesse",
                "rideau",
                "rieur",
                "rigide",
                "rigoler",
                "rincer",
                "riposter",
                "risible",
                "risque",
                "rituel",
                "rival",
                "rivie\u0300re",
                "rocheux",
                "romance",
                "rompre",
                "ronce",
                "rondin",
                "roseau",
                "rosier",
                "rotatif",
                "rotor",
                "rotule",
                "rouge",
                "rouille",
                "rouleau",
                "routine",
                "royaume",
                "ruban",
                "rubis",
                "ruche",
                "ruelle",
                "rugueux",
                "ruiner",
                "ruisseau",
                "ruser",
                "rustique",
                "rythme",
                "sabler",
                "saboter",
                "sabre",
                "sacoche",
                "safari",
                "sagesse",
                "saisir",
                "salade",
                "salive",
                "salon",
                "saluer",
                "samedi",
                "sanction",
                "sanglier",
                "sarcasme",
                "sardine",
                "saturer",
                "saugrenu",
                "saumon",
                "sauter",
                "sauvage",
                "savant",
                "savonner",
                "scalpel",
                "scandale",
                "sce\u0301le\u0301rat",
                "sce\u0301nario",
                "sceptre",
                "sche\u0301ma",
                "science",
                "scinder",
                "score",
                "scrutin",
                "sculpter",
                "se\u0301ance",
                "se\u0301cable",
                "se\u0301cher",
                "secouer",
                "se\u0301cre\u0301ter",
                "se\u0301datif",
                "se\u0301duire",
                "seigneur",
                "se\u0301jour",
                "se\u0301lectif",
                "semaine",
                "sembler",
                "semence",
                "se\u0301minal",
                "se\u0301nateur",
                "sensible",
                "sentence",
                "se\u0301parer",
                "se\u0301quence",
                "serein",
                "sergent",
                "se\u0301rieux",
                "serrure",
                "se\u0301rum",
                "service",
                "se\u0301same",
                "se\u0301vir",
                "sevrage",
                "sextuple",
                "side\u0301ral",
                "sie\u0300cle",
                "sie\u0301ger",
                "siffler",
                "sigle",
                "signal",
                "silence",
                "silicium",
                "simple",
                "since\u0300re",
                "sinistre",
                "siphon",
                "sirop",
                "sismique",
                "situer",
                "skier",
                "social",
                "socle",
                "sodium",
                "soigneux",
                "soldat",
                "soleil",
                "solitude",
                "soluble",
                "sombre",
                "sommeil",
                "somnoler",
                "sonde",
                "songeur",
                "sonnette",
                "sonore",
                "sorcier",
                "sortir",
                "sosie",
                "sottise",
                "soucieux",
                "soudure",
                "souffle",
                "soulever",
                "soupape",
                "source",
                "soutirer",
                "souvenir",
                "spacieux",
                "spatial",
                "spe\u0301cial",
                "sphe\u0300re",
                "spiral",
                "stable",
                "station",
                "sternum",
                "stimulus",
                "stipuler",
                "strict",
                "studieux",
                "stupeur",
                "styliste",
                "sublime",
                "substrat",
                "subtil",
                "subvenir",
                "succe\u0300s",
                "sucre",
                "suffixe",
                "sugge\u0301rer",
                "suiveur",
                "sulfate",
                "superbe",
                "supplier",
                "surface",
                "suricate",
                "surmener",
                "surprise",
                "sursaut",
                "survie",
                "suspect",
                "syllabe",
                "symbole",
                "syme\u0301trie",
                "synapse",
                "syntaxe",
                "syste\u0300me",
                "tabac",
                "tablier",
                "tactile",
                "tailler",
                "talent",
                "talisman",
                "talonner",
                "tambour",
                "tamiser",
                "tangible",
                "tapis",
                "taquiner",
                "tarder",
                "tarif",
                "tartine",
                "tasse",
                "tatami",
                "tatouage",
                "taupe",
                "taureau",
                "taxer",
                "te\u0301moin",
                "temporel",
                "tenaille",
                "tendre",
                "teneur",
                "tenir",
                "tension",
                "terminer",
                "terne",
                "terrible",
                "te\u0301tine",
                "texte",
                "the\u0300me",
                "the\u0301orie",
                "the\u0301rapie",
                "thorax",
                "tibia",
                "tie\u0300de",
                "timide",
                "tirelire",
                "tiroir",
                "tissu",
                "titane",
                "titre",
                "tituber",
                "toboggan",
                "tole\u0301rant",
                "tomate",
                "tonique",
                "tonneau",
                "toponyme",
                "torche",
                "tordre",
                "tornade",
                "torpille",
                "torrent",
                "torse",
                "tortue",
                "totem",
                "toucher",
                "tournage",
                "tousser",
                "toxine",
                "traction",
                "trafic",
                "tragique",
                "trahir",
                "train",
                "trancher",
                "travail",
                "tre\u0300fle",
                "tremper",
                "tre\u0301sor",
                "treuil",
                "triage",
                "tribunal",
                "tricoter",
                "trilogie",
                "triomphe",
                "tripler",
                "triturer",
                "trivial",
                "trombone",
                "tronc",
                "tropical",
                "troupeau",
                "tuile",
                "tulipe",
                "tumulte",
                "tunnel",
                "turbine",
                "tuteur",
                "tutoyer",
                "tuyau",
                "tympan",
                "typhon",
                "typique",
                "tyran",
                "ubuesque",
                "ultime",
                "ultrason",
                "unanime",
                "unifier",
                "union",
                "unique",
                "unitaire",
                "univers",
                "uranium",
                "urbain",
                "urticant",
                "usage",
                "usine",
                "usuel",
                "usure",
                "utile",
                "utopie",
                "vacarme",
                "vaccin",
                "vagabond",
                "vague",
                "vaillant",
                "vaincre",
                "vaisseau",
                "valable",
                "valise",
                "vallon",
                "valve",
                "vampire",
                "vanille",
                "vapeur",
                "varier",
                "vaseux",
                "vassal",
                "vaste",
                "vecteur",
                "vedette",
                "ve\u0301ge\u0301tal",
                "ve\u0301hicule",
                "veinard",
                "ve\u0301loce",
                "vendredi",
                "ve\u0301ne\u0301rer",
                "venger",
                "venimeux",
                "ventouse",
                "verdure",
                "ve\u0301rin",
                "vernir",
                "verrou",
                "verser",
                "vertu",
                "veston",
                "ve\u0301te\u0301ran",
                "ve\u0301tuste",
                "vexant",
                "vexer",
                "viaduc",
                "viande",
                "victoire",
                "vidange",
                "vide\u0301o",
                "vignette",
                "vigueur",
                "vilain",
                "village",
                "vinaigre",
                "violon",
                "vipe\u0300re",
                "virement",
                "virtuose",
                "virus",
                "visage",
                "viseur",
                "vision",
                "visqueux",
                "visuel",
                "vital",
                "vitesse",
                "viticole",
                "vitrine",
                "vivace",
                "vivipare",
                "vocation",
                "voguer",
                "voile",
                "voisin",
                "voiture",
                "volaille",
                "volcan",
                "voltiger",
                "volume",
                "vorace",
                "vortex",
                "voter",
                "vouloir",
                "voyage",
                "voyelle",
                "wagon",
                "xe\u0301non",
                "yacht",
                "ze\u0300bre",
                "ze\u0301nith",
                "zeste",
                "zoologie"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/italian.json
          var require_italian = __commonJS({
            "node_modules/bip39/src/wordlists/italian.json"(exports, module) {
              module.exports = [
                "abaco",
                "abbaglio",
                "abbinato",
                "abete",
                "abisso",
                "abolire",
                "abrasivo",
                "abrogato",
                "accadere",
                "accenno",
                "accusato",
                "acetone",
                "achille",
                "acido",
                "acqua",
                "acre",
                "acrilico",
                "acrobata",
                "acuto",
                "adagio",
                "addebito",
                "addome",
                "adeguato",
                "aderire",
                "adipe",
                "adottare",
                "adulare",
                "affabile",
                "affetto",
                "affisso",
                "affranto",
                "aforisma",
                "afoso",
                "africano",
                "agave",
                "agente",
                "agevole",
                "aggancio",
                "agire",
                "agitare",
                "agonismo",
                "agricolo",
                "agrumeto",
                "aguzzo",
                "alabarda",
                "alato",
                "albatro",
                "alberato",
                "albo",
                "albume",
                "alce",
                "alcolico",
                "alettone",
                "alfa",
                "algebra",
                "aliante",
                "alibi",
                "alimento",
                "allagato",
                "allegro",
                "allievo",
                "allodola",
                "allusivo",
                "almeno",
                "alogeno",
                "alpaca",
                "alpestre",
                "altalena",
                "alterno",
                "alticcio",
                "altrove",
                "alunno",
                "alveolo",
                "alzare",
                "amalgama",
                "amanita",
                "amarena",
                "ambito",
                "ambrato",
                "ameba",
                "america",
                "ametista",
                "amico",
                "ammasso",
                "ammenda",
                "ammirare",
                "ammonito",
                "amore",
                "ampio",
                "ampliare",
                "amuleto",
                "anacardo",
                "anagrafe",
                "analista",
                "anarchia",
                "anatra",
                "anca",
                "ancella",
                "ancora",
                "andare",
                "andrea",
                "anello",
                "angelo",
                "angolare",
                "angusto",
                "anima",
                "annegare",
                "annidato",
                "anno",
                "annuncio",
                "anonimo",
                "anticipo",
                "anzi",
                "apatico",
                "apertura",
                "apode",
                "apparire",
                "appetito",
                "appoggio",
                "approdo",
                "appunto",
                "aprile",
                "arabica",
                "arachide",
                "aragosta",
                "araldica",
                "arancio",
                "aratura",
                "arazzo",
                "arbitro",
                "archivio",
                "ardito",
                "arenile",
                "argento",
                "argine",
                "arguto",
                "aria",
                "armonia",
                "arnese",
                "arredato",
                "arringa",
                "arrosto",
                "arsenico",
                "arso",
                "artefice",
                "arzillo",
                "asciutto",
                "ascolto",
                "asepsi",
                "asettico",
                "asfalto",
                "asino",
                "asola",
                "aspirato",
                "aspro",
                "assaggio",
                "asse",
                "assoluto",
                "assurdo",
                "asta",
                "astenuto",
                "astice",
                "astratto",
                "atavico",
                "ateismo",
                "atomico",
                "atono",
                "attesa",
                "attivare",
                "attorno",
                "attrito",
                "attuale",
                "ausilio",
                "austria",
                "autista",
                "autonomo",
                "autunno",
                "avanzato",
                "avere",
                "avvenire",
                "avviso",
                "avvolgere",
                "azione",
                "azoto",
                "azzimo",
                "azzurro",
                "babele",
                "baccano",
                "bacino",
                "baco",
                "badessa",
                "badilata",
                "bagnato",
                "baita",
                "balcone",
                "baldo",
                "balena",
                "ballata",
                "balzano",
                "bambino",
                "bandire",
                "baraonda",
                "barbaro",
                "barca",
                "baritono",
                "barlume",
                "barocco",
                "basilico",
                "basso",
                "batosta",
                "battuto",
                "baule",
                "bava",
                "bavosa",
                "becco",
                "beffa",
                "belgio",
                "belva",
                "benda",
                "benevole",
                "benigno",
                "benzina",
                "bere",
                "berlina",
                "beta",
                "bibita",
                "bici",
                "bidone",
                "bifido",
                "biga",
                "bilancia",
                "bimbo",
                "binocolo",
                "biologo",
                "bipede",
                "bipolare",
                "birbante",
                "birra",
                "biscotto",
                "bisesto",
                "bisnonno",
                "bisonte",
                "bisturi",
                "bizzarro",
                "blando",
                "blatta",
                "bollito",
                "bonifico",
                "bordo",
                "bosco",
                "botanico",
                "bottino",
                "bozzolo",
                "braccio",
                "bradipo",
                "brama",
                "branca",
                "bravura",
                "bretella",
                "brevetto",
                "brezza",
                "briglia",
                "brillante",
                "brindare",
                "broccolo",
                "brodo",
                "bronzina",
                "brullo",
                "bruno",
                "bubbone",
                "buca",
                "budino",
                "buffone",
                "buio",
                "bulbo",
                "buono",
                "burlone",
                "burrasca",
                "bussola",
                "busta",
                "cadetto",
                "caduco",
                "calamaro",
                "calcolo",
                "calesse",
                "calibro",
                "calmo",
                "caloria",
                "cambusa",
                "camerata",
                "camicia",
                "cammino",
                "camola",
                "campale",
                "canapa",
                "candela",
                "cane",
                "canino",
                "canotto",
                "cantina",
                "capace",
                "capello",
                "capitolo",
                "capogiro",
                "cappero",
                "capra",
                "capsula",
                "carapace",
                "carcassa",
                "cardo",
                "carisma",
                "carovana",
                "carretto",
                "cartolina",
                "casaccio",
                "cascata",
                "caserma",
                "caso",
                "cassone",
                "castello",
                "casuale",
                "catasta",
                "catena",
                "catrame",
                "cauto",
                "cavillo",
                "cedibile",
                "cedrata",
                "cefalo",
                "celebre",
                "cellulare",
                "cena",
                "cenone",
                "centesimo",
                "ceramica",
                "cercare",
                "certo",
                "cerume",
                "cervello",
                "cesoia",
                "cespo",
                "ceto",
                "chela",
                "chiaro",
                "chicca",
                "chiedere",
                "chimera",
                "china",
                "chirurgo",
                "chitarra",
                "ciao",
                "ciclismo",
                "cifrare",
                "cigno",
                "cilindro",
                "ciottolo",
                "circa",
                "cirrosi",
                "citrico",
                "cittadino",
                "ciuffo",
                "civetta",
                "civile",
                "classico",
                "clinica",
                "cloro",
                "cocco",
                "codardo",
                "codice",
                "coerente",
                "cognome",
                "collare",
                "colmato",
                "colore",
                "colposo",
                "coltivato",
                "colza",
                "coma",
                "cometa",
                "commando",
                "comodo",
                "computer",
                "comune",
                "conciso",
                "condurre",
                "conferma",
                "congelare",
                "coniuge",
                "connesso",
                "conoscere",
                "consumo",
                "continuo",
                "convegno",
                "coperto",
                "copione",
                "coppia",
                "copricapo",
                "corazza",
                "cordata",
                "coricato",
                "cornice",
                "corolla",
                "corpo",
                "corredo",
                "corsia",
                "cortese",
                "cosmico",
                "costante",
                "cottura",
                "covato",
                "cratere",
                "cravatta",
                "creato",
                "credere",
                "cremoso",
                "crescita",
                "creta",
                "criceto",
                "crinale",
                "crisi",
                "critico",
                "croce",
                "cronaca",
                "crostata",
                "cruciale",
                "crusca",
                "cucire",
                "cuculo",
                "cugino",
                "cullato",
                "cupola",
                "curatore",
                "cursore",
                "curvo",
                "cuscino",
                "custode",
                "dado",
                "daino",
                "dalmata",
                "damerino",
                "daniela",
                "dannoso",
                "danzare",
                "datato",
                "davanti",
                "davvero",
                "debutto",
                "decennio",
                "deciso",
                "declino",
                "decollo",
                "decreto",
                "dedicato",
                "definito",
                "deforme",
                "degno",
                "delegare",
                "delfino",
                "delirio",
                "delta",
                "demenza",
                "denotato",
                "dentro",
                "deposito",
                "derapata",
                "derivare",
                "deroga",
                "descritto",
                "deserto",
                "desiderio",
                "desumere",
                "detersivo",
                "devoto",
                "diametro",
                "dicembre",
                "diedro",
                "difeso",
                "diffuso",
                "digerire",
                "digitale",
                "diluvio",
                "dinamico",
                "dinnanzi",
                "dipinto",
                "diploma",
                "dipolo",
                "diradare",
                "dire",
                "dirotto",
                "dirupo",
                "disagio",
                "discreto",
                "disfare",
                "disgelo",
                "disposto",
                "distanza",
                "disumano",
                "dito",
                "divano",
                "divelto",
                "dividere",
                "divorato",
                "doblone",
                "docente",
                "doganale",
                "dogma",
                "dolce",
                "domato",
                "domenica",
                "dominare",
                "dondolo",
                "dono",
                "dormire",
                "dote",
                "dottore",
                "dovuto",
                "dozzina",
                "drago",
                "druido",
                "dubbio",
                "dubitare",
                "ducale",
                "duna",
                "duomo",
                "duplice",
                "duraturo",
                "ebano",
                "eccesso",
                "ecco",
                "eclissi",
                "economia",
                "edera",
                "edicola",
                "edile",
                "editoria",
                "educare",
                "egemonia",
                "egli",
                "egoismo",
                "egregio",
                "elaborato",
                "elargire",
                "elegante",
                "elencato",
                "eletto",
                "elevare",
                "elfico",
                "elica",
                "elmo",
                "elsa",
                "eluso",
                "emanato",
                "emblema",
                "emesso",
                "emiro",
                "emotivo",
                "emozione",
                "empirico",
                "emulo",
                "endemico",
                "enduro",
                "energia",
                "enfasi",
                "enoteca",
                "entrare",
                "enzima",
                "epatite",
                "epilogo",
                "episodio",
                "epocale",
                "eppure",
                "equatore",
                "erario",
                "erba",
                "erboso",
                "erede",
                "eremita",
                "erigere",
                "ermetico",
                "eroe",
                "erosivo",
                "errante",
                "esagono",
                "esame",
                "esanime",
                "esaudire",
                "esca",
                "esempio",
                "esercito",
                "esibito",
                "esigente",
                "esistere",
                "esito",
                "esofago",
                "esortato",
                "esoso",
                "espanso",
                "espresso",
                "essenza",
                "esso",
                "esteso",
                "estimare",
                "estonia",
                "estroso",
                "esultare",
                "etilico",
                "etnico",
                "etrusco",
                "etto",
                "euclideo",
                "europa",
                "evaso",
                "evidenza",
                "evitato",
                "evoluto",
                "evviva",
                "fabbrica",
                "faccenda",
                "fachiro",
                "falco",
                "famiglia",
                "fanale",
                "fanfara",
                "fango",
                "fantasma",
                "fare",
                "farfalla",
                "farinoso",
                "farmaco",
                "fascia",
                "fastoso",
                "fasullo",
                "faticare",
                "fato",
                "favoloso",
                "febbre",
                "fecola",
                "fede",
                "fegato",
                "felpa",
                "feltro",
                "femmina",
                "fendere",
                "fenomeno",
                "fermento",
                "ferro",
                "fertile",
                "fessura",
                "festivo",
                "fetta",
                "feudo",
                "fiaba",
                "fiducia",
                "fifa",
                "figurato",
                "filo",
                "finanza",
                "finestra",
                "finire",
                "fiore",
                "fiscale",
                "fisico",
                "fiume",
                "flacone",
                "flamenco",
                "flebo",
                "flemma",
                "florido",
                "fluente",
                "fluoro",
                "fobico",
                "focaccia",
                "focoso",
                "foderato",
                "foglio",
                "folata",
                "folclore",
                "folgore",
                "fondente",
                "fonetico",
                "fonia",
                "fontana",
                "forbito",
                "forchetta",
                "foresta",
                "formica",
                "fornaio",
                "foro",
                "fortezza",
                "forzare",
                "fosfato",
                "fosso",
                "fracasso",
                "frana",
                "frassino",
                "fratello",
                "freccetta",
                "frenata",
                "fresco",
                "frigo",
                "frollino",
                "fronde",
                "frugale",
                "frutta",
                "fucilata",
                "fucsia",
                "fuggente",
                "fulmine",
                "fulvo",
                "fumante",
                "fumetto",
                "fumoso",
                "fune",
                "funzione",
                "fuoco",
                "furbo",
                "furgone",
                "furore",
                "fuso",
                "futile",
                "gabbiano",
                "gaffe",
                "galateo",
                "gallina",
                "galoppo",
                "gambero",
                "gamma",
                "garanzia",
                "garbo",
                "garofano",
                "garzone",
                "gasdotto",
                "gasolio",
                "gastrico",
                "gatto",
                "gaudio",
                "gazebo",
                "gazzella",
                "geco",
                "gelatina",
                "gelso",
                "gemello",
                "gemmato",
                "gene",
                "genitore",
                "gennaio",
                "genotipo",
                "gergo",
                "ghepardo",
                "ghiaccio",
                "ghisa",
                "giallo",
                "gilda",
                "ginepro",
                "giocare",
                "gioiello",
                "giorno",
                "giove",
                "girato",
                "girone",
                "gittata",
                "giudizio",
                "giurato",
                "giusto",
                "globulo",
                "glutine",
                "gnomo",
                "gobba",
                "golf",
                "gomito",
                "gommone",
                "gonfio",
                "gonna",
                "governo",
                "gracile",
                "grado",
                "grafico",
                "grammo",
                "grande",
                "grattare",
                "gravoso",
                "grazia",
                "greca",
                "gregge",
                "grifone",
                "grigio",
                "grinza",
                "grotta",
                "gruppo",
                "guadagno",
                "guaio",
                "guanto",
                "guardare",
                "gufo",
                "guidare",
                "ibernato",
                "icona",
                "identico",
                "idillio",
                "idolo",
                "idra",
                "idrico",
                "idrogeno",
                "igiene",
                "ignaro",
                "ignorato",
                "ilare",
                "illeso",
                "illogico",
                "illudere",
                "imballo",
                "imbevuto",
                "imbocco",
                "imbuto",
                "immane",
                "immerso",
                "immolato",
                "impacco",
                "impeto",
                "impiego",
                "importo",
                "impronta",
                "inalare",
                "inarcare",
                "inattivo",
                "incanto",
                "incendio",
                "inchino",
                "incisivo",
                "incluso",
                "incontro",
                "incrocio",
                "incubo",
                "indagine",
                "india",
                "indole",
                "inedito",
                "infatti",
                "infilare",
                "inflitto",
                "ingaggio",
                "ingegno",
                "inglese",
                "ingordo",
                "ingrosso",
                "innesco",
                "inodore",
                "inoltrare",
                "inondato",
                "insano",
                "insetto",
                "insieme",
                "insonnia",
                "insulina",
                "intasato",
                "intero",
                "intonaco",
                "intuito",
                "inumidire",
                "invalido",
                "invece",
                "invito",
                "iperbole",
                "ipnotico",
                "ipotesi",
                "ippica",
                "iride",
                "irlanda",
                "ironico",
                "irrigato",
                "irrorare",
                "isolato",
                "isotopo",
                "isterico",
                "istituto",
                "istrice",
                "italia",
                "iterare",
                "labbro",
                "labirinto",
                "lacca",
                "lacerato",
                "lacrima",
                "lacuna",
                "laddove",
                "lago",
                "lampo",
                "lancetta",
                "lanterna",
                "lardoso",
                "larga",
                "laringe",
                "lastra",
                "latenza",
                "latino",
                "lattuga",
                "lavagna",
                "lavoro",
                "legale",
                "leggero",
                "lembo",
                "lentezza",
                "lenza",
                "leone",
                "lepre",
                "lesivo",
                "lessato",
                "lesto",
                "letterale",
                "leva",
                "levigato",
                "libero",
                "lido",
                "lievito",
                "lilla",
                "limatura",
                "limitare",
                "limpido",
                "lineare",
                "lingua",
                "liquido",
                "lira",
                "lirica",
                "lisca",
                "lite",
                "litigio",
                "livrea",
                "locanda",
                "lode",
                "logica",
                "lombare",
                "londra",
                "longevo",
                "loquace",
                "lorenzo",
                "loto",
                "lotteria",
                "luce",
                "lucidato",
                "lumaca",
                "luminoso",
                "lungo",
                "lupo",
                "luppolo",
                "lusinga",
                "lusso",
                "lutto",
                "macabro",
                "macchina",
                "macero",
                "macinato",
                "madama",
                "magico",
                "maglia",
                "magnete",
                "magro",
                "maiolica",
                "malafede",
                "malgrado",
                "malinteso",
                "malsano",
                "malto",
                "malumore",
                "mana",
                "mancia",
                "mandorla",
                "mangiare",
                "manifesto",
                "mannaro",
                "manovra",
                "mansarda",
                "mantide",
                "manubrio",
                "mappa",
                "maratona",
                "marcire",
                "maretta",
                "marmo",
                "marsupio",
                "maschera",
                "massaia",
                "mastino",
                "materasso",
                "matricola",
                "mattone",
                "maturo",
                "mazurca",
                "meandro",
                "meccanico",
                "mecenate",
                "medesimo",
                "meditare",
                "mega",
                "melassa",
                "melis",
                "melodia",
                "meninge",
                "meno",
                "mensola",
                "mercurio",
                "merenda",
                "merlo",
                "meschino",
                "mese",
                "messere",
                "mestolo",
                "metallo",
                "metodo",
                "mettere",
                "miagolare",
                "mica",
                "micelio",
                "michele",
                "microbo",
                "midollo",
                "miele",
                "migliore",
                "milano",
                "milite",
                "mimosa",
                "minerale",
                "mini",
                "minore",
                "mirino",
                "mirtillo",
                "miscela",
                "missiva",
                "misto",
                "misurare",
                "mitezza",
                "mitigare",
                "mitra",
                "mittente",
                "mnemonico",
                "modello",
                "modifica",
                "modulo",
                "mogano",
                "mogio",
                "mole",
                "molosso",
                "monastero",
                "monco",
                "mondina",
                "monetario",
                "monile",
                "monotono",
                "monsone",
                "montato",
                "monviso",
                "mora",
                "mordere",
                "morsicato",
                "mostro",
                "motivato",
                "motosega",
                "motto",
                "movenza",
                "movimento",
                "mozzo",
                "mucca",
                "mucosa",
                "muffa",
                "mughetto",
                "mugnaio",
                "mulatto",
                "mulinello",
                "multiplo",
                "mummia",
                "munto",
                "muovere",
                "murale",
                "musa",
                "muscolo",
                "musica",
                "mutevole",
                "muto",
                "nababbo",
                "nafta",
                "nanometro",
                "narciso",
                "narice",
                "narrato",
                "nascere",
                "nastrare",
                "naturale",
                "nautica",
                "naviglio",
                "nebulosa",
                "necrosi",
                "negativo",
                "negozio",
                "nemmeno",
                "neofita",
                "neretto",
                "nervo",
                "nessuno",
                "nettuno",
                "neutrale",
                "neve",
                "nevrotico",
                "nicchia",
                "ninfa",
                "nitido",
                "nobile",
                "nocivo",
                "nodo",
                "nome",
                "nomina",
                "nordico",
                "normale",
                "norvegese",
                "nostrano",
                "notare",
                "notizia",
                "notturno",
                "novella",
                "nucleo",
                "nulla",
                "numero",
                "nuovo",
                "nutrire",
                "nuvola",
                "nuziale",
                "oasi",
                "obbedire",
                "obbligo",
                "obelisco",
                "oblio",
                "obolo",
                "obsoleto",
                "occasione",
                "occhio",
                "occidente",
                "occorrere",
                "occultare",
                "ocra",
                "oculato",
                "odierno",
                "odorare",
                "offerta",
                "offrire",
                "offuscato",
                "oggetto",
                "oggi",
                "ognuno",
                "olandese",
                "olfatto",
                "oliato",
                "oliva",
                "ologramma",
                "oltre",
                "omaggio",
                "ombelico",
                "ombra",
                "omega",
                "omissione",
                "ondoso",
                "onere",
                "onice",
                "onnivoro",
                "onorevole",
                "onta",
                "operato",
                "opinione",
                "opposto",
                "oracolo",
                "orafo",
                "ordine",
                "orecchino",
                "orefice",
                "orfano",
                "organico",
                "origine",
                "orizzonte",
                "orma",
                "ormeggio",
                "ornativo",
                "orologio",
                "orrendo",
                "orribile",
                "ortensia",
                "ortica",
                "orzata",
                "orzo",
                "osare",
                "oscurare",
                "osmosi",
                "ospedale",
                "ospite",
                "ossa",
                "ossidare",
                "ostacolo",
                "oste",
                "otite",
                "otre",
                "ottagono",
                "ottimo",
                "ottobre",
                "ovale",
                "ovest",
                "ovino",
                "oviparo",
                "ovocito",
                "ovunque",
                "ovviare",
                "ozio",
                "pacchetto",
                "pace",
                "pacifico",
                "padella",
                "padrone",
                "paese",
                "paga",
                "pagina",
                "palazzina",
                "palesare",
                "pallido",
                "palo",
                "palude",
                "pandoro",
                "pannello",
                "paolo",
                "paonazzo",
                "paprica",
                "parabola",
                "parcella",
                "parere",
                "pargolo",
                "pari",
                "parlato",
                "parola",
                "partire",
                "parvenza",
                "parziale",
                "passivo",
                "pasticca",
                "patacca",
                "patologia",
                "pattume",
                "pavone",
                "peccato",
                "pedalare",
                "pedonale",
                "peggio",
                "peloso",
                "penare",
                "pendice",
                "penisola",
                "pennuto",
                "penombra",
                "pensare",
                "pentola",
                "pepe",
                "pepita",
                "perbene",
                "percorso",
                "perdonato",
                "perforare",
                "pergamena",
                "periodo",
                "permesso",
                "perno",
                "perplesso",
                "persuaso",
                "pertugio",
                "pervaso",
                "pesatore",
                "pesista",
                "peso",
                "pestifero",
                "petalo",
                "pettine",
                "petulante",
                "pezzo",
                "piacere",
                "pianta",
                "piattino",
                "piccino",
                "picozza",
                "piega",
                "pietra",
                "piffero",
                "pigiama",
                "pigolio",
                "pigro",
                "pila",
                "pilifero",
                "pillola",
                "pilota",
                "pimpante",
                "pineta",
                "pinna",
                "pinolo",
                "pioggia",
                "piombo",
                "piramide",
                "piretico",
                "pirite",
                "pirolisi",
                "pitone",
                "pizzico",
                "placebo",
                "planare",
                "plasma",
                "platano",
                "plenario",
                "pochezza",
                "poderoso",
                "podismo",
                "poesia",
                "poggiare",
                "polenta",
                "poligono",
                "pollice",
                "polmonite",
                "polpetta",
                "polso",
                "poltrona",
                "polvere",
                "pomice",
                "pomodoro",
                "ponte",
                "popoloso",
                "porfido",
                "poroso",
                "porpora",
                "porre",
                "portata",
                "posa",
                "positivo",
                "possesso",
                "postulato",
                "potassio",
                "potere",
                "pranzo",
                "prassi",
                "pratica",
                "precluso",
                "predica",
                "prefisso",
                "pregiato",
                "prelievo",
                "premere",
                "prenotare",
                "preparato",
                "presenza",
                "pretesto",
                "prevalso",
                "prima",
                "principe",
                "privato",
                "problema",
                "procura",
                "produrre",
                "profumo",
                "progetto",
                "prolunga",
                "promessa",
                "pronome",
                "proposta",
                "proroga",
                "proteso",
                "prova",
                "prudente",
                "prugna",
                "prurito",
                "psiche",
                "pubblico",
                "pudica",
                "pugilato",
                "pugno",
                "pulce",
                "pulito",
                "pulsante",
                "puntare",
                "pupazzo",
                "pupilla",
                "puro",
                "quadro",
                "qualcosa",
                "quasi",
                "querela",
                "quota",
                "raccolto",
                "raddoppio",
                "radicale",
                "radunato",
                "raffica",
                "ragazzo",
                "ragione",
                "ragno",
                "ramarro",
                "ramingo",
                "ramo",
                "randagio",
                "rantolare",
                "rapato",
                "rapina",
                "rappreso",
                "rasatura",
                "raschiato",
                "rasente",
                "rassegna",
                "rastrello",
                "rata",
                "ravveduto",
                "reale",
                "recepire",
                "recinto",
                "recluta",
                "recondito",
                "recupero",
                "reddito",
                "redimere",
                "regalato",
                "registro",
                "regola",
                "regresso",
                "relazione",
                "remare",
                "remoto",
                "renna",
                "replica",
                "reprimere",
                "reputare",
                "resa",
                "residente",
                "responso",
                "restauro",
                "rete",
                "retina",
                "retorica",
                "rettifica",
                "revocato",
                "riassunto",
                "ribadire",
                "ribelle",
                "ribrezzo",
                "ricarica",
                "ricco",
                "ricevere",
                "riciclato",
                "ricordo",
                "ricreduto",
                "ridicolo",
                "ridurre",
                "rifasare",
                "riflesso",
                "riforma",
                "rifugio",
                "rigare",
                "rigettato",
                "righello",
                "rilassato",
                "rilevato",
                "rimanere",
                "rimbalzo",
                "rimedio",
                "rimorchio",
                "rinascita",
                "rincaro",
                "rinforzo",
                "rinnovo",
                "rinomato",
                "rinsavito",
                "rintocco",
                "rinuncia",
                "rinvenire",
                "riparato",
                "ripetuto",
                "ripieno",
                "riportare",
                "ripresa",
                "ripulire",
                "risata",
                "rischio",
                "riserva",
                "risibile",
                "riso",
                "rispetto",
                "ristoro",
                "risultato",
                "risvolto",
                "ritardo",
                "ritegno",
                "ritmico",
                "ritrovo",
                "riunione",
                "riva",
                "riverso",
                "rivincita",
                "rivolto",
                "rizoma",
                "roba",
                "robotico",
                "robusto",
                "roccia",
                "roco",
                "rodaggio",
                "rodere",
                "roditore",
                "rogito",
                "rollio",
                "romantico",
                "rompere",
                "ronzio",
                "rosolare",
                "rospo",
                "rotante",
                "rotondo",
                "rotula",
                "rovescio",
                "rubizzo",
                "rubrica",
                "ruga",
                "rullino",
                "rumine",
                "rumoroso",
                "ruolo",
                "rupe",
                "russare",
                "rustico",
                "sabato",
                "sabbiare",
                "sabotato",
                "sagoma",
                "salasso",
                "saldatura",
                "salgemma",
                "salivare",
                "salmone",
                "salone",
                "saltare",
                "saluto",
                "salvo",
                "sapere",
                "sapido",
                "saporito",
                "saraceno",
                "sarcasmo",
                "sarto",
                "sassoso",
                "satellite",
                "satira",
                "satollo",
                "saturno",
                "savana",
                "savio",
                "saziato",
                "sbadiglio",
                "sbalzo",
                "sbancato",
                "sbarra",
                "sbattere",
                "sbavare",
                "sbendare",
                "sbirciare",
                "sbloccato",
                "sbocciato",
                "sbrinare",
                "sbruffone",
                "sbuffare",
                "scabroso",
                "scadenza",
                "scala",
                "scambiare",
                "scandalo",
                "scapola",
                "scarso",
                "scatenare",
                "scavato",
                "scelto",
                "scenico",
                "scettro",
                "scheda",
                "schiena",
                "sciarpa",
                "scienza",
                "scindere",
                "scippo",
                "sciroppo",
                "scivolo",
                "sclerare",
                "scodella",
                "scolpito",
                "scomparto",
                "sconforto",
                "scoprire",
                "scorta",
                "scossone",
                "scozzese",
                "scriba",
                "scrollare",
                "scrutinio",
                "scuderia",
                "scultore",
                "scuola",
                "scuro",
                "scusare",
                "sdebitare",
                "sdoganare",
                "seccatura",
                "secondo",
                "sedano",
                "seggiola",
                "segnalato",
                "segregato",
                "seguito",
                "selciato",
                "selettivo",
                "sella",
                "selvaggio",
                "semaforo",
                "sembrare",
                "seme",
                "seminato",
                "sempre",
                "senso",
                "sentire",
                "sepolto",
                "sequenza",
                "serata",
                "serbato",
                "sereno",
                "serio",
                "serpente",
                "serraglio",
                "servire",
                "sestina",
                "setola",
                "settimana",
                "sfacelo",
                "sfaldare",
                "sfamato",
                "sfarzoso",
                "sfaticato",
                "sfera",
                "sfida",
                "sfilato",
                "sfinge",
                "sfocato",
                "sfoderare",
                "sfogo",
                "sfoltire",
                "sforzato",
                "sfratto",
                "sfruttato",
                "sfuggito",
                "sfumare",
                "sfuso",
                "sgabello",
                "sgarbato",
                "sgonfiare",
                "sgorbio",
                "sgrassato",
                "sguardo",
                "sibilo",
                "siccome",
                "sierra",
                "sigla",
                "signore",
                "silenzio",
                "sillaba",
                "simbolo",
                "simpatico",
                "simulato",
                "sinfonia",
                "singolo",
                "sinistro",
                "sino",
                "sintesi",
                "sinusoide",
                "sipario",
                "sisma",
                "sistole",
                "situato",
                "slitta",
                "slogatura",
                "sloveno",
                "smarrito",
                "smemorato",
                "smentito",
                "smeraldo",
                "smilzo",
                "smontare",
                "smottato",
                "smussato",
                "snellire",
                "snervato",
                "snodo",
                "sobbalzo",
                "sobrio",
                "soccorso",
                "sociale",
                "sodale",
                "soffitto",
                "sogno",
                "soldato",
                "solenne",
                "solido",
                "sollazzo",
                "solo",
                "solubile",
                "solvente",
                "somatico",
                "somma",
                "sonda",
                "sonetto",
                "sonnifero",
                "sopire",
                "soppeso",
                "sopra",
                "sorgere",
                "sorpasso",
                "sorriso",
                "sorso",
                "sorteggio",
                "sorvolato",
                "sospiro",
                "sosta",
                "sottile",
                "spada",
                "spalla",
                "spargere",
                "spatola",
                "spavento",
                "spazzola",
                "specie",
                "spedire",
                "spegnere",
                "spelatura",
                "speranza",
                "spessore",
                "spettrale",
                "spezzato",
                "spia",
                "spigoloso",
                "spillato",
                "spinoso",
                "spirale",
                "splendido",
                "sportivo",
                "sposo",
                "spranga",
                "sprecare",
                "spronato",
                "spruzzo",
                "spuntino",
                "squillo",
                "sradicare",
                "srotolato",
                "stabile",
                "stacco",
                "staffa",
                "stagnare",
                "stampato",
                "stantio",
                "starnuto",
                "stasera",
                "statuto",
                "stelo",
                "steppa",
                "sterzo",
                "stiletto",
                "stima",
                "stirpe",
                "stivale",
                "stizzoso",
                "stonato",
                "storico",
                "strappo",
                "stregato",
                "stridulo",
                "strozzare",
                "strutto",
                "stuccare",
                "stufo",
                "stupendo",
                "subentro",
                "succoso",
                "sudore",
                "suggerito",
                "sugo",
                "sultano",
                "suonare",
                "superbo",
                "supporto",
                "surgelato",
                "surrogato",
                "sussurro",
                "sutura",
                "svagare",
                "svedese",
                "sveglio",
                "svelare",
                "svenuto",
                "svezia",
                "sviluppo",
                "svista",
                "svizzera",
                "svolta",
                "svuotare",
                "tabacco",
                "tabulato",
                "tacciare",
                "taciturno",
                "tale",
                "talismano",
                "tampone",
                "tannino",
                "tara",
                "tardivo",
                "targato",
                "tariffa",
                "tarpare",
                "tartaruga",
                "tasto",
                "tattico",
                "taverna",
                "tavolata",
                "tazza",
                "teca",
                "tecnico",
                "telefono",
                "temerario",
                "tempo",
                "temuto",
                "tendone",
                "tenero",
                "tensione",
                "tentacolo",
                "teorema",
                "terme",
                "terrazzo",
                "terzetto",
                "tesi",
                "tesserato",
                "testato",
                "tetro",
                "tettoia",
                "tifare",
                "tigella",
                "timbro",
                "tinto",
                "tipico",
                "tipografo",
                "tiraggio",
                "tiro",
                "titanio",
                "titolo",
                "titubante",
                "tizio",
                "tizzone",
                "toccare",
                "tollerare",
                "tolto",
                "tombola",
                "tomo",
                "tonfo",
                "tonsilla",
                "topazio",
                "topologia",
                "toppa",
                "torba",
                "tornare",
                "torrone",
                "tortora",
                "toscano",
                "tossire",
                "tostatura",
                "totano",
                "trabocco",
                "trachea",
                "trafila",
                "tragedia",
                "tralcio",
                "tramonto",
                "transito",
                "trapano",
                "trarre",
                "trasloco",
                "trattato",
                "trave",
                "treccia",
                "tremolio",
                "trespolo",
                "tributo",
                "tricheco",
                "trifoglio",
                "trillo",
                "trincea",
                "trio",
                "tristezza",
                "triturato",
                "trivella",
                "tromba",
                "trono",
                "troppo",
                "trottola",
                "trovare",
                "truccato",
                "tubatura",
                "tuffato",
                "tulipano",
                "tumulto",
                "tunisia",
                "turbare",
                "turchino",
                "tuta",
                "tutela",
                "ubicato",
                "uccello",
                "uccisore",
                "udire",
                "uditivo",
                "uffa",
                "ufficio",
                "uguale",
                "ulisse",
                "ultimato",
                "umano",
                "umile",
                "umorismo",
                "uncinetto",
                "ungere",
                "ungherese",
                "unicorno",
                "unificato",
                "unisono",
                "unitario",
                "unte",
                "uovo",
                "upupa",
                "uragano",
                "urgenza",
                "urlo",
                "usanza",
                "usato",
                "uscito",
                "usignolo",
                "usuraio",
                "utensile",
                "utilizzo",
                "utopia",
                "vacante",
                "vaccinato",
                "vagabondo",
                "vagliato",
                "valanga",
                "valgo",
                "valico",
                "valletta",
                "valoroso",
                "valutare",
                "valvola",
                "vampata",
                "vangare",
                "vanitoso",
                "vano",
                "vantaggio",
                "vanvera",
                "vapore",
                "varano",
                "varcato",
                "variante",
                "vasca",
                "vedetta",
                "vedova",
                "veduto",
                "vegetale",
                "veicolo",
                "velcro",
                "velina",
                "velluto",
                "veloce",
                "venato",
                "vendemmia",
                "vento",
                "verace",
                "verbale",
                "vergogna",
                "verifica",
                "vero",
                "verruca",
                "verticale",
                "vescica",
                "vessillo",
                "vestale",
                "veterano",
                "vetrina",
                "vetusto",
                "viandante",
                "vibrante",
                "vicenda",
                "vichingo",
                "vicinanza",
                "vidimare",
                "vigilia",
                "vigneto",
                "vigore",
                "vile",
                "villano",
                "vimini",
                "vincitore",
                "viola",
                "vipera",
                "virgola",
                "virologo",
                "virulento",
                "viscoso",
                "visione",
                "vispo",
                "vissuto",
                "visura",
                "vita",
                "vitello",
                "vittima",
                "vivanda",
                "vivido",
                "viziare",
                "voce",
                "voga",
                "volatile",
                "volere",
                "volpe",
                "voragine",
                "vulcano",
                "zampogna",
                "zanna",
                "zappato",
                "zattera",
                "zavorra",
                "zefiro",
                "zelante",
                "zelo",
                "zenzero",
                "zerbino",
                "zibetto",
                "zinco",
                "zircone",
                "zitto",
                "zolla",
                "zotico",
                "zucchero",
                "zufolo",
                "zulu",
                "zuppa"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/spanish.json
          var require_spanish = __commonJS({
            "node_modules/bip39/src/wordlists/spanish.json"(exports, module) {
              module.exports = [
                "a\u0301baco",
                "abdomen",
                "abeja",
                "abierto",
                "abogado",
                "abono",
                "aborto",
                "abrazo",
                "abrir",
                "abuelo",
                "abuso",
                "acabar",
                "academia",
                "acceso",
                "accio\u0301n",
                "aceite",
                "acelga",
                "acento",
                "aceptar",
                "a\u0301cido",
                "aclarar",
                "acne\u0301",
                "acoger",
                "acoso",
                "activo",
                "acto",
                "actriz",
                "actuar",
                "acudir",
                "acuerdo",
                "acusar",
                "adicto",
                "admitir",
                "adoptar",
                "adorno",
                "aduana",
                "adulto",
                "ae\u0301reo",
                "afectar",
                "aficio\u0301n",
                "afinar",
                "afirmar",
                "a\u0301gil",
                "agitar",
                "agoni\u0301a",
                "agosto",
                "agotar",
                "agregar",
                "agrio",
                "agua",
                "agudo",
                "a\u0301guila",
                "aguja",
                "ahogo",
                "ahorro",
                "aire",
                "aislar",
                "ajedrez",
                "ajeno",
                "ajuste",
                "alacra\u0301n",
                "alambre",
                "alarma",
                "alba",
                "a\u0301lbum",
                "alcalde",
                "aldea",
                "alegre",
                "alejar",
                "alerta",
                "aleta",
                "alfiler",
                "alga",
                "algodo\u0301n",
                "aliado",
                "aliento",
                "alivio",
                "alma",
                "almeja",
                "almi\u0301bar",
                "altar",
                "alteza",
                "altivo",
                "alto",
                "altura",
                "alumno",
                "alzar",
                "amable",
                "amante",
                "amapola",
                "amargo",
                "amasar",
                "a\u0301mbar",
                "a\u0301mbito",
                "ameno",
                "amigo",
                "amistad",
                "amor",
                "amparo",
                "amplio",
                "ancho",
                "anciano",
                "ancla",
                "andar",
                "ande\u0301n",
                "anemia",
                "a\u0301ngulo",
                "anillo",
                "a\u0301nimo",
                "ani\u0301s",
                "anotar",
                "antena",
                "antiguo",
                "antojo",
                "anual",
                "anular",
                "anuncio",
                "an\u0303adir",
                "an\u0303ejo",
                "an\u0303o",
                "apagar",
                "aparato",
                "apetito",
                "apio",
                "aplicar",
                "apodo",
                "aporte",
                "apoyo",
                "aprender",
                "aprobar",
                "apuesta",
                "apuro",
                "arado",
                "aran\u0303a",
                "arar",
                "a\u0301rbitro",
                "a\u0301rbol",
                "arbusto",
                "archivo",
                "arco",
                "arder",
                "ardilla",
                "arduo",
                "a\u0301rea",
                "a\u0301rido",
                "aries",
                "armoni\u0301a",
                "arne\u0301s",
                "aroma",
                "arpa",
                "arpo\u0301n",
                "arreglo",
                "arroz",
                "arruga",
                "arte",
                "artista",
                "asa",
                "asado",
                "asalto",
                "ascenso",
                "asegurar",
                "aseo",
                "asesor",
                "asiento",
                "asilo",
                "asistir",
                "asno",
                "asombro",
                "a\u0301spero",
                "astilla",
                "astro",
                "astuto",
                "asumir",
                "asunto",
                "atajo",
                "ataque",
                "atar",
                "atento",
                "ateo",
                "a\u0301tico",
                "atleta",
                "a\u0301tomo",
                "atraer",
                "atroz",
                "atu\u0301n",
                "audaz",
                "audio",
                "auge",
                "aula",
                "aumento",
                "ausente",
                "autor",
                "aval",
                "avance",
                "avaro",
                "ave",
                "avellana",
                "avena",
                "avestruz",
                "avio\u0301n",
                "aviso",
                "ayer",
                "ayuda",
                "ayuno",
                "azafra\u0301n",
                "azar",
                "azote",
                "azu\u0301car",
                "azufre",
                "azul",
                "baba",
                "babor",
                "bache",
                "bahi\u0301a",
                "baile",
                "bajar",
                "balanza",
                "balco\u0301n",
                "balde",
                "bambu\u0301",
                "banco",
                "banda",
                "ban\u0303o",
                "barba",
                "barco",
                "barniz",
                "barro",
                "ba\u0301scula",
                "basto\u0301n",
                "basura",
                "batalla",
                "bateri\u0301a",
                "batir",
                "batuta",
                "bau\u0301l",
                "bazar",
                "bebe\u0301",
                "bebida",
                "bello",
                "besar",
                "beso",
                "bestia",
                "bicho",
                "bien",
                "bingo",
                "blanco",
                "bloque",
                "blusa",
                "boa",
                "bobina",
                "bobo",
                "boca",
                "bocina",
                "boda",
                "bodega",
                "boina",
                "bola",
                "bolero",
                "bolsa",
                "bomba",
                "bondad",
                "bonito",
                "bono",
                "bonsa\u0301i",
                "borde",
                "borrar",
                "bosque",
                "bote",
                "boti\u0301n",
                "bo\u0301veda",
                "bozal",
                "bravo",
                "brazo",
                "brecha",
                "breve",
                "brillo",
                "brinco",
                "brisa",
                "broca",
                "broma",
                "bronce",
                "brote",
                "bruja",
                "brusco",
                "bruto",
                "buceo",
                "bucle",
                "bueno",
                "buey",
                "bufanda",
                "bufo\u0301n",
                "bu\u0301ho",
                "buitre",
                "bulto",
                "burbuja",
                "burla",
                "burro",
                "buscar",
                "butaca",
                "buzo\u0301n",
                "caballo",
                "cabeza",
                "cabina",
                "cabra",
                "cacao",
                "cada\u0301ver",
                "cadena",
                "caer",
                "cafe\u0301",
                "cai\u0301da",
                "caima\u0301n",
                "caja",
                "cajo\u0301n",
                "cal",
                "calamar",
                "calcio",
                "caldo",
                "calidad",
                "calle",
                "calma",
                "calor",
                "calvo",
                "cama",
                "cambio",
                "camello",
                "camino",
                "campo",
                "ca\u0301ncer",
                "candil",
                "canela",
                "canguro",
                "canica",
                "canto",
                "can\u0303a",
                "can\u0303o\u0301n",
                "caoba",
                "caos",
                "capaz",
                "capita\u0301n",
                "capote",
                "captar",
                "capucha",
                "cara",
                "carbo\u0301n",
                "ca\u0301rcel",
                "careta",
                "carga",
                "carin\u0303o",
                "carne",
                "carpeta",
                "carro",
                "carta",
                "casa",
                "casco",
                "casero",
                "caspa",
                "castor",
                "catorce",
                "catre",
                "caudal",
                "causa",
                "cazo",
                "cebolla",
                "ceder",
                "cedro",
                "celda",
                "ce\u0301lebre",
                "celoso",
                "ce\u0301lula",
                "cemento",
                "ceniza",
                "centro",
                "cerca",
                "cerdo",
                "cereza",
                "cero",
                "cerrar",
                "certeza",
                "ce\u0301sped",
                "cetro",
                "chacal",
                "chaleco",
                "champu\u0301",
                "chancla",
                "chapa",
                "charla",
                "chico",
                "chiste",
                "chivo",
                "choque",
                "choza",
                "chuleta",
                "chupar",
                "ciclo\u0301n",
                "ciego",
                "cielo",
                "cien",
                "cierto",
                "cifra",
                "cigarro",
                "cima",
                "cinco",
                "cine",
                "cinta",
                "cipre\u0301s",
                "circo",
                "ciruela",
                "cisne",
                "cita",
                "ciudad",
                "clamor",
                "clan",
                "claro",
                "clase",
                "clave",
                "cliente",
                "clima",
                "cli\u0301nica",
                "cobre",
                "coccio\u0301n",
                "cochino",
                "cocina",
                "coco",
                "co\u0301digo",
                "codo",
                "cofre",
                "coger",
                "cohete",
                "coji\u0301n",
                "cojo",
                "cola",
                "colcha",
                "colegio",
                "colgar",
                "colina",
                "collar",
                "colmo",
                "columna",
                "combate",
                "comer",
                "comida",
                "co\u0301modo",
                "compra",
                "conde",
                "conejo",
                "conga",
                "conocer",
                "consejo",
                "contar",
                "copa",
                "copia",
                "corazo\u0301n",
                "corbata",
                "corcho",
                "cordo\u0301n",
                "corona",
                "correr",
                "coser",
                "cosmos",
                "costa",
                "cra\u0301neo",
                "cra\u0301ter",
                "crear",
                "crecer",
                "crei\u0301do",
                "crema",
                "cri\u0301a",
                "crimen",
                "cripta",
                "crisis",
                "cromo",
                "cro\u0301nica",
                "croqueta",
                "crudo",
                "cruz",
                "cuadro",
                "cuarto",
                "cuatro",
                "cubo",
                "cubrir",
                "cuchara",
                "cuello",
                "cuento",
                "cuerda",
                "cuesta",
                "cueva",
                "cuidar",
                "culebra",
                "culpa",
                "culto",
                "cumbre",
                "cumplir",
                "cuna",
                "cuneta",
                "cuota",
                "cupo\u0301n",
                "cu\u0301pula",
                "curar",
                "curioso",
                "curso",
                "curva",
                "cutis",
                "dama",
                "danza",
                "dar",
                "dardo",
                "da\u0301til",
                "deber",
                "de\u0301bil",
                "de\u0301cada",
                "decir",
                "dedo",
                "defensa",
                "definir",
                "dejar",
                "delfi\u0301n",
                "delgado",
                "delito",
                "demora",
                "denso",
                "dental",
                "deporte",
                "derecho",
                "derrota",
                "desayuno",
                "deseo",
                "desfile",
                "desnudo",
                "destino",
                "desvi\u0301o",
                "detalle",
                "detener",
                "deuda",
                "di\u0301a",
                "diablo",
                "diadema",
                "diamante",
                "diana",
                "diario",
                "dibujo",
                "dictar",
                "diente",
                "dieta",
                "diez",
                "difi\u0301cil",
                "digno",
                "dilema",
                "diluir",
                "dinero",
                "directo",
                "dirigir",
                "disco",
                "disen\u0303o",
                "disfraz",
                "diva",
                "divino",
                "doble",
                "doce",
                "dolor",
                "domingo",
                "don",
                "donar",
                "dorado",
                "dormir",
                "dorso",
                "dos",
                "dosis",
                "drago\u0301n",
                "droga",
                "ducha",
                "duda",
                "duelo",
                "duen\u0303o",
                "dulce",
                "du\u0301o",
                "duque",
                "durar",
                "dureza",
                "duro",
                "e\u0301bano",
                "ebrio",
                "echar",
                "eco",
                "ecuador",
                "edad",
                "edicio\u0301n",
                "edificio",
                "editor",
                "educar",
                "efecto",
                "eficaz",
                "eje",
                "ejemplo",
                "elefante",
                "elegir",
                "elemento",
                "elevar",
                "elipse",
                "e\u0301lite",
                "elixir",
                "elogio",
                "eludir",
                "embudo",
                "emitir",
                "emocio\u0301n",
                "empate",
                "empen\u0303o",
                "empleo",
                "empresa",
                "enano",
                "encargo",
                "enchufe",
                "enci\u0301a",
                "enemigo",
                "enero",
                "enfado",
                "enfermo",
                "engan\u0303o",
                "enigma",
                "enlace",
                "enorme",
                "enredo",
                "ensayo",
                "ensen\u0303ar",
                "entero",
                "entrar",
                "envase",
                "envi\u0301o",
                "e\u0301poca",
                "equipo",
                "erizo",
                "escala",
                "escena",
                "escolar",
                "escribir",
                "escudo",
                "esencia",
                "esfera",
                "esfuerzo",
                "espada",
                "espejo",
                "espi\u0301a",
                "esposa",
                "espuma",
                "esqui\u0301",
                "estar",
                "este",
                "estilo",
                "estufa",
                "etapa",
                "eterno",
                "e\u0301tica",
                "etnia",
                "evadir",
                "evaluar",
                "evento",
                "evitar",
                "exacto",
                "examen",
                "exceso",
                "excusa",
                "exento",
                "exigir",
                "exilio",
                "existir",
                "e\u0301xito",
                "experto",
                "explicar",
                "exponer",
                "extremo",
                "fa\u0301brica",
                "fa\u0301bula",
                "fachada",
                "fa\u0301cil",
                "factor",
                "faena",
                "faja",
                "falda",
                "fallo",
                "falso",
                "faltar",
                "fama",
                "familia",
                "famoso",
                "farao\u0301n",
                "farmacia",
                "farol",
                "farsa",
                "fase",
                "fatiga",
                "fauna",
                "favor",
                "fax",
                "febrero",
                "fecha",
                "feliz",
                "feo",
                "feria",
                "feroz",
                "fe\u0301rtil",
                "fervor",
                "festi\u0301n",
                "fiable",
                "fianza",
                "fiar",
                "fibra",
                "ficcio\u0301n",
                "ficha",
                "fideo",
                "fiebre",
                "fiel",
                "fiera",
                "fiesta",
                "figura",
                "fijar",
                "fijo",
                "fila",
                "filete",
                "filial",
                "filtro",
                "fin",
                "finca",
                "fingir",
                "finito",
                "firma",
                "flaco",
                "flauta",
                "flecha",
                "flor",
                "flota",
                "fluir",
                "flujo",
                "flu\u0301or",
                "fobia",
                "foca",
                "fogata",
                "fogo\u0301n",
                "folio",
                "folleto",
                "fondo",
                "forma",
                "forro",
                "fortuna",
                "forzar",
                "fosa",
                "foto",
                "fracaso",
                "fra\u0301gil",
                "franja",
                "frase",
                "fraude",
                "frei\u0301r",
                "freno",
                "fresa",
                "fri\u0301o",
                "frito",
                "fruta",
                "fuego",
                "fuente",
                "fuerza",
                "fuga",
                "fumar",
                "funcio\u0301n",
                "funda",
                "furgo\u0301n",
                "furia",
                "fusil",
                "fu\u0301tbol",
                "futuro",
                "gacela",
                "gafas",
                "gaita",
                "gajo",
                "gala",
                "galeri\u0301a",
                "gallo",
                "gamba",
                "ganar",
                "gancho",
                "ganga",
                "ganso",
                "garaje",
                "garza",
                "gasolina",
                "gastar",
                "gato",
                "gavila\u0301n",
                "gemelo",
                "gemir",
                "gen",
                "ge\u0301nero",
                "genio",
                "gente",
                "geranio",
                "gerente",
                "germen",
                "gesto",
                "gigante",
                "gimnasio",
                "girar",
                "giro",
                "glaciar",
                "globo",
                "gloria",
                "gol",
                "golfo",
                "goloso",
                "golpe",
                "goma",
                "gordo",
                "gorila",
                "gorra",
                "gota",
                "goteo",
                "gozar",
                "grada",
                "gra\u0301fico",
                "grano",
                "grasa",
                "gratis",
                "grave",
                "grieta",
                "grillo",
                "gripe",
                "gris",
                "grito",
                "grosor",
                "gru\u0301a",
                "grueso",
                "grumo",
                "grupo",
                "guante",
                "guapo",
                "guardia",
                "guerra",
                "gui\u0301a",
                "guin\u0303o",
                "guion",
                "guiso",
                "guitarra",
                "gusano",
                "gustar",
                "haber",
                "ha\u0301bil",
                "hablar",
                "hacer",
                "hacha",
                "hada",
                "hallar",
                "hamaca",
                "harina",
                "haz",
                "hazan\u0303a",
                "hebilla",
                "hebra",
                "hecho",
                "helado",
                "helio",
                "hembra",
                "herir",
                "hermano",
                "he\u0301roe",
                "hervir",
                "hielo",
                "hierro",
                "hi\u0301gado",
                "higiene",
                "hijo",
                "himno",
                "historia",
                "hocico",
                "hogar",
                "hoguera",
                "hoja",
                "hombre",
                "hongo",
                "honor",
                "honra",
                "hora",
                "hormiga",
                "horno",
                "hostil",
                "hoyo",
                "hueco",
                "huelga",
                "huerta",
                "hueso",
                "huevo",
                "huida",
                "huir",
                "humano",
                "hu\u0301medo",
                "humilde",
                "humo",
                "hundir",
                "huraca\u0301n",
                "hurto",
                "icono",
                "ideal",
                "idioma",
                "i\u0301dolo",
                "iglesia",
                "iglu\u0301",
                "igual",
                "ilegal",
                "ilusio\u0301n",
                "imagen",
                "ima\u0301n",
                "imitar",
                "impar",
                "imperio",
                "imponer",
                "impulso",
                "incapaz",
                "i\u0301ndice",
                "inerte",
                "infiel",
                "informe",
                "ingenio",
                "inicio",
                "inmenso",
                "inmune",
                "innato",
                "insecto",
                "instante",
                "intere\u0301s",
                "i\u0301ntimo",
                "intuir",
                "inu\u0301til",
                "invierno",
                "ira",
                "iris",
                "ironi\u0301a",
                "isla",
                "islote",
                "jabali\u0301",
                "jabo\u0301n",
                "jamo\u0301n",
                "jarabe",
                "jardi\u0301n",
                "jarra",
                "jaula",
                "jazmi\u0301n",
                "jefe",
                "jeringa",
                "jinete",
                "jornada",
                "joroba",
                "joven",
                "joya",
                "juerga",
                "jueves",
                "juez",
                "jugador",
                "jugo",
                "juguete",
                "juicio",
                "junco",
                "jungla",
                "junio",
                "juntar",
                "ju\u0301piter",
                "jurar",
                "justo",
                "juvenil",
                "juzgar",
                "kilo",
                "koala",
                "labio",
                "lacio",
                "lacra",
                "lado",
                "ladro\u0301n",
                "lagarto",
                "la\u0301grima",
                "laguna",
                "laico",
                "lamer",
                "la\u0301mina",
                "la\u0301mpara",
                "lana",
                "lancha",
                "langosta",
                "lanza",
                "la\u0301piz",
                "largo",
                "larva",
                "la\u0301stima",
                "lata",
                "la\u0301tex",
                "latir",
                "laurel",
                "lavar",
                "lazo",
                "leal",
                "leccio\u0301n",
                "leche",
                "lector",
                "leer",
                "legio\u0301n",
                "legumbre",
                "lejano",
                "lengua",
                "lento",
                "len\u0303a",
                "leo\u0301n",
                "leopardo",
                "lesio\u0301n",
                "letal",
                "letra",
                "leve",
                "leyenda",
                "libertad",
                "libro",
                "licor",
                "li\u0301der",
                "lidiar",
                "lienzo",
                "liga",
                "ligero",
                "lima",
                "li\u0301mite",
                "limo\u0301n",
                "limpio",
                "lince",
                "lindo",
                "li\u0301nea",
                "lingote",
                "lino",
                "linterna",
                "li\u0301quido",
                "liso",
                "lista",
                "litera",
                "litio",
                "litro",
                "llaga",
                "llama",
                "llanto",
                "llave",
                "llegar",
                "llenar",
                "llevar",
                "llorar",
                "llover",
                "lluvia",
                "lobo",
                "locio\u0301n",
                "loco",
                "locura",
                "lo\u0301gica",
                "logro",
                "lombriz",
                "lomo",
                "lonja",
                "lote",
                "lucha",
                "lucir",
                "lugar",
                "lujo",
                "luna",
                "lunes",
                "lupa",
                "lustro",
                "luto",
                "luz",
                "maceta",
                "macho",
                "madera",
                "madre",
                "maduro",
                "maestro",
                "mafia",
                "magia",
                "mago",
                "mai\u0301z",
                "maldad",
                "maleta",
                "malla",
                "malo",
                "mama\u0301",
                "mambo",
                "mamut",
                "manco",
                "mando",
                "manejar",
                "manga",
                "maniqui\u0301",
                "manjar",
                "mano",
                "manso",
                "manta",
                "man\u0303ana",
                "mapa",
                "ma\u0301quina",
                "mar",
                "marco",
                "marea",
                "marfil",
                "margen",
                "marido",
                "ma\u0301rmol",
                "marro\u0301n",
                "martes",
                "marzo",
                "masa",
                "ma\u0301scara",
                "masivo",
                "matar",
                "materia",
                "matiz",
                "matriz",
                "ma\u0301ximo",
                "mayor",
                "mazorca",
                "mecha",
                "medalla",
                "medio",
                "me\u0301dula",
                "mejilla",
                "mejor",
                "melena",
                "melo\u0301n",
                "memoria",
                "menor",
                "mensaje",
                "mente",
                "menu\u0301",
                "mercado",
                "merengue",
                "me\u0301rito",
                "mes",
                "meso\u0301n",
                "meta",
                "meter",
                "me\u0301todo",
                "metro",
                "mezcla",
                "miedo",
                "miel",
                "miembro",
                "miga",
                "mil",
                "milagro",
                "militar",
                "millo\u0301n",
                "mimo",
                "mina",
                "minero",
                "mi\u0301nimo",
                "minuto",
                "miope",
                "mirar",
                "misa",
                "miseria",
                "misil",
                "mismo",
                "mitad",
                "mito",
                "mochila",
                "mocio\u0301n",
                "moda",
                "modelo",
                "moho",
                "mojar",
                "molde",
                "moler",
                "molino",
                "momento",
                "momia",
                "monarca",
                "moneda",
                "monja",
                "monto",
                "mon\u0303o",
                "morada",
                "morder",
                "moreno",
                "morir",
                "morro",
                "morsa",
                "mortal",
                "mosca",
                "mostrar",
                "motivo",
                "mover",
                "mo\u0301vil",
                "mozo",
                "mucho",
                "mudar",
                "mueble",
                "muela",
                "muerte",
                "muestra",
                "mugre",
                "mujer",
                "mula",
                "muleta",
                "multa",
                "mundo",
                "mun\u0303eca",
                "mural",
                "muro",
                "mu\u0301sculo",
                "museo",
                "musgo",
                "mu\u0301sica",
                "muslo",
                "na\u0301car",
                "nacio\u0301n",
                "nadar",
                "naipe",
                "naranja",
                "nariz",
                "narrar",
                "nasal",
                "natal",
                "nativo",
                "natural",
                "na\u0301usea",
                "naval",
                "nave",
                "navidad",
                "necio",
                "ne\u0301ctar",
                "negar",
                "negocio",
                "negro",
                "neo\u0301n",
                "nervio",
                "neto",
                "neutro",
                "nevar",
                "nevera",
                "nicho",
                "nido",
                "niebla",
                "nieto",
                "nin\u0303ez",
                "nin\u0303o",
                "ni\u0301tido",
                "nivel",
                "nobleza",
                "noche",
                "no\u0301mina",
                "noria",
                "norma",
                "norte",
                "nota",
                "noticia",
                "novato",
                "novela",
                "novio",
                "nube",
                "nuca",
                "nu\u0301cleo",
                "nudillo",
                "nudo",
                "nuera",
                "nueve",
                "nuez",
                "nulo",
                "nu\u0301mero",
                "nutria",
                "oasis",
                "obeso",
                "obispo",
                "objeto",
                "obra",
                "obrero",
                "observar",
                "obtener",
                "obvio",
                "oca",
                "ocaso",
                "oce\u0301ano",
                "ochenta",
                "ocho",
                "ocio",
                "ocre",
                "octavo",
                "octubre",
                "oculto",
                "ocupar",
                "ocurrir",
                "odiar",
                "odio",
                "odisea",
                "oeste",
                "ofensa",
                "oferta",
                "oficio",
                "ofrecer",
                "ogro",
                "oi\u0301do",
                "oi\u0301r",
                "ojo",
                "ola",
                "oleada",
                "olfato",
                "olivo",
                "olla",
                "olmo",
                "olor",
                "olvido",
                "ombligo",
                "onda",
                "onza",
                "opaco",
                "opcio\u0301n",
                "o\u0301pera",
                "opinar",
                "oponer",
                "optar",
                "o\u0301ptica",
                "opuesto",
                "oracio\u0301n",
                "orador",
                "oral",
                "o\u0301rbita",
                "orca",
                "orden",
                "oreja",
                "o\u0301rgano",
                "orgi\u0301a",
                "orgullo",
                "oriente",
                "origen",
                "orilla",
                "oro",
                "orquesta",
                "oruga",
                "osadi\u0301a",
                "oscuro",
                "osezno",
                "oso",
                "ostra",
                "oton\u0303o",
                "otro",
                "oveja",
                "o\u0301vulo",
                "o\u0301xido",
                "oxi\u0301geno",
                "oyente",
                "ozono",
                "pacto",
                "padre",
                "paella",
                "pa\u0301gina",
                "pago",
                "pai\u0301s",
                "pa\u0301jaro",
                "palabra",
                "palco",
                "paleta",
                "pa\u0301lido",
                "palma",
                "paloma",
                "palpar",
                "pan",
                "panal",
                "pa\u0301nico",
                "pantera",
                "pan\u0303uelo",
                "papa\u0301",
                "papel",
                "papilla",
                "paquete",
                "parar",
                "parcela",
                "pared",
                "parir",
                "paro",
                "pa\u0301rpado",
                "parque",
                "pa\u0301rrafo",
                "parte",
                "pasar",
                "paseo",
                "pasio\u0301n",
                "paso",
                "pasta",
                "pata",
                "patio",
                "patria",
                "pausa",
                "pauta",
                "pavo",
                "payaso",
                "peato\u0301n",
                "pecado",
                "pecera",
                "pecho",
                "pedal",
                "pedir",
                "pegar",
                "peine",
                "pelar",
                "peldan\u0303o",
                "pelea",
                "peligro",
                "pellejo",
                "pelo",
                "peluca",
                "pena",
                "pensar",
                "pen\u0303o\u0301n",
                "peo\u0301n",
                "peor",
                "pepino",
                "pequen\u0303o",
                "pera",
                "percha",
                "perder",
                "pereza",
                "perfil",
                "perico",
                "perla",
                "permiso",
                "perro",
                "persona",
                "pesa",
                "pesca",
                "pe\u0301simo",
                "pestan\u0303a",
                "pe\u0301talo",
                "petro\u0301leo",
                "pez",
                "pezun\u0303a",
                "picar",
                "picho\u0301n",
                "pie",
                "piedra",
                "pierna",
                "pieza",
                "pijama",
                "pilar",
                "piloto",
                "pimienta",
                "pino",
                "pintor",
                "pinza",
                "pin\u0303a",
                "piojo",
                "pipa",
                "pirata",
                "pisar",
                "piscina",
                "piso",
                "pista",
                "pito\u0301n",
                "pizca",
                "placa",
                "plan",
                "plata",
                "playa",
                "plaza",
                "pleito",
                "pleno",
                "plomo",
                "pluma",
                "plural",
                "pobre",
                "poco",
                "poder",
                "podio",
                "poema",
                "poesi\u0301a",
                "poeta",
                "polen",
                "polici\u0301a",
                "pollo",
                "polvo",
                "pomada",
                "pomelo",
                "pomo",
                "pompa",
                "poner",
                "porcio\u0301n",
                "portal",
                "posada",
                "poseer",
                "posible",
                "poste",
                "potencia",
                "potro",
                "pozo",
                "prado",
                "precoz",
                "pregunta",
                "premio",
                "prensa",
                "preso",
                "previo",
                "primo",
                "pri\u0301ncipe",
                "prisio\u0301n",
                "privar",
                "proa",
                "probar",
                "proceso",
                "producto",
                "proeza",
                "profesor",
                "programa",
                "prole",
                "promesa",
                "pronto",
                "propio",
                "pro\u0301ximo",
                "prueba",
                "pu\u0301blico",
                "puchero",
                "pudor",
                "pueblo",
                "puerta",
                "puesto",
                "pulga",
                "pulir",
                "pulmo\u0301n",
                "pulpo",
                "pulso",
                "puma",
                "punto",
                "pun\u0303al",
                "pun\u0303o",
                "pupa",
                "pupila",
                "pure\u0301",
                "quedar",
                "queja",
                "quemar",
                "querer",
                "queso",
                "quieto",
                "qui\u0301mica",
                "quince",
                "quitar",
                "ra\u0301bano",
                "rabia",
                "rabo",
                "racio\u0301n",
                "radical",
                "rai\u0301z",
                "rama",
                "rampa",
                "rancho",
                "rango",
                "rapaz",
                "ra\u0301pido",
                "rapto",
                "rasgo",
                "raspa",
                "rato",
                "rayo",
                "raza",
                "razo\u0301n",
                "reaccio\u0301n",
                "realidad",
                "reban\u0303o",
                "rebote",
                "recaer",
                "receta",
                "rechazo",
                "recoger",
                "recreo",
                "recto",
                "recurso",
                "red",
                "redondo",
                "reducir",
                "reflejo",
                "reforma",
                "refra\u0301n",
                "refugio",
                "regalo",
                "regir",
                "regla",
                "regreso",
                "rehe\u0301n",
                "reino",
                "rei\u0301r",
                "reja",
                "relato",
                "relevo",
                "relieve",
                "relleno",
                "reloj",
                "remar",
                "remedio",
                "remo",
                "rencor",
                "rendir",
                "renta",
                "reparto",
                "repetir",
                "reposo",
                "reptil",
                "res",
                "rescate",
                "resina",
                "respeto",
                "resto",
                "resumen",
                "retiro",
                "retorno",
                "retrato",
                "reunir",
                "reve\u0301s",
                "revista",
                "rey",
                "rezar",
                "rico",
                "riego",
                "rienda",
                "riesgo",
                "rifa",
                "ri\u0301gido",
                "rigor",
                "rinco\u0301n",
                "rin\u0303o\u0301n",
                "ri\u0301o",
                "riqueza",
                "risa",
                "ritmo",
                "rito",
                "rizo",
                "roble",
                "roce",
                "rociar",
                "rodar",
                "rodeo",
                "rodilla",
                "roer",
                "rojizo",
                "rojo",
                "romero",
                "romper",
                "ron",
                "ronco",
                "ronda",
                "ropa",
                "ropero",
                "rosa",
                "rosca",
                "rostro",
                "rotar",
                "rubi\u0301",
                "rubor",
                "rudo",
                "rueda",
                "rugir",
                "ruido",
                "ruina",
                "ruleta",
                "rulo",
                "rumbo",
                "rumor",
                "ruptura",
                "ruta",
                "rutina",
                "sa\u0301bado",
                "saber",
                "sabio",
                "sable",
                "sacar",
                "sagaz",
                "sagrado",
                "sala",
                "saldo",
                "salero",
                "salir",
                "salmo\u0301n",
                "salo\u0301n",
                "salsa",
                "salto",
                "salud",
                "salvar",
                "samba",
                "sancio\u0301n",
                "sandi\u0301a",
                "sanear",
                "sangre",
                "sanidad",
                "sano",
                "santo",
                "sapo",
                "saque",
                "sardina",
                "sarte\u0301n",
                "sastre",
                "sata\u0301n",
                "sauna",
                "saxofo\u0301n",
                "seccio\u0301n",
                "seco",
                "secreto",
                "secta",
                "sed",
                "seguir",
                "seis",
                "sello",
                "selva",
                "semana",
                "semilla",
                "senda",
                "sensor",
                "sen\u0303al",
                "sen\u0303or",
                "separar",
                "sepia",
                "sequi\u0301a",
                "ser",
                "serie",
                "sermo\u0301n",
                "servir",
                "sesenta",
                "sesio\u0301n",
                "seta",
                "setenta",
                "severo",
                "sexo",
                "sexto",
                "sidra",
                "siesta",
                "siete",
                "siglo",
                "signo",
                "si\u0301laba",
                "silbar",
                "silencio",
                "silla",
                "si\u0301mbolo",
                "simio",
                "sirena",
                "sistema",
                "sitio",
                "situar",
                "sobre",
                "socio",
                "sodio",
                "sol",
                "solapa",
                "soldado",
                "soledad",
                "so\u0301lido",
                "soltar",
                "solucio\u0301n",
                "sombra",
                "sondeo",
                "sonido",
                "sonoro",
                "sonrisa",
                "sopa",
                "soplar",
                "soporte",
                "sordo",
                "sorpresa",
                "sorteo",
                "soste\u0301n",
                "so\u0301tano",
                "suave",
                "subir",
                "suceso",
                "sudor",
                "suegra",
                "suelo",
                "suen\u0303o",
                "suerte",
                "sufrir",
                "sujeto",
                "sulta\u0301n",
                "sumar",
                "superar",
                "suplir",
                "suponer",
                "supremo",
                "sur",
                "surco",
                "suren\u0303o",
                "surgir",
                "susto",
                "sutil",
                "tabaco",
                "tabique",
                "tabla",
                "tabu\u0301",
                "taco",
                "tacto",
                "tajo",
                "talar",
                "talco",
                "talento",
                "talla",
                "talo\u0301n",
                "taman\u0303o",
                "tambor",
                "tango",
                "tanque",
                "tapa",
                "tapete",
                "tapia",
                "tapo\u0301n",
                "taquilla",
                "tarde",
                "tarea",
                "tarifa",
                "tarjeta",
                "tarot",
                "tarro",
                "tarta",
                "tatuaje",
                "tauro",
                "taza",
                "tazo\u0301n",
                "teatro",
                "techo",
                "tecla",
                "te\u0301cnica",
                "tejado",
                "tejer",
                "tejido",
                "tela",
                "tele\u0301fono",
                "tema",
                "temor",
                "templo",
                "tenaz",
                "tender",
                "tener",
                "tenis",
                "tenso",
                "teori\u0301a",
                "terapia",
                "terco",
                "te\u0301rmino",
                "ternura",
                "terror",
                "tesis",
                "tesoro",
                "testigo",
                "tetera",
                "texto",
                "tez",
                "tibio",
                "tiburo\u0301n",
                "tiempo",
                "tienda",
                "tierra",
                "tieso",
                "tigre",
                "tijera",
                "tilde",
                "timbre",
                "ti\u0301mido",
                "timo",
                "tinta",
                "ti\u0301o",
                "ti\u0301pico",
                "tipo",
                "tira",
                "tiro\u0301n",
                "tita\u0301n",
                "ti\u0301tere",
                "ti\u0301tulo",
                "tiza",
                "toalla",
                "tobillo",
                "tocar",
                "tocino",
                "todo",
                "toga",
                "toldo",
                "tomar",
                "tono",
                "tonto",
                "topar",
                "tope",
                "toque",
                "to\u0301rax",
                "torero",
                "tormenta",
                "torneo",
                "toro",
                "torpedo",
                "torre",
                "torso",
                "tortuga",
                "tos",
                "tosco",
                "toser",
                "to\u0301xico",
                "trabajo",
                "tractor",
                "traer",
                "tra\u0301fico",
                "trago",
                "traje",
                "tramo",
                "trance",
                "trato",
                "trauma",
                "trazar",
                "tre\u0301bol",
                "tregua",
                "treinta",
                "tren",
                "trepar",
                "tres",
                "tribu",
                "trigo",
                "tripa",
                "triste",
                "triunfo",
                "trofeo",
                "trompa",
                "tronco",
                "tropa",
                "trote",
                "trozo",
                "truco",
                "trueno",
                "trufa",
                "tuberi\u0301a",
                "tubo",
                "tuerto",
                "tumba",
                "tumor",
                "tu\u0301nel",
                "tu\u0301nica",
                "turbina",
                "turismo",
                "turno",
                "tutor",
                "ubicar",
                "u\u0301lcera",
                "umbral",
                "unidad",
                "unir",
                "universo",
                "uno",
                "untar",
                "un\u0303a",
                "urbano",
                "urbe",
                "urgente",
                "urna",
                "usar",
                "usuario",
                "u\u0301til",
                "utopi\u0301a",
                "uva",
                "vaca",
                "vaci\u0301o",
                "vacuna",
                "vagar",
                "vago",
                "vaina",
                "vajilla",
                "vale",
                "va\u0301lido",
                "valle",
                "valor",
                "va\u0301lvula",
                "vampiro",
                "vara",
                "variar",
                "varo\u0301n",
                "vaso",
                "vecino",
                "vector",
                "vehi\u0301culo",
                "veinte",
                "vejez",
                "vela",
                "velero",
                "veloz",
                "vena",
                "vencer",
                "venda",
                "veneno",
                "vengar",
                "venir",
                "venta",
                "venus",
                "ver",
                "verano",
                "verbo",
                "verde",
                "vereda",
                "verja",
                "verso",
                "verter",
                "vi\u0301a",
                "viaje",
                "vibrar",
                "vicio",
                "vi\u0301ctima",
                "vida",
                "vi\u0301deo",
                "vidrio",
                "viejo",
                "viernes",
                "vigor",
                "vil",
                "villa",
                "vinagre",
                "vino",
                "vin\u0303edo",
                "violi\u0301n",
                "viral",
                "virgo",
                "virtud",
                "visor",
                "vi\u0301spera",
                "vista",
                "vitamina",
                "viudo",
                "vivaz",
                "vivero",
                "vivir",
                "vivo",
                "volca\u0301n",
                "volumen",
                "volver",
                "voraz",
                "votar",
                "voto",
                "voz",
                "vuelo",
                "vulgar",
                "yacer",
                "yate",
                "yegua",
                "yema",
                "yerno",
                "yeso",
                "yodo",
                "yoga",
                "yogur",
                "zafiro",
                "zanja",
                "zapato",
                "zarza",
                "zona",
                "zorro",
                "zumo",
                "zurdo"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/japanese.json
          var require_japanese = __commonJS({
            "node_modules/bip39/src/wordlists/japanese.json"(exports, module) {
              module.exports = [
                "\u3042\u3044\u3053\u304F\u3057\u3093",
                "\u3042\u3044\u3055\u3064",
                "\u3042\u3044\u305F\u3099",
                "\u3042\u304A\u305D\u3099\u3089",
                "\u3042\u304B\u3061\u3083\u3093",
                "\u3042\u304D\u308B",
                "\u3042\u3051\u304B\u3099\u305F",
                "\u3042\u3051\u308B",
                "\u3042\u3053\u304B\u3099\u308C\u308B",
                "\u3042\u3055\u3044",
                "\u3042\u3055\u3072",
                "\u3042\u3057\u3042\u3068",
                "\u3042\u3057\u3099\u308F\u3046",
                "\u3042\u3059\u3099\u304B\u308B",
                "\u3042\u3059\u3099\u304D",
                "\u3042\u305D\u3075\u3099",
                "\u3042\u305F\u3048\u308B",
                "\u3042\u305F\u305F\u3081\u308B",
                "\u3042\u305F\u308A\u307E\u3048",
                "\u3042\u305F\u308B",
                "\u3042\u3064\u3044",
                "\u3042\u3064\u304B\u3046",
                "\u3042\u3063\u3057\u3085\u304F",
                "\u3042\u3064\u307E\u308A",
                "\u3042\u3064\u3081\u308B",
                "\u3042\u3066\u306A",
                "\u3042\u3066\u306F\u307E\u308B",
                "\u3042\u3072\u308B",
                "\u3042\u3075\u3099\u3089",
                "\u3042\u3075\u3099\u308B",
                "\u3042\u3075\u308C\u308B",
                "\u3042\u307E\u3044",
                "\u3042\u307E\u3068\u3099",
                "\u3042\u307E\u3084\u304B\u3059",
                "\u3042\u307E\u308A",
                "\u3042\u307F\u3082\u306E",
                "\u3042\u3081\u308A\u304B",
                "\u3042\u3084\u307E\u308B",
                "\u3042\u3086\u3080",
                "\u3042\u3089\u3044\u304F\u3099\u307E",
                "\u3042\u3089\u3057",
                "\u3042\u3089\u3059\u3057\u3099",
                "\u3042\u3089\u305F\u3081\u308B",
                "\u3042\u3089\u3086\u308B",
                "\u3042\u3089\u308F\u3059",
                "\u3042\u308A\u304B\u3099\u3068\u3046",
                "\u3042\u308F\u305B\u308B",
                "\u3042\u308F\u3066\u308B",
                "\u3042\u3093\u3044",
                "\u3042\u3093\u304B\u3099\u3044",
                "\u3042\u3093\u3053",
                "\u3042\u3093\u305B\u3099\u3093",
                "\u3042\u3093\u3066\u3044",
                "\u3042\u3093\u306A\u3044",
                "\u3042\u3093\u307E\u308A",
                "\u3044\u3044\u305F\u3099\u3059",
                "\u3044\u304A\u3093",
                "\u3044\u304B\u3099\u3044",
                "\u3044\u304B\u3099\u304F",
                "\u3044\u304D\u304A\u3044",
                "\u3044\u304D\u306A\u308A",
                "\u3044\u304D\u3082\u306E",
                "\u3044\u304D\u308B",
                "\u3044\u304F\u3057\u3099",
                "\u3044\u304F\u3075\u3099\u3093",
                "\u3044\u3051\u306F\u3099\u306A",
                "\u3044\u3051\u3093",
                "\u3044\u3053\u3046",
                "\u3044\u3053\u304F",
                "\u3044\u3053\u3064",
                "\u3044\u3055\u307E\u3057\u3044",
                "\u3044\u3055\u3093",
                "\u3044\u3057\u304D",
                "\u3044\u3057\u3099\u3085\u3046",
                "\u3044\u3057\u3099\u3087\u3046",
                "\u3044\u3057\u3099\u308F\u308B",
                "\u3044\u3059\u3099\u307F",
                "\u3044\u3059\u3099\u308C",
                "\u3044\u305B\u3044",
                "\u3044\u305B\u3048\u3072\u3099",
                "\u3044\u305B\u304B\u3044",
                "\u3044\u305B\u304D",
                "\u3044\u305B\u3099\u3093",
                "\u3044\u305D\u3046\u308D\u3046",
                "\u3044\u305D\u304B\u3099\u3057\u3044",
                "\u3044\u305F\u3099\u3044",
                "\u3044\u305F\u3099\u304F",
                "\u3044\u305F\u3059\u3099\u3089",
                "\u3044\u305F\u307F",
                "\u3044\u305F\u308A\u3042",
                "\u3044\u3061\u304A\u3046",
                "\u3044\u3061\u3057\u3099",
                "\u3044\u3061\u3068\u3099",
                "\u3044\u3061\u306F\u3099",
                "\u3044\u3061\u3075\u3099",
                "\u3044\u3061\u308A\u3085\u3046",
                "\u3044\u3064\u304B",
                "\u3044\u3063\u3057\u3085\u3093",
                "\u3044\u3063\u305B\u3044",
                "\u3044\u3063\u305D\u3046",
                "\u3044\u3063\u305F\u3093",
                "\u3044\u3063\u3061",
                "\u3044\u3063\u3066\u3044",
                "\u3044\u3063\u307B\u309A\u3046",
                "\u3044\u3066\u3055\u3099",
                "\u3044\u3066\u3093",
                "\u3044\u3068\u3099\u3046",
                "\u3044\u3068\u3053",
                "\u3044\u306A\u3044",
                "\u3044\u306A\u304B",
                "\u3044\u306D\u3080\u308A",
                "\u3044\u306E\u3061",
                "\u3044\u306E\u308B",
                "\u3044\u306F\u3064",
                "\u3044\u306F\u3099\u308B",
                "\u3044\u306F\u3093",
                "\u3044\u3072\u3099\u304D",
                "\u3044\u3072\u3093",
                "\u3044\u3075\u304F",
                "\u3044\u3078\u3093",
                "\u3044\u307B\u3046",
                "\u3044\u307F\u3093",
                "\u3044\u3082\u3046\u3068",
                "\u3044\u3082\u305F\u308C",
                "\u3044\u3082\u308A",
                "\u3044\u3084\u304B\u3099\u308B",
                "\u3044\u3084\u3059",
                "\u3044\u3088\u304B\u3093",
                "\u3044\u3088\u304F",
                "\u3044\u3089\u3044",
                "\u3044\u3089\u3059\u3068",
                "\u3044\u308A\u304F\u3099\u3061",
                "\u3044\u308A\u3087\u3046",
                "\u3044\u308C\u3044",
                "\u3044\u308C\u3082\u306E",
                "\u3044\u308C\u308B",
                "\u3044\u308D\u3048\u3093\u3072\u309A\u3064",
                "\u3044\u308F\u3044",
                "\u3044\u308F\u3046",
                "\u3044\u308F\u304B\u3093",
                "\u3044\u308F\u306F\u3099",
                "\u3044\u308F\u3086\u308B",
                "\u3044\u3093\u3051\u3099\u3093\u307E\u3081",
                "\u3044\u3093\u3055\u3064",
                "\u3044\u3093\u3057\u3087\u3046",
                "\u3044\u3093\u3088\u3046",
                "\u3046\u3048\u304D",
                "\u3046\u3048\u308B",
                "\u3046\u304A\u3055\u3099",
                "\u3046\u304B\u3099\u3044",
                "\u3046\u304B\u3075\u3099",
                "\u3046\u304B\u3078\u3099\u308B",
                "\u3046\u304D\u308F",
                "\u3046\u304F\u3089\u3044\u306A",
                "\u3046\u304F\u308C\u308C",
                "\u3046\u3051\u305F\u307E\u308F\u308B",
                "\u3046\u3051\u3064\u3051",
                "\u3046\u3051\u3068\u308B",
                "\u3046\u3051\u3082\u3064",
                "\u3046\u3051\u308B",
                "\u3046\u3053\u3099\u304B\u3059",
                "\u3046\u3053\u3099\u304F",
                "\u3046\u3053\u3093",
                "\u3046\u3055\u304D\u3099",
                "\u3046\u3057\u306A\u3046",
                "\u3046\u3057\u308D\u304B\u3099\u307F",
                "\u3046\u3059\u3044",
                "\u3046\u3059\u304D\u3099",
                "\u3046\u3059\u304F\u3099\u3089\u3044",
                "\u3046\u3059\u3081\u308B",
                "\u3046\u305B\u3064",
                "\u3046\u3061\u3042\u308F\u305B",
                "\u3046\u3061\u304B\u3099\u308F",
                "\u3046\u3061\u304D",
                "\u3046\u3061\u3085\u3046",
                "\u3046\u3063\u304B\u308A",
                "\u3046\u3064\u304F\u3057\u3044",
                "\u3046\u3063\u305F\u3048\u308B",
                "\u3046\u3064\u308B",
                "\u3046\u3068\u3099\u3093",
                "\u3046\u306A\u304D\u3099",
                "\u3046\u306A\u3057\u3099",
                "\u3046\u306A\u3059\u3099\u304F",
                "\u3046\u306A\u308B",
                "\u3046\u306D\u308B",
                "\u3046\u306E\u3046",
                "\u3046\u3075\u3099\u3051\u3099",
                "\u3046\u3075\u3099\u3053\u3099\u3048",
                "\u3046\u307E\u308C\u308B",
                "\u3046\u3081\u308B",
                "\u3046\u3082\u3046",
                "\u3046\u3084\u307E\u3046",
                "\u3046\u3088\u304F",
                "\u3046\u3089\u304B\u3099\u3048\u3059",
                "\u3046\u3089\u304F\u3099\u3061",
                "\u3046\u3089\u306A\u3044",
                "\u3046\u308A\u3042\u3051\u3099",
                "\u3046\u308A\u304D\u308C",
                "\u3046\u308B\u3055\u3044",
                "\u3046\u308C\u3057\u3044",
                "\u3046\u308C\u3086\u304D",
                "\u3046\u308C\u308B",
                "\u3046\u308D\u3053",
                "\u3046\u308F\u304D",
                "\u3046\u308F\u3055",
                "\u3046\u3093\u3053\u3046",
                "\u3046\u3093\u3061\u3093",
                "\u3046\u3093\u3066\u3093",
                "\u3046\u3093\u3068\u3099\u3046",
                "\u3048\u3044\u3048\u3093",
                "\u3048\u3044\u304B\u3099",
                "\u3048\u3044\u304D\u3087\u3046",
                "\u3048\u3044\u3053\u3099",
                "\u3048\u3044\u305B\u3044",
                "\u3048\u3044\u3075\u3099\u3093",
                "\u3048\u3044\u3088\u3046",
                "\u3048\u3044\u308F",
                "\u3048\u304A\u308A",
                "\u3048\u304B\u3099\u304A",
                "\u3048\u304B\u3099\u304F",
                "\u3048\u304D\u305F\u3044",
                "\u3048\u304F\u305B\u308B",
                "\u3048\u3057\u3083\u304F",
                "\u3048\u3059\u3066",
                "\u3048\u3064\u3089\u3093",
                "\u3048\u306E\u304F\u3099",
                "\u3048\u307B\u3046\u307E\u304D",
                "\u3048\u307B\u3093",
                "\u3048\u307E\u304D",
                "\u3048\u3082\u3057\u3099",
                "\u3048\u3082\u306E",
                "\u3048\u3089\u3044",
                "\u3048\u3089\u3075\u3099",
                "\u3048\u308A\u3042",
                "\u3048\u3093\u3048\u3093",
                "\u3048\u3093\u304B\u3044",
                "\u3048\u3093\u304D\u3099",
                "\u3048\u3093\u3051\u3099\u304D",
                "\u3048\u3093\u3057\u3085\u3046",
                "\u3048\u3093\u305B\u3099\u3064",
                "\u3048\u3093\u305D\u304F",
                "\u3048\u3093\u3061\u3087\u3046",
                "\u3048\u3093\u3068\u3064",
                "\u304A\u3044\u304B\u3051\u308B",
                "\u304A\u3044\u3053\u3059",
                "\u304A\u3044\u3057\u3044",
                "\u304A\u3044\u3064\u304F",
                "\u304A\u3046\u3048\u3093",
                "\u304A\u3046\u3055\u307E",
                "\u304A\u3046\u3057\u3099",
                "\u304A\u3046\u305B\u3064",
                "\u304A\u3046\u305F\u3044",
                "\u304A\u3046\u3075\u304F",
                "\u304A\u3046\u3078\u3099\u3044",
                "\u304A\u3046\u3088\u3046",
                "\u304A\u3048\u308B",
                "\u304A\u304A\u3044",
                "\u304A\u304A\u3046",
                "\u304A\u304A\u3068\u3099\u304A\u308A",
                "\u304A\u304A\u3084",
                "\u304A\u304A\u3088\u305D",
                "\u304A\u304B\u3048\u308A",
                "\u304A\u304B\u3059\u3099",
                "\u304A\u304B\u3099\u3080",
                "\u304A\u304B\u308F\u308A",
                "\u304A\u304D\u3099\u306A\u3046",
                "\u304A\u304D\u308B",
                "\u304A\u304F\u3055\u307E",
                "\u304A\u304F\u3057\u3099\u3087\u3046",
                "\u304A\u304F\u308A\u304B\u3099\u306A",
                "\u304A\u304F\u308B",
                "\u304A\u304F\u308C\u308B",
                "\u304A\u3053\u3059",
                "\u304A\u3053\u306A\u3046",
                "\u304A\u3053\u308B",
                "\u304A\u3055\u3048\u308B",
                "\u304A\u3055\u306A\u3044",
                "\u304A\u3055\u3081\u308B",
                "\u304A\u3057\u3044\u308C",
                "\u304A\u3057\u3048\u308B",
                "\u304A\u3057\u3099\u304D\u3099",
                "\u304A\u3057\u3099\u3055\u3093",
                "\u304A\u3057\u3083\u308C",
                "\u304A\u305D\u3089\u304F",
                "\u304A\u305D\u308F\u308B",
                "\u304A\u305F\u304B\u3099\u3044",
                "\u304A\u305F\u304F",
                "\u304A\u305F\u3099\u3084\u304B",
                "\u304A\u3061\u3064\u304F",
                "\u304A\u3063\u3068",
                "\u304A\u3064\u308A",
                "\u304A\u3066\u3099\u304B\u3051",
                "\u304A\u3068\u3057\u3082\u306E",
                "\u304A\u3068\u306A\u3057\u3044",
                "\u304A\u3068\u3099\u308A",
                "\u304A\u3068\u3099\u308D\u304B\u3059",
                "\u304A\u306F\u3099\u3055\u3093",
                "\u304A\u307E\u3044\u308A",
                "\u304A\u3081\u3066\u3099\u3068\u3046",
                "\u304A\u3082\u3044\u3066\u3099",
                "\u304A\u3082\u3046",
                "\u304A\u3082\u305F\u3044",
                "\u304A\u3082\u3061\u3083",
                "\u304A\u3084\u3064",
                "\u304A\u3084\u3086\u3072\u3099",
                "\u304A\u3088\u307B\u3099\u3059",
                "\u304A\u3089\u3093\u305F\u3099",
                "\u304A\u308D\u3059",
                "\u304A\u3093\u304B\u3099\u304F",
                "\u304A\u3093\u3051\u3044",
                "\u304A\u3093\u3057\u3083",
                "\u304A\u3093\u305B\u3093",
                "\u304A\u3093\u305F\u3099\u3093",
                "\u304A\u3093\u3061\u3085\u3046",
                "\u304A\u3093\u3068\u3099\u3051\u3044",
                "\u304B\u3042\u3064",
                "\u304B\u3044\u304B\u3099",
                "\u304B\u3099\u3044\u304D",
                "\u304B\u3099\u3044\u3051\u3093",
                "\u304B\u3099\u3044\u3053\u3046",
                "\u304B\u3044\u3055\u3064",
                "\u304B\u3044\u3057\u3083",
                "\u304B\u3044\u3059\u3044\u3088\u304F",
                "\u304B\u3044\u305B\u3099\u3093",
                "\u304B\u3044\u305D\u3099\u3046\u3068\u3099",
                "\u304B\u3044\u3064\u3046",
                "\u304B\u3044\u3066\u3093",
                "\u304B\u3044\u3068\u3046",
                "\u304B\u3044\u3075\u304F",
                "\u304B\u3099\u3044\u3078\u304D",
                "\u304B\u3044\u307B\u3046",
                "\u304B\u3044\u3088\u3046",
                "\u304B\u3099\u3044\u3089\u3044",
                "\u304B\u3044\u308F",
                "\u304B\u3048\u308B",
                "\u304B\u304A\u308A",
                "\u304B\u304B\u3048\u308B",
                "\u304B\u304B\u3099\u304F",
                "\u304B\u304B\u3099\u3057",
                "\u304B\u304B\u3099\u307F",
                "\u304B\u304F\u3053\u3099",
                "\u304B\u304F\u3068\u304F",
                "\u304B\u3055\u3099\u308B",
                "\u304B\u3099\u305D\u3099\u3046",
                "\u304B\u305F\u3044",
                "\u304B\u305F\u3061",
                "\u304B\u3099\u3061\u3087\u3046",
                "\u304B\u3099\u3063\u304D\u3085\u3046",
                "\u304B\u3099\u3063\u3053\u3046",
                "\u304B\u3099\u3063\u3055\u3093",
                "\u304B\u3099\u3063\u3057\u3087\u3046",
                "\u304B\u306A\u3055\u3099\u308F\u3057",
                "\u304B\u306E\u3046",
                "\u304B\u3099\u306F\u304F",
                "\u304B\u3075\u3099\u304B",
                "\u304B\u307B\u3046",
                "\u304B\u307B\u3053\u3099",
                "\u304B\u307E\u3046",
                "\u304B\u307E\u307B\u3099\u3053",
                "\u304B\u3081\u308C\u304A\u3093",
                "\u304B\u3086\u3044",
                "\u304B\u3088\u3046\u3072\u3099",
                "\u304B\u3089\u3044",
                "\u304B\u308B\u3044",
                "\u304B\u308D\u3046",
                "\u304B\u308F\u304F",
                "\u304B\u308F\u3089",
                "\u304B\u3099\u3093\u304B",
                "\u304B\u3093\u3051\u3044",
                "\u304B\u3093\u3053\u3046",
                "\u304B\u3093\u3057\u3083",
                "\u304B\u3093\u305D\u3046",
                "\u304B\u3093\u305F\u3093",
                "\u304B\u3093\u3061",
                "\u304B\u3099\u3093\u306F\u3099\u308B",
                "\u304D\u3042\u3044",
                "\u304D\u3042\u3064",
                "\u304D\u3044\u308D",
                "\u304D\u3099\u3044\u3093",
                "\u304D\u3046\u3044",
                "\u304D\u3046\u3093",
                "\u304D\u3048\u308B",
                "\u304D\u304A\u3046",
                "\u304D\u304A\u304F",
                "\u304D\u304A\u3061",
                "\u304D\u304A\u3093",
                "\u304D\u304B\u3044",
                "\u304D\u304B\u304F",
                "\u304D\u304B\u3093\u3057\u3083",
                "\u304D\u304D\u3066",
                "\u304D\u304F\u306F\u3099\u308A",
                "\u304D\u304F\u3089\u3051\u3099",
                "\u304D\u3051\u3093\u305B\u3044",
                "\u304D\u3053\u3046",
                "\u304D\u3053\u3048\u308B",
                "\u304D\u3053\u304F",
                "\u304D\u3055\u3044",
                "\u304D\u3055\u304F",
                "\u304D\u3055\u307E",
                "\u304D\u3055\u3089\u304D\u3099",
                "\u304D\u3099\u3057\u3099\u304B\u304B\u3099\u304F",
                "\u304D\u3099\u3057\u304D",
                "\u304D\u3099\u3057\u3099\u305F\u3044\u3051\u3093",
                "\u304D\u3099\u3057\u3099\u306B\u3063\u3066\u3044",
                "\u304D\u3099\u3057\u3099\u3085\u3064\u3057\u3083",
                "\u304D\u3059\u3046",
                "\u304D\u305B\u3044",
                "\u304D\u305B\u304D",
                "\u304D\u305B\u3064",
                "\u304D\u305D\u3046",
                "\u304D\u305D\u3099\u304F",
                "\u304D\u305D\u3099\u3093",
                "\u304D\u305F\u3048\u308B",
                "\u304D\u3061\u3087\u3046",
                "\u304D\u3064\u3048\u3093",
                "\u304D\u3099\u3063\u3061\u308A",
                "\u304D\u3064\u3064\u304D",
                "\u304D\u3064\u306D",
                "\u304D\u3066\u3044",
                "\u304D\u3068\u3099\u3046",
                "\u304D\u3068\u3099\u304F",
                "\u304D\u306A\u3044",
                "\u304D\u306A\u304B\u3099",
                "\u304D\u306A\u3053",
                "\u304D\u306C\u3053\u3099\u3057",
                "\u304D\u306D\u3093",
                "\u304D\u306E\u3046",
                "\u304D\u306E\u3057\u305F",
                "\u304D\u306F\u304F",
                "\u304D\u3072\u3099\u3057\u3044",
                "\u304D\u3072\u3093",
                "\u304D\u3075\u304F",
                "\u304D\u3075\u3099\u3093",
                "\u304D\u307B\u3099\u3046",
                "\u304D\u307B\u3093",
                "\u304D\u307E\u308B",
                "\u304D\u307F\u3064",
                "\u304D\u3080\u3059\u3099\u304B\u3057\u3044",
                "\u304D\u3081\u308B",
                "\u304D\u3082\u305F\u3099\u3081\u3057",
                "\u304D\u3082\u3061",
                "\u304D\u3082\u306E",
                "\u304D\u3083\u304F",
                "\u304D\u3084\u304F",
                "\u304D\u3099\u3085\u3046\u306B\u304F",
                "\u304D\u3088\u3046",
                "\u304D\u3087\u3046\u308A\u3085\u3046",
                "\u304D\u3089\u3044",
                "\u304D\u3089\u304F",
                "\u304D\u308A\u3093",
                "\u304D\u308C\u3044",
                "\u304D\u308C\u3064",
                "\u304D\u308D\u304F",
                "\u304D\u3099\u308D\u3093",
                "\u304D\u308F\u3081\u308B",
                "\u304D\u3099\u3093\u3044\u308D",
                "\u304D\u3093\u304B\u304F\u3057\u3099",
                "\u304D\u3093\u3057\u3099\u3087",
                "\u304D\u3093\u3088\u3046\u3072\u3099",
                "\u304F\u3099\u3042\u3044",
                "\u304F\u3044\u3059\u3099",
                "\u304F\u3046\u304B\u3093",
                "\u304F\u3046\u304D",
                "\u304F\u3046\u304F\u3099\u3093",
                "\u304F\u3046\u3053\u3046",
                "\u304F\u3099\u3046\u305B\u3044",
                "\u304F\u3046\u305D\u3046",
                "\u304F\u3099\u3046\u305F\u3089",
                "\u304F\u3046\u3075\u304F",
                "\u304F\u3046\u307B\u3099",
                "\u304F\u304B\u3093",
                "\u304F\u304D\u3087\u3046",
                "\u304F\u3051\u3099\u3093",
                "\u304F\u3099\u3053\u3046",
                "\u304F\u3055\u3044",
                "\u304F\u3055\u304D",
                "\u304F\u3055\u306F\u3099\u306A",
                "\u304F\u3055\u308B",
                "\u304F\u3057\u3083\u307F",
                "\u304F\u3057\u3087\u3046",
                "\u304F\u3059\u306E\u304D",
                "\u304F\u3059\u308A\u3086\u3072\u3099",
                "\u304F\u305B\u3051\u3099",
                "\u304F\u305B\u3093",
                "\u304F\u3099\u305F\u3044\u3066\u304D",
                "\u304F\u305F\u3099\u3055\u308B",
                "\u304F\u305F\u3072\u3099\u308C\u308B",
                "\u304F\u3061\u3053\u307F",
                "\u304F\u3061\u3055\u304D",
                "\u304F\u3064\u3057\u305F",
                "\u304F\u3099\u3063\u3059\u308A",
                "\u304F\u3064\u308D\u304F\u3099",
                "\u304F\u3068\u3046\u3066\u3093",
                "\u304F\u3068\u3099\u304F",
                "\u304F\u306A\u3093",
                "\u304F\u306D\u304F\u306D",
                "\u304F\u306E\u3046",
                "\u304F\u3075\u3046",
                "\u304F\u307F\u3042\u308F\u305B",
                "\u304F\u307F\u305F\u3066\u308B",
                "\u304F\u3081\u308B",
                "\u304F\u3084\u304F\u3057\u3087",
                "\u304F\u3089\u3059",
                "\u304F\u3089\u3078\u3099\u308B",
                "\u304F\u308B\u307E",
                "\u304F\u308C\u308B",
                "\u304F\u308D\u3046",
                "\u304F\u308F\u3057\u3044",
                "\u304F\u3099\u3093\u304B\u3093",
                "\u304F\u3099\u3093\u3057\u3087\u304F",
                "\u304F\u3099\u3093\u305F\u3044",
                "\u304F\u3099\u3093\u3066",
                "\u3051\u3042\u306A",
                "\u3051\u3044\u304B\u304F",
                "\u3051\u3044\u3051\u3093",
                "\u3051\u3044\u3053",
                "\u3051\u3044\u3055\u3064",
                "\u3051\u3099\u3044\u3057\u3099\u3085\u3064",
                "\u3051\u3044\u305F\u3044",
                "\u3051\u3099\u3044\u306E\u3046\u3057\u3099\u3093",
                "\u3051\u3044\u308C\u304D",
                "\u3051\u3044\u308D",
                "\u3051\u304A\u3068\u3059",
                "\u3051\u304A\u308A\u3082\u306E",
                "\u3051\u3099\u304D\u304B",
                "\u3051\u3099\u304D\u3051\u3099\u3093",
                "\u3051\u3099\u304D\u305F\u3099\u3093",
                "\u3051\u3099\u304D\u3061\u3093",
                "\u3051\u3099\u304D\u3068\u3064",
                "\u3051\u3099\u304D\u306F",
                "\u3051\u3099\u304D\u3084\u304F",
                "\u3051\u3099\u3053\u3046",
                "\u3051\u3099\u3053\u304F\u3057\u3099\u3087\u3046",
                "\u3051\u3099\u3055\u3099\u3044",
                "\u3051\u3055\u304D",
                "\u3051\u3099\u3055\u3099\u3093",
                "\u3051\u3057\u304D",
                "\u3051\u3057\u3053\u3099\u3080",
                "\u3051\u3057\u3087\u3046",
                "\u3051\u3099\u3059\u3068",
                "\u3051\u305F\u306F\u3099",
                "\u3051\u3061\u3083\u3063\u3075\u309A",
                "\u3051\u3061\u3089\u3059",
                "\u3051\u3064\u3042\u3064",
                "\u3051\u3064\u3044",
                "\u3051\u3064\u3048\u304D",
                "\u3051\u3063\u3053\u3093",
                "\u3051\u3064\u3057\u3099\u3087",
                "\u3051\u3063\u305B\u304D",
                "\u3051\u3063\u3066\u3044",
                "\u3051\u3064\u307E\u3064",
                "\u3051\u3099\u3064\u3088\u3046\u3072\u3099",
                "\u3051\u3099\u3064\u308C\u3044",
                "\u3051\u3064\u308D\u3093",
                "\u3051\u3099\u3068\u3099\u304F",
                "\u3051\u3068\u306F\u3099\u3059",
                "\u3051\u3068\u308B",
                "\u3051\u306A\u3051\u3099",
                "\u3051\u306A\u3059",
                "\u3051\u306A\u307F",
                "\u3051\u306C\u304D",
                "\u3051\u3099\u306D\u3064",
                "\u3051\u306D\u3093",
                "\u3051\u306F\u3044",
                "\u3051\u3099\u3072\u3093",
                "\u3051\u3075\u3099\u304B\u3044",
                "\u3051\u3099\u307B\u3099\u304F",
                "\u3051\u307E\u308A",
                "\u3051\u307F\u304B\u308B",
                "\u3051\u3080\u3057",
                "\u3051\u3080\u308A",
                "\u3051\u3082\u306E",
                "\u3051\u3089\u3044",
                "\u3051\u308D\u3051\u308D",
                "\u3051\u308F\u3057\u3044",
                "\u3051\u3093\u3044",
                "\u3051\u3093\u3048\u3064",
                "\u3051\u3093\u304A",
                "\u3051\u3093\u304B",
                "\u3051\u3099\u3093\u304D",
                "\u3051\u3093\u3051\u3099\u3093",
                "\u3051\u3093\u3053\u3046",
                "\u3051\u3093\u3055\u304F",
                "\u3051\u3093\u3057\u3085\u3046",
                "\u3051\u3093\u3059\u3046",
                "\u3051\u3099\u3093\u305D\u3046",
                "\u3051\u3093\u3061\u304F",
                "\u3051\u3093\u3066\u3044",
                "\u3051\u3093\u3068\u3046",
                "\u3051\u3093\u306A\u3044",
                "\u3051\u3093\u306B\u3093",
                "\u3051\u3099\u3093\u3075\u3099\u3064",
                "\u3051\u3093\u307E",
                "\u3051\u3093\u307F\u3093",
                "\u3051\u3093\u3081\u3044",
                "\u3051\u3093\u3089\u3093",
                "\u3051\u3093\u308A",
                "\u3053\u3042\u304F\u307E",
                "\u3053\u3044\u306C",
                "\u3053\u3044\u3072\u3099\u3068",
                "\u3053\u3099\u3046\u3044",
                "\u3053\u3046\u3048\u3093",
                "\u3053\u3046\u304A\u3093",
                "\u3053\u3046\u304B\u3093",
                "\u3053\u3099\u3046\u304D\u3085\u3046",
                "\u3053\u3099\u3046\u3051\u3044",
                "\u3053\u3046\u3053\u3046",
                "\u3053\u3046\u3055\u3044",
                "\u3053\u3046\u3057\u3099",
                "\u3053\u3046\u3059\u3044",
                "\u3053\u3099\u3046\u305B\u3044",
                "\u3053\u3046\u305D\u304F",
                "\u3053\u3046\u305F\u3044",
                "\u3053\u3046\u3061\u3083",
                "\u3053\u3046\u3064\u3046",
                "\u3053\u3046\u3066\u3044",
                "\u3053\u3046\u3068\u3099\u3046",
                "\u3053\u3046\u306A\u3044",
                "\u3053\u3046\u306F\u3044",
                "\u3053\u3099\u3046\u307B\u3046",
                "\u3053\u3099\u3046\u307E\u3093",
                "\u3053\u3046\u3082\u304F",
                "\u3053\u3046\u308A\u3064",
                "\u3053\u3048\u308B",
                "\u3053\u304A\u308A",
                "\u3053\u3099\u304B\u3044",
                "\u3053\u3099\u304B\u3099\u3064",
                "\u3053\u3099\u304B\u3093",
                "\u3053\u304F\u3053\u3099",
                "\u3053\u304F\u3055\u3044",
                "\u3053\u304F\u3068\u3046",
                "\u3053\u304F\u306A\u3044",
                "\u3053\u304F\u306F\u304F",
                "\u3053\u304F\u3099\u307E",
                "\u3053\u3051\u3044",
                "\u3053\u3051\u308B",
                "\u3053\u3053\u306E\u304B",
                "\u3053\u3053\u308D",
                "\u3053\u3055\u3081",
                "\u3053\u3057\u3064",
                "\u3053\u3059\u3046",
                "\u3053\u305B\u3044",
                "\u3053\u305B\u304D",
                "\u3053\u305B\u3099\u3093",
                "\u3053\u305D\u305F\u3099\u3066",
                "\u3053\u305F\u3044",
                "\u3053\u305F\u3048\u308B",
                "\u3053\u305F\u3064",
                "\u3053\u3061\u3087\u3046",
                "\u3053\u3063\u304B",
                "\u3053\u3064\u3053\u3064",
                "\u3053\u3064\u306F\u3099\u3093",
                "\u3053\u3064\u3075\u3099",
                "\u3053\u3066\u3044",
                "\u3053\u3066\u3093",
                "\u3053\u3068\u304B\u3099\u3089",
                "\u3053\u3068\u3057",
                "\u3053\u3068\u306F\u3099",
                "\u3053\u3068\u308A",
                "\u3053\u306A\u3053\u3099\u306A",
                "\u3053\u306D\u3053\u306D",
                "\u3053\u306E\u307E\u307E",
                "\u3053\u306E\u307F",
                "\u3053\u306E\u3088",
                "\u3053\u3099\u306F\u3093",
                "\u3053\u3072\u3064\u3057\u3099",
                "\u3053\u3075\u3046",
                "\u3053\u3075\u3093",
                "\u3053\u307B\u3099\u308C\u308B",
                "\u3053\u3099\u307E\u3042\u3075\u3099\u3089",
                "\u3053\u307E\u304B\u3044",
                "\u3053\u3099\u307E\u3059\u308A",
                "\u3053\u307E\u3064\u306A",
                "\u3053\u307E\u308B",
                "\u3053\u3080\u304D\u3099\u3053",
                "\u3053\u3082\u3057\u3099",
                "\u3053\u3082\u3061",
                "\u3053\u3082\u306E",
                "\u3053\u3082\u3093",
                "\u3053\u3084\u304F",
                "\u3053\u3084\u307E",
                "\u3053\u3086\u3046",
                "\u3053\u3086\u3072\u3099",
                "\u3053\u3088\u3044",
                "\u3053\u3088\u3046",
                "\u3053\u308A\u308B",
                "\u3053\u308C\u304F\u3057\u3087\u3093",
                "\u3053\u308D\u3063\u3051",
                "\u3053\u308F\u3082\u3066",
                "\u3053\u308F\u308C\u308B",
                "\u3053\u3093\u3044\u3093",
                "\u3053\u3093\u304B\u3044",
                "\u3053\u3093\u304D",
                "\u3053\u3093\u3057\u3085\u3046",
                "\u3053\u3093\u3059\u3044",
                "\u3053\u3093\u305F\u3099\u3066",
                "\u3053\u3093\u3068\u3093",
                "\u3053\u3093\u306A\u3093",
                "\u3053\u3093\u3072\u3099\u306B",
                "\u3053\u3093\u307B\u309A\u3093",
                "\u3053\u3093\u307E\u3051",
                "\u3053\u3093\u3084",
                "\u3053\u3093\u308C\u3044",
                "\u3053\u3093\u308F\u304F",
                "\u3055\u3099\u3044\u3048\u304D",
                "\u3055\u3044\u304B\u3044",
                "\u3055\u3044\u304D\u3093",
                "\u3055\u3099\u3044\u3051\u3099\u3093",
                "\u3055\u3099\u3044\u3053",
                "\u3055\u3044\u3057\u3087",
                "\u3055\u3044\u305B\u3044",
                "\u3055\u3099\u3044\u305F\u304F",
                "\u3055\u3099\u3044\u3061\u3085\u3046",
                "\u3055\u3044\u3066\u304D",
                "\u3055\u3099\u3044\u308A\u3087\u3046",
                "\u3055\u3046\u306A",
                "\u3055\u304B\u3044\u3057",
                "\u3055\u304B\u3099\u3059",
                "\u3055\u304B\u306A",
                "\u3055\u304B\u307F\u3061",
                "\u3055\u304B\u3099\u308B",
                "\u3055\u304D\u3099\u3087\u3046",
                "\u3055\u304F\u3057",
                "\u3055\u304F\u3072\u3093",
                "\u3055\u304F\u3089",
                "\u3055\u3053\u304F",
                "\u3055\u3053\u3064",
                "\u3055\u3059\u3099\u304B\u308B",
                "\u3055\u3099\u305B\u304D",
                "\u3055\u305F\u3093",
                "\u3055\u3064\u3048\u3044",
                "\u3055\u3099\u3064\u304A\u3093",
                "\u3055\u3099\u3063\u304B",
                "\u3055\u3099\u3064\u304B\u3099\u304F",
                "\u3055\u3063\u304D\u3087\u304F",
                "\u3055\u3099\u3063\u3057",
                "\u3055\u3064\u3057\u3099\u3093",
                "\u3055\u3099\u3063\u305D\u3046",
                "\u3055\u3064\u305F\u306F\u3099",
                "\u3055\u3064\u307E\u3044\u3082",
                "\u3055\u3066\u3044",
                "\u3055\u3068\u3044\u3082",
                "\u3055\u3068\u3046",
                "\u3055\u3068\u304A\u3084",
                "\u3055\u3068\u3057",
                "\u3055\u3068\u308B",
                "\u3055\u306E\u3046",
                "\u3055\u306F\u3099\u304F",
                "\u3055\u3072\u3099\u3057\u3044",
                "\u3055\u3078\u3099\u3064",
                "\u3055\u307B\u3046",
                "\u3055\u307B\u3068\u3099",
                "\u3055\u307E\u3059",
                "\u3055\u307F\u3057\u3044",
                "\u3055\u307F\u305F\u3099\u308C",
                "\u3055\u3080\u3051",
                "\u3055\u3081\u308B",
                "\u3055\u3084\u3048\u3093\u3068\u3099\u3046",
                "\u3055\u3086\u3046",
                "\u3055\u3088\u3046",
                "\u3055\u3088\u304F",
                "\u3055\u3089\u305F\u3099",
                "\u3055\u3099\u308B\u305D\u306F\u3099",
                "\u3055\u308F\u3084\u304B",
                "\u3055\u308F\u308B",
                "\u3055\u3093\u3044\u3093",
                "\u3055\u3093\u304B",
                "\u3055\u3093\u304D\u3083\u304F",
                "\u3055\u3093\u3053\u3046",
                "\u3055\u3093\u3055\u3044",
                "\u3055\u3099\u3093\u3057\u3087",
                "\u3055\u3093\u3059\u3046",
                "\u3055\u3093\u305B\u3044",
                "\u3055\u3093\u305D",
                "\u3055\u3093\u3061",
                "\u3055\u3093\u307E",
                "\u3055\u3093\u307F",
                "\u3055\u3093\u3089\u3093",
                "\u3057\u3042\u3044",
                "\u3057\u3042\u3051\u3099",
                "\u3057\u3042\u3055\u3063\u3066",
                "\u3057\u3042\u308F\u305B",
                "\u3057\u3044\u304F",
                "\u3057\u3044\u3093",
                "\u3057\u3046\u3061",
                "\u3057\u3048\u3044",
                "\u3057\u304A\u3051",
                "\u3057\u304B\u3044",
                "\u3057\u304B\u304F",
                "\u3057\u3099\u304B\u3093",
                "\u3057\u3053\u3099\u3068",
                "\u3057\u3059\u3046",
                "\u3057\u3099\u305F\u3099\u3044",
                "\u3057\u305F\u3046\u3051",
                "\u3057\u305F\u304D\u3099",
                "\u3057\u305F\u3066",
                "\u3057\u305F\u307F",
                "\u3057\u3061\u3087\u3046",
                "\u3057\u3061\u308A\u3093",
                "\u3057\u3063\u304B\u308A",
                "\u3057\u3064\u3057\u3099",
                "\u3057\u3064\u3082\u3093",
                "\u3057\u3066\u3044",
                "\u3057\u3066\u304D",
                "\u3057\u3066\u3064",
                "\u3057\u3099\u3066\u3093",
                "\u3057\u3099\u3068\u3099\u3046",
                "\u3057\u306A\u304D\u3099\u308C",
                "\u3057\u306A\u3082\u306E",
                "\u3057\u306A\u3093",
                "\u3057\u306D\u307E",
                "\u3057\u306D\u3093",
                "\u3057\u306E\u304F\u3099",
                "\u3057\u306E\u3075\u3099",
                "\u3057\u306F\u3044",
                "\u3057\u306F\u3099\u304B\u308A",
                "\u3057\u306F\u3064",
                "\u3057\u306F\u3089\u3044",
                "\u3057\u306F\u3093",
                "\u3057\u3072\u3087\u3046",
                "\u3057\u3075\u304F",
                "\u3057\u3099\u3075\u3099\u3093",
                "\u3057\u3078\u3044",
                "\u3057\u307B\u3046",
                "\u3057\u307B\u3093",
                "\u3057\u307E\u3046",
                "\u3057\u307E\u308B",
                "\u3057\u307F\u3093",
                "\u3057\u3080\u3051\u308B",
                "\u3057\u3099\u3080\u3057\u3087",
                "\u3057\u3081\u3044",
                "\u3057\u3081\u308B",
                "\u3057\u3082\u3093",
                "\u3057\u3083\u3044\u3093",
                "\u3057\u3083\u3046\u3093",
                "\u3057\u3083\u304A\u3093",
                "\u3057\u3099\u3083\u304B\u3099\u3044\u3082",
                "\u3057\u3084\u304F\u3057\u3087",
                "\u3057\u3083\u304F\u307B\u3046",
                "\u3057\u3083\u3051\u3093",
                "\u3057\u3083\u3053",
                "\u3057\u3083\u3055\u3099\u3044",
                "\u3057\u3083\u3057\u3093",
                "\u3057\u3083\u305B\u3093",
                "\u3057\u3083\u305D\u3046",
                "\u3057\u3083\u305F\u3044",
                "\u3057\u3083\u3061\u3087\u3046",
                "\u3057\u3083\u3063\u304D\u3093",
                "\u3057\u3099\u3083\u307E",
                "\u3057\u3083\u308A\u3093",
                "\u3057\u3083\u308C\u3044",
                "\u3057\u3099\u3086\u3046",
                "\u3057\u3099\u3085\u3046\u3057\u3087",
                "\u3057\u3085\u304F\u306F\u304F",
                "\u3057\u3099\u3085\u3057\u3093",
                "\u3057\u3085\u3063\u305B\u304D",
                "\u3057\u3085\u307F",
                "\u3057\u3085\u3089\u306F\u3099",
                "\u3057\u3099\u3085\u3093\u306F\u3099\u3093",
                "\u3057\u3087\u3046\u304B\u3044",
                "\u3057\u3087\u304F\u305F\u304F",
                "\u3057\u3087\u3063\u3051\u3093",
                "\u3057\u3087\u3068\u3099\u3046",
                "\u3057\u3087\u3082\u3064",
                "\u3057\u3089\u305B\u308B",
                "\u3057\u3089\u3078\u3099\u308B",
                "\u3057\u3093\u304B",
                "\u3057\u3093\u3053\u3046",
                "\u3057\u3099\u3093\u3057\u3099\u3083",
                "\u3057\u3093\u305B\u3044\u3057\u3099",
                "\u3057\u3093\u3061\u304F",
                "\u3057\u3093\u308A\u3093",
                "\u3059\u3042\u3051\u3099",
                "\u3059\u3042\u3057",
                "\u3059\u3042\u306A",
                "\u3059\u3099\u3042\u3093",
                "\u3059\u3044\u3048\u3044",
                "\u3059\u3044\u304B",
                "\u3059\u3044\u3068\u3046",
                "\u3059\u3099\u3044\u3075\u3099\u3093",
                "\u3059\u3044\u3088\u3046\u3072\u3099",
                "\u3059\u3046\u304B\u3099\u304F",
                "\u3059\u3046\u3057\u3099\u3064",
                "\u3059\u3046\u305B\u3093",
                "\u3059\u304A\u3068\u3099\u308A",
                "\u3059\u304D\u307E",
                "\u3059\u304F\u3046",
                "\u3059\u304F\u306A\u3044",
                "\u3059\u3051\u308B",
                "\u3059\u3053\u3099\u3044",
                "\u3059\u3053\u3057",
                "\u3059\u3099\u3055\u3093",
                "\u3059\u3059\u3099\u3057\u3044",
                "\u3059\u3059\u3080",
                "\u3059\u3059\u3081\u308B",
                "\u3059\u3063\u304B\u308A",
                "\u3059\u3099\u3063\u3057\u308A",
                "\u3059\u3099\u3063\u3068",
                "\u3059\u3066\u304D",
                "\u3059\u3066\u308B",
                "\u3059\u306D\u308B",
                "\u3059\u306E\u3053",
                "\u3059\u306F\u305F\u3099",
                "\u3059\u306F\u3099\u3089\u3057\u3044",
                "\u3059\u3099\u3072\u3087\u3046",
                "\u3059\u3099\u3075\u3099\u306C\u308C",
                "\u3059\u3075\u3099\u308A",
                "\u3059\u3075\u308C",
                "\u3059\u3078\u3099\u3066",
                "\u3059\u3078\u3099\u308B",
                "\u3059\u3099\u307B\u3046",
                "\u3059\u307B\u3099\u3093",
                "\u3059\u307E\u3044",
                "\u3059\u3081\u3057",
                "\u3059\u3082\u3046",
                "\u3059\u3084\u304D",
                "\u3059\u3089\u3059\u3089",
                "\u3059\u308B\u3081",
                "\u3059\u308C\u3061\u304B\u3099\u3046",
                "\u3059\u308D\u3063\u3068",
                "\u3059\u308F\u308B",
                "\u3059\u3093\u305B\u3099\u3093",
                "\u3059\u3093\u307B\u309A\u3046",
                "\u305B\u3042\u3075\u3099\u3089",
                "\u305B\u3044\u304B\u3064",
                "\u305B\u3044\u3051\u3099\u3093",
                "\u305B\u3044\u3057\u3099",
                "\u305B\u3044\u3088\u3046",
                "\u305B\u304A\u3046",
                "\u305B\u304B\u3044\u304B\u3093",
                "\u305B\u304D\u306B\u3093",
                "\u305B\u304D\u3080",
                "\u305B\u304D\u3086",
                "\u305B\u304D\u3089\u3093\u3046\u3093",
                "\u305B\u3051\u3093",
                "\u305B\u3053\u3046",
                "\u305B\u3059\u3057\u3099",
                "\u305B\u305F\u3044",
                "\u305B\u305F\u3051",
                "\u305B\u3063\u304B\u304F",
                "\u305B\u3063\u304D\u3083\u304F",
                "\u305B\u3099\u3063\u304F",
                "\u305B\u3063\u3051\u3093",
                "\u305B\u3063\u3053\u3064",
                "\u305B\u3063\u3055\u305F\u304F\u307E",
                "\u305B\u3064\u305D\u3099\u304F",
                "\u305B\u3064\u305F\u3099\u3093",
                "\u305B\u3064\u3066\u3099\u3093",
                "\u305B\u3063\u306F\u309A\u3093",
                "\u305B\u3064\u3072\u3099",
                "\u305B\u3064\u3075\u3099\u3093",
                "\u305B\u3064\u3081\u3044",
                "\u305B\u3064\u308A\u3064",
                "\u305B\u306A\u304B",
                "\u305B\u306E\u3072\u3099",
                "\u305B\u306F\u306F\u3099",
                "\u305B\u3072\u3099\u308D",
                "\u305B\u307B\u3099\u306D",
                "\u305B\u307E\u3044",
                "\u305B\u307E\u308B",
                "\u305B\u3081\u308B",
                "\u305B\u3082\u305F\u308C",
                "\u305B\u308A\u3075",
                "\u305B\u3099\u3093\u3042\u304F",
                "\u305B\u3093\u3044",
                "\u305B\u3093\u3048\u3044",
                "\u305B\u3093\u304B",
                "\u305B\u3093\u304D\u3087",
                "\u305B\u3093\u304F",
                "\u305B\u3093\u3051\u3099\u3093",
                "\u305B\u3099\u3093\u3053\u3099",
                "\u305B\u3093\u3055\u3044",
                "\u305B\u3093\u3057\u3085",
                "\u305B\u3093\u3059\u3044",
                "\u305B\u3093\u305B\u3044",
                "\u305B\u3093\u305D\u3099",
                "\u305B\u3093\u305F\u304F",
                "\u305B\u3093\u3061\u3087\u3046",
                "\u305B\u3093\u3066\u3044",
                "\u305B\u3093\u3068\u3046",
                "\u305B\u3093\u306C\u304D",
                "\u305B\u3093\u306D\u3093",
                "\u305B\u3093\u306F\u309A\u3044",
                "\u305B\u3099\u3093\u3075\u3099",
                "\u305B\u3099\u3093\u307B\u309A\u3046",
                "\u305B\u3093\u3080",
                "\u305B\u3093\u3081\u3093\u3057\u3099\u3087",
                "\u305B\u3093\u3082\u3093",
                "\u305B\u3093\u3084\u304F",
                "\u305B\u3093\u3086\u3046",
                "\u305B\u3093\u3088\u3046",
                "\u305B\u3099\u3093\u3089",
                "\u305B\u3099\u3093\u308A\u3083\u304F",
                "\u305B\u3093\u308C\u3044",
                "\u305B\u3093\u308D",
                "\u305D\u3042\u304F",
                "\u305D\u3044\u3068\u3051\u3099\u308B",
                "\u305D\u3044\u306D",
                "\u305D\u3046\u304B\u3099\u3093\u304D\u3087\u3046",
                "\u305D\u3046\u304D",
                "\u305D\u3046\u3053\u3099",
                "\u305D\u3046\u3057\u3093",
                "\u305D\u3046\u305F\u3099\u3093",
                "\u305D\u3046\u306A\u3093",
                "\u305D\u3046\u3072\u3099",
                "\u305D\u3046\u3081\u3093",
                "\u305D\u3046\u308A",
                "\u305D\u3048\u3082\u306E",
                "\u305D\u3048\u3093",
                "\u305D\u304B\u3099\u3044",
                "\u305D\u3051\u3099\u304D",
                "\u305D\u3053\u3046",
                "\u305D\u3053\u305D\u3053",
                "\u305D\u3055\u3099\u3044",
                "\u305D\u3057\u306A",
                "\u305D\u305B\u3044",
                "\u305D\u305B\u3093",
                "\u305D\u305D\u304F\u3099",
                "\u305D\u305F\u3099\u3066\u308B",
                "\u305D\u3064\u3046",
                "\u305D\u3064\u3048\u3093",
                "\u305D\u3063\u304B\u3093",
                "\u305D\u3064\u304D\u3099\u3087\u3046",
                "\u305D\u3063\u3051\u3064",
                "\u305D\u3063\u3053\u3046",
                "\u305D\u3063\u305B\u3093",
                "\u305D\u3063\u3068",
                "\u305D\u3068\u304B\u3099\u308F",
                "\u305D\u3068\u3064\u3099\u3089",
                "\u305D\u306A\u3048\u308B",
                "\u305D\u306A\u305F",
                "\u305D\u3075\u307B\u3099",
                "\u305D\u307B\u3099\u304F",
                "\u305D\u307B\u3099\u308D",
                "\u305D\u307E\u3064",
                "\u305D\u307E\u308B",
                "\u305D\u3080\u304F",
                "\u305D\u3080\u308A\u3048",
                "\u305D\u3081\u308B",
                "\u305D\u3082\u305D\u3082",
                "\u305D\u3088\u304B\u305B\u3099",
                "\u305D\u3089\u307E\u3081",
                "\u305D\u308D\u3046",
                "\u305D\u3093\u304B\u3044",
                "\u305D\u3093\u3051\u3044",
                "\u305D\u3093\u3055\u3099\u3044",
                "\u305D\u3093\u3057\u3064",
                "\u305D\u3093\u305D\u3099\u304F",
                "\u305D\u3093\u3061\u3087\u3046",
                "\u305D\u3099\u3093\u3072\u3099",
                "\u305D\u3099\u3093\u3075\u3099\u3093",
                "\u305D\u3093\u307F\u3093",
                "\u305F\u3042\u3044",
                "\u305F\u3044\u3044\u3093",
                "\u305F\u3044\u3046\u3093",
                "\u305F\u3044\u3048\u304D",
                "\u305F\u3044\u304A\u3046",
                "\u305F\u3099\u3044\u304B\u3099\u304F",
                "\u305F\u3044\u304D",
                "\u305F\u3044\u304F\u3099\u3046",
                "\u305F\u3044\u3051\u3093",
                "\u305F\u3044\u3053",
                "\u305F\u3044\u3055\u3099\u3044",
                "\u305F\u3099\u3044\u3057\u3099\u3087\u3046\u3075\u3099",
                "\u305F\u3099\u3044\u3059\u304D",
                "\u305F\u3044\u305B\u3064",
                "\u305F\u3044\u305D\u3046",
                "\u305F\u3099\u3044\u305F\u3044",
                "\u305F\u3044\u3061\u3087\u3046",
                "\u305F\u3044\u3066\u3044",
                "\u305F\u3099\u3044\u3068\u3099\u3053\u308D",
                "\u305F\u3044\u306A\u3044",
                "\u305F\u3044\u306D\u3064",
                "\u305F\u3044\u306E\u3046",
                "\u305F\u3044\u306F\u3093",
                "\u305F\u3099\u3044\u3072\u3087\u3046",
                "\u305F\u3044\u3075\u3046",
                "\u305F\u3044\u3078\u3093",
                "\u305F\u3044\u307B",
                "\u305F\u3044\u307E\u3064\u306F\u3099\u306A",
                "\u305F\u3044\u307F\u3093\u304F\u3099",
                "\u305F\u3044\u3080",
                "\u305F\u3044\u3081\u3093",
                "\u305F\u3044\u3084\u304D",
                "\u305F\u3044\u3088\u3046",
                "\u305F\u3044\u3089",
                "\u305F\u3044\u308A\u3087\u304F",
                "\u305F\u3044\u308B",
                "\u305F\u3044\u308F\u3093",
                "\u305F\u3046\u3048",
                "\u305F\u3048\u308B",
                "\u305F\u304A\u3059",
                "\u305F\u304A\u308B",
                "\u305F\u304A\u308C\u308B",
                "\u305F\u304B\u3044",
                "\u305F\u304B\u306D",
                "\u305F\u304D\u3072\u3099",
                "\u305F\u304F\u3055\u3093",
                "\u305F\u3053\u304F",
                "\u305F\u3053\u3084\u304D",
                "\u305F\u3055\u3044",
                "\u305F\u3057\u3055\u3099\u3093",
                "\u305F\u3099\u3057\u3099\u3083\u308C",
                "\u305F\u3059\u3051\u308B",
                "\u305F\u3059\u3099\u3055\u308F\u308B",
                "\u305F\u305D\u304B\u3099\u308C",
                "\u305F\u305F\u304B\u3046",
                "\u305F\u305F\u304F",
                "\u305F\u305F\u3099\u3057\u3044",
                "\u305F\u305F\u307F",
                "\u305F\u3061\u306F\u3099\u306A",
                "\u305F\u3099\u3063\u304B\u3044",
                "\u305F\u3099\u3063\u304D\u3083\u304F",
                "\u305F\u3099\u3063\u3053",
                "\u305F\u3099\u3063\u3057\u3085\u3064",
                "\u305F\u3099\u3063\u305F\u3044",
                "\u305F\u3066\u308B",
                "\u305F\u3068\u3048\u308B",
                "\u305F\u306A\u306F\u3099\u305F",
                "\u305F\u306B\u3093",
                "\u305F\u306C\u304D",
                "\u305F\u306E\u3057\u307F",
                "\u305F\u306F\u3064",
                "\u305F\u3075\u3099\u3093",
                "\u305F\u3078\u3099\u308B",
                "\u305F\u307B\u3099\u3046",
                "\u305F\u307E\u3053\u3099",
                "\u305F\u307E\u308B",
                "\u305F\u3099\u3080\u308B",
                "\u305F\u3081\u3044\u304D",
                "\u305F\u3081\u3059",
                "\u305F\u3081\u308B",
                "\u305F\u3082\u3064",
                "\u305F\u3084\u3059\u3044",
                "\u305F\u3088\u308B",
                "\u305F\u3089\u3059",
                "\u305F\u308A\u304D\u307B\u3093\u304B\u3099\u3093",
                "\u305F\u308A\u3087\u3046",
                "\u305F\u308A\u308B",
                "\u305F\u308B\u3068",
                "\u305F\u308C\u308B",
                "\u305F\u308C\u3093\u3068",
                "\u305F\u308D\u3063\u3068",
                "\u305F\u308F\u3080\u308C\u308B",
                "\u305F\u3099\u3093\u3042\u3064",
                "\u305F\u3093\u3044",
                "\u305F\u3093\u304A\u3093",
                "\u305F\u3093\u304B",
                "\u305F\u3093\u304D",
                "\u305F\u3093\u3051\u3093",
                "\u305F\u3093\u3053\u3099",
                "\u305F\u3093\u3055\u3093",
                "\u305F\u3093\u3057\u3099\u3087\u3046\u3072\u3099",
                "\u305F\u3099\u3093\u305B\u3044",
                "\u305F\u3093\u305D\u304F",
                "\u305F\u3093\u305F\u3044",
                "\u305F\u3099\u3093\u3061",
                "\u305F\u3093\u3066\u3044",
                "\u305F\u3093\u3068\u3046",
                "\u305F\u3099\u3093\u306A",
                "\u305F\u3093\u306B\u3093",
                "\u305F\u3099\u3093\u306D\u3064",
                "\u305F\u3093\u306E\u3046",
                "\u305F\u3093\u3072\u309A\u3093",
                "\u305F\u3099\u3093\u307B\u3099\u3046",
                "\u305F\u3093\u307E\u3064",
                "\u305F\u3093\u3081\u3044",
                "\u305F\u3099\u3093\u308C\u3064",
                "\u305F\u3099\u3093\u308D",
                "\u305F\u3099\u3093\u308F",
                "\u3061\u3042\u3044",
                "\u3061\u3042\u3093",
                "\u3061\u3044\u304D",
                "\u3061\u3044\u3055\u3044",
                "\u3061\u3048\u3093",
                "\u3061\u304B\u3044",
                "\u3061\u304B\u3089",
                "\u3061\u304D\u3085\u3046",
                "\u3061\u304D\u3093",
                "\u3061\u3051\u3044\u3059\u3099",
                "\u3061\u3051\u3093",
                "\u3061\u3053\u304F",
                "\u3061\u3055\u3044",
                "\u3061\u3057\u304D",
                "\u3061\u3057\u308A\u3087\u3046",
                "\u3061\u305B\u3044",
                "\u3061\u305D\u3046",
                "\u3061\u305F\u3044",
                "\u3061\u305F\u3093",
                "\u3061\u3061\u304A\u3084",
                "\u3061\u3064\u3057\u3099\u3087",
                "\u3061\u3066\u304D",
                "\u3061\u3066\u3093",
                "\u3061\u306C\u304D",
                "\u3061\u306C\u308A",
                "\u3061\u306E\u3046",
                "\u3061\u3072\u3087\u3046",
                "\u3061\u3078\u3044\u305B\u3093",
                "\u3061\u307B\u3046",
                "\u3061\u307E\u305F",
                "\u3061\u307F\u3064",
                "\u3061\u307F\u3068\u3099\u308D",
                "\u3061\u3081\u3044\u3068\u3099",
                "\u3061\u3083\u3093\u3053\u306A\u3078\u3099",
                "\u3061\u3085\u3046\u3044",
                "\u3061\u3086\u308A\u3087\u304F",
                "\u3061\u3087\u3046\u3057",
                "\u3061\u3087\u3055\u304F\u3051\u3093",
                "\u3061\u3089\u3057",
                "\u3061\u3089\u307F",
                "\u3061\u308A\u304B\u3099\u307F",
                "\u3061\u308A\u3087\u3046",
                "\u3061\u308B\u3068\u3099",
                "\u3061\u308F\u308F",
                "\u3061\u3093\u305F\u3044",
                "\u3061\u3093\u3082\u304F",
                "\u3064\u3044\u304B",
                "\u3064\u3044\u305F\u3061",
                "\u3064\u3046\u304B",
                "\u3064\u3046\u3057\u3099\u3087\u3046",
                "\u3064\u3046\u306F\u3093",
                "\u3064\u3046\u308F",
                "\u3064\u304B\u3046",
                "\u3064\u304B\u308C\u308B",
                "\u3064\u304F\u306D",
                "\u3064\u304F\u308B",
                "\u3064\u3051\u306D",
                "\u3064\u3051\u308B",
                "\u3064\u3053\u3099\u3046",
                "\u3064\u305F\u3048\u308B",
                "\u3064\u3064\u3099\u304F",
                "\u3064\u3064\u3057\u3099",
                "\u3064\u3064\u3080",
                "\u3064\u3068\u3081\u308B",
                "\u3064\u306A\u304B\u3099\u308B",
                "\u3064\u306A\u307F",
                "\u3064\u306D\u3064\u3099\u306D",
                "\u3064\u306E\u308B",
                "\u3064\u3075\u3099\u3059",
                "\u3064\u307E\u3089\u306A\u3044",
                "\u3064\u307E\u308B",
                "\u3064\u307F\u304D",
                "\u3064\u3081\u305F\u3044",
                "\u3064\u3082\u308A",
                "\u3064\u3082\u308B",
                "\u3064\u3088\u3044",
                "\u3064\u308B\u307B\u3099",
                "\u3064\u308B\u307F\u304F",
                "\u3064\u308F\u3082\u306E",
                "\u3064\u308F\u308A",
                "\u3066\u3042\u3057",
                "\u3066\u3042\u3066",
                "\u3066\u3042\u307F",
                "\u3066\u3044\u304A\u3093",
                "\u3066\u3044\u304B",
                "\u3066\u3044\u304D",
                "\u3066\u3044\u3051\u3044",
                "\u3066\u3044\u3053\u304F",
                "\u3066\u3044\u3055\u3064",
                "\u3066\u3044\u3057",
                "\u3066\u3044\u305B\u3044",
                "\u3066\u3044\u305F\u3044",
                "\u3066\u3044\u3068\u3099",
                "\u3066\u3044\u306D\u3044",
                "\u3066\u3044\u3072\u3087\u3046",
                "\u3066\u3044\u3078\u3093",
                "\u3066\u3044\u307B\u3099\u3046",
                "\u3066\u3046\u3061",
                "\u3066\u304A\u304F\u308C",
                "\u3066\u304D\u3068\u3046",
                "\u3066\u304F\u3072\u3099",
                "\u3066\u3099\u3053\u307B\u3099\u3053",
                "\u3066\u3055\u304D\u3099\u3087\u3046",
                "\u3066\u3055\u3051\u3099",
                "\u3066\u3059\u308A",
                "\u3066\u305D\u3046",
                "\u3066\u3061\u304B\u3099\u3044",
                "\u3066\u3061\u3087\u3046",
                "\u3066\u3064\u304B\u3099\u304F",
                "\u3066\u3064\u3064\u3099\u304D",
                "\u3066\u3099\u3063\u306F\u309A",
                "\u3066\u3064\u307B\u3099\u3046",
                "\u3066\u3064\u3084",
                "\u3066\u3099\u306C\u304B\u3048",
                "\u3066\u306C\u304D",
                "\u3066\u306C\u304F\u3099\u3044",
                "\u3066\u306E\u3072\u3089",
                "\u3066\u306F\u3044",
                "\u3066\u3075\u3099\u304F\u308D",
                "\u3066\u3075\u305F\u3099",
                "\u3066\u307B\u3068\u3099\u304D",
                "\u3066\u307B\u3093",
                "\u3066\u307E\u3048",
                "\u3066\u307E\u304D\u3059\u3099\u3057",
                "\u3066\u307F\u3057\u3099\u304B",
                "\u3066\u307F\u3084\u3051\u3099",
                "\u3066\u3089\u3059",
                "\u3066\u308C\u3072\u3099",
                "\u3066\u308F\u3051",
                "\u3066\u308F\u305F\u3057",
                "\u3066\u3099\u3093\u3042\u3064",
                "\u3066\u3093\u3044\u3093",
                "\u3066\u3093\u304B\u3044",
                "\u3066\u3093\u304D",
                "\u3066\u3093\u304F\u3099",
                "\u3066\u3093\u3051\u3093",
                "\u3066\u3093\u3053\u3099\u304F",
                "\u3066\u3093\u3055\u3044",
                "\u3066\u3093\u3057",
                "\u3066\u3093\u3059\u3046",
                "\u3066\u3099\u3093\u3061",
                "\u3066\u3093\u3066\u304D",
                "\u3066\u3093\u3068\u3046",
                "\u3066\u3093\u306A\u3044",
                "\u3066\u3093\u3075\u309A\u3089",
                "\u3066\u3093\u307B\u3099\u3046\u305F\u3099\u3044",
                "\u3066\u3093\u3081\u3064",
                "\u3066\u3093\u3089\u3093\u304B\u3044",
                "\u3066\u3099\u3093\u308A\u3087\u304F",
                "\u3066\u3099\u3093\u308F",
                "\u3068\u3099\u3042\u3044",
                "\u3068\u3044\u308C",
                "\u3068\u3099\u3046\u304B\u3093",
                "\u3068\u3046\u304D\u3085\u3046",
                "\u3068\u3099\u3046\u304F\u3099",
                "\u3068\u3046\u3057",
                "\u3068\u3046\u3080\u304D\u3099",
                "\u3068\u304A\u3044",
                "\u3068\u304A\u304B",
                "\u3068\u304A\u304F",
                "\u3068\u304A\u3059",
                "\u3068\u304A\u308B",
                "\u3068\u304B\u3044",
                "\u3068\u304B\u3059",
                "\u3068\u304D\u304A\u308A",
                "\u3068\u304D\u3068\u3099\u304D",
                "\u3068\u304F\u3044",
                "\u3068\u304F\u3057\u3085\u3046",
                "\u3068\u304F\u3066\u3093",
                "\u3068\u304F\u306B",
                "\u3068\u304F\u3078\u3099\u3064",
                "\u3068\u3051\u3044",
                "\u3068\u3051\u308B",
                "\u3068\u3053\u3084",
                "\u3068\u3055\u304B",
                "\u3068\u3057\u3087\u304B\u3093",
                "\u3068\u305D\u3046",
                "\u3068\u305F\u3093",
                "\u3068\u3061\u3085\u3046",
                "\u3068\u3063\u304D\u3085\u3046",
                "\u3068\u3063\u304F\u3093",
                "\u3068\u3064\u305B\u3099\u3093",
                "\u3068\u3064\u306B\u3085\u3046",
                "\u3068\u3068\u3099\u3051\u308B",
                "\u3068\u3068\u306E\u3048\u308B",
                "\u3068\u306A\u3044",
                "\u3068\u306A\u3048\u308B",
                "\u3068\u306A\u308A",
                "\u3068\u306E\u3055\u307E",
                "\u3068\u306F\u3099\u3059",
                "\u3068\u3099\u3075\u3099\u304B\u3099\u308F",
                "\u3068\u307B\u3046",
                "\u3068\u307E\u308B",
                "\u3068\u3081\u308B",
                "\u3068\u3082\u305F\u3099\u3061",
                "\u3068\u3082\u308B",
                "\u3068\u3099\u3088\u3046\u3072\u3099",
                "\u3068\u3089\u3048\u308B",
                "\u3068\u3093\u304B\u3064",
                "\u3068\u3099\u3093\u3075\u3099\u308A",
                "\u306A\u3044\u304B\u304F",
                "\u306A\u3044\u3053\u3046",
                "\u306A\u3044\u3057\u3087",
                "\u306A\u3044\u3059",
                "\u306A\u3044\u305B\u3093",
                "\u306A\u3044\u305D\u3046",
                "\u306A\u304A\u3059",
                "\u306A\u304B\u3099\u3044",
                "\u306A\u304F\u3059",
                "\u306A\u3051\u3099\u308B",
                "\u306A\u3053\u3046\u3068\u3099",
                "\u306A\u3055\u3051",
                "\u306A\u305F\u3066\u3099\u3053\u3053",
                "\u306A\u3063\u3068\u3046",
                "\u306A\u3064\u3084\u3059\u307F",
                "\u306A\u306A\u304A\u3057",
                "\u306A\u306B\u3053\u3099\u3068",
                "\u306A\u306B\u3082\u306E",
                "\u306A\u306B\u308F",
                "\u306A\u306E\u304B",
                "\u306A\u3075\u305F\u3099",
                "\u306A\u307E\u3044\u304D",
                "\u306A\u307E\u3048",
                "\u306A\u307E\u307F",
                "\u306A\u307F\u305F\u3099",
                "\u306A\u3081\u3089\u304B",
                "\u306A\u3081\u308B",
                "\u306A\u3084\u3080",
                "\u306A\u3089\u3046",
                "\u306A\u3089\u3072\u3099",
                "\u306A\u3089\u3075\u3099",
                "\u306A\u308C\u308B",
                "\u306A\u308F\u3068\u3072\u3099",
                "\u306A\u308F\u306F\u3099\u308A",
                "\u306B\u3042\u3046",
                "\u306B\u3044\u304B\u3099\u305F",
                "\u306B\u3046\u3051",
                "\u306B\u304A\u3044",
                "\u306B\u304B\u3044",
                "\u306B\u304B\u3099\u3066",
                "\u306B\u304D\u3072\u3099",
                "\u306B\u304F\u3057\u307F",
                "\u306B\u304F\u307E\u3093",
                "\u306B\u3051\u3099\u308B",
                "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
                "\u306B\u3057\u304D",
                "\u306B\u305B\u3082\u306E",
                "\u306B\u3061\u3057\u3099\u3087\u3046",
                "\u306B\u3061\u3088\u3046\u3072\u3099",
                "\u306B\u3063\u304B",
                "\u306B\u3063\u304D",
                "\u306B\u3063\u3051\u3044",
                "\u306B\u3063\u3053\u3046",
                "\u306B\u3063\u3055\u3093",
                "\u306B\u3063\u3057\u3087\u304F",
                "\u306B\u3063\u3059\u3046",
                "\u306B\u3063\u305B\u304D",
                "\u306B\u3063\u3066\u3044",
                "\u306B\u306A\u3046",
                "\u306B\u307B\u3093",
                "\u306B\u307E\u3081",
                "\u306B\u3082\u3064",
                "\u306B\u3084\u308A",
                "\u306B\u3085\u3046\u3044\u3093",
                "\u306B\u308A\u3093\u3057\u3083",
                "\u306B\u308F\u3068\u308A",
                "\u306B\u3093\u3044",
                "\u306B\u3093\u304B",
                "\u306B\u3093\u304D",
                "\u306B\u3093\u3051\u3099\u3093",
                "\u306B\u3093\u3057\u304D",
                "\u306B\u3093\u3059\u3099\u3046",
                "\u306B\u3093\u305D\u3046",
                "\u306B\u3093\u305F\u3044",
                "\u306B\u3093\u3061",
                "\u306B\u3093\u3066\u3044",
                "\u306B\u3093\u306B\u304F",
                "\u306B\u3093\u3075\u309A",
                "\u306B\u3093\u307E\u308A",
                "\u306B\u3093\u3080",
                "\u306B\u3093\u3081\u3044",
                "\u306B\u3093\u3088\u3046",
                "\u306C\u3044\u304F\u304D\u3099",
                "\u306C\u304B\u3059",
                "\u306C\u304F\u3099\u3044\u3068\u308B",
                "\u306C\u304F\u3099\u3046",
                "\u306C\u304F\u3082\u308A",
                "\u306C\u3059\u3080",
                "\u306C\u307E\u3048\u3072\u3099",
                "\u306C\u3081\u308A",
                "\u306C\u3089\u3059",
                "\u306C\u3093\u3061\u3083\u304F",
                "\u306D\u3042\u3051\u3099",
                "\u306D\u3044\u304D",
                "\u306D\u3044\u308B",
                "\u306D\u3044\u308D",
                "\u306D\u304F\u3099\u305B",
                "\u306D\u304F\u305F\u3044",
                "\u306D\u304F\u3089",
                "\u306D\u3053\u305B\u3099",
                "\u306D\u3053\u3080",
                "\u306D\u3055\u3051\u3099",
                "\u306D\u3059\u3053\u3099\u3059",
                "\u306D\u305D\u3078\u3099\u308B",
                "\u306D\u305F\u3099\u3093",
                "\u306D\u3064\u3044",
                "\u306D\u3063\u3057\u3093",
                "\u306D\u3064\u305D\u3099\u3046",
                "\u306D\u3063\u305F\u3044\u304D\u3099\u3087",
                "\u306D\u3075\u3099\u305D\u304F",
                "\u306D\u3075\u305F\u3099",
                "\u306D\u307B\u3099\u3046",
                "\u306D\u307B\u308A\u306F\u307B\u308A",
                "\u306D\u307E\u304D",
                "\u306D\u307E\u308F\u3057",
                "\u306D\u307F\u307F",
                "\u306D\u3080\u3044",
                "\u306D\u3080\u305F\u3044",
                "\u306D\u3082\u3068",
                "\u306D\u3089\u3046",
                "\u306D\u308F\u3055\u3099",
                "\u306D\u3093\u3044\u308A",
                "\u306D\u3093\u304A\u3057",
                "\u306D\u3093\u304B\u3093",
                "\u306D\u3093\u304D\u3093",
                "\u306D\u3093\u304F\u3099",
                "\u306D\u3093\u3055\u3099",
                "\u306D\u3093\u3057",
                "\u306D\u3093\u3061\u3083\u304F",
                "\u306D\u3093\u3068\u3099",
                "\u306D\u3093\u3072\u309A",
                "\u306D\u3093\u3075\u3099\u3064",
                "\u306D\u3093\u307E\u3064",
                "\u306D\u3093\u308A\u3087\u3046",
                "\u306D\u3093\u308C\u3044",
                "\u306E\u3044\u3059\u3099",
                "\u306E\u304A\u3064\u3099\u307E",
                "\u306E\u304B\u3099\u3059",
                "\u306E\u304D\u306A\u307F",
                "\u306E\u3053\u304D\u3099\u308A",
                "\u306E\u3053\u3059",
                "\u306E\u3053\u308B",
                "\u306E\u305B\u308B",
                "\u306E\u305D\u3099\u304F",
                "\u306E\u305D\u3099\u3080",
                "\u306E\u305F\u307E\u3046",
                "\u306E\u3061\u307B\u3068\u3099",
                "\u306E\u3063\u304F",
                "\u306E\u306F\u3099\u3059",
                "\u306E\u306F\u3089",
                "\u306E\u3078\u3099\u308B",
                "\u306E\u307B\u3099\u308B",
                "\u306E\u307F\u3082\u306E",
                "\u306E\u3084\u307E",
                "\u306E\u3089\u3044\u306C",
                "\u306E\u3089\u306D\u3053",
                "\u306E\u308A\u3082\u306E",
                "\u306E\u308A\u3086\u304D",
                "\u306E\u308C\u3093",
                "\u306E\u3093\u304D",
                "\u306F\u3099\u3042\u3044",
                "\u306F\u3042\u304F",
                "\u306F\u3099\u3042\u3055\u3093",
                "\u306F\u3099\u3044\u304B",
                "\u306F\u3099\u3044\u304F",
                "\u306F\u3044\u3051\u3093",
                "\u306F\u3044\u3053\u3099",
                "\u306F\u3044\u3057\u3093",
                "\u306F\u3044\u3059\u3044",
                "\u306F\u3044\u305B\u3093",
                "\u306F\u3044\u305D\u3046",
                "\u306F\u3044\u3061",
                "\u306F\u3099\u3044\u306F\u3099\u3044",
                "\u306F\u3044\u308C\u3064",
                "\u306F\u3048\u308B",
                "\u306F\u304A\u308B",
                "\u306F\u304B\u3044",
                "\u306F\u3099\u304B\u308A",
                "\u306F\u304B\u308B",
                "\u306F\u304F\u3057\u3085",
                "\u306F\u3051\u3093",
                "\u306F\u3053\u3075\u3099",
                "\u306F\u3055\u307F",
                "\u306F\u3055\u3093",
                "\u306F\u3057\u3053\u3099",
                "\u306F\u3099\u3057\u3087",
                "\u306F\u3057\u308B",
                "\u306F\u305B\u308B",
                "\u306F\u309A\u305D\u3053\u3093",
                "\u306F\u305D\u3093",
                "\u306F\u305F\u3093",
                "\u306F\u3061\u307F\u3064",
                "\u306F\u3064\u304A\u3093",
                "\u306F\u3063\u304B\u304F",
                "\u306F\u3064\u3099\u304D",
                "\u306F\u3063\u304D\u308A",
                "\u306F\u3063\u304F\u3064",
                "\u306F\u3063\u3051\u3093",
                "\u306F\u3063\u3053\u3046",
                "\u306F\u3063\u3055\u3093",
                "\u306F\u3063\u3057\u3093",
                "\u306F\u3063\u305F\u3064",
                "\u306F\u3063\u3061\u3085\u3046",
                "\u306F\u3063\u3066\u3093",
                "\u306F\u3063\u3072\u309A\u3087\u3046",
                "\u306F\u3063\u307B\u309A\u3046",
                "\u306F\u306A\u3059",
                "\u306F\u306A\u3072\u3099",
                "\u306F\u306B\u304B\u3080",
                "\u306F\u3075\u3099\u3089\u3057",
                "\u306F\u307F\u304B\u3099\u304D",
                "\u306F\u3080\u304B\u3046",
                "\u306F\u3081\u3064",
                "\u306F\u3084\u3044",
                "\u306F\u3084\u3057",
                "\u306F\u3089\u3046",
                "\u306F\u308D\u3046\u3043\u3093",
                "\u306F\u308F\u3044",
                "\u306F\u3093\u3044",
                "\u306F\u3093\u3048\u3044",
                "\u306F\u3093\u304A\u3093",
                "\u306F\u3093\u304B\u304F",
                "\u306F\u3093\u304D\u3087\u3046",
                "\u306F\u3099\u3093\u304F\u3099\u307F",
                "\u306F\u3093\u3053",
                "\u306F\u3093\u3057\u3083",
                "\u306F\u3093\u3059\u3046",
                "\u306F\u3093\u305F\u3099\u3093",
                "\u306F\u309A\u3093\u3061",
                "\u306F\u309A\u3093\u3064",
                "\u306F\u3093\u3066\u3044",
                "\u306F\u3093\u3068\u3057",
                "\u306F\u3093\u306E\u3046",
                "\u306F\u3093\u306F\u309A",
                "\u306F\u3093\u3075\u3099\u3093",
                "\u306F\u3093\u3078\u309A\u3093",
                "\u306F\u3093\u307B\u3099\u3046\u304D",
                "\u306F\u3093\u3081\u3044",
                "\u306F\u3093\u3089\u3093",
                "\u306F\u3093\u308D\u3093",
                "\u3072\u3044\u304D",
                "\u3072\u3046\u3093",
                "\u3072\u3048\u308B",
                "\u3072\u304B\u304F",
                "\u3072\u304B\u308A",
                "\u3072\u304B\u308B",
                "\u3072\u304B\u3093",
                "\u3072\u304F\u3044",
                "\u3072\u3051\u3064",
                "\u3072\u3053\u3046\u304D",
                "\u3072\u3053\u304F",
                "\u3072\u3055\u3044",
                "\u3072\u3055\u3057\u3075\u3099\u308A",
                "\u3072\u3055\u3093",
                "\u3072\u3099\u3057\u3099\u3085\u3064\u304B\u3093",
                "\u3072\u3057\u3087",
                "\u3072\u305D\u304B",
                "\u3072\u305D\u3080",
                "\u3072\u305F\u3080\u304D",
                "\u3072\u305F\u3099\u308A",
                "\u3072\u305F\u308B",
                "\u3072\u3064\u304D\u3099",
                "\u3072\u3063\u3053\u3057",
                "\u3072\u3063\u3057",
                "\u3072\u3064\u3057\u3099\u3085\u3072\u3093",
                "\u3072\u3063\u3059",
                "\u3072\u3064\u305B\u3099\u3093",
                "\u3072\u309A\u3063\u305F\u308A",
                "\u3072\u309A\u3063\u3061\u308A",
                "\u3072\u3064\u3088\u3046",
                "\u3072\u3066\u3044",
                "\u3072\u3068\u3053\u3099\u307F",
                "\u3072\u306A\u307E\u3064\u308A",
                "\u3072\u306A\u3093",
                "\u3072\u306D\u308B",
                "\u3072\u306F\u3093",
                "\u3072\u3072\u3099\u304F",
                "\u3072\u3072\u3087\u3046",
                "\u3072\u307B\u3046",
                "\u3072\u307E\u308F\u308A",
                "\u3072\u307E\u3093",
                "\u3072\u307F\u3064",
                "\u3072\u3081\u3044",
                "\u3072\u3081\u3057\u3099\u3057",
                "\u3072\u3084\u3051",
                "\u3072\u3084\u3059",
                "\u3072\u3088\u3046",
                "\u3072\u3099\u3087\u3046\u304D",
                "\u3072\u3089\u304B\u3099\u306A",
                "\u3072\u3089\u304F",
                "\u3072\u308A\u3064",
                "\u3072\u308A\u3087\u3046",
                "\u3072\u308B\u307E",
                "\u3072\u308B\u3084\u3059\u307F",
                "\u3072\u308C\u3044",
                "\u3072\u308D\u3044",
                "\u3072\u308D\u3046",
                "\u3072\u308D\u304D",
                "\u3072\u308D\u3086\u304D",
                "\u3072\u3093\u304B\u304F",
                "\u3072\u3093\u3051\u3064",
                "\u3072\u3093\u3053\u3093",
                "\u3072\u3093\u3057\u3085",
                "\u3072\u3093\u305D\u3046",
                "\u3072\u309A\u3093\u3061",
                "\u3072\u3093\u306F\u309A\u3093",
                "\u3072\u3099\u3093\u307B\u3099\u3046",
                "\u3075\u3042\u3093",
                "\u3075\u3044\u3046\u3061",
                "\u3075\u3046\u3051\u3044",
                "\u3075\u3046\u305B\u3093",
                "\u3075\u309A\u3046\u305F\u308D\u3046",
                "\u3075\u3046\u3068\u3046",
                "\u3075\u3046\u3075",
                "\u3075\u3048\u308B",
                "\u3075\u304A\u3093",
                "\u3075\u304B\u3044",
                "\u3075\u304D\u3093",
                "\u3075\u304F\u3055\u3099\u3064",
                "\u3075\u304F\u3075\u3099\u304F\u308D",
                "\u3075\u3053\u3046",
                "\u3075\u3055\u3044",
                "\u3075\u3057\u304D\u3099",
                "\u3075\u3057\u3099\u307F",
                "\u3075\u3059\u307E",
                "\u3075\u305B\u3044",
                "\u3075\u305B\u304F\u3099",
                "\u3075\u305D\u304F",
                "\u3075\u3099\u305F\u306B\u304F",
                "\u3075\u305F\u3093",
                "\u3075\u3061\u3087\u3046",
                "\u3075\u3064\u3046",
                "\u3075\u3064\u304B",
                "\u3075\u3063\u304B\u3064",
                "\u3075\u3063\u304D",
                "\u3075\u3063\u3053\u304F",
                "\u3075\u3099\u3068\u3099\u3046",
                "\u3075\u3068\u308B",
                "\u3075\u3068\u3093",
                "\u3075\u306E\u3046",
                "\u3075\u306F\u3044",
                "\u3075\u3072\u3087\u3046",
                "\u3075\u3078\u3093",
                "\u3075\u307E\u3093",
                "\u3075\u307F\u3093",
                "\u3075\u3081\u3064",
                "\u3075\u3081\u3093",
                "\u3075\u3088\u3046",
                "\u3075\u308A\u3053",
                "\u3075\u308A\u308B",
                "\u3075\u308B\u3044",
                "\u3075\u3093\u3044\u304D",
                "\u3075\u3099\u3093\u304B\u3099\u304F",
                "\u3075\u3099\u3093\u304F\u3099",
                "\u3075\u3093\u3057\u3064",
                "\u3075\u3099\u3093\u305B\u304D",
                "\u3075\u3093\u305D\u3046",
                "\u3075\u3099\u3093\u307B\u309A\u3046",
                "\u3078\u3044\u3042\u3093",
                "\u3078\u3044\u304A\u3093",
                "\u3078\u3044\u304B\u3099\u3044",
                "\u3078\u3044\u304D",
                "\u3078\u3044\u3051\u3099\u3093",
                "\u3078\u3044\u3053\u3046",
                "\u3078\u3044\u3055",
                "\u3078\u3044\u3057\u3083",
                "\u3078\u3044\u305B\u3064",
                "\u3078\u3044\u305D",
                "\u3078\u3044\u305F\u304F",
                "\u3078\u3044\u3066\u3093",
                "\u3078\u3044\u306D\u3064",
                "\u3078\u3044\u308F",
                "\u3078\u304D\u304B\u3099",
                "\u3078\u3053\u3080",
                "\u3078\u3099\u306B\u3044\u308D",
                "\u3078\u3099\u306B\u3057\u3087\u3046\u304B\u3099",
                "\u3078\u3089\u3059",
                "\u3078\u3093\u304B\u3093",
                "\u3078\u3099\u3093\u304D\u3087\u3046",
                "\u3078\u3099\u3093\u3053\u3099\u3057",
                "\u3078\u3093\u3055\u3044",
                "\u3078\u3093\u305F\u3044",
                "\u3078\u3099\u3093\u308A",
                "\u307B\u3042\u3093",
                "\u307B\u3044\u304F",
                "\u307B\u3099\u3046\u304D\u3099\u3087",
                "\u307B\u3046\u3053\u304F",
                "\u307B\u3046\u305D\u3046",
                "\u307B\u3046\u307B\u3046",
                "\u307B\u3046\u3082\u3093",
                "\u307B\u3046\u308A\u3064",
                "\u307B\u3048\u308B",
                "\u307B\u304A\u3093",
                "\u307B\u304B\u3093",
                "\u307B\u304D\u3087\u3046",
                "\u307B\u3099\u304D\u3093",
                "\u307B\u304F\u308D",
                "\u307B\u3051\u3064",
                "\u307B\u3051\u3093",
                "\u307B\u3053\u3046",
                "\u307B\u3053\u308B",
                "\u307B\u3057\u3044",
                "\u307B\u3057\u3064",
                "\u307B\u3057\u3085",
                "\u307B\u3057\u3087\u3046",
                "\u307B\u305B\u3044",
                "\u307B\u305D\u3044",
                "\u307B\u305D\u304F",
                "\u307B\u305F\u3066",
                "\u307B\u305F\u308B",
                "\u307B\u309A\u3061\u3075\u3099\u304F\u308D",
                "\u307B\u3063\u304D\u3087\u304F",
                "\u307B\u3063\u3055",
                "\u307B\u3063\u305F\u3093",
                "\u307B\u3068\u3093\u3068\u3099",
                "\u307B\u3081\u308B",
                "\u307B\u3093\u3044",
                "\u307B\u3093\u304D",
                "\u307B\u3093\u3051",
                "\u307B\u3093\u3057\u3064",
                "\u307B\u3093\u3084\u304F",
                "\u307E\u3044\u306B\u3061",
                "\u307E\u304B\u3044",
                "\u307E\u304B\u305B\u308B",
                "\u307E\u304B\u3099\u308B",
                "\u307E\u3051\u308B",
                "\u307E\u3053\u3068",
                "\u307E\u3055\u3064",
                "\u307E\u3057\u3099\u3081",
                "\u307E\u3059\u304F",
                "\u307E\u305B\u3099\u308B",
                "\u307E\u3064\u308A",
                "\u307E\u3068\u3081",
                "\u307E\u306A\u3075\u3099",
                "\u307E\u306C\u3051",
                "\u307E\u306D\u304F",
                "\u307E\u307B\u3046",
                "\u307E\u3082\u308B",
                "\u307E\u3086\u3051\u3099",
                "\u307E\u3088\u3046",
                "\u307E\u308D\u3084\u304B",
                "\u307E\u308F\u3059",
                "\u307E\u308F\u308A",
                "\u307E\u308F\u308B",
                "\u307E\u3093\u304B\u3099",
                "\u307E\u3093\u304D\u3064",
                "\u307E\u3093\u305D\u3099\u304F",
                "\u307E\u3093\u306A\u304B",
                "\u307F\u3044\u3089",
                "\u307F\u3046\u3061",
                "\u307F\u3048\u308B",
                "\u307F\u304B\u3099\u304F",
                "\u307F\u304B\u305F",
                "\u307F\u304B\u3093",
                "\u307F\u3051\u3093",
                "\u307F\u3053\u3093",
                "\u307F\u3057\u3099\u304B\u3044",
                "\u307F\u3059\u3044",
                "\u307F\u3059\u3048\u308B",
                "\u307F\u305B\u308B",
                "\u307F\u3063\u304B",
                "\u307F\u3064\u304B\u308B",
                "\u307F\u3064\u3051\u308B",
                "\u307F\u3066\u3044",
                "\u307F\u3068\u3081\u308B",
                "\u307F\u306A\u3068",
                "\u307F\u306A\u307F\u304B\u3055\u3044",
                "\u307F\u306D\u3089\u308B",
                "\u307F\u306E\u3046",
                "\u307F\u306E\u304B\u3099\u3059",
                "\u307F\u307B\u3093",
                "\u307F\u3082\u3068",
                "\u307F\u3084\u3051\u3099",
                "\u307F\u3089\u3044",
                "\u307F\u308A\u3087\u304F",
                "\u307F\u308F\u304F",
                "\u307F\u3093\u304B",
                "\u307F\u3093\u305D\u3099\u304F",
                "\u3080\u3044\u304B",
                "\u3080\u3048\u304D",
                "\u3080\u3048\u3093",
                "\u3080\u304B\u3044",
                "\u3080\u304B\u3046",
                "\u3080\u304B\u3048",
                "\u3080\u304B\u3057",
                "\u3080\u304D\u3099\u3061\u3083",
                "\u3080\u3051\u308B",
                "\u3080\u3051\u3099\u3093",
                "\u3080\u3055\u307B\u3099\u308B",
                "\u3080\u3057\u3042\u3064\u3044",
                "\u3080\u3057\u306F\u3099",
                "\u3080\u3057\u3099\u3085\u3093",
                "\u3080\u3057\u308D",
                "\u3080\u3059\u3046",
                "\u3080\u3059\u3053",
                "\u3080\u3059\u3075\u3099",
                "\u3080\u3059\u3081",
                "\u3080\u305B\u308B",
                "\u3080\u305B\u3093",
                "\u3080\u3061\u3085\u3046",
                "\u3080\u306A\u3057\u3044",
                "\u3080\u306E\u3046",
                "\u3080\u3084\u307F",
                "\u3080\u3088\u3046",
                "\u3080\u3089\u3055\u304D",
                "\u3080\u308A\u3087\u3046",
                "\u3080\u308D\u3093",
                "\u3081\u3044\u3042\u3093",
                "\u3081\u3044\u3046\u3093",
                "\u3081\u3044\u3048\u3093",
                "\u3081\u3044\u304B\u304F",
                "\u3081\u3044\u304D\u3087\u304F",
                "\u3081\u3044\u3055\u3044",
                "\u3081\u3044\u3057",
                "\u3081\u3044\u305D\u3046",
                "\u3081\u3044\u3075\u3099\u3064",
                "\u3081\u3044\u308C\u3044",
                "\u3081\u3044\u308F\u304F",
                "\u3081\u304F\u3099\u307E\u308C\u308B",
                "\u3081\u3055\u3099\u3059",
                "\u3081\u3057\u305F",
                "\u3081\u3059\u3099\u3089\u3057\u3044",
                "\u3081\u305F\u3099\u3064",
                "\u3081\u307E\u3044",
                "\u3081\u3084\u3059",
                "\u3081\u3093\u304D\u3087",
                "\u3081\u3093\u305B\u304D",
                "\u3081\u3093\u3068\u3099\u3046",
                "\u3082\u3046\u3057\u3042\u3051\u3099\u308B",
                "\u3082\u3046\u3068\u3099\u3046\u3051\u3093",
                "\u3082\u3048\u308B",
                "\u3082\u304F\u3057",
                "\u3082\u304F\u3066\u304D",
                "\u3082\u304F\u3088\u3046\u3072\u3099",
                "\u3082\u3061\u308D\u3093",
                "\u3082\u3068\u3099\u308B",
                "\u3082\u3089\u3046",
                "\u3082\u3093\u304F",
                "\u3082\u3093\u305F\u3099\u3044",
                "\u3084\u304A\u3084",
                "\u3084\u3051\u308B",
                "\u3084\u3055\u3044",
                "\u3084\u3055\u3057\u3044",
                "\u3084\u3059\u3044",
                "\u3084\u3059\u305F\u308D\u3046",
                "\u3084\u3059\u307F",
                "\u3084\u305B\u308B",
                "\u3084\u305D\u3046",
                "\u3084\u305F\u3044",
                "\u3084\u3061\u3093",
                "\u3084\u3063\u3068",
                "\u3084\u3063\u306F\u309A\u308A",
                "\u3084\u3075\u3099\u308B",
                "\u3084\u3081\u308B",
                "\u3084\u3084\u3053\u3057\u3044",
                "\u3084\u3088\u3044",
                "\u3084\u308F\u3089\u304B\u3044",
                "\u3086\u3046\u304D",
                "\u3086\u3046\u3072\u3099\u3093\u304D\u3087\u304F",
                "\u3086\u3046\u3078\u3099",
                "\u3086\u3046\u3081\u3044",
                "\u3086\u3051\u3064",
                "\u3086\u3057\u3085\u3064",
                "\u3086\u305B\u3093",
                "\u3086\u305D\u3046",
                "\u3086\u305F\u304B",
                "\u3086\u3061\u3083\u304F",
                "\u3086\u3066\u3099\u308B",
                "\u3086\u306B\u3085\u3046",
                "\u3086\u3072\u3099\u308F",
                "\u3086\u3089\u3044",
                "\u3086\u308C\u308B",
                "\u3088\u3046\u3044",
                "\u3088\u3046\u304B",
                "\u3088\u3046\u304D\u3085\u3046",
                "\u3088\u3046\u3057\u3099",
                "\u3088\u3046\u3059",
                "\u3088\u3046\u3061\u3048\u3093",
                "\u3088\u304B\u305B\u3099",
                "\u3088\u304B\u3093",
                "\u3088\u304D\u3093",
                "\u3088\u304F\u305B\u3044",
                "\u3088\u304F\u307B\u3099\u3046",
                "\u3088\u3051\u3044",
                "\u3088\u3053\u3099\u308C\u308B",
                "\u3088\u3055\u3093",
                "\u3088\u3057\u3085\u3046",
                "\u3088\u305D\u3046",
                "\u3088\u305D\u304F",
                "\u3088\u3063\u304B",
                "\u3088\u3066\u3044",
                "\u3088\u3068\u3099\u304B\u3099\u308F\u304F",
                "\u3088\u306D\u3064",
                "\u3088\u3084\u304F",
                "\u3088\u3086\u3046",
                "\u3088\u308D\u3053\u3075\u3099",
                "\u3088\u308D\u3057\u3044",
                "\u3089\u3044\u3046",
                "\u3089\u304F\u304B\u3099\u304D",
                "\u3089\u304F\u3053\u3099",
                "\u3089\u304F\u3055\u3064",
                "\u3089\u304F\u305F\u3099",
                "\u3089\u3057\u3093\u306F\u3099\u3093",
                "\u3089\u305B\u3093",
                "\u3089\u305D\u3099\u304F",
                "\u3089\u305F\u3044",
                "\u3089\u3063\u304B",
                "\u3089\u308C\u3064",
                "\u308A\u3048\u304D",
                "\u308A\u304B\u3044",
                "\u308A\u304D\u3055\u304F",
                "\u308A\u304D\u305B\u3064",
                "\u308A\u304F\u304F\u3099\u3093",
                "\u308A\u304F\u3064",
                "\u308A\u3051\u3093",
                "\u308A\u3053\u3046",
                "\u308A\u305B\u3044",
                "\u308A\u305D\u3046",
                "\u308A\u305D\u304F",
                "\u308A\u3066\u3093",
                "\u308A\u306D\u3093",
                "\u308A\u3086\u3046",
                "\u308A\u3085\u3046\u304B\u3099\u304F",
                "\u308A\u3088\u3046",
                "\u308A\u3087\u3046\u308A",
                "\u308A\u3087\u304B\u3093",
                "\u308A\u3087\u304F\u3061\u3083",
                "\u308A\u3087\u3053\u3046",
                "\u308A\u308A\u304F",
                "\u308A\u308C\u304D",
                "\u308A\u308D\u3093",
                "\u308A\u3093\u3053\u3099",
                "\u308B\u3044\u3051\u3044",
                "\u308B\u3044\u3055\u3044",
                "\u308B\u3044\u3057\u3099",
                "\u308B\u3044\u305B\u304D",
                "\u308B\u3059\u306F\u3099\u3093",
                "\u308B\u308A\u304B\u3099\u308F\u3089",
                "\u308C\u3044\u304B\u3093",
                "\u308C\u3044\u304D\u3099",
                "\u308C\u3044\u305B\u3044",
                "\u308C\u3044\u305D\u3099\u3046\u3053",
                "\u308C\u3044\u3068\u3046",
                "\u308C\u3044\u307B\u3099\u3046",
                "\u308C\u304D\u3057",
                "\u308C\u304D\u305F\u3099\u3044",
                "\u308C\u3093\u3042\u3044",
                "\u308C\u3093\u3051\u3044",
                "\u308C\u3093\u3053\u3093",
                "\u308C\u3093\u3055\u3044",
                "\u308C\u3093\u3057\u3085\u3046",
                "\u308C\u3093\u305D\u3099\u304F",
                "\u308C\u3093\u3089\u304F",
                "\u308D\u3046\u304B",
                "\u308D\u3046\u3053\u3099",
                "\u308D\u3046\u3057\u3099\u3093",
                "\u308D\u3046\u305D\u304F",
                "\u308D\u304F\u304B\u3099",
                "\u308D\u3053\u3064",
                "\u308D\u3057\u3099\u3046\u3089",
                "\u308D\u3057\u3085\u3064",
                "\u308D\u305B\u3093",
                "\u308D\u3066\u3093",
                "\u308D\u3081\u3093",
                "\u308D\u308C\u3064",
                "\u308D\u3093\u304D\u3099",
                "\u308D\u3093\u306F\u309A",
                "\u308D\u3093\u3075\u3099\u3093",
                "\u308D\u3093\u308A",
                "\u308F\u304B\u3059",
                "\u308F\u304B\u3081",
                "\u308F\u304B\u3084\u307E",
                "\u308F\u304B\u308C\u308B",
                "\u308F\u3057\u3064",
                "\u308F\u3057\u3099\u307E\u3057",
                "\u308F\u3059\u308C\u3082\u306E",
                "\u308F\u3089\u3046",
                "\u308F\u308C\u308B"
              ];
            }
          });

          // node_modules/bip39/src/wordlists/english.json
          var require_english = __commonJS({
            "node_modules/bip39/src/wordlists/english.json"(exports, module) {
              module.exports = [
                "abandon",
                "ability",
                "able",
                "about",
                "above",
                "absent",
                "absorb",
                "abstract",
                "absurd",
                "abuse",
                "access",
                "accident",
                "account",
                "accuse",
                "achieve",
                "acid",
                "acoustic",
                "acquire",
                "across",
                "act",
                "action",
                "actor",
                "actress",
                "actual",
                "adapt",
                "add",
                "addict",
                "address",
                "adjust",
                "admit",
                "adult",
                "advance",
                "advice",
                "aerobic",
                "affair",
                "afford",
                "afraid",
                "again",
                "age",
                "agent",
                "agree",
                "ahead",
                "aim",
                "air",
                "airport",
                "aisle",
                "alarm",
                "album",
                "alcohol",
                "alert",
                "alien",
                "all",
                "alley",
                "allow",
                "almost",
                "alone",
                "alpha",
                "already",
                "also",
                "alter",
                "always",
                "amateur",
                "amazing",
                "among",
                "amount",
                "amused",
                "analyst",
                "anchor",
                "ancient",
                "anger",
                "angle",
                "angry",
                "animal",
                "ankle",
                "announce",
                "annual",
                "another",
                "answer",
                "antenna",
                "antique",
                "anxiety",
                "any",
                "apart",
                "apology",
                "appear",
                "apple",
                "approve",
                "april",
                "arch",
                "arctic",
                "area",
                "arena",
                "argue",
                "arm",
                "armed",
                "armor",
                "army",
                "around",
                "arrange",
                "arrest",
                "arrive",
                "arrow",
                "art",
                "artefact",
                "artist",
                "artwork",
                "ask",
                "aspect",
                "assault",
                "asset",
                "assist",
                "assume",
                "asthma",
                "athlete",
                "atom",
                "attack",
                "attend",
                "attitude",
                "attract",
                "auction",
                "audit",
                "august",
                "aunt",
                "author",
                "auto",
                "autumn",
                "average",
                "avocado",
                "avoid",
                "awake",
                "aware",
                "away",
                "awesome",
                "awful",
                "awkward",
                "axis",
                "baby",
                "bachelor",
                "bacon",
                "badge",
                "bag",
                "balance",
                "balcony",
                "ball",
                "bamboo",
                "banana",
                "banner",
                "bar",
                "barely",
                "bargain",
                "barrel",
                "base",
                "basic",
                "basket",
                "battle",
                "beach",
                "bean",
                "beauty",
                "because",
                "become",
                "beef",
                "before",
                "begin",
                "behave",
                "behind",
                "believe",
                "below",
                "belt",
                "bench",
                "benefit",
                "best",
                "betray",
                "better",
                "between",
                "beyond",
                "bicycle",
                "bid",
                "bike",
                "bind",
                "biology",
                "bird",
                "birth",
                "bitter",
                "black",
                "blade",
                "blame",
                "blanket",
                "blast",
                "bleak",
                "bless",
                "blind",
                "blood",
                "blossom",
                "blouse",
                "blue",
                "blur",
                "blush",
                "board",
                "boat",
                "body",
                "boil",
                "bomb",
                "bone",
                "bonus",
                "book",
                "boost",
                "border",
                "boring",
                "borrow",
                "boss",
                "bottom",
                "bounce",
                "box",
                "boy",
                "bracket",
                "brain",
                "brand",
                "brass",
                "brave",
                "bread",
                "breeze",
                "brick",
                "bridge",
                "brief",
                "bright",
                "bring",
                "brisk",
                "broccoli",
                "broken",
                "bronze",
                "broom",
                "brother",
                "brown",
                "brush",
                "bubble",
                "buddy",
                "budget",
                "buffalo",
                "build",
                "bulb",
                "bulk",
                "bullet",
                "bundle",
                "bunker",
                "burden",
                "burger",
                "burst",
                "bus",
                "business",
                "busy",
                "butter",
                "buyer",
                "buzz",
                "cabbage",
                "cabin",
                "cable",
                "cactus",
                "cage",
                "cake",
                "call",
                "calm",
                "camera",
                "camp",
                "can",
                "canal",
                "cancel",
                "candy",
                "cannon",
                "canoe",
                "canvas",
                "canyon",
                "capable",
                "capital",
                "captain",
                "car",
                "carbon",
                "card",
                "cargo",
                "carpet",
                "carry",
                "cart",
                "case",
                "cash",
                "casino",
                "castle",
                "casual",
                "cat",
                "catalog",
                "catch",
                "category",
                "cattle",
                "caught",
                "cause",
                "caution",
                "cave",
                "ceiling",
                "celery",
                "cement",
                "census",
                "century",
                "cereal",
                "certain",
                "chair",
                "chalk",
                "champion",
                "change",
                "chaos",
                "chapter",
                "charge",
                "chase",
                "chat",
                "cheap",
                "check",
                "cheese",
                "chef",
                "cherry",
                "chest",
                "chicken",
                "chief",
                "child",
                "chimney",
                "choice",
                "choose",
                "chronic",
                "chuckle",
                "chunk",
                "churn",
                "cigar",
                "cinnamon",
                "circle",
                "citizen",
                "city",
                "civil",
                "claim",
                "clap",
                "clarify",
                "claw",
                "clay",
                "clean",
                "clerk",
                "clever",
                "click",
                "client",
                "cliff",
                "climb",
                "clinic",
                "clip",
                "clock",
                "clog",
                "close",
                "cloth",
                "cloud",
                "clown",
                "club",
                "clump",
                "cluster",
                "clutch",
                "coach",
                "coast",
                "coconut",
                "code",
                "coffee",
                "coil",
                "coin",
                "collect",
                "color",
                "column",
                "combine",
                "come",
                "comfort",
                "comic",
                "common",
                "company",
                "concert",
                "conduct",
                "confirm",
                "congress",
                "connect",
                "consider",
                "control",
                "convince",
                "cook",
                "cool",
                "copper",
                "copy",
                "coral",
                "core",
                "corn",
                "correct",
                "cost",
                "cotton",
                "couch",
                "country",
                "couple",
                "course",
                "cousin",
                "cover",
                "coyote",
                "crack",
                "cradle",
                "craft",
                "cram",
                "crane",
                "crash",
                "crater",
                "crawl",
                "crazy",
                "cream",
                "credit",
                "creek",
                "crew",
                "cricket",
                "crime",
                "crisp",
                "critic",
                "crop",
                "cross",
                "crouch",
                "crowd",
                "crucial",
                "cruel",
                "cruise",
                "crumble",
                "crunch",
                "crush",
                "cry",
                "crystal",
                "cube",
                "culture",
                "cup",
                "cupboard",
                "curious",
                "current",
                "curtain",
                "curve",
                "cushion",
                "custom",
                "cute",
                "cycle",
                "dad",
                "damage",
                "damp",
                "dance",
                "danger",
                "daring",
                "dash",
                "daughter",
                "dawn",
                "day",
                "deal",
                "debate",
                "debris",
                "decade",
                "december",
                "decide",
                "decline",
                "decorate",
                "decrease",
                "deer",
                "defense",
                "define",
                "defy",
                "degree",
                "delay",
                "deliver",
                "demand",
                "demise",
                "denial",
                "dentist",
                "deny",
                "depart",
                "depend",
                "deposit",
                "depth",
                "deputy",
                "derive",
                "describe",
                "desert",
                "design",
                "desk",
                "despair",
                "destroy",
                "detail",
                "detect",
                "develop",
                "device",
                "devote",
                "diagram",
                "dial",
                "diamond",
                "diary",
                "dice",
                "diesel",
                "diet",
                "differ",
                "digital",
                "dignity",
                "dilemma",
                "dinner",
                "dinosaur",
                "direct",
                "dirt",
                "disagree",
                "discover",
                "disease",
                "dish",
                "dismiss",
                "disorder",
                "display",
                "distance",
                "divert",
                "divide",
                "divorce",
                "dizzy",
                "doctor",
                "document",
                "dog",
                "doll",
                "dolphin",
                "domain",
                "donate",
                "donkey",
                "donor",
                "door",
                "dose",
                "double",
                "dove",
                "draft",
                "dragon",
                "drama",
                "drastic",
                "draw",
                "dream",
                "dress",
                "drift",
                "drill",
                "drink",
                "drip",
                "drive",
                "drop",
                "drum",
                "dry",
                "duck",
                "dumb",
                "dune",
                "during",
                "dust",
                "dutch",
                "duty",
                "dwarf",
                "dynamic",
                "eager",
                "eagle",
                "early",
                "earn",
                "earth",
                "easily",
                "east",
                "easy",
                "echo",
                "ecology",
                "economy",
                "edge",
                "edit",
                "educate",
                "effort",
                "egg",
                "eight",
                "either",
                "elbow",
                "elder",
                "electric",
                "elegant",
                "element",
                "elephant",
                "elevator",
                "elite",
                "else",
                "embark",
                "embody",
                "embrace",
                "emerge",
                "emotion",
                "employ",
                "empower",
                "empty",
                "enable",
                "enact",
                "end",
                "endless",
                "endorse",
                "enemy",
                "energy",
                "enforce",
                "engage",
                "engine",
                "enhance",
                "enjoy",
                "enlist",
                "enough",
                "enrich",
                "enroll",
                "ensure",
                "enter",
                "entire",
                "entry",
                "envelope",
                "episode",
                "equal",
                "equip",
                "era",
                "erase",
                "erode",
                "erosion",
                "error",
                "erupt",
                "escape",
                "essay",
                "essence",
                "estate",
                "eternal",
                "ethics",
                "evidence",
                "evil",
                "evoke",
                "evolve",
                "exact",
                "example",
                "excess",
                "exchange",
                "excite",
                "exclude",
                "excuse",
                "execute",
                "exercise",
                "exhaust",
                "exhibit",
                "exile",
                "exist",
                "exit",
                "exotic",
                "expand",
                "expect",
                "expire",
                "explain",
                "expose",
                "express",
                "extend",
                "extra",
                "eye",
                "eyebrow",
                "fabric",
                "face",
                "faculty",
                "fade",
                "faint",
                "faith",
                "fall",
                "false",
                "fame",
                "family",
                "famous",
                "fan",
                "fancy",
                "fantasy",
                "farm",
                "fashion",
                "fat",
                "fatal",
                "father",
                "fatigue",
                "fault",
                "favorite",
                "feature",
                "february",
                "federal",
                "fee",
                "feed",
                "feel",
                "female",
                "fence",
                "festival",
                "fetch",
                "fever",
                "few",
                "fiber",
                "fiction",
                "field",
                "figure",
                "file",
                "film",
                "filter",
                "final",
                "find",
                "fine",
                "finger",
                "finish",
                "fire",
                "firm",
                "first",
                "fiscal",
                "fish",
                "fit",
                "fitness",
                "fix",
                "flag",
                "flame",
                "flash",
                "flat",
                "flavor",
                "flee",
                "flight",
                "flip",
                "float",
                "flock",
                "floor",
                "flower",
                "fluid",
                "flush",
                "fly",
                "foam",
                "focus",
                "fog",
                "foil",
                "fold",
                "follow",
                "food",
                "foot",
                "force",
                "forest",
                "forget",
                "fork",
                "fortune",
                "forum",
                "forward",
                "fossil",
                "foster",
                "found",
                "fox",
                "fragile",
                "frame",
                "frequent",
                "fresh",
                "friend",
                "fringe",
                "frog",
                "front",
                "frost",
                "frown",
                "frozen",
                "fruit",
                "fuel",
                "fun",
                "funny",
                "furnace",
                "fury",
                "future",
                "gadget",
                "gain",
                "galaxy",
                "gallery",
                "game",
                "gap",
                "garage",
                "garbage",
                "garden",
                "garlic",
                "garment",
                "gas",
                "gasp",
                "gate",
                "gather",
                "gauge",
                "gaze",
                "general",
                "genius",
                "genre",
                "gentle",
                "genuine",
                "gesture",
                "ghost",
                "giant",
                "gift",
                "giggle",
                "ginger",
                "giraffe",
                "girl",
                "give",
                "glad",
                "glance",
                "glare",
                "glass",
                "glide",
                "glimpse",
                "globe",
                "gloom",
                "glory",
                "glove",
                "glow",
                "glue",
                "goat",
                "goddess",
                "gold",
                "good",
                "goose",
                "gorilla",
                "gospel",
                "gossip",
                "govern",
                "gown",
                "grab",
                "grace",
                "grain",
                "grant",
                "grape",
                "grass",
                "gravity",
                "great",
                "green",
                "grid",
                "grief",
                "grit",
                "grocery",
                "group",
                "grow",
                "grunt",
                "guard",
                "guess",
                "guide",
                "guilt",
                "guitar",
                "gun",
                "gym",
                "habit",
                "hair",
                "half",
                "hammer",
                "hamster",
                "hand",
                "happy",
                "harbor",
                "hard",
                "harsh",
                "harvest",
                "hat",
                "have",
                "hawk",
                "hazard",
                "head",
                "health",
                "heart",
                "heavy",
                "hedgehog",
                "height",
                "hello",
                "helmet",
                "help",
                "hen",
                "hero",
                "hidden",
                "high",
                "hill",
                "hint",
                "hip",
                "hire",
                "history",
                "hobby",
                "hockey",
                "hold",
                "hole",
                "holiday",
                "hollow",
                "home",
                "honey",
                "hood",
                "hope",
                "horn",
                "horror",
                "horse",
                "hospital",
                "host",
                "hotel",
                "hour",
                "hover",
                "hub",
                "huge",
                "human",
                "humble",
                "humor",
                "hundred",
                "hungry",
                "hunt",
                "hurdle",
                "hurry",
                "hurt",
                "husband",
                "hybrid",
                "ice",
                "icon",
                "idea",
                "identify",
                "idle",
                "ignore",
                "ill",
                "illegal",
                "illness",
                "image",
                "imitate",
                "immense",
                "immune",
                "impact",
                "impose",
                "improve",
                "impulse",
                "inch",
                "include",
                "income",
                "increase",
                "index",
                "indicate",
                "indoor",
                "industry",
                "infant",
                "inflict",
                "inform",
                "inhale",
                "inherit",
                "initial",
                "inject",
                "injury",
                "inmate",
                "inner",
                "innocent",
                "input",
                "inquiry",
                "insane",
                "insect",
                "inside",
                "inspire",
                "install",
                "intact",
                "interest",
                "into",
                "invest",
                "invite",
                "involve",
                "iron",
                "island",
                "isolate",
                "issue",
                "item",
                "ivory",
                "jacket",
                "jaguar",
                "jar",
                "jazz",
                "jealous",
                "jeans",
                "jelly",
                "jewel",
                "job",
                "join",
                "joke",
                "journey",
                "joy",
                "judge",
                "juice",
                "jump",
                "jungle",
                "junior",
                "junk",
                "just",
                "kangaroo",
                "keen",
                "keep",
                "ketchup",
                "key",
                "kick",
                "kid",
                "kidney",
                "kind",
                "kingdom",
                "kiss",
                "kit",
                "kitchen",
                "kite",
                "kitten",
                "kiwi",
                "knee",
                "knife",
                "knock",
                "know",
                "lab",
                "label",
                "labor",
                "ladder",
                "lady",
                "lake",
                "lamp",
                "language",
                "laptop",
                "large",
                "later",
                "latin",
                "laugh",
                "laundry",
                "lava",
                "law",
                "lawn",
                "lawsuit",
                "layer",
                "lazy",
                "leader",
                "leaf",
                "learn",
                "leave",
                "lecture",
                "left",
                "leg",
                "legal",
                "legend",
                "leisure",
                "lemon",
                "lend",
                "length",
                "lens",
                "leopard",
                "lesson",
                "letter",
                "level",
                "liar",
                "liberty",
                "library",
                "license",
                "life",
                "lift",
                "light",
                "like",
                "limb",
                "limit",
                "link",
                "lion",
                "liquid",
                "list",
                "little",
                "live",
                "lizard",
                "load",
                "loan",
                "lobster",
                "local",
                "lock",
                "logic",
                "lonely",
                "long",
                "loop",
                "lottery",
                "loud",
                "lounge",
                "love",
                "loyal",
                "lucky",
                "luggage",
                "lumber",
                "lunar",
                "lunch",
                "luxury",
                "lyrics",
                "machine",
                "mad",
                "magic",
                "magnet",
                "maid",
                "mail",
                "main",
                "major",
                "make",
                "mammal",
                "man",
                "manage",
                "mandate",
                "mango",
                "mansion",
                "manual",
                "maple",
                "marble",
                "march",
                "margin",
                "marine",
                "market",
                "marriage",
                "mask",
                "mass",
                "master",
                "match",
                "material",
                "math",
                "matrix",
                "matter",
                "maximum",
                "maze",
                "meadow",
                "mean",
                "measure",
                "meat",
                "mechanic",
                "medal",
                "media",
                "melody",
                "melt",
                "member",
                "memory",
                "mention",
                "menu",
                "mercy",
                "merge",
                "merit",
                "merry",
                "mesh",
                "message",
                "metal",
                "method",
                "middle",
                "midnight",
                "milk",
                "million",
                "mimic",
                "mind",
                "minimum",
                "minor",
                "minute",
                "miracle",
                "mirror",
                "misery",
                "miss",
                "mistake",
                "mix",
                "mixed",
                "mixture",
                "mobile",
                "model",
                "modify",
                "mom",
                "moment",
                "monitor",
                "monkey",
                "monster",
                "month",
                "moon",
                "moral",
                "more",
                "morning",
                "mosquito",
                "mother",
                "motion",
                "motor",
                "mountain",
                "mouse",
                "move",
                "movie",
                "much",
                "muffin",
                "mule",
                "multiply",
                "muscle",
                "museum",
                "mushroom",
                "music",
                "must",
                "mutual",
                "myself",
                "mystery",
                "myth",
                "naive",
                "name",
                "napkin",
                "narrow",
                "nasty",
                "nation",
                "nature",
                "near",
                "neck",
                "need",
                "negative",
                "neglect",
                "neither",
                "nephew",
                "nerve",
                "nest",
                "net",
                "network",
                "neutral",
                "never",
                "news",
                "next",
                "nice",
                "night",
                "noble",
                "noise",
                "nominee",
                "noodle",
                "normal",
                "north",
                "nose",
                "notable",
                "note",
                "nothing",
                "notice",
                "novel",
                "now",
                "nuclear",
                "number",
                "nurse",
                "nut",
                "oak",
                "obey",
                "object",
                "oblige",
                "obscure",
                "observe",
                "obtain",
                "obvious",
                "occur",
                "ocean",
                "october",
                "odor",
                "off",
                "offer",
                "office",
                "often",
                "oil",
                "okay",
                "old",
                "olive",
                "olympic",
                "omit",
                "once",
                "one",
                "onion",
                "online",
                "only",
                "open",
                "opera",
                "opinion",
                "oppose",
                "option",
                "orange",
                "orbit",
                "orchard",
                "order",
                "ordinary",
                "organ",
                "orient",
                "original",
                "orphan",
                "ostrich",
                "other",
                "outdoor",
                "outer",
                "output",
                "outside",
                "oval",
                "oven",
                "over",
                "own",
                "owner",
                "oxygen",
                "oyster",
                "ozone",
                "pact",
                "paddle",
                "page",
                "pair",
                "palace",
                "palm",
                "panda",
                "panel",
                "panic",
                "panther",
                "paper",
                "parade",
                "parent",
                "park",
                "parrot",
                "party",
                "pass",
                "patch",
                "path",
                "patient",
                "patrol",
                "pattern",
                "pause",
                "pave",
                "payment",
                "peace",
                "peanut",
                "pear",
                "peasant",
                "pelican",
                "pen",
                "penalty",
                "pencil",
                "people",
                "pepper",
                "perfect",
                "permit",
                "person",
                "pet",
                "phone",
                "photo",
                "phrase",
                "physical",
                "piano",
                "picnic",
                "picture",
                "piece",
                "pig",
                "pigeon",
                "pill",
                "pilot",
                "pink",
                "pioneer",
                "pipe",
                "pistol",
                "pitch",
                "pizza",
                "place",
                "planet",
                "plastic",
                "plate",
                "play",
                "please",
                "pledge",
                "pluck",
                "plug",
                "plunge",
                "poem",
                "poet",
                "point",
                "polar",
                "pole",
                "police",
                "pond",
                "pony",
                "pool",
                "popular",
                "portion",
                "position",
                "possible",
                "post",
                "potato",
                "pottery",
                "poverty",
                "powder",
                "power",
                "practice",
                "praise",
                "predict",
                "prefer",
                "prepare",
                "present",
                "pretty",
                "prevent",
                "price",
                "pride",
                "primary",
                "print",
                "priority",
                "prison",
                "private",
                "prize",
                "problem",
                "process",
                "produce",
                "profit",
                "program",
                "project",
                "promote",
                "proof",
                "property",
                "prosper",
                "protect",
                "proud",
                "provide",
                "public",
                "pudding",
                "pull",
                "pulp",
                "pulse",
                "pumpkin",
                "punch",
                "pupil",
                "puppy",
                "purchase",
                "purity",
                "purpose",
                "purse",
                "push",
                "put",
                "puzzle",
                "pyramid",
                "quality",
                "quantum",
                "quarter",
                "question",
                "quick",
                "quit",
                "quiz",
                "quote",
                "rabbit",
                "raccoon",
                "race",
                "rack",
                "radar",
                "radio",
                "rail",
                "rain",
                "raise",
                "rally",
                "ramp",
                "ranch",
                "random",
                "range",
                "rapid",
                "rare",
                "rate",
                "rather",
                "raven",
                "raw",
                "razor",
                "ready",
                "real",
                "reason",
                "rebel",
                "rebuild",
                "recall",
                "receive",
                "recipe",
                "record",
                "recycle",
                "reduce",
                "reflect",
                "reform",
                "refuse",
                "region",
                "regret",
                "regular",
                "reject",
                "relax",
                "release",
                "relief",
                "rely",
                "remain",
                "remember",
                "remind",
                "remove",
                "render",
                "renew",
                "rent",
                "reopen",
                "repair",
                "repeat",
                "replace",
                "report",
                "require",
                "rescue",
                "resemble",
                "resist",
                "resource",
                "response",
                "result",
                "retire",
                "retreat",
                "return",
                "reunion",
                "reveal",
                "review",
                "reward",
                "rhythm",
                "rib",
                "ribbon",
                "rice",
                "rich",
                "ride",
                "ridge",
                "rifle",
                "right",
                "rigid",
                "ring",
                "riot",
                "ripple",
                "risk",
                "ritual",
                "rival",
                "river",
                "road",
                "roast",
                "robot",
                "robust",
                "rocket",
                "romance",
                "roof",
                "rookie",
                "room",
                "rose",
                "rotate",
                "rough",
                "round",
                "route",
                "royal",
                "rubber",
                "rude",
                "rug",
                "rule",
                "run",
                "runway",
                "rural",
                "sad",
                "saddle",
                "sadness",
                "safe",
                "sail",
                "salad",
                "salmon",
                "salon",
                "salt",
                "salute",
                "same",
                "sample",
                "sand",
                "satisfy",
                "satoshi",
                "sauce",
                "sausage",
                "save",
                "say",
                "scale",
                "scan",
                "scare",
                "scatter",
                "scene",
                "scheme",
                "school",
                "science",
                "scissors",
                "scorpion",
                "scout",
                "scrap",
                "screen",
                "script",
                "scrub",
                "sea",
                "search",
                "season",
                "seat",
                "second",
                "secret",
                "section",
                "security",
                "seed",
                "seek",
                "segment",
                "select",
                "sell",
                "seminar",
                "senior",
                "sense",
                "sentence",
                "series",
                "service",
                "session",
                "settle",
                "setup",
                "seven",
                "shadow",
                "shaft",
                "shallow",
                "share",
                "shed",
                "shell",
                "sheriff",
                "shield",
                "shift",
                "shine",
                "ship",
                "shiver",
                "shock",
                "shoe",
                "shoot",
                "shop",
                "short",
                "shoulder",
                "shove",
                "shrimp",
                "shrug",
                "shuffle",
                "shy",
                "sibling",
                "sick",
                "side",
                "siege",
                "sight",
                "sign",
                "silent",
                "silk",
                "silly",
                "silver",
                "similar",
                "simple",
                "since",
                "sing",
                "siren",
                "sister",
                "situate",
                "six",
                "size",
                "skate",
                "sketch",
                "ski",
                "skill",
                "skin",
                "skirt",
                "skull",
                "slab",
                "slam",
                "sleep",
                "slender",
                "slice",
                "slide",
                "slight",
                "slim",
                "slogan",
                "slot",
                "slow",
                "slush",
                "small",
                "smart",
                "smile",
                "smoke",
                "smooth",
                "snack",
                "snake",
                "snap",
                "sniff",
                "snow",
                "soap",
                "soccer",
                "social",
                "sock",
                "soda",
                "soft",
                "solar",
                "soldier",
                "solid",
                "solution",
                "solve",
                "someone",
                "song",
                "soon",
                "sorry",
                "sort",
                "soul",
                "sound",
                "soup",
                "source",
                "south",
                "space",
                "spare",
                "spatial",
                "spawn",
                "speak",
                "special",
                "speed",
                "spell",
                "spend",
                "sphere",
                "spice",
                "spider",
                "spike",
                "spin",
                "spirit",
                "split",
                "spoil",
                "sponsor",
                "spoon",
                "sport",
                "spot",
                "spray",
                "spread",
                "spring",
                "spy",
                "square",
                "squeeze",
                "squirrel",
                "stable",
                "stadium",
                "staff",
                "stage",
                "stairs",
                "stamp",
                "stand",
                "start",
                "state",
                "stay",
                "steak",
                "steel",
                "stem",
                "step",
                "stereo",
                "stick",
                "still",
                "sting",
                "stock",
                "stomach",
                "stone",
                "stool",
                "story",
                "stove",
                "strategy",
                "street",
                "strike",
                "strong",
                "struggle",
                "student",
                "stuff",
                "stumble",
                "style",
                "subject",
                "submit",
                "subway",
                "success",
                "such",
                "sudden",
                "suffer",
                "sugar",
                "suggest",
                "suit",
                "summer",
                "sun",
                "sunny",
                "sunset",
                "super",
                "supply",
                "supreme",
                "sure",
                "surface",
                "surge",
                "surprise",
                "surround",
                "survey",
                "suspect",
                "sustain",
                "swallow",
                "swamp",
                "swap",
                "swarm",
                "swear",
                "sweet",
                "swift",
                "swim",
                "swing",
                "switch",
                "sword",
                "symbol",
                "symptom",
                "syrup",
                "system",
                "table",
                "tackle",
                "tag",
                "tail",
                "talent",
                "talk",
                "tank",
                "tape",
                "target",
                "task",
                "taste",
                "tattoo",
                "taxi",
                "teach",
                "team",
                "tell",
                "ten",
                "tenant",
                "tennis",
                "tent",
                "term",
                "test",
                "text",
                "thank",
                "that",
                "theme",
                "then",
                "theory",
                "there",
                "they",
                "thing",
                "this",
                "thought",
                "three",
                "thrive",
                "throw",
                "thumb",
                "thunder",
                "ticket",
                "tide",
                "tiger",
                "tilt",
                "timber",
                "time",
                "tiny",
                "tip",
                "tired",
                "tissue",
                "title",
                "toast",
                "tobacco",
                "today",
                "toddler",
                "toe",
                "together",
                "toilet",
                "token",
                "tomato",
                "tomorrow",
                "tone",
                "tongue",
                "tonight",
                "tool",
                "tooth",
                "top",
                "topic",
                "topple",
                "torch",
                "tornado",
                "tortoise",
                "toss",
                "total",
                "tourist",
                "toward",
                "tower",
                "town",
                "toy",
                "track",
                "trade",
                "traffic",
                "tragic",
                "train",
                "transfer",
                "trap",
                "trash",
                "travel",
                "tray",
                "treat",
                "tree",
                "trend",
                "trial",
                "tribe",
                "trick",
                "trigger",
                "trim",
                "trip",
                "trophy",
                "trouble",
                "truck",
                "true",
                "truly",
                "trumpet",
                "trust",
                "truth",
                "try",
                "tube",
                "tuition",
                "tumble",
                "tuna",
                "tunnel",
                "turkey",
                "turn",
                "turtle",
                "twelve",
                "twenty",
                "twice",
                "twin",
                "twist",
                "two",
                "type",
                "typical",
                "ugly",
                "umbrella",
                "unable",
                "unaware",
                "uncle",
                "uncover",
                "under",
                "undo",
                "unfair",
                "unfold",
                "unhappy",
                "uniform",
                "unique",
                "unit",
                "universe",
                "unknown",
                "unlock",
                "until",
                "unusual",
                "unveil",
                "update",
                "upgrade",
                "uphold",
                "upon",
                "upper",
                "upset",
                "urban",
                "urge",
                "usage",
                "use",
                "used",
                "useful",
                "useless",
                "usual",
                "utility",
                "vacant",
                "vacuum",
                "vague",
                "valid",
                "valley",
                "valve",
                "van",
                "vanish",
                "vapor",
                "various",
                "vast",
                "vault",
                "vehicle",
                "velvet",
                "vendor",
                "venture",
                "venue",
                "verb",
                "verify",
                "version",
                "very",
                "vessel",
                "veteran",
                "viable",
                "vibrant",
                "vicious",
                "victory",
                "video",
                "view",
                "village",
                "vintage",
                "violin",
                "virtual",
                "virus",
                "visa",
                "visit",
                "visual",
                "vital",
                "vivid",
                "vocal",
                "voice",
                "void",
                "volcano",
                "volume",
                "vote",
                "voyage",
                "wage",
                "wagon",
                "wait",
                "walk",
                "wall",
                "walnut",
                "want",
                "warfare",
                "warm",
                "warrior",
                "wash",
                "wasp",
                "waste",
                "water",
                "wave",
                "way",
                "wealth",
                "weapon",
                "wear",
                "weasel",
                "weather",
                "web",
                "wedding",
                "weekend",
                "weird",
                "welcome",
                "west",
                "wet",
                "whale",
                "what",
                "wheat",
                "wheel",
                "when",
                "where",
                "whip",
                "whisper",
                "wide",
                "width",
                "wife",
                "wild",
                "will",
                "win",
                "window",
                "wine",
                "wing",
                "wink",
                "winner",
                "winter",
                "wire",
                "wisdom",
                "wise",
                "wish",
                "witness",
                "wolf",
                "woman",
                "wonder",
                "wood",
                "wool",
                "word",
                "work",
                "world",
                "worry",
                "worth",
                "wrap",
                "wreck",
                "wrestle",
                "wrist",
                "write",
                "wrong",
                "yard",
                "year",
                "yellow",
                "you",
                "young",
                "youth",
                "zebra",
                "zero",
                "zone",
                "zoo"
              ];
            }
          });

          // node_modules/bip39/src/_wordlists.js
          var require_wordlists = __commonJS({
            "node_modules/bip39/src/_wordlists.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var wordlists = {};
              exports.wordlists = wordlists;
              var _default;
              exports._default = _default;
              try {
                exports._default = _default = require_chinese_simplified();
                wordlists.chinese_simplified = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_chinese_traditional();
                wordlists.chinese_traditional = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_korean();
                wordlists.korean = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_french();
                wordlists.french = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_italian();
                wordlists.italian = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_spanish();
                wordlists.spanish = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_japanese();
                wordlists.japanese = _default;
                wordlists.JA = _default;
              } catch (err) {
              }
              try {
                exports._default = _default = require_english();
                wordlists.english = _default;
                wordlists.EN = _default;
              } catch (err) {
              }
            }
          });

          // node_modules/bip39/src/index.js
          var require_src2 = __commonJS({
            "node_modules/bip39/src/index.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var createHash = require_browser3();
              var pbkdf2_1 = require_browser4();
              var randomBytes = require_browser5();
              var _wordlists_1 = require_wordlists();
              var DEFAULT_WORDLIST = _wordlists_1._default;
              var INVALID_MNEMONIC = "Invalid mnemonic";
              var INVALID_ENTROPY = "Invalid entropy";
              var INVALID_CHECKSUM = "Invalid mnemonic checksum";
              var WORDLIST_REQUIRED = "A wordlist is required but a default could not be found.\nPlease explicitly pass a 2048 word array explicitly.";
              function lpad(str, padString, length) {
                while (str.length < length)
                  str = padString + str;
                return str;
              }
              function binaryToByte(bin) {
                return parseInt(bin, 2);
              }
              function bytesToBinary(bytes) {
                return bytes.map((x) => lpad(x.toString(2), "0", 8)).join("");
              }
              function deriveChecksumBits(entropyBuffer) {
                const ENT = entropyBuffer.length * 8;
                const CS = ENT / 32;
                const hash = createHash("sha256").update(entropyBuffer).digest();
                return bytesToBinary([...hash]).slice(0, CS);
              }
              function salt(password) {
                return "mnemonic" + (password || "");
              }
              function mnemonicToSeedSync2(mnemonic, password) {
                const mnemonicBuffer = Buffer.from((mnemonic || "").normalize("NFKD"), "utf8");
                const saltBuffer = Buffer.from(salt((password || "").normalize("NFKD")), "utf8");
                return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, "sha512");
              }
              exports.mnemonicToSeedSync = mnemonicToSeedSync2;
              function mnemonicToSeed(mnemonic, password) {
                return new Promise((resolve, reject) => {
                  try {
                    const mnemonicBuffer = Buffer.from((mnemonic || "").normalize("NFKD"), "utf8");
                    const saltBuffer = Buffer.from(salt((password || "").normalize("NFKD")), "utf8");
                    pbkdf2_1.pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, "sha512", (err, data) => {
                      if (err)
                        return reject(err);
                      else
                        return resolve(data);
                    });
                  } catch (error) {
                    return reject(error);
                  }
                });
              }
              exports.mnemonicToSeed = mnemonicToSeed;
              function mnemonicToEntropy(mnemonic, wordlist) {
                wordlist = wordlist || DEFAULT_WORDLIST;
                if (!wordlist) {
                  throw new Error(WORDLIST_REQUIRED);
                }
                const words = (mnemonic || "").normalize("NFKD").split(" ");
                if (words.length % 3 !== 0)
                  throw new Error(INVALID_MNEMONIC);
                const bits = words.map((word) => {
                  const index = wordlist.indexOf(word);
                  if (index === -1)
                    throw new Error(INVALID_MNEMONIC);
                  return lpad(index.toString(2), "0", 11);
                }).join("");
                const dividerIndex = Math.floor(bits.length / 33) * 32;
                const entropyBits = bits.slice(0, dividerIndex);
                const checksumBits = bits.slice(dividerIndex);
                const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
                if (entropyBytes.length < 16)
                  throw new Error(INVALID_ENTROPY);
                if (entropyBytes.length > 32)
                  throw new Error(INVALID_ENTROPY);
                if (entropyBytes.length % 4 !== 0)
                  throw new Error(INVALID_ENTROPY);
                const entropy = Buffer.from(entropyBytes);
                const newChecksum = deriveChecksumBits(entropy);
                if (newChecksum !== checksumBits)
                  throw new Error(INVALID_CHECKSUM);
                return entropy.toString("hex");
              }
              exports.mnemonicToEntropy = mnemonicToEntropy;
              function entropyToMnemonic(entropy, wordlist) {
                if (!Buffer.isBuffer(entropy))
                  entropy = Buffer.from(entropy, "hex");
                wordlist = wordlist || DEFAULT_WORDLIST;
                if (!wordlist) {
                  throw new Error(WORDLIST_REQUIRED);
                }
                if (entropy.length < 16)
                  throw new TypeError(INVALID_ENTROPY);
                if (entropy.length > 32)
                  throw new TypeError(INVALID_ENTROPY);
                if (entropy.length % 4 !== 0)
                  throw new TypeError(INVALID_ENTROPY);
                const entropyBits = bytesToBinary([...entropy]);
                const checksumBits = deriveChecksumBits(entropy);
                const bits = entropyBits + checksumBits;
                const chunks = bits.match(/(.{1,11})/g);
                const words = chunks.map((binary) => {
                  const index = binaryToByte(binary);
                  return wordlist[index];
                });
                return wordlist[0] === "\u3042\u3044\u3053\u304F\u3057\u3093" ? words.join("\u3000") : words.join(" ");
              }
              exports.entropyToMnemonic = entropyToMnemonic;
              function generateMnemonic2(strength, rng, wordlist) {
                strength = strength || 128;
                if (strength % 32 !== 0)
                  throw new TypeError(INVALID_ENTROPY);
                rng = rng || randomBytes;
                return entropyToMnemonic(rng(strength / 8), wordlist);
              }
              exports.generateMnemonic = generateMnemonic2;
              function validateMnemonic(mnemonic, wordlist) {
                try {
                  mnemonicToEntropy(mnemonic, wordlist);
                } catch (e) {
                  return false;
                }
                return true;
              }
              exports.validateMnemonic = validateMnemonic;
              function setDefaultWordlist(language) {
                const result = _wordlists_1.wordlists[language];
                if (result)
                  DEFAULT_WORDLIST = result;
                else
                  throw new Error('Could not find wordlist for language "' + language + '"');
              }
              exports.setDefaultWordlist = setDefaultWordlist;
              function getDefaultWordlist() {
                if (!DEFAULT_WORDLIST)
                  throw new Error("No Default Wordlist set");
                return Object.keys(_wordlists_1.wordlists).filter((lang) => {
                  if (lang === "JA" || lang === "EN")
                    return false;
                  return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);
                })[0];
              }
              exports.getDefaultWordlist = getDefaultWordlist;
              var _wordlists_2 = require_wordlists();
              exports.wordlists = _wordlists_2.wordlists;
            }
          });

          // node_modules/bip32/src/crypto.js
          var require_crypto2 = __commonJS({
            "node_modules/bip32/src/crypto.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var createHash = require_browser3();
              var createHmac = require_browser2();
              function hash160(buffer) {
                const sha256Hash = createHash("sha256").update(buffer).digest();
                try {
                  return createHash("rmd160").update(sha256Hash).digest();
                } catch (err) {
                  return createHash("ripemd160").update(sha256Hash).digest();
                }
              }
              exports.hash160 = hash160;
              function hmacSHA512(key, data) {
                return createHmac("sha512", key).update(data).digest();
              }
              exports.hmacSHA512 = hmacSHA512;
            }
          });

          // node_modules/bip32/src/testecc.js
          var require_testecc = __commonJS({
            "node_modules/bip32/src/testecc.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var h = (hex) => Buffer.from(hex, "hex");
              function testEcc(ecc2) {
                assert(ecc2.isPoint(h("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
                assert(!ecc2.isPoint(h("030000000000000000000000000000000000000000000000000000000000000005")));
                assert(ecc2.isPrivate(h("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")));
                assert(ecc2.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
                assert(!ecc2.isPrivate(h("0000000000000000000000000000000000000000000000000000000000000000")));
                assert(!ecc2.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")));
                assert(!ecc2.isPrivate(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")));
                assert(Buffer.from(ecc2.pointFromScalar(h("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af"))).equals(h("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")));
                assert(Buffer.from(ecc2.pointAddScalar(h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h("0000000000000000000000000000000000000000000000000000000000000003"))).equals(h("02c6047f9441ed7d6d3045406e95c07cd85c778e4b8cef3ca7abac09b95c709ee5")));
                assert(Buffer.from(ecc2.privateAdd(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd036413e"), h("0000000000000000000000000000000000000000000000000000000000000002"))).equals(h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")));
                assert(Buffer.from(ecc2.sign(h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140"))).equals(h("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
                assert(ecc2.verify(h("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"), h("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"), h("54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5")));
                if (ecc2.signSchnorr) {
                  assert(Buffer.from(ecc2.signSchnorr(h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"), h("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906"))).equals(h("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
                }
                if (ecc2.verifySchnorr) {
                  assert(ecc2.verifySchnorr(h("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"), h("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"), h("5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7")));
                }
              }
              exports.testEcc = testEcc;
              function assert(bool) {
                if (!bool)
                  throw new Error("ecc library invalid");
              }
            }
          });

          // node_modules/bs58check/node_modules/base-x/src/index.js
          var require_src3 = __commonJS({
            "node_modules/bs58check/node_modules/base-x/src/index.js"(exports, module) {
              "use strict";
              var _Buffer = require_safe_buffer().Buffer;
              function base(ALPHABET) {
                if (ALPHABET.length >= 255) {
                  throw new TypeError("Alphabet too long");
                }
                var BASE_MAP = new Uint8Array(256);
                for (var j = 0; j < BASE_MAP.length; j++) {
                  BASE_MAP[j] = 255;
                }
                for (var i = 0; i < ALPHABET.length; i++) {
                  var x = ALPHABET.charAt(i);
                  var xc = x.charCodeAt(0);
                  if (BASE_MAP[xc] !== 255) {
                    throw new TypeError(x + " is ambiguous");
                  }
                  BASE_MAP[xc] = i;
                }
                var BASE = ALPHABET.length;
                var LEADER = ALPHABET.charAt(0);
                var FACTOR = Math.log(BASE) / Math.log(256);
                var iFACTOR = Math.log(256) / Math.log(BASE);
                function encode3(source) {
                  if (Array.isArray(source) || source instanceof Uint8Array) {
                    source = _Buffer.from(source);
                  }
                  if (!_Buffer.isBuffer(source)) {
                    throw new TypeError("Expected Buffer");
                  }
                  if (source.length === 0) {
                    return "";
                  }
                  var zeroes = 0;
                  var length = 0;
                  var pbegin = 0;
                  var pend = source.length;
                  while (pbegin !== pend && source[pbegin] === 0) {
                    pbegin++;
                    zeroes++;
                  }
                  var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
                  var b58 = new Uint8Array(size);
                  while (pbegin !== pend) {
                    var carry = source[pbegin];
                    var i2 = 0;
                    for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
                      carry += 256 * b58[it1] >>> 0;
                      b58[it1] = carry % BASE >>> 0;
                      carry = carry / BASE >>> 0;
                    }
                    if (carry !== 0) {
                      throw new Error("Non-zero carry");
                    }
                    length = i2;
                    pbegin++;
                  }
                  var it2 = size - length;
                  while (it2 !== size && b58[it2] === 0) {
                    it2++;
                  }
                  var str = LEADER.repeat(zeroes);
                  for (; it2 < size; ++it2) {
                    str += ALPHABET.charAt(b58[it2]);
                  }
                  return str;
                }
                function decodeUnsafe(source) {
                  if (typeof source !== "string") {
                    throw new TypeError("Expected String");
                  }
                  if (source.length === 0) {
                    return _Buffer.alloc(0);
                  }
                  var psz = 0;
                  var zeroes = 0;
                  var length = 0;
                  while (source[psz] === LEADER) {
                    zeroes++;
                    psz++;
                  }
                  var size = (source.length - psz) * FACTOR + 1 >>> 0;
                  var b256 = new Uint8Array(size);
                  while (source[psz]) {
                    var carry = BASE_MAP[source.charCodeAt(psz)];
                    if (carry === 255) {
                      return;
                    }
                    var i2 = 0;
                    for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
                      carry += BASE * b256[it3] >>> 0;
                      b256[it3] = carry % 256 >>> 0;
                      carry = carry / 256 >>> 0;
                    }
                    if (carry !== 0) {
                      throw new Error("Non-zero carry");
                    }
                    length = i2;
                    psz++;
                  }
                  var it4 = size - length;
                  while (it4 !== size && b256[it4] === 0) {
                    it4++;
                  }
                  var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
                  vch.fill(0, 0, zeroes);
                  var j2 = zeroes;
                  while (it4 !== size) {
                    vch[j2++] = b256[it4++];
                  }
                  return vch;
                }
                function decode(string) {
                  var buffer = decodeUnsafe(string);
                  if (buffer) {
                    return buffer;
                  }
                  throw new Error("Non-base" + BASE + " character");
                }
                return {
                  encode: encode3,
                  decodeUnsafe,
                  decode
                };
              }
              module.exports = base;
            }
          });

          // node_modules/bs58check/node_modules/bs58/index.js
          var require_bs582 = __commonJS({
            "node_modules/bs58check/node_modules/bs58/index.js"(exports, module) {
              var basex = require_src3();
              var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
              module.exports = basex(ALPHABET);
            }
          });

          // node_modules/bs58check/base.js
          var require_base2 = __commonJS({
            "node_modules/bs58check/base.js"(exports, module) {
              "use strict";
              var base582 = require_bs582();
              var Buffer2 = require_safe_buffer().Buffer;
              module.exports = function (checksumFn) {
                function encode3(payload) {
                  var checksum = checksumFn(payload);
                  return base582.encode(Buffer2.concat([
                    payload,
                    checksum
                  ], payload.length + 4));
                }
                function decodeRaw(buffer) {
                  var payload = buffer.slice(0, -4);
                  var checksum = buffer.slice(-4);
                  var newChecksum = checksumFn(payload);
                  if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
                    return;
                  return payload;
                }
                function decodeUnsafe(string) {
                  var buffer = base582.decodeUnsafe(string);
                  if (!buffer)
                    return;
                  return decodeRaw(buffer);
                }
                function decode(string) {
                  var buffer = base582.decode(string);
                  var payload = decodeRaw(buffer, checksumFn);
                  if (!payload)
                    throw new Error("Invalid checksum");
                  return payload;
                }
                return {
                  encode: encode3,
                  decode,
                  decodeUnsafe
                };
              };
            }
          });

          // node_modules/bs58check/index.js
          var require_bs58check = __commonJS({
            "node_modules/bs58check/index.js"(exports, module) {
              "use strict";
              var createHash = require_browser3();
              var bs58checkBase = require_base2();
              function sha256x2(buffer) {
                var tmp = createHash("sha256").update(buffer).digest();
                return createHash("sha256").update(tmp).digest();
              }
              module.exports = bs58checkBase(sha256x2);
            }
          });

          // node_modules/typeforce/native.js
          var require_native = __commonJS({
            "node_modules/typeforce/native.js"(exports, module) {
              var types = {
                Array: function (value) {
                  return value !== null && value !== void 0 && value.constructor === Array;
                },
                Boolean: function (value) {
                  return typeof value === "boolean";
                },
                Function: function (value) {
                  return typeof value === "function";
                },
                Nil: function (value) {
                  return value === void 0 || value === null;
                },
                Number: function (value) {
                  return typeof value === "number";
                },
                Object: function (value) {
                  return typeof value === "object";
                },
                String: function (value) {
                  return typeof value === "string";
                },
                "": function () {
                  return true;
                }
              };
              types.Null = types.Nil;
              for (typeName in types) {
                types[typeName].toJSON = function (t) {
                  return t;
                }.bind(null, typeName);
              }
              var typeName;
              module.exports = types;
            }
          });

          // node_modules/typeforce/errors.js
          var require_errors = __commonJS({
            "node_modules/typeforce/errors.js"(exports, module) {
              var native = require_native();
              function getTypeName(fn) {
                return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
              }
              function getValueTypeName(value) {
                return native.Nil(value) ? "" : getTypeName(value.constructor);
              }
              function getValue(value) {
                if (native.Function(value))
                  return "";
                if (native.String(value))
                  return JSON.stringify(value);
                if (value && native.Object(value))
                  return "";
                return value;
              }
              function captureStackTrace(e, t) {
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(e, t);
                }
              }
              function tfJSON(type) {
                if (native.Function(type))
                  return type.toJSON ? type.toJSON() : getTypeName(type);
                if (native.Array(type))
                  return "Array";
                if (type && native.Object(type))
                  return "Object";
                return type !== void 0 ? type : "";
              }
              function tfErrorString(type, value, valueTypeName) {
                var valueJson = getValue(value);
                return "Expected " + tfJSON(type) + ", got" + (valueTypeName !== "" ? " " + valueTypeName : "") + (valueJson !== "" ? " " + valueJson : "");
              }
              function TfTypeError(type, value, valueTypeName) {
                valueTypeName = valueTypeName || getValueTypeName(value);
                this.message = tfErrorString(type, value, valueTypeName);
                captureStackTrace(this, TfTypeError);
                this.__type = type;
                this.__value = value;
                this.__valueTypeName = valueTypeName;
              }
              TfTypeError.prototype = Object.create(Error.prototype);
              TfTypeError.prototype.constructor = TfTypeError;
              function tfPropertyErrorString(type, label, name, value, valueTypeName) {
                var description = '" of type ';
                if (label === "key")
                  description = '" with key type ';
                return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
              }
              function TfPropertyTypeError(type, property, label, value, valueTypeName) {
                if (type) {
                  valueTypeName = valueTypeName || getValueTypeName(value);
                  this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
                } else {
                  this.message = 'Unexpected property "' + property + '"';
                }
                captureStackTrace(this, TfTypeError);
                this.__label = label;
                this.__property = property;
                this.__type = type;
                this.__value = value;
                this.__valueTypeName = valueTypeName;
              }
              TfPropertyTypeError.prototype = Object.create(Error.prototype);
              TfPropertyTypeError.prototype.constructor = TfTypeError;
              function tfCustomError(expected, actual) {
                return new TfTypeError(expected, {}, actual);
              }
              function tfSubError(e, property, label) {
                if (e instanceof TfPropertyTypeError) {
                  property = property + "." + e.__property;
                  e = new TfPropertyTypeError(
                    e.__type,
                    property,
                    e.__label,
                    e.__value,
                    e.__valueTypeName
                  );
                } else if (e instanceof TfTypeError) {
                  e = new TfPropertyTypeError(
                    e.__type,
                    property,
                    label,
                    e.__value,
                    e.__valueTypeName
                  );
                }
                captureStackTrace(e);
                return e;
              }
              module.exports = {
                TfTypeError,
                TfPropertyTypeError,
                tfCustomError,
                tfSubError,
                tfJSON,
                getValueTypeName
              };
            }
          });

          // node_modules/typeforce/extra.js
          var require_extra = __commonJS({
            "node_modules/typeforce/extra.js"(exports, module) {
              var NATIVE = require_native();
              var ERRORS = require_errors();
              function _Buffer(value) {
                return Buffer.isBuffer(value);
              }
              function Hex(value) {
                return typeof value === "string" && /^([0-9a-f]{2})+$/i.test(value);
              }
              function _LengthN(type, length) {
                var name = type.toJSON();
                function Length(value) {
                  if (!type(value))
                    return false;
                  if (value.length === length)
                    return true;
                  throw ERRORS.tfCustomError(name + "(Length: " + length + ")", name + "(Length: " + value.length + ")");
                }
                Length.toJSON = function () {
                  return name;
                };
                return Length;
              }
              var _ArrayN = _LengthN.bind(null, NATIVE.Array);
              var _BufferN = _LengthN.bind(null, _Buffer);
              var _HexN = _LengthN.bind(null, Hex);
              var _StringN = _LengthN.bind(null, NATIVE.String);
              function Range(a, b, f) {
                f = f || NATIVE.Number;
                function _range(value, strict) {
                  return f(value, strict) && value > a && value < b;
                }
                _range.toJSON = function () {
                  return `${f.toJSON()} between [${a}, ${b}]`;
                };
                return _range;
              }
              var INT53_MAX = Math.pow(2, 53) - 1;
              function Finite(value) {
                return typeof value === "number" && isFinite(value);
              }
              function Int8(value) {
                return value << 24 >> 24 === value;
              }
              function Int16(value) {
                return value << 16 >> 16 === value;
              }
              function Int32(value) {
                return (value | 0) === value;
              }
              function Int53(value) {
                return typeof value === "number" && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;
              }
              function UInt8(value) {
                return (value & 255) === value;
              }
              function UInt16(value) {
                return (value & 65535) === value;
              }
              function UInt32(value) {
                return value >>> 0 === value;
              }
              function UInt53(value) {
                return typeof value === "number" && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
              }
              var types = {
                ArrayN: _ArrayN,
                Buffer: _Buffer,
                BufferN: _BufferN,
                Finite,
                Hex,
                HexN: _HexN,
                Int8,
                Int16,
                Int32,
                Int53,
                Range,
                StringN: _StringN,
                UInt8,
                UInt16,
                UInt32,
                UInt53
              };
              for (typeName in types) {
                types[typeName].toJSON = function (t) {
                  return t;
                }.bind(null, typeName);
              }
              var typeName;
              module.exports = types;
            }
          });

          // node_modules/typeforce/index.js
          var require_typeforce = __commonJS({
            "node_modules/typeforce/index.js"(exports, module) {
              var ERRORS = require_errors();
              var NATIVE = require_native();
              var tfJSON = ERRORS.tfJSON;
              var TfTypeError = ERRORS.TfTypeError;
              var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
              var tfSubError = ERRORS.tfSubError;
              var getValueTypeName = ERRORS.getValueTypeName;
              var TYPES = {
                arrayOf: function arrayOf(type, options) {
                  type = compile(type);
                  options = options || {};
                  function _arrayOf(array, strict) {
                    if (!NATIVE.Array(array))
                      return false;
                    if (NATIVE.Nil(array))
                      return false;
                    if (options.minLength !== void 0 && array.length < options.minLength)
                      return false;
                    if (options.maxLength !== void 0 && array.length > options.maxLength)
                      return false;
                    if (options.length !== void 0 && array.length !== options.length)
                      return false;
                    return array.every(function (value, i) {
                      try {
                        return typeforce(type, value, strict);
                      } catch (e) {
                        throw tfSubError(e, i);
                      }
                    });
                  }
                  _arrayOf.toJSON = function () {
                    var str = "[" + tfJSON(type) + "]";
                    if (options.length !== void 0) {
                      str += "{" + options.length + "}";
                    } else if (options.minLength !== void 0 || options.maxLength !== void 0) {
                      str += "{" + (options.minLength === void 0 ? 0 : options.minLength) + "," + (options.maxLength === void 0 ? Infinity : options.maxLength) + "}";
                    }
                    return str;
                  };
                  return _arrayOf;
                },
                maybe: function maybe(type) {
                  type = compile(type);
                  function _maybe(value, strict) {
                    return NATIVE.Nil(value) || type(value, strict, maybe);
                  }
                  _maybe.toJSON = function () {
                    return "?" + tfJSON(type);
                  };
                  return _maybe;
                },
                map: function map(propertyType, propertyKeyType) {
                  propertyType = compile(propertyType);
                  if (propertyKeyType)
                    propertyKeyType = compile(propertyKeyType);
                  function _map(value, strict) {
                    if (!NATIVE.Object(value))
                      return false;
                    if (NATIVE.Nil(value))
                      return false;
                    for (var propertyName in value) {
                      try {
                        if (propertyKeyType) {
                          typeforce(propertyKeyType, propertyName, strict);
                        }
                      } catch (e) {
                        throw tfSubError(e, propertyName, "key");
                      }
                      try {
                        var propertyValue = value[propertyName];
                        typeforce(propertyType, propertyValue, strict);
                      } catch (e) {
                        throw tfSubError(e, propertyName);
                      }
                    }
                    return true;
                  }
                  if (propertyKeyType) {
                    _map.toJSON = function () {
                      return "{" + tfJSON(propertyKeyType) + ": " + tfJSON(propertyType) + "}";
                    };
                  } else {
                    _map.toJSON = function () {
                      return "{" + tfJSON(propertyType) + "}";
                    };
                  }
                  return _map;
                },
                object: function object(uncompiled) {
                  var type = {};
                  for (var typePropertyName in uncompiled) {
                    type[typePropertyName] = compile(uncompiled[typePropertyName]);
                  }
                  function _object(value, strict) {
                    if (!NATIVE.Object(value))
                      return false;
                    if (NATIVE.Nil(value))
                      return false;
                    var propertyName;
                    try {
                      for (propertyName in type) {
                        var propertyType = type[propertyName];
                        var propertyValue = value[propertyName];
                        typeforce(propertyType, propertyValue, strict);
                      }
                    } catch (e) {
                      throw tfSubError(e, propertyName);
                    }
                    if (strict) {
                      for (propertyName in value) {
                        if (type[propertyName])
                          continue;
                        throw new TfPropertyTypeError(void 0, propertyName);
                      }
                    }
                    return true;
                  }
                  _object.toJSON = function () {
                    return tfJSON(type);
                  };
                  return _object;
                },
                anyOf: function anyOf() {
                  var types = [].slice.call(arguments).map(compile);
                  function _anyOf(value, strict) {
                    return types.some(function (type) {
                      try {
                        return typeforce(type, value, strict);
                      } catch (e) {
                        return false;
                      }
                    });
                  }
                  _anyOf.toJSON = function () {
                    return types.map(tfJSON).join("|");
                  };
                  return _anyOf;
                },
                allOf: function allOf() {
                  var types = [].slice.call(arguments).map(compile);
                  function _allOf(value, strict) {
                    return types.every(function (type) {
                      try {
                        return typeforce(type, value, strict);
                      } catch (e) {
                        return false;
                      }
                    });
                  }
                  _allOf.toJSON = function () {
                    return types.map(tfJSON).join(" & ");
                  };
                  return _allOf;
                },
                quacksLike: function quacksLike(type) {
                  function _quacksLike(value) {
                    return type === getValueTypeName(value);
                  }
                  _quacksLike.toJSON = function () {
                    return type;
                  };
                  return _quacksLike;
                },
                tuple: function tuple() {
                  var types = [].slice.call(arguments).map(compile);
                  function _tuple(values, strict) {
                    if (NATIVE.Nil(values))
                      return false;
                    if (NATIVE.Nil(values.length))
                      return false;
                    if (strict && values.length !== types.length)
                      return false;
                    return types.every(function (type, i) {
                      try {
                        return typeforce(type, values[i], strict);
                      } catch (e) {
                        throw tfSubError(e, i);
                      }
                    });
                  }
                  _tuple.toJSON = function () {
                    return "(" + types.map(tfJSON).join(", ") + ")";
                  };
                  return _tuple;
                },
                value: function value(expected) {
                  function _value(actual) {
                    return actual === expected;
                  }
                  _value.toJSON = function () {
                    return expected;
                  };
                  return _value;
                }
              };
              TYPES.oneOf = TYPES.anyOf;
              function compile(type) {
                if (NATIVE.String(type)) {
                  if (type[0] === "?")
                    return TYPES.maybe(type.slice(1));
                  return NATIVE[type] || TYPES.quacksLike(type);
                } else if (type && NATIVE.Object(type)) {
                  if (NATIVE.Array(type)) {
                    if (type.length !== 1)
                      throw new TypeError("Expected compile() parameter of type Array of length 1");
                    return TYPES.arrayOf(type[0]);
                  }
                  return TYPES.object(type);
                } else if (NATIVE.Function(type)) {
                  return type;
                }
                return TYPES.value(type);
              }
              function typeforce(type, value, strict, surrogate) {
                if (NATIVE.Function(type)) {
                  if (type(value, strict))
                    return true;
                  throw new TfTypeError(surrogate || type, value);
                }
                return typeforce(compile(type), value, strict);
              }
              for (typeName in NATIVE) {
                typeforce[typeName] = NATIVE[typeName];
              }
              var typeName;
              for (typeName in TYPES) {
                typeforce[typeName] = TYPES[typeName];
              }
              var EXTRA = require_extra();
              for (typeName in EXTRA) {
                typeforce[typeName] = EXTRA[typeName];
              }
              typeforce.compile = compile;
              typeforce.TfTypeError = TfTypeError;
              typeforce.TfPropertyTypeError = TfPropertyTypeError;
              module.exports = typeforce;
            }
          });

          // node_modules/wif/index.js
          var require_wif = __commonJS({
            "node_modules/wif/index.js"(exports, module) {
              var bs58check = require_bs58check();
              function decodeRaw(buffer, version) {
                if (version !== void 0 && buffer[0] !== version)
                  throw new Error("Invalid network version");
                if (buffer.length === 33) {
                  return {
                    version: buffer[0],
                    privateKey: buffer.slice(1, 33),
                    compressed: false
                  };
                }
                if (buffer.length !== 34)
                  throw new Error("Invalid WIF length");
                if (buffer[33] !== 1)
                  throw new Error("Invalid compression flag");
                return {
                  version: buffer[0],
                  privateKey: buffer.slice(1, 33),
                  compressed: true
                };
              }
              function encodeRaw(version, privateKey, compressed) {
                var result = new Buffer(compressed ? 34 : 33);
                result.writeUInt8(version, 0);
                privateKey.copy(result, 1);
                if (compressed) {
                  result[33] = 1;
                }
                return result;
              }
              function decode(string, version) {
                return decodeRaw(bs58check.decode(string), version);
              }
              function encode3(version, privateKey, compressed) {
                if (typeof version === "number")
                  return bs58check.encode(encodeRaw(version, privateKey, compressed));
                return bs58check.encode(
                  encodeRaw(
                    version.version,
                    version.privateKey,
                    version.compressed
                  )
                );
              }
              module.exports = {
                decode,
                decodeRaw,
                encode: encode3,
                encodeRaw
              };
            }
          });

          // node_modules/bip32/src/bip32.js
          var require_bip32 = __commonJS({
            "node_modules/bip32/src/bip32.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var crypto = require_crypto2();
              var testecc_1 = require_testecc();
              var bs58check = require_bs58check();
              var typeforce = require_typeforce();
              var wif = require_wif();
              function BIP32Factory2(ecc2) {
                testecc_1.testEcc(ecc2);
                const UINT256_TYPE = typeforce.BufferN(32);
                const NETWORK_TYPE = typeforce.compile({
                  wif: typeforce.UInt8,
                  bip32: {
                    public: typeforce.UInt32,
                    private: typeforce.UInt32
                  }
                });
                const BITCOIN = {
                  messagePrefix: "Bitcoin Signed Message:\n",
                  bech32: "bc",
                  bip32: {
                    public: 76067358,
                    private: 76066276
                  },
                  pubKeyHash: 0,
                  scriptHash: 5,
                  wif: 128
                };
                const HIGHEST_BIT = 2147483648;
                const UINT31_MAX = Math.pow(2, 31) - 1;
                function BIP32Path(value) {
                  return typeforce.String(value) && value.match(/^(m\/)?(\d+'?\/)*\d+'?$/) !== null;
                }
                function UInt31(value) {
                  return typeforce.UInt32(value) && value <= UINT31_MAX;
                }
                class BIP32 {
                  constructor(__D, __Q, chainCode, network, __DEPTH = 0, __INDEX = 0, __PARENT_FINGERPRINT = 0) {
                    this.__D = __D;
                    this.__Q = __Q;
                    this.chainCode = chainCode;
                    this.network = network;
                    this.__DEPTH = __DEPTH;
                    this.__INDEX = __INDEX;
                    this.__PARENT_FINGERPRINT = __PARENT_FINGERPRINT;
                    typeforce(NETWORK_TYPE, network);
                    this.lowR = false;
                  }
                  get depth() {
                    return this.__DEPTH;
                  }
                  get index() {
                    return this.__INDEX;
                  }
                  get parentFingerprint() {
                    return this.__PARENT_FINGERPRINT;
                  }
                  get publicKey() {
                    if (this.__Q === void 0)
                      this.__Q = Buffer.from(ecc2.pointFromScalar(this.__D, true));
                    return this.__Q;
                  }
                  get privateKey() {
                    return this.__D;
                  }
                  get identifier() {
                    return crypto.hash160(this.publicKey);
                  }
                  get fingerprint() {
                    return this.identifier.slice(0, 4);
                  }
                  get compressed() {
                    return true;
                  }
                  // Private === not neutered
                  // Public === neutered
                  isNeutered() {
                    return this.__D === void 0;
                  }
                  neutered() {
                    return fromPublicKeyLocal(this.publicKey, this.chainCode, this.network, this.depth, this.index, this.parentFingerprint);
                  }
                  toBase58() {
                    const network = this.network;
                    const version = !this.isNeutered() ? network.bip32.private : network.bip32.public;
                    const buffer = Buffer.allocUnsafe(78);
                    buffer.writeUInt32BE(version, 0);
                    buffer.writeUInt8(this.depth, 4);
                    buffer.writeUInt32BE(this.parentFingerprint, 5);
                    buffer.writeUInt32BE(this.index, 9);
                    this.chainCode.copy(buffer, 13);
                    if (!this.isNeutered()) {
                      buffer.writeUInt8(0, 45);
                      this.privateKey.copy(buffer, 46);
                    } else {
                      this.publicKey.copy(buffer, 45);
                    }
                    return bs58check.encode(buffer);
                  }
                  toWIF() {
                    if (!this.privateKey)
                      throw new TypeError("Missing private key");
                    return wif.encode(this.network.wif, this.privateKey, true);
                  }
                  // https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#child-key-derivation-ckd-functions
                  derive(index) {
                    typeforce(typeforce.UInt32, index);
                    const isHardened = index >= HIGHEST_BIT;
                    const data = Buffer.allocUnsafe(37);
                    if (isHardened) {
                      if (this.isNeutered())
                        throw new TypeError("Missing private key for hardened child key");
                      data[0] = 0;
                      this.privateKey.copy(data, 1);
                      data.writeUInt32BE(index, 33);
                    } else {
                      this.publicKey.copy(data, 0);
                      data.writeUInt32BE(index, 33);
                    }
                    const I = crypto.hmacSHA512(this.chainCode, data);
                    const IL = I.slice(0, 32);
                    const IR = I.slice(32);
                    if (!ecc2.isPrivate(IL))
                      return this.derive(index + 1);
                    let hd;
                    if (!this.isNeutered()) {
                      const ki = Buffer.from(ecc2.privateAdd(this.privateKey, IL));
                      if (ki == null)
                        return this.derive(index + 1);
                      hd = fromPrivateKeyLocal(ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
                    } else {
                      const Ki = Buffer.from(ecc2.pointAddScalar(this.publicKey, IL, true));
                      if (Ki === null)
                        return this.derive(index + 1);
                      hd = fromPublicKeyLocal(Ki, IR, this.network, this.depth + 1, index, this.fingerprint.readUInt32BE(0));
                    }
                    return hd;
                  }
                  deriveHardened(index) {
                    typeforce(UInt31, index);
                    return this.derive(index + HIGHEST_BIT);
                  }
                  derivePath(path) {
                    typeforce(BIP32Path, path);
                    let splitPath = path.split("/");
                    if (splitPath[0] === "m") {
                      if (this.parentFingerprint)
                        throw new TypeError("Expected master, got child");
                      splitPath = splitPath.slice(1);
                    }
                    return splitPath.reduce((prevHd, indexStr) => {
                      let index;
                      if (indexStr.slice(-1) === `'`) {
                        index = parseInt(indexStr.slice(0, -1), 10);
                        return prevHd.deriveHardened(index);
                      } else {
                        index = parseInt(indexStr, 10);
                        return prevHd.derive(index);
                      }
                    }, this);
                  }
                  sign(hash, lowR) {
                    if (!this.privateKey)
                      throw new Error("Missing private key");
                    if (lowR === void 0)
                      lowR = this.lowR;
                    if (lowR === false) {
                      return Buffer.from(ecc2.sign(hash, this.privateKey));
                    } else {
                      let sig = Buffer.from(ecc2.sign(hash, this.privateKey));
                      const extraData = Buffer.alloc(32, 0);
                      let counter = 0;
                      while (sig[0] > 127) {
                        counter++;
                        extraData.writeUIntLE(counter, 0, 6);
                        sig = Buffer.from(ecc2.sign(hash, this.privateKey, extraData));
                      }
                      return sig;
                    }
                  }
                  signSchnorr(hash) {
                    if (!this.privateKey)
                      throw new Error("Missing private key");
                    if (!ecc2.signSchnorr)
                      throw new Error("signSchnorr not supported by ecc library");
                    return Buffer.from(ecc2.signSchnorr(hash, this.privateKey));
                  }
                  verify(hash, signature) {
                    return ecc2.verify(hash, this.publicKey, signature);
                  }
                  verifySchnorr(hash, signature) {
                    if (!ecc2.verifySchnorr)
                      throw new Error("verifySchnorr not supported by ecc library");
                    return ecc2.verifySchnorr(hash, this.publicKey.subarray(1, 33), signature);
                  }
                }
                function fromBase58(inString, network) {
                  const buffer = bs58check.decode(inString);
                  if (buffer.length !== 78)
                    throw new TypeError("Invalid buffer length");
                  network = network || BITCOIN;
                  const version = buffer.readUInt32BE(0);
                  if (version !== network.bip32.private && version !== network.bip32.public)
                    throw new TypeError("Invalid network version");
                  const depth = buffer[4];
                  const parentFingerprint = buffer.readUInt32BE(5);
                  if (depth === 0) {
                    if (parentFingerprint !== 0)
                      throw new TypeError("Invalid parent fingerprint");
                  }
                  const index = buffer.readUInt32BE(9);
                  if (depth === 0 && index !== 0)
                    throw new TypeError("Invalid index");
                  const chainCode = buffer.slice(13, 45);
                  let hd;
                  if (version === network.bip32.private) {
                    if (buffer.readUInt8(45) !== 0)
                      throw new TypeError("Invalid private key");
                    const k = buffer.slice(46, 78);
                    hd = fromPrivateKeyLocal(k, chainCode, network, depth, index, parentFingerprint);
                  } else {
                    const X = buffer.slice(45, 78);
                    hd = fromPublicKeyLocal(X, chainCode, network, depth, index, parentFingerprint);
                  }
                  return hd;
                }
                function fromPrivateKey(privateKey, chainCode, network) {
                  return fromPrivateKeyLocal(privateKey, chainCode, network);
                }
                function fromPrivateKeyLocal(privateKey, chainCode, network, depth, index, parentFingerprint) {
                  typeforce({
                    privateKey: UINT256_TYPE,
                    chainCode: UINT256_TYPE
                  }, { privateKey, chainCode });
                  network = network || BITCOIN;
                  if (!ecc2.isPrivate(privateKey))
                    throw new TypeError("Private key not in range [1, n)");
                  return new BIP32(privateKey, void 0, chainCode, network, depth, index, parentFingerprint);
                }
                function fromPublicKey(publicKey, chainCode, network) {
                  return fromPublicKeyLocal(publicKey, chainCode, network);
                }
                function fromPublicKeyLocal(publicKey, chainCode, network, depth, index, parentFingerprint) {
                  typeforce({
                    publicKey: typeforce.BufferN(33),
                    chainCode: UINT256_TYPE
                  }, { publicKey, chainCode });
                  network = network || BITCOIN;
                  if (!ecc2.isPoint(publicKey))
                    throw new TypeError("Point is not on the curve");
                  return new BIP32(void 0, publicKey, chainCode, network, depth, index, parentFingerprint);
                }
                function fromSeed(seed, network) {
                  typeforce(typeforce.Buffer, seed);
                  if (seed.length < 16)
                    throw new TypeError("Seed should be at least 128 bits");
                  if (seed.length > 64)
                    throw new TypeError("Seed should be at most 512 bits");
                  network = network || BITCOIN;
                  const I = crypto.hmacSHA512(Buffer.from("Bitcoin seed", "utf8"), seed);
                  const IL = I.slice(0, 32);
                  const IR = I.slice(32);
                  return fromPrivateKey(IL, IR, network);
                }
                return {
                  fromSeed,
                  fromBase58,
                  fromPublicKey,
                  fromPrivateKey
                };
              }
              exports.BIP32Factory = BIP32Factory2;
            }
          });

          // node_modules/bip32/src/index.js
          var require_src4 = __commonJS({
            "node_modules/bip32/src/index.js"(exports) {
              "use strict";
              Object.defineProperty(exports, "__esModule", { value: true });
              var bip32_1 = require_bip32();
              exports.default = bip32_1.BIP32Factory;
              exports.BIP32Factory = bip32_1.BIP32Factory;
            }
          });

          // node_modules/secp256k1/lib/index.js
          var require_lib = __commonJS({
            "node_modules/secp256k1/lib/index.js"(exports, module) {
              var errors = {
                IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
                TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
                TWEAK_MUL: "The tweak was out of range or equal to zero",
                CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
                SECKEY_INVALID: "Private Key is invalid",
                PUBKEY_PARSE: "Public Key could not be parsed",
                PUBKEY_SERIALIZE: "Public Key serialization error",
                PUBKEY_COMBINE: "The sum of the public keys is not valid",
                SIG_PARSE: "Signature could not be parsed",
                SIGN: "The nonce generation function failed, or the private key was invalid",
                RECOVER: "Public key could not be recover",
                ECDH: "Scalar was invalid (zero or overflow)"
              };
              function assert(cond, msg) {
                if (!cond)
                  throw new Error(msg);
              }
              function isUint8Array(name, value, length) {
                assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
                if (length !== void 0) {
                  if (Array.isArray(length)) {
                    const numbers = length.join(", ");
                    const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
                    assert(length.includes(value.length), msg);
                  } else {
                    const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
                    assert(value.length === length, msg);
                  }
                }
              }
              function isCompressed(value) {
                assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
              }
              function getAssertedOutput(output = (len) => new Uint8Array(len), length) {
                if (typeof output === "function")
                  output = output(length);
                isUint8Array("output", output, length);
                return output;
              }
              function toTypeString(value) {
                return Object.prototype.toString.call(value).slice(8, -1);
              }
              module.exports = (secp256k12) => {
                return {
                  contextRandomize(seed) {
                    assert(
                      seed === null || seed instanceof Uint8Array,
                      "Expected seed to be an Uint8Array or null"
                    );
                    if (seed !== null)
                      isUint8Array("seed", seed, 32);
                    switch (secp256k12.contextRandomize(seed)) {
                      case 1:
                        throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
                    }
                  },
                  privateKeyVerify(seckey) {
                    isUint8Array("private key", seckey, 32);
                    return secp256k12.privateKeyVerify(seckey) === 0;
                  },
                  privateKeyNegate(seckey) {
                    isUint8Array("private key", seckey, 32);
                    switch (secp256k12.privateKeyNegate(seckey)) {
                      case 0:
                        return seckey;
                      case 1:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                    }
                  },
                  privateKeyTweakAdd(seckey, tweak) {
                    isUint8Array("private key", seckey, 32);
                    isUint8Array("tweak", tweak, 32);
                    switch (secp256k12.privateKeyTweakAdd(seckey, tweak)) {
                      case 0:
                        return seckey;
                      case 1:
                        throw new Error(errors.TWEAK_ADD);
                    }
                  },
                  privateKeyTweakMul(seckey, tweak) {
                    isUint8Array("private key", seckey, 32);
                    isUint8Array("tweak", tweak, 32);
                    switch (secp256k12.privateKeyTweakMul(seckey, tweak)) {
                      case 0:
                        return seckey;
                      case 1:
                        throw new Error(errors.TWEAK_MUL);
                    }
                  },
                  publicKeyVerify(pubkey) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    return secp256k12.publicKeyVerify(pubkey) === 0;
                  },
                  publicKeyCreate(seckey, compressed = true, output) {
                    isUint8Array("private key", seckey, 32);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyCreate(output, seckey)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.SECKEY_INVALID);
                      case 2:
                        throw new Error(errors.PUBKEY_SERIALIZE);
                    }
                  },
                  publicKeyConvert(pubkey, compressed = true, output) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyConvert(output, pubkey)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.PUBKEY_SERIALIZE);
                    }
                  },
                  publicKeyNegate(pubkey, compressed = true, output) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyNegate(output, pubkey)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                      case 3:
                        throw new Error(errors.PUBKEY_SERIALIZE);
                    }
                  },
                  publicKeyCombine(pubkeys, compressed = true, output) {
                    assert(Array.isArray(pubkeys), "Expected public keys to be an Array");
                    assert(pubkeys.length > 0, "Expected public keys array will have more than zero items");
                    for (const pubkey of pubkeys) {
                      isUint8Array("public key", pubkey, [33, 65]);
                    }
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyCombine(output, pubkeys)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.PUBKEY_COMBINE);
                      case 3:
                        throw new Error(errors.PUBKEY_SERIALIZE);
                    }
                  },
                  publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    isUint8Array("tweak", tweak, 32);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyTweakAdd(output, pubkey, tweak)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.TWEAK_ADD);
                    }
                  },
                  publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    isUint8Array("tweak", tweak, 32);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.publicKeyTweakMul(output, pubkey, tweak)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.TWEAK_MUL);
                    }
                  },
                  signatureNormalize(sig) {
                    isUint8Array("signature", sig, 64);
                    switch (secp256k12.signatureNormalize(sig)) {
                      case 0:
                        return sig;
                      case 1:
                        throw new Error(errors.SIG_PARSE);
                    }
                  },
                  signatureExport(sig, output) {
                    isUint8Array("signature", sig, 64);
                    output = getAssertedOutput(output, 72);
                    const obj = { output, outputlen: 72 };
                    switch (secp256k12.signatureExport(obj, sig)) {
                      case 0:
                        return output.slice(0, obj.outputlen);
                      case 1:
                        throw new Error(errors.SIG_PARSE);
                      case 2:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                    }
                  },
                  signatureImport(sig, output) {
                    isUint8Array("signature", sig);
                    output = getAssertedOutput(output, 64);
                    switch (secp256k12.signatureImport(output, sig)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.SIG_PARSE);
                      case 2:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                    }
                  },
                  ecdsaSign(msg32, seckey, options = {}, output) {
                    isUint8Array("message", msg32, 32);
                    isUint8Array("private key", seckey, 32);
                    assert(toTypeString(options) === "Object", "Expected options to be an Object");
                    if (options.data !== void 0)
                      isUint8Array("options.data", options.data);
                    if (options.noncefn !== void 0)
                      assert(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
                    output = getAssertedOutput(output, 64);
                    const obj = { signature: output, recid: null };
                    switch (secp256k12.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
                      case 0:
                        return obj;
                      case 1:
                        throw new Error(errors.SIGN);
                      case 2:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                    }
                  },
                  ecdsaVerify(sig, msg32, pubkey) {
                    isUint8Array("signature", sig, 64);
                    isUint8Array("message", msg32, 32);
                    isUint8Array("public key", pubkey, [33, 65]);
                    switch (secp256k12.ecdsaVerify(sig, msg32, pubkey)) {
                      case 0:
                        return true;
                      case 3:
                        return false;
                      case 1:
                        throw new Error(errors.SIG_PARSE);
                      case 2:
                        throw new Error(errors.PUBKEY_PARSE);
                    }
                  },
                  ecdsaRecover(sig, recid, msg32, compressed = true, output) {
                    isUint8Array("signature", sig, 64);
                    assert(
                      toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
                      "Expected recovery id to be a Number within interval [0, 3]"
                    );
                    isUint8Array("message", msg32, 32);
                    isCompressed(compressed);
                    output = getAssertedOutput(output, compressed ? 33 : 65);
                    switch (secp256k12.ecdsaRecover(output, sig, recid, msg32)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.SIG_PARSE);
                      case 2:
                        throw new Error(errors.RECOVER);
                      case 3:
                        throw new Error(errors.IMPOSSIBLE_CASE);
                    }
                  },
                  ecdh(pubkey, seckey, options = {}, output) {
                    isUint8Array("public key", pubkey, [33, 65]);
                    isUint8Array("private key", seckey, 32);
                    assert(toTypeString(options) === "Object", "Expected options to be an Object");
                    if (options.data !== void 0)
                      isUint8Array("options.data", options.data);
                    if (options.hashfn !== void 0) {
                      assert(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
                      if (options.xbuf !== void 0)
                        isUint8Array("options.xbuf", options.xbuf, 32);
                      if (options.ybuf !== void 0)
                        isUint8Array("options.ybuf", options.ybuf, 32);
                      isUint8Array("output", output);
                    } else {
                      output = getAssertedOutput(output, 32);
                    }
                    switch (secp256k12.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
                      case 0:
                        return output;
                      case 1:
                        throw new Error(errors.PUBKEY_PARSE);
                      case 2:
                        throw new Error(errors.ECDH);
                    }
                  }
                };
              };
            }
          });

          // node_modules/secp256k1/lib/elliptic.js
          var require_elliptic2 = __commonJS({
            "node_modules/secp256k1/lib/elliptic.js"(exports, module) {
              var EC2 = require_elliptic().ec;
              var ec = new EC2("secp256k1");
              var ecparams = ec.curve;
              var BN = ecparams.n.constructor;
              function loadCompressedPublicKey(first, xbuf) {
                let x = new BN(xbuf);
                if (x.cmp(ecparams.p) >= 0)
                  return null;
                x = x.toRed(ecparams.red);
                let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
                if (first === 3 !== y.isOdd())
                  y = y.redNeg();
                return ec.keyPair({ pub: { x, y } });
              }
              function loadUncompressedPublicKey(first, xbuf, ybuf) {
                let x = new BN(xbuf);
                let y = new BN(ybuf);
                if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0)
                  return null;
                x = x.toRed(ecparams.red);
                y = y.toRed(ecparams.red);
                if ((first === 6 || first === 7) && y.isOdd() !== (first === 7))
                  return null;
                const x3 = x.redSqr().redIMul(x);
                if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero())
                  return null;
                return ec.keyPair({ pub: { x, y } });
              }
              function loadPublicKey(pubkey) {
                const first = pubkey[0];
                switch (first) {
                  case 2:
                  case 3:
                    if (pubkey.length !== 33)
                      return null;
                    return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
                  case 4:
                  case 6:
                  case 7:
                    if (pubkey.length !== 65)
                      return null;
                    return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
                  default:
                    return null;
                }
              }
              function savePublicKey(output, point) {
                const pubkey = point.encode(null, output.length === 33);
                for (let i = 0; i < output.length; ++i)
                  output[i] = pubkey[i];
              }
              module.exports = {
                contextRandomize() {
                  return 0;
                },
                privateKeyVerify(seckey) {
                  const bn = new BN(seckey);
                  return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
                },
                privateKeyNegate(seckey) {
                  const bn = new BN(seckey);
                  const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
                  seckey.set(negate);
                  return 0;
                },
                privateKeyTweakAdd(seckey, tweak) {
                  const bn = new BN(tweak);
                  if (bn.cmp(ecparams.n) >= 0)
                    return 1;
                  bn.iadd(new BN(seckey));
                  if (bn.cmp(ecparams.n) >= 0)
                    bn.isub(ecparams.n);
                  if (bn.isZero())
                    return 1;
                  const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
                  seckey.set(tweaked);
                  return 0;
                },
                privateKeyTweakMul(seckey, tweak) {
                  let bn = new BN(tweak);
                  if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
                    return 1;
                  bn.imul(new BN(seckey));
                  if (bn.cmp(ecparams.n) >= 0)
                    bn = bn.umod(ecparams.n);
                  const tweaked = bn.toArrayLike(Uint8Array, "be", 32);
                  seckey.set(tweaked);
                  return 0;
                },
                publicKeyVerify(pubkey) {
                  const pair = loadPublicKey(pubkey);
                  return pair === null ? 1 : 0;
                },
                publicKeyCreate(output, seckey) {
                  const bn = new BN(seckey);
                  if (bn.cmp(ecparams.n) >= 0 || bn.isZero())
                    return 1;
                  const point = ec.keyFromPrivate(seckey).getPublic();
                  savePublicKey(output, point);
                  return 0;
                },
                publicKeyConvert(output, pubkey) {
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 1;
                  const point = pair.getPublic();
                  savePublicKey(output, point);
                  return 0;
                },
                publicKeyNegate(output, pubkey) {
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 1;
                  const point = pair.getPublic();
                  point.y = point.y.redNeg();
                  savePublicKey(output, point);
                  return 0;
                },
                publicKeyCombine(output, pubkeys) {
                  const pairs = new Array(pubkeys.length);
                  for (let i = 0; i < pubkeys.length; ++i) {
                    pairs[i] = loadPublicKey(pubkeys[i]);
                    if (pairs[i] === null)
                      return 1;
                  }
                  let point = pairs[0].getPublic();
                  for (let i = 1; i < pairs.length; ++i)
                    point = point.add(pairs[i].pub);
                  if (point.isInfinity())
                    return 2;
                  savePublicKey(output, point);
                  return 0;
                },
                publicKeyTweakAdd(output, pubkey, tweak) {
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 1;
                  tweak = new BN(tweak);
                  if (tweak.cmp(ecparams.n) >= 0)
                    return 2;
                  const point = pair.getPublic().add(ecparams.g.mul(tweak));
                  if (point.isInfinity())
                    return 2;
                  savePublicKey(output, point);
                  return 0;
                },
                publicKeyTweakMul(output, pubkey, tweak) {
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 1;
                  tweak = new BN(tweak);
                  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero())
                    return 2;
                  const point = pair.getPublic().mul(tweak);
                  savePublicKey(output, point);
                  return 0;
                },
                signatureNormalize(sig) {
                  const r = new BN(sig.subarray(0, 32));
                  const s = new BN(sig.subarray(32, 64));
                  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0)
                    return 1;
                  if (s.cmp(ec.nh) === 1) {
                    sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, "be", 32), 32);
                  }
                  return 0;
                },
                // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
                // Adapted for Uint8Array instead Buffer
                signatureExport(obj, sig) {
                  const sigR = sig.subarray(0, 32);
                  const sigS = sig.subarray(32, 64);
                  if (new BN(sigR).cmp(ecparams.n) >= 0)
                    return 1;
                  if (new BN(sigS).cmp(ecparams.n) >= 0)
                    return 1;
                  const { output } = obj;
                  let r = output.subarray(4, 4 + 33);
                  r[0] = 0;
                  r.set(sigR, 1);
                  let lenR = 33;
                  let posR = 0;
                  for (; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR)
                    ;
                  r = r.subarray(posR);
                  if (r[0] & 128)
                    return 1;
                  if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
                    return 1;
                  let s = output.subarray(6 + 33, 6 + 33 + 33);
                  s[0] = 0;
                  s.set(sigS, 1);
                  let lenS = 33;
                  let posS = 0;
                  for (; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS)
                    ;
                  s = s.subarray(posS);
                  if (s[0] & 128)
                    return 1;
                  if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
                    return 1;
                  obj.outputlen = 6 + lenR + lenS;
                  output[0] = 48;
                  output[1] = obj.outputlen - 2;
                  output[2] = 2;
                  output[3] = r.length;
                  output.set(r, 4);
                  output[4 + lenR] = 2;
                  output[5 + lenR] = s.length;
                  output.set(s, 6 + lenR);
                  return 0;
                },
                // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
                // Adapted for Uint8Array instead Buffer
                signatureImport(output, sig) {
                  if (sig.length < 8)
                    return 1;
                  if (sig.length > 72)
                    return 1;
                  if (sig[0] !== 48)
                    return 1;
                  if (sig[1] !== sig.length - 2)
                    return 1;
                  if (sig[2] !== 2)
                    return 1;
                  const lenR = sig[3];
                  if (lenR === 0)
                    return 1;
                  if (5 + lenR >= sig.length)
                    return 1;
                  if (sig[4 + lenR] !== 2)
                    return 1;
                  const lenS = sig[5 + lenR];
                  if (lenS === 0)
                    return 1;
                  if (6 + lenR + lenS !== sig.length)
                    return 1;
                  if (sig[4] & 128)
                    return 1;
                  if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128))
                    return 1;
                  if (sig[lenR + 6] & 128)
                    return 1;
                  if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128))
                    return 1;
                  let sigR = sig.subarray(4, 4 + lenR);
                  if (sigR.length === 33 && sigR[0] === 0)
                    sigR = sigR.subarray(1);
                  if (sigR.length > 32)
                    return 1;
                  let sigS = sig.subarray(6 + lenR);
                  if (sigS.length === 33 && sigS[0] === 0)
                    sigS = sigS.slice(1);
                  if (sigS.length > 32)
                    throw new Error("S length is too long");
                  let r = new BN(sigR);
                  if (r.cmp(ecparams.n) >= 0)
                    r = new BN(0);
                  let s = new BN(sig.subarray(6 + lenR));
                  if (s.cmp(ecparams.n) >= 0)
                    s = new BN(0);
                  output.set(r.toArrayLike(Uint8Array, "be", 32), 0);
                  output.set(s.toArrayLike(Uint8Array, "be", 32), 32);
                  return 0;
                },
                ecdsaSign(obj, message, seckey, data, noncefn) {
                  if (noncefn) {
                    const _noncefn = noncefn;
                    noncefn = (counter) => {
                      const nonce = _noncefn(message, seckey, null, data, counter);
                      const isValid = nonce instanceof Uint8Array && nonce.length === 32;
                      if (!isValid)
                        throw new Error("This is the way");
                      return new BN(nonce);
                    };
                  }
                  const d = new BN(seckey);
                  if (d.cmp(ecparams.n) >= 0 || d.isZero())
                    return 1;
                  let sig;
                  try {
                    sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data });
                  } catch (err) {
                    return 1;
                  }
                  obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
                  obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
                  obj.recid = sig.recoveryParam;
                  return 0;
                },
                ecdsaVerify(sig, msg32, pubkey) {
                  const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
                  const sigr = new BN(sigObj.r);
                  const sigs = new BN(sigObj.s);
                  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
                    return 1;
                  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero())
                    return 3;
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 2;
                  const point = pair.getPublic();
                  const isValid = ec.verify(msg32, sigObj, point);
                  return isValid ? 0 : 3;
                },
                ecdsaRecover(output, sig, recid, msg32) {
                  const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
                  const sigr = new BN(sigObj.r);
                  const sigs = new BN(sigObj.s);
                  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0)
                    return 1;
                  if (sigr.isZero() || sigs.isZero())
                    return 2;
                  let point;
                  try {
                    point = ec.recoverPubKey(msg32, sigObj, recid);
                  } catch (err) {
                    return 2;
                  }
                  savePublicKey(output, point);
                  return 0;
                },
                ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
                  const pair = loadPublicKey(pubkey);
                  if (pair === null)
                    return 1;
                  const scalar = new BN(seckey);
                  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero())
                    return 2;
                  const point = pair.getPublic().mul(scalar);
                  if (hashfn === void 0) {
                    const data2 = point.encode(null, true);
                    const sha256 = ec.hash().update(data2).digest();
                    for (let i = 0; i < 32; ++i)
                      output[i] = sha256[i];
                  } else {
                    if (!xbuf)
                      xbuf = new Uint8Array(32);
                    const x = point.getX().toArray("be", 32);
                    for (let i = 0; i < 32; ++i)
                      xbuf[i] = x[i];
                    if (!ybuf)
                      ybuf = new Uint8Array(32);
                    const y = point.getY().toArray("be", 32);
                    for (let i = 0; i < 32; ++i)
                      ybuf[i] = y[i];
                    const hash = hashfn(xbuf, ybuf, data);
                    const isValid = hash instanceof Uint8Array && hash.length === output.length;
                    if (!isValid)
                      return 2;
                    output.set(hash);
                  }
                  return 0;
                }
              };
            }
          });

          // node_modules/secp256k1/elliptic.js
          var require_elliptic3 = __commonJS({
            "node_modules/secp256k1/elliptic.js"(exports, module) {
              module.exports = require_lib()(require_elliptic2());
            }
          });

          // src/constants.ts
          var DOMAIN_PURCHASE_COST = 5;
          var VFX_API_BASE_URL_TESTNET = "https://data-testnet.verifiedx.io/api";
          var VFX_API_BASE_URL_MAINNET = "https://data.verifiedx.io/api";

          // node_modules/axios/lib/helpers/bind.js
          function bind(fn, thisArg) {
            return function wrap() {
              return fn.apply(thisArg, arguments);
            };
          }

          // node_modules/axios/lib/utils.js
          var { toString } = Object.prototype;
          var { getPrototypeOf } = Object;
          var { iterator, toStringTag } = Symbol;
          var kindOf = ((cache) => (thing) => {
            const str = toString.call(thing);
            return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
          })(/* @__PURE__ */ Object.create(null));
          var kindOfTest = (type) => {
            type = type.toLowerCase();
            return (thing) => kindOf(thing) === type;
          };
          var typeOfTest = (type) => (thing) => typeof thing === type;
          var { isArray } = Array;
          var isUndefined = typeOfTest("undefined");
          function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
          }
          var isArrayBuffer = kindOfTest("ArrayBuffer");
          function isArrayBufferView(val) {
            let result;
            if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
              result = ArrayBuffer.isView(val);
            } else {
              result = val && val.buffer && isArrayBuffer(val.buffer);
            }
            return result;
          }
          var isString = typeOfTest("string");
          var isFunction = typeOfTest("function");
          var isNumber = typeOfTest("number");
          var isObject = (thing) => thing !== null && typeof thing === "object";
          var isBoolean = (thing) => thing === true || thing === false;
          var isPlainObject = (val) => {
            if (kindOf(val) !== "object") {
              return false;
            }
            const prototype3 = getPrototypeOf(val);
            return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(toStringTag in val) && !(iterator in val);
          };
          var isDate = kindOfTest("Date");
          var isFile = kindOfTest("File");
          var isBlob = kindOfTest("Blob");
          var isFileList = kindOfTest("FileList");
          var isStream = (val) => isObject(val) && isFunction(val.pipe);
          var isFormData = (thing) => {
            let kind;
            return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
              kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
          };
          var isURLSearchParams = kindOfTest("URLSearchParams");
          var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
          var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
          function forEach(obj, fn, { allOwnKeys = false } = {}) {
            if (obj === null || typeof obj === "undefined") {
              return;
            }
            let i;
            let l;
            if (typeof obj !== "object") {
              obj = [obj];
            }
            if (isArray(obj)) {
              for (i = 0, l = obj.length; i < l; i++) {
                fn.call(null, obj[i], i, obj);
              }
            } else {
              const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
              const len = keys.length;
              let key;
              for (i = 0; i < len; i++) {
                key = keys[i];
                fn.call(null, obj[key], key, obj);
              }
            }
          }
          function findKey(obj, key) {
            key = key.toLowerCase();
            const keys = Object.keys(obj);
            let i = keys.length;
            let _key;
            while (i-- > 0) {
              _key = keys[i];
              if (key === _key.toLowerCase()) {
                return _key;
              }
            }
            return null;
          }
          var _global = (() => {
            if (typeof globalThis !== "undefined")
              return globalThis;
            return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
          })();
          var isContextDefined = (context) => !isUndefined(context) && context !== _global;
          function merge() {
            const { caseless } = isContextDefined(this) && this || {};
            const result = {};
            const assignValue = (val, key) => {
              const targetKey = caseless && findKey(result, key) || key;
              if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
                result[targetKey] = merge(result[targetKey], val);
              } else if (isPlainObject(val)) {
                result[targetKey] = merge({}, val);
              } else if (isArray(val)) {
                result[targetKey] = val.slice();
              } else {
                result[targetKey] = val;
              }
            };
            for (let i = 0, l = arguments.length; i < l; i++) {
              arguments[i] && forEach(arguments[i], assignValue);
            }
            return result;
          }
          var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
            forEach(b, (val, key) => {
              if (thisArg && isFunction(val)) {
                a[key] = bind(val, thisArg);
              } else {
                a[key] = val;
              }
            }, { allOwnKeys });
            return a;
          };
          var stripBOM = (content) => {
            if (content.charCodeAt(0) === 65279) {
              content = content.slice(1);
            }
            return content;
          };
          var inherits = (constructor, superConstructor, props, descriptors2) => {
            constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
            constructor.prototype.constructor = constructor;
            Object.defineProperty(constructor, "super", {
              value: superConstructor.prototype
            });
            props && Object.assign(constructor.prototype, props);
          };
          var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
            let props;
            let i;
            let prop;
            const merged = {};
            destObj = destObj || {};
            if (sourceObj == null)
              return destObj;
            do {
              props = Object.getOwnPropertyNames(sourceObj);
              i = props.length;
              while (i-- > 0) {
                prop = props[i];
                if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
                  destObj[prop] = sourceObj[prop];
                  merged[prop] = true;
                }
              }
              sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
            } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
            return destObj;
          };
          var endsWith = (str, searchString, position) => {
            str = String(str);
            if (position === void 0 || position > str.length) {
              position = str.length;
            }
            position -= searchString.length;
            const lastIndex = str.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
          };
          var toArray = (thing) => {
            if (!thing)
              return null;
            if (isArray(thing))
              return thing;
            let i = thing.length;
            if (!isNumber(i))
              return null;
            const arr = new Array(i);
            while (i-- > 0) {
              arr[i] = thing[i];
            }
            return arr;
          };
          var isTypedArray = ((TypedArray) => {
            return (thing) => {
              return TypedArray && thing instanceof TypedArray;
            };
          })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
          var forEachEntry = (obj, fn) => {
            const generator = obj && obj[iterator];
            const _iterator = generator.call(obj);
            let result;
            while ((result = _iterator.next()) && !result.done) {
              const pair = result.value;
              fn.call(obj, pair[0], pair[1]);
            }
          };
          var matchAll = (regExp, str) => {
            let matches;
            const arr = [];
            while ((matches = regExp.exec(str)) !== null) {
              arr.push(matches);
            }
            return arr;
          };
          var isHTMLForm = kindOfTest("HTMLFormElement");
          var toCamelCase = (str) => {
            return str.toLowerCase().replace(
              /[-_\s]([a-z\d])(\w*)/g,
              function replacer(m, p1, p2) {
                return p1.toUpperCase() + p2;
              }
            );
          };
          var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
          var isRegExp = kindOfTest("RegExp");
          var reduceDescriptors = (obj, reducer) => {
            const descriptors2 = Object.getOwnPropertyDescriptors(obj);
            const reducedDescriptors = {};
            forEach(descriptors2, (descriptor, name) => {
              let ret;
              if ((ret = reducer(descriptor, name, obj)) !== false) {
                reducedDescriptors[name] = ret || descriptor;
              }
            });
            Object.defineProperties(obj, reducedDescriptors);
          };
          var freezeMethods = (obj) => {
            reduceDescriptors(obj, (descriptor, name) => {
              if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
                return false;
              }
              const value = obj[name];
              if (!isFunction(value))
                return;
              descriptor.enumerable = false;
              if ("writable" in descriptor) {
                descriptor.writable = false;
                return;
              }
              if (!descriptor.set) {
                descriptor.set = () => {
                  throw Error("Can not rewrite read-only method '" + name + "'");
                };
              }
            });
          };
          var toObjectSet = (arrayOrString, delimiter) => {
            const obj = {};
            const define2 = (arr) => {
              arr.forEach((value) => {
                obj[value] = true;
              });
            };
            isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
            return obj;
          };
          var noop = () => {
          };
          var toFiniteNumber = (value, defaultValue) => {
            return value != null && Number.isFinite(value = +value) ? value : defaultValue;
          };
          function isSpecCompliantForm(thing) {
            return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
          }
          var toJSONObject = (obj) => {
            const stack = new Array(10);
            const visit = (source, i) => {
              if (isObject(source)) {
                if (stack.indexOf(source) >= 0) {
                  return;
                }
                if (!("toJSON" in source)) {
                  stack[i] = source;
                  const target = isArray(source) ? [] : {};
                  forEach(source, (value, key) => {
                    const reducedValue = visit(value, i + 1);
                    !isUndefined(reducedValue) && (target[key] = reducedValue);
                  });
                  stack[i] = void 0;
                  return target;
                }
              }
              return source;
            };
            return visit(obj, 0);
          };
          var isAsyncFn = kindOfTest("AsyncFunction");
          var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
          var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
            if (setImmediateSupported) {
              return setImmediate;
            }
            return postMessageSupported ? ((token, callbacks) => {
              _global.addEventListener("message", ({ source, data }) => {
                if (source === _global && data === token) {
                  callbacks.length && callbacks.shift()();
                }
              }, false);
              return (cb) => {
                callbacks.push(cb);
                _global.postMessage(token, "*");
              };
            })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
          })(
            typeof setImmediate === "function",
            isFunction(_global.postMessage)
          );
          var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
          var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
          var utils_default = {
            isArray,
            isArrayBuffer,
            isBuffer,
            isFormData,
            isArrayBufferView,
            isString,
            isNumber,
            isBoolean,
            isObject,
            isPlainObject,
            isReadableStream,
            isRequest,
            isResponse,
            isHeaders,
            isUndefined,
            isDate,
            isFile,
            isBlob,
            isRegExp,
            isFunction,
            isStream,
            isURLSearchParams,
            isTypedArray,
            isFileList,
            forEach,
            merge,
            extend,
            trim,
            stripBOM,
            inherits,
            toFlatObject,
            kindOf,
            kindOfTest,
            endsWith,
            toArray,
            forEachEntry,
            matchAll,
            isHTMLForm,
            hasOwnProperty,
            hasOwnProp: hasOwnProperty,
            // an alias to avoid ESLint no-prototype-builtins detection
            reduceDescriptors,
            freezeMethods,
            toObjectSet,
            toCamelCase,
            noop,
            toFiniteNumber,
            findKey,
            global: _global,
            isContextDefined,
            isSpecCompliantForm,
            toJSONObject,
            isAsyncFn,
            isThenable,
            setImmediate: _setImmediate,
            asap,
            isIterable
          };

          // node_modules/axios/lib/core/AxiosError.js
          function AxiosError(message, code, config, request, response) {
            Error.call(this);
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            } else {
              this.stack = new Error().stack;
            }
            this.message = message;
            this.name = "AxiosError";
            code && (this.code = code);
            config && (this.config = config);
            request && (this.request = request);
            if (response) {
              this.response = response;
              this.status = response.status ? response.status : null;
            }
          }
          utils_default.inherits(AxiosError, Error, {
            toJSON: function toJSON() {
              return {
                // Standard
                message: this.message,
                name: this.name,
                // Microsoft
                description: this.description,
                number: this.number,
                // Mozilla
                fileName: this.fileName,
                lineNumber: this.lineNumber,
                columnNumber: this.columnNumber,
                stack: this.stack,
                // Axios
                config: utils_default.toJSONObject(this.config),
                code: this.code,
                status: this.status
              };
            }
          });
          var prototype = AxiosError.prototype;
          var descriptors = {};
          [
            "ERR_BAD_OPTION_VALUE",
            "ERR_BAD_OPTION",
            "ECONNABORTED",
            "ETIMEDOUT",
            "ERR_NETWORK",
            "ERR_FR_TOO_MANY_REDIRECTS",
            "ERR_DEPRECATED",
            "ERR_BAD_RESPONSE",
            "ERR_BAD_REQUEST",
            "ERR_CANCELED",
            "ERR_NOT_SUPPORT",
            "ERR_INVALID_URL"
            // eslint-disable-next-line func-names
          ].forEach((code) => {
            descriptors[code] = { value: code };
          });
          Object.defineProperties(AxiosError, descriptors);
          Object.defineProperty(prototype, "isAxiosError", { value: true });
          AxiosError.from = (error, code, config, request, response, customProps) => {
            const axiosError = Object.create(prototype);
            utils_default.toFlatObject(error, axiosError, function filter2(obj) {
              return obj !== Error.prototype;
            }, (prop) => {
              return prop !== "isAxiosError";
            });
            AxiosError.call(axiosError, error.message, code, config, request, response);
            axiosError.cause = error;
            axiosError.name = error.name;
            customProps && Object.assign(axiosError, customProps);
            return axiosError;
          };
          var AxiosError_default = AxiosError;

          // node_modules/axios/lib/helpers/null.js
          var null_default = null;

          // node_modules/axios/lib/helpers/toFormData.js
          function isVisitable(thing) {
            return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
          }
          function removeBrackets(key) {
            return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
          }
          function renderKey(path, key, dots) {
            if (!path)
              return key;
            return path.concat(key).map(function each(token, i) {
              token = removeBrackets(token);
              return !dots && i ? "[" + token + "]" : token;
            }).join(dots ? "." : "");
          }
          function isFlatArray(arr) {
            return utils_default.isArray(arr) && !arr.some(isVisitable);
          }
          var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
            return /^is[A-Z]/.test(prop);
          });
          function toFormData(obj, formData, options) {
            if (!utils_default.isObject(obj)) {
              throw new TypeError("target must be an object");
            }
            formData = formData || new (null_default || FormData)();
            options = utils_default.toFlatObject(options, {
              metaTokens: true,
              dots: false,
              indexes: false
            }, false, function defined(option, source) {
              return !utils_default.isUndefined(source[option]);
            });
            const metaTokens = options.metaTokens;
            const visitor = options.visitor || defaultVisitor;
            const dots = options.dots;
            const indexes = options.indexes;
            const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
            const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
            if (!utils_default.isFunction(visitor)) {
              throw new TypeError("visitor must be a function");
            }
            function convertValue(value) {
              if (value === null)
                return "";
              if (utils_default.isDate(value)) {
                return value.toISOString();
              }
              if (!useBlob && utils_default.isBlob(value)) {
                throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
              }
              if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
                return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
              }
              return value;
            }
            function defaultVisitor(value, key, path) {
              let arr = value;
              if (value && !path && typeof value === "object") {
                if (utils_default.endsWith(key, "{}")) {
                  key = metaTokens ? key : key.slice(0, -2);
                  value = JSON.stringify(value);
                } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
                  key = removeBrackets(key);
                  arr.forEach(function each(el, index) {
                    !(utils_default.isUndefined(el) || el === null) && formData.append(
                      // eslint-disable-next-line no-nested-ternary
                      indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                      convertValue(el)
                    );
                  });
                  return false;
                }
              }
              if (isVisitable(value)) {
                return true;
              }
              formData.append(renderKey(path, key, dots), convertValue(value));
              return false;
            }
            const stack = [];
            const exposedHelpers = Object.assign(predicates, {
              defaultVisitor,
              convertValue,
              isVisitable
            });
            function build(value, path) {
              if (utils_default.isUndefined(value))
                return;
              if (stack.indexOf(value) !== -1) {
                throw Error("Circular reference detected in " + path.join("."));
              }
              stack.push(value);
              utils_default.forEach(value, function each(el, key) {
                const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
                  formData,
                  el,
                  utils_default.isString(key) ? key.trim() : key,
                  path,
                  exposedHelpers
                );
                if (result === true) {
                  build(el, path ? path.concat(key) : [key]);
                }
              });
              stack.pop();
            }
            if (!utils_default.isObject(obj)) {
              throw new TypeError("data must be an object");
            }
            build(obj);
            return formData;
          }
          var toFormData_default = toFormData;

          // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
          function encode(str) {
            const charMap = {
              "!": "%21",
              "'": "%27",
              "(": "%28",
              ")": "%29",
              "~": "%7E",
              "%20": "+",
              "%00": "\0"
            };
            return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
              return charMap[match];
            });
          }
          function AxiosURLSearchParams(params, options) {
            this._pairs = [];
            params && toFormData_default(params, this, options);
          }
          var prototype2 = AxiosURLSearchParams.prototype;
          prototype2.append = function append(name, value) {
            this._pairs.push([name, value]);
          };
          prototype2.toString = function toString2(encoder) {
            const _encode = encoder ? function (value) {
              return encoder.call(this, value, encode);
            } : encode;
            return this._pairs.map(function each(pair) {
              return _encode(pair[0]) + "=" + _encode(pair[1]);
            }, "").join("&");
          };
          var AxiosURLSearchParams_default = AxiosURLSearchParams;

          // node_modules/axios/lib/helpers/buildURL.js
          function encode2(val) {
            return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
          }
          function buildURL(url, params, options) {
            if (!params) {
              return url;
            }
            const _encode = options && options.encode || encode2;
            if (utils_default.isFunction(options)) {
              options = {
                serialize: options
              };
            }
            const serializeFn = options && options.serialize;
            let serializedParams;
            if (serializeFn) {
              serializedParams = serializeFn(params, options);
            } else {
              serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
            }
            if (serializedParams) {
              const hashmarkIndex = url.indexOf("#");
              if (hashmarkIndex !== -1) {
                url = url.slice(0, hashmarkIndex);
              }
              url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
            }
            return url;
          }

          // node_modules/axios/lib/core/InterceptorManager.js
          var InterceptorManager = class {
            constructor() {
              this.handlers = [];
            }
            /**
             * Add a new interceptor to the stack
             *
             * @param {Function} fulfilled The function to handle `then` for a `Promise`
             * @param {Function} rejected The function to handle `reject` for a `Promise`
             *
             * @return {Number} An ID used to remove interceptor later
             */
            use(fulfilled, rejected, options) {
              this.handlers.push({
                fulfilled,
                rejected,
                synchronous: options ? options.synchronous : false,
                runWhen: options ? options.runWhen : null
              });
              return this.handlers.length - 1;
            }
            /**
             * Remove an interceptor from the stack
             *
             * @param {Number} id The ID that was returned by `use`
             *
             * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
             */
            eject(id) {
              if (this.handlers[id]) {
                this.handlers[id] = null;
              }
            }
            /**
             * Clear all interceptors from the stack
             *
             * @returns {void}
             */
            clear() {
              if (this.handlers) {
                this.handlers = [];
              }
            }
            /**
             * Iterate over all the registered interceptors
             *
             * This method is particularly useful for skipping over any
             * interceptors that may have become `null` calling `eject`.
             *
             * @param {Function} fn The function to call for each interceptor
             *
             * @returns {void}
             */
            forEach(fn) {
              utils_default.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                  fn(h);
                }
              });
            }
          };
          var InterceptorManager_default = InterceptorManager;

          // node_modules/axios/lib/defaults/transitional.js
          var transitional_default = {
            silentJSONParsing: true,
            forcedJSONParsing: true,
            clarifyTimeoutError: false
          };

          // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
          var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

          // node_modules/axios/lib/platform/browser/classes/FormData.js
          var FormData_default = typeof FormData !== "undefined" ? FormData : null;

          // node_modules/axios/lib/platform/browser/classes/Blob.js
          var Blob_default = typeof Blob !== "undefined" ? Blob : null;

          // node_modules/axios/lib/platform/browser/index.js
          var browser_default = {
            isBrowser: true,
            classes: {
              URLSearchParams: URLSearchParams_default,
              FormData: FormData_default,
              Blob: Blob_default
            },
            protocols: ["http", "https", "file", "blob", "url", "data"]
          };

          // node_modules/axios/lib/platform/common/utils.js
          var utils_exports = {};
          __export(utils_exports, {
            hasBrowserEnv: () => hasBrowserEnv,
            hasStandardBrowserEnv: () => hasStandardBrowserEnv,
            hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
            navigator: () => _navigator,
            origin: () => origin
          });
          var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
          var _navigator = typeof navigator === "object" && navigator || void 0;
          var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
          var hasStandardBrowserWebWorkerEnv = (() => {
            return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
              self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
          })();
          var origin = hasBrowserEnv && window.location.href || "http://localhost";

          // node_modules/axios/lib/platform/index.js
          var platform_default = {
            ...utils_exports,
            ...browser_default
          };

          // node_modules/axios/lib/helpers/toURLEncodedForm.js
          function toURLEncodedForm(data, options) {
            return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
              visitor: function (value, key, path, helpers) {
                if (platform_default.isNode && utils_default.isBuffer(value)) {
                  this.append(key, value.toString("base64"));
                  return false;
                }
                return helpers.defaultVisitor.apply(this, arguments);
              }
            }, options));
          }

          // node_modules/axios/lib/helpers/formDataToJSON.js
          function parsePropPath(name) {
            return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
              return match[0] === "[]" ? "" : match[1] || match[0];
            });
          }
          function arrayToObject(arr) {
            const obj = {};
            const keys = Object.keys(arr);
            let i;
            const len = keys.length;
            let key;
            for (i = 0; i < len; i++) {
              key = keys[i];
              obj[key] = arr[key];
            }
            return obj;
          }
          function formDataToJSON(formData) {
            function buildPath(path, value, target, index) {
              let name = path[index++];
              if (name === "__proto__")
                return true;
              const isNumericKey = Number.isFinite(+name);
              const isLast = index >= path.length;
              name = !name && utils_default.isArray(target) ? target.length : name;
              if (isLast) {
                if (utils_default.hasOwnProp(target, name)) {
                  target[name] = [target[name], value];
                } else {
                  target[name] = value;
                }
                return !isNumericKey;
              }
              if (!target[name] || !utils_default.isObject(target[name])) {
                target[name] = [];
              }
              const result = buildPath(path, value, target[name], index);
              if (result && utils_default.isArray(target[name])) {
                target[name] = arrayToObject(target[name]);
              }
              return !isNumericKey;
            }
            if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
              const obj = {};
              utils_default.forEachEntry(formData, (name, value) => {
                buildPath(parsePropPath(name), value, obj, 0);
              });
              return obj;
            }
            return null;
          }
          var formDataToJSON_default = formDataToJSON;

          // node_modules/axios/lib/defaults/index.js
          function stringifySafely(rawValue, parser, encoder) {
            if (utils_default.isString(rawValue)) {
              try {
                (parser || JSON.parse)(rawValue);
                return utils_default.trim(rawValue);
              } catch (e) {
                if (e.name !== "SyntaxError") {
                  throw e;
                }
              }
            }
            return (encoder || JSON.stringify)(rawValue);
          }
          var defaults = {
            transitional: transitional_default,
            adapter: ["xhr", "http", "fetch"],
            transformRequest: [function transformRequest(data, headers) {
              const contentType = headers.getContentType() || "";
              const hasJSONContentType = contentType.indexOf("application/json") > -1;
              const isObjectPayload = utils_default.isObject(data);
              if (isObjectPayload && utils_default.isHTMLForm(data)) {
                data = new FormData(data);
              }
              const isFormData2 = utils_default.isFormData(data);
              if (isFormData2) {
                return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
              }
              if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
                return data;
              }
              if (utils_default.isArrayBufferView(data)) {
                return data.buffer;
              }
              if (utils_default.isURLSearchParams(data)) {
                headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
                return data.toString();
              }
              let isFileList2;
              if (isObjectPayload) {
                if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
                  return toURLEncodedForm(data, this.formSerializer).toString();
                }
                if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
                  const _FormData = this.env && this.env.FormData;
                  return toFormData_default(
                    isFileList2 ? { "files[]": data } : data,
                    _FormData && new _FormData(),
                    this.formSerializer
                  );
                }
              }
              if (isObjectPayload || hasJSONContentType) {
                headers.setContentType("application/json", false);
                return stringifySafely(data);
              }
              return data;
            }],
            transformResponse: [function transformResponse(data) {
              const transitional2 = this.transitional || defaults.transitional;
              const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
              const JSONRequested = this.responseType === "json";
              if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
                return data;
              }
              if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
                const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
                const strictJSONParsing = !silentJSONParsing && JSONRequested;
                try {
                  return JSON.parse(data);
                } catch (e) {
                  if (strictJSONParsing) {
                    if (e.name === "SyntaxError") {
                      throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
                    }
                    throw e;
                  }
                }
              }
              return data;
            }],
            /**
             * A timeout in milliseconds to abort a request. If set to 0 (default) a
             * timeout is not created.
             */
            timeout: 0,
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            maxContentLength: -1,
            maxBodyLength: -1,
            env: {
              FormData: platform_default.classes.FormData,
              Blob: platform_default.classes.Blob
            },
            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            },
            headers: {
              common: {
                "Accept": "application/json, text/plain, */*",
                "Content-Type": void 0
              }
            }
          };
          utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
            defaults.headers[method] = {};
          });
          var defaults_default = defaults;

          // node_modules/axios/lib/helpers/parseHeaders.js
          var ignoreDuplicateOf = utils_default.toObjectSet([
            "age",
            "authorization",
            "content-length",
            "content-type",
            "etag",
            "expires",
            "from",
            "host",
            "if-modified-since",
            "if-unmodified-since",
            "last-modified",
            "location",
            "max-forwards",
            "proxy-authorization",
            "referer",
            "retry-after",
            "user-agent"
          ]);
          var parseHeaders_default = (rawHeaders) => {
            const parsed = {};
            let key;
            let val;
            let i;
            rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
              i = line.indexOf(":");
              key = line.substring(0, i).trim().toLowerCase();
              val = line.substring(i + 1).trim();
              if (!key || parsed[key] && ignoreDuplicateOf[key]) {
                return;
              }
              if (key === "set-cookie") {
                if (parsed[key]) {
                  parsed[key].push(val);
                } else {
                  parsed[key] = [val];
                }
              } else {
                parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
              }
            });
            return parsed;
          };

          // node_modules/axios/lib/core/AxiosHeaders.js
          var $internals = Symbol("internals");
          function normalizeHeader(header) {
            return header && String(header).trim().toLowerCase();
          }
          function normalizeValue(value) {
            if (value === false || value == null) {
              return value;
            }
            return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
          }
          function parseTokens(str) {
            const tokens = /* @__PURE__ */ Object.create(null);
            const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
            let match;
            while (match = tokensRE.exec(str)) {
              tokens[match[1]] = match[2];
            }
            return tokens;
          }
          var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
          function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
            if (utils_default.isFunction(filter2)) {
              return filter2.call(this, value, header);
            }
            if (isHeaderNameFilter) {
              value = header;
            }
            if (!utils_default.isString(value))
              return;
            if (utils_default.isString(filter2)) {
              return value.indexOf(filter2) !== -1;
            }
            if (utils_default.isRegExp(filter2)) {
              return filter2.test(value);
            }
          }
          function formatHeader(header) {
            return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
              return char.toUpperCase() + str;
            });
          }
          function buildAccessors(obj, header) {
            const accessorName = utils_default.toCamelCase(" " + header);
            ["get", "set", "has"].forEach((methodName) => {
              Object.defineProperty(obj, methodName + accessorName, {
                value: function (arg1, arg2, arg3) {
                  return this[methodName].call(this, header, arg1, arg2, arg3);
                },
                configurable: true
              });
            });
          }
          var AxiosHeaders = class {
            constructor(headers) {
              headers && this.set(headers);
            }
            set(header, valueOrRewrite, rewrite) {
              const self2 = this;
              function setHeader(_value, _header, _rewrite) {
                const lHeader = normalizeHeader(_header);
                if (!lHeader) {
                  throw new Error("header name must be a non-empty string");
                }
                const key = utils_default.findKey(self2, lHeader);
                if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
                  self2[key || _header] = normalizeValue(_value);
                }
              }
              const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
              if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
                setHeaders(header, valueOrRewrite);
              } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
                setHeaders(parseHeaders_default(header), valueOrRewrite);
              } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
                let obj = {}, dest, key;
                for (const entry of header) {
                  if (!utils_default.isArray(entry)) {
                    throw TypeError("Object iterator must return a key-value pair");
                  }
                  obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
                }
                setHeaders(obj, valueOrRewrite);
              } else {
                header != null && setHeader(valueOrRewrite, header, rewrite);
              }
              return this;
            }
            get(header, parser) {
              header = normalizeHeader(header);
              if (header) {
                const key = utils_default.findKey(this, header);
                if (key) {
                  const value = this[key];
                  if (!parser) {
                    return value;
                  }
                  if (parser === true) {
                    return parseTokens(value);
                  }
                  if (utils_default.isFunction(parser)) {
                    return parser.call(this, value, key);
                  }
                  if (utils_default.isRegExp(parser)) {
                    return parser.exec(value);
                  }
                  throw new TypeError("parser must be boolean|regexp|function");
                }
              }
            }
            has(header, matcher) {
              header = normalizeHeader(header);
              if (header) {
                const key = utils_default.findKey(this, header);
                return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
              }
              return false;
            }
            delete(header, matcher) {
              const self2 = this;
              let deleted = false;
              function deleteHeader(_header) {
                _header = normalizeHeader(_header);
                if (_header) {
                  const key = utils_default.findKey(self2, _header);
                  if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
                    delete self2[key];
                    deleted = true;
                  }
                }
              }
              if (utils_default.isArray(header)) {
                header.forEach(deleteHeader);
              } else {
                deleteHeader(header);
              }
              return deleted;
            }
            clear(matcher) {
              const keys = Object.keys(this);
              let i = keys.length;
              let deleted = false;
              while (i--) {
                const key = keys[i];
                if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
                  delete this[key];
                  deleted = true;
                }
              }
              return deleted;
            }
            normalize(format) {
              const self2 = this;
              const headers = {};
              utils_default.forEach(this, (value, header) => {
                const key = utils_default.findKey(headers, header);
                if (key) {
                  self2[key] = normalizeValue(value);
                  delete self2[header];
                  return;
                }
                const normalized = format ? formatHeader(header) : String(header).trim();
                if (normalized !== header) {
                  delete self2[header];
                }
                self2[normalized] = normalizeValue(value);
                headers[normalized] = true;
              });
              return this;
            }
            concat(...targets) {
              return this.constructor.concat(this, ...targets);
            }
            toJSON(asStrings) {
              const obj = /* @__PURE__ */ Object.create(null);
              utils_default.forEach(this, (value, header) => {
                value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
              });
              return obj;
            }
            [Symbol.iterator]() {
              return Object.entries(this.toJSON())[Symbol.iterator]();
            }
            toString() {
              return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
            }
            getSetCookie() {
              return this.get("set-cookie") || [];
            }
            get [Symbol.toStringTag]() {
              return "AxiosHeaders";
            }
            static from(thing) {
              return thing instanceof this ? thing : new this(thing);
            }
            static concat(first, ...targets) {
              const computed = new this(first);
              targets.forEach((target) => computed.set(target));
              return computed;
            }
            static accessor(header) {
              const internals = this[$internals] = this[$internals] = {
                accessors: {}
              };
              const accessors = internals.accessors;
              const prototype3 = this.prototype;
              function defineAccessor(_header) {
                const lHeader = normalizeHeader(_header);
                if (!accessors[lHeader]) {
                  buildAccessors(prototype3, _header);
                  accessors[lHeader] = true;
                }
              }
              utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
              return this;
            }
          };
          AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
          utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
            let mapped = key[0].toUpperCase() + key.slice(1);
            return {
              get: () => value,
              set(headerValue) {
                this[mapped] = headerValue;
              }
            };
          });
          utils_default.freezeMethods(AxiosHeaders);
          var AxiosHeaders_default = AxiosHeaders;

          // node_modules/axios/lib/core/transformData.js
          function transformData(fns, response) {
            const config = this || defaults_default;
            const context = response || config;
            const headers = AxiosHeaders_default.from(context.headers);
            let data = context.data;
            utils_default.forEach(fns, function transform(fn) {
              data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
            });
            headers.normalize();
            return data;
          }

          // node_modules/axios/lib/cancel/isCancel.js
          function isCancel(value) {
            return !!(value && value.__CANCEL__);
          }

          // node_modules/axios/lib/cancel/CanceledError.js
          function CanceledError(message, config, request) {
            AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
            this.name = "CanceledError";
          }
          utils_default.inherits(CanceledError, AxiosError_default, {
            __CANCEL__: true
          });
          var CanceledError_default = CanceledError;

          // node_modules/axios/lib/core/settle.js
          function settle(resolve, reject, response) {
            const validateStatus2 = response.config.validateStatus;
            if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
              resolve(response);
            } else {
              reject(new AxiosError_default(
                "Request failed with status code " + response.status,
                [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
                response.config,
                response.request,
                response
              ));
            }
          }

          // node_modules/axios/lib/helpers/parseProtocol.js
          function parseProtocol(url) {
            const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
            return match && match[1] || "";
          }

          // node_modules/axios/lib/helpers/speedometer.js
          function speedometer(samplesCount, min) {
            samplesCount = samplesCount || 10;
            const bytes = new Array(samplesCount);
            const timestamps = new Array(samplesCount);
            let head = 0;
            let tail = 0;
            let firstSampleTS;
            min = min !== void 0 ? min : 1e3;
            return function push(chunkLength) {
              const now = Date.now();
              const startedAt = timestamps[tail];
              if (!firstSampleTS) {
                firstSampleTS = now;
              }
              bytes[head] = chunkLength;
              timestamps[head] = now;
              let i = tail;
              let bytesCount = 0;
              while (i !== head) {
                bytesCount += bytes[i++];
                i = i % samplesCount;
              }
              head = (head + 1) % samplesCount;
              if (head === tail) {
                tail = (tail + 1) % samplesCount;
              }
              if (now - firstSampleTS < min) {
                return;
              }
              const passed = startedAt && now - startedAt;
              return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
            };
          }
          var speedometer_default = speedometer;

          // node_modules/axios/lib/helpers/throttle.js
          function throttle(fn, freq) {
            let timestamp = 0;
            let threshold = 1e3 / freq;
            let lastArgs;
            let timer;
            const invoke = (args, now = Date.now()) => {
              timestamp = now;
              lastArgs = null;
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              fn.apply(null, args);
            };
            const throttled = (...args) => {
              const now = Date.now();
              const passed = now - timestamp;
              if (passed >= threshold) {
                invoke(args, now);
              } else {
                lastArgs = args;
                if (!timer) {
                  timer = setTimeout(() => {
                    timer = null;
                    invoke(lastArgs);
                  }, threshold - passed);
                }
              }
            };
            const flush = () => lastArgs && invoke(lastArgs);
            return [throttled, flush];
          }
          var throttle_default = throttle;

          // node_modules/axios/lib/helpers/progressEventReducer.js
          var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
            let bytesNotified = 0;
            const _speedometer = speedometer_default(50, 250);
            return throttle_default((e) => {
              const loaded = e.loaded;
              const total = e.lengthComputable ? e.total : void 0;
              const progressBytes = loaded - bytesNotified;
              const rate = _speedometer(progressBytes);
              const inRange = loaded <= total;
              bytesNotified = loaded;
              const data = {
                loaded,
                total,
                progress: total ? loaded / total : void 0,
                bytes: progressBytes,
                rate: rate ? rate : void 0,
                estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
                event: e,
                lengthComputable: total != null,
                [isDownloadStream ? "download" : "upload"]: true
              };
              listener(data);
            }, freq);
          };
          var progressEventDecorator = (total, throttled) => {
            const lengthComputable = total != null;
            return [(loaded) => throttled[0]({
              lengthComputable,
              total,
              loaded
            }), throttled[1]];
          };
          var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

          // node_modules/axios/lib/helpers/isURLSameOrigin.js
          var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url) => {
            url = new URL(url, platform_default.origin);
            return origin2.protocol === url.protocol && origin2.host === url.host && (isMSIE || origin2.port === url.port);
          })(
            new URL(platform_default.origin),
            platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)
          ) : () => true;

          // node_modules/axios/lib/helpers/cookies.js
          var cookies_default = platform_default.hasStandardBrowserEnv ? (
            // Standard browser envs support document.cookie
            {
              write(name, value, expires, path, domain, secure) {
                const cookie = [name + "=" + encodeURIComponent(value)];
                utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
                utils_default.isString(path) && cookie.push("path=" + path);
                utils_default.isString(domain) && cookie.push("domain=" + domain);
                secure === true && cookie.push("secure");
                document.cookie = cookie.join("; ");
              },
              read(name) {
                const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
                return match ? decodeURIComponent(match[3]) : null;
              },
              remove(name) {
                this.write(name, "", Date.now() - 864e5);
              }
            }
          ) : (
            // Non-standard browser env (web workers, react-native) lack needed support.
            {
              write() {
              },
              read() {
                return null;
              },
              remove() {
              }
            }
          );

          // node_modules/axios/lib/helpers/isAbsoluteURL.js
          function isAbsoluteURL(url) {
            return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
          }

          // node_modules/axios/lib/helpers/combineURLs.js
          function combineURLs(baseURL, relativeURL) {
            return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
          }

          // node_modules/axios/lib/core/buildFullPath.js
          function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
            let isRelativeUrl = !isAbsoluteURL(requestedURL);
            if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
              return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
          }

          // node_modules/axios/lib/core/mergeConfig.js
          var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
          function mergeConfig(config1, config2) {
            config2 = config2 || {};
            const config = {};
            function getMergedValue(target, source, prop, caseless) {
              if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
                return utils_default.merge.call({ caseless }, target, source);
              } else if (utils_default.isPlainObject(source)) {
                return utils_default.merge({}, source);
              } else if (utils_default.isArray(source)) {
                return source.slice();
              }
              return source;
            }
            function mergeDeepProperties(a, b, prop, caseless) {
              if (!utils_default.isUndefined(b)) {
                return getMergedValue(a, b, prop, caseless);
              } else if (!utils_default.isUndefined(a)) {
                return getMergedValue(void 0, a, prop, caseless);
              }
            }
            function valueFromConfig2(a, b) {
              if (!utils_default.isUndefined(b)) {
                return getMergedValue(void 0, b);
              }
            }
            function defaultToConfig2(a, b) {
              if (!utils_default.isUndefined(b)) {
                return getMergedValue(void 0, b);
              } else if (!utils_default.isUndefined(a)) {
                return getMergedValue(void 0, a);
              }
            }
            function mergeDirectKeys(a, b, prop) {
              if (prop in config2) {
                return getMergedValue(a, b);
              } else if (prop in config1) {
                return getMergedValue(void 0, a);
              }
            }
            const mergeMap = {
              url: valueFromConfig2,
              method: valueFromConfig2,
              data: valueFromConfig2,
              baseURL: defaultToConfig2,
              transformRequest: defaultToConfig2,
              transformResponse: defaultToConfig2,
              paramsSerializer: defaultToConfig2,
              timeout: defaultToConfig2,
              timeoutMessage: defaultToConfig2,
              withCredentials: defaultToConfig2,
              withXSRFToken: defaultToConfig2,
              adapter: defaultToConfig2,
              responseType: defaultToConfig2,
              xsrfCookieName: defaultToConfig2,
              xsrfHeaderName: defaultToConfig2,
              onUploadProgress: defaultToConfig2,
              onDownloadProgress: defaultToConfig2,
              decompress: defaultToConfig2,
              maxContentLength: defaultToConfig2,
              maxBodyLength: defaultToConfig2,
              beforeRedirect: defaultToConfig2,
              transport: defaultToConfig2,
              httpAgent: defaultToConfig2,
              httpsAgent: defaultToConfig2,
              cancelToken: defaultToConfig2,
              socketPath: defaultToConfig2,
              responseEncoding: defaultToConfig2,
              validateStatus: mergeDirectKeys,
              headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
            };
            utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
              const merge2 = mergeMap[prop] || mergeDeepProperties;
              const configValue = merge2(config1[prop], config2[prop], prop);
              utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
            });
            return config;
          }

          // node_modules/axios/lib/helpers/resolveConfig.js
          var resolveConfig_default = (config) => {
            const newConfig = mergeConfig({}, config);
            let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
            newConfig.headers = headers = AxiosHeaders_default.from(headers);
            newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
            if (auth) {
              headers.set(
                "Authorization",
                "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
              );
            }
            let contentType;
            if (utils_default.isFormData(data)) {
              if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
                headers.setContentType(void 0);
              } else if ((contentType = headers.getContentType()) !== false) {
                const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
                headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
              }
            }
            if (platform_default.hasStandardBrowserEnv) {
              withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
              if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
                const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
                if (xsrfValue) {
                  headers.set(xsrfHeaderName, xsrfValue);
                }
              }
            }
            return newConfig;
          };

          // node_modules/axios/lib/adapters/xhr.js
          var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
          var xhr_default = isXHRAdapterSupported && function (config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
              const _config = resolveConfig_default(config);
              let requestData = _config.data;
              const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
              let { responseType, onUploadProgress, onDownloadProgress } = _config;
              let onCanceled;
              let uploadThrottled, downloadThrottled;
              let flushUpload, flushDownload;
              function done() {
                flushUpload && flushUpload();
                flushDownload && flushDownload();
                _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
                _config.signal && _config.signal.removeEventListener("abort", onCanceled);
              }
              let request = new XMLHttpRequest();
              request.open(_config.method.toUpperCase(), _config.url, true);
              request.timeout = _config.timeout;
              function onloadend() {
                if (!request) {
                  return;
                }
                const responseHeaders = AxiosHeaders_default.from(
                  "getAllResponseHeaders" in request && request.getAllResponseHeaders()
                );
                const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
                const response = {
                  data: responseData,
                  status: request.status,
                  statusText: request.statusText,
                  headers: responseHeaders,
                  config,
                  request
                };
                settle(function _resolve(value) {
                  resolve(value);
                  done();
                }, function _reject(err) {
                  reject(err);
                  done();
                }, response);
                request = null;
              }
              if ("onloadend" in request) {
                request.onloadend = onloadend;
              } else {
                request.onreadystatechange = function handleLoad() {
                  if (!request || request.readyState !== 4) {
                    return;
                  }
                  if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
                    return;
                  }
                  setTimeout(onloadend);
                };
              }
              request.onabort = function handleAbort() {
                if (!request) {
                  return;
                }
                reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
                request = null;
              };
              request.onerror = function handleError() {
                reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
                request = null;
              };
              request.ontimeout = function handleTimeout() {
                let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
                const transitional2 = _config.transitional || transitional_default;
                if (_config.timeoutErrorMessage) {
                  timeoutErrorMessage = _config.timeoutErrorMessage;
                }
                reject(new AxiosError_default(
                  timeoutErrorMessage,
                  transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
                  config,
                  request
                ));
                request = null;
              };
              requestData === void 0 && requestHeaders.setContentType(null);
              if ("setRequestHeader" in request) {
                utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
                  request.setRequestHeader(key, val);
                });
              }
              if (!utils_default.isUndefined(_config.withCredentials)) {
                request.withCredentials = !!_config.withCredentials;
              }
              if (responseType && responseType !== "json") {
                request.responseType = _config.responseType;
              }
              if (onDownloadProgress) {
                [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
                request.addEventListener("progress", downloadThrottled);
              }
              if (onUploadProgress && request.upload) {
                [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
                request.upload.addEventListener("progress", uploadThrottled);
                request.upload.addEventListener("loadend", flushUpload);
              }
              if (_config.cancelToken || _config.signal) {
                onCanceled = (cancel) => {
                  if (!request) {
                    return;
                  }
                  reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
                  request.abort();
                  request = null;
                };
                _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
                if (_config.signal) {
                  _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
                }
              }
              const protocol = parseProtocol(_config.url);
              if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
                reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
                return;
              }
              request.send(requestData || null);
            });
          };

          // node_modules/axios/lib/helpers/composeSignals.js
          var composeSignals = (signals, timeout) => {
            const { length } = signals = signals ? signals.filter(Boolean) : [];
            if (timeout || length) {
              let controller = new AbortController();
              let aborted;
              const onabort = function (reason) {
                if (!aborted) {
                  aborted = true;
                  unsubscribe();
                  const err = reason instanceof Error ? reason : this.reason;
                  controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
                }
              };
              let timer = timeout && setTimeout(() => {
                timer = null;
                onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
              }, timeout);
              const unsubscribe = () => {
                if (signals) {
                  timer && clearTimeout(timer);
                  timer = null;
                  signals.forEach((signal2) => {
                    signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
                  });
                  signals = null;
                }
              };
              signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
              const { signal } = controller;
              signal.unsubscribe = () => utils_default.asap(unsubscribe);
              return signal;
            }
          };
          var composeSignals_default = composeSignals;

          // node_modules/axios/lib/helpers/trackStream.js
          var streamChunk = function* (chunk, chunkSize) {
            let len = chunk.byteLength;
            if (!chunkSize || len < chunkSize) {
              yield chunk;
              return;
            }
            let pos = 0;
            let end;
            while (pos < len) {
              end = pos + chunkSize;
              yield chunk.slice(pos, end);
              pos = end;
            }
          };
          var readBytes = async function* (iterable, chunkSize) {
            for await (const chunk of readStream(iterable)) {
              yield* streamChunk(chunk, chunkSize);
            }
          };
          var readStream = async function* (stream) {
            if (stream[Symbol.asyncIterator]) {
              yield* stream;
              return;
            }
            const reader = stream.getReader();
            try {
              for (; ;) {
                const { done, value } = await reader.read();
                if (done) {
                  break;
                }
                yield value;
              }
            } finally {
              await reader.cancel();
            }
          };
          var trackStream = (stream, chunkSize, onProgress, onFinish) => {
            const iterator2 = readBytes(stream, chunkSize);
            let bytes = 0;
            let done;
            let _onFinish = (e) => {
              if (!done) {
                done = true;
                onFinish && onFinish(e);
              }
            };
            return new ReadableStream({
              async pull(controller) {
                try {
                  const { done: done2, value } = await iterator2.next();
                  if (done2) {
                    _onFinish();
                    controller.close();
                    return;
                  }
                  let len = value.byteLength;
                  if (onProgress) {
                    let loadedBytes = bytes += len;
                    onProgress(loadedBytes);
                  }
                  controller.enqueue(new Uint8Array(value));
                } catch (err) {
                  _onFinish(err);
                  throw err;
                }
              },
              cancel(reason) {
                _onFinish(reason);
                return iterator2.return();
              }
            }, {
              highWaterMark: 2
            });
          };

          // node_modules/axios/lib/adapters/fetch.js
          var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
          var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
          var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
          var test = (fn, ...args) => {
            try {
              return !!fn(...args);
            } catch (e) {
              return false;
            }
          };
          var supportsRequestStream = isReadableStreamSupported && test(() => {
            let duplexAccessed = false;
            const hasContentType = new Request(platform_default.origin, {
              body: new ReadableStream(),
              method: "POST",
              get duplex() {
                duplexAccessed = true;
                return "half";
              }
            }).headers.has("Content-Type");
            return duplexAccessed && !hasContentType;
          });
          var DEFAULT_CHUNK_SIZE = 64 * 1024;
          var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
          var resolvers = {
            stream: supportsResponseStream && ((res) => res.body)
          };
          isFetchSupported && ((res) => {
            ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
              !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
                throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
              });
            });
          })(new Response());
          var getBodyLength = async (body) => {
            if (body == null) {
              return 0;
            }
            if (utils_default.isBlob(body)) {
              return body.size;
            }
            if (utils_default.isSpecCompliantForm(body)) {
              const _request = new Request(platform_default.origin, {
                method: "POST",
                body
              });
              return (await _request.arrayBuffer()).byteLength;
            }
            if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
              return body.byteLength;
            }
            if (utils_default.isURLSearchParams(body)) {
              body = body + "";
            }
            if (utils_default.isString(body)) {
              return (await encodeText(body)).byteLength;
            }
          };
          var resolveBodyLength = async (headers, body) => {
            const length = utils_default.toFiniteNumber(headers.getContentLength());
            return length == null ? getBodyLength(body) : length;
          };
          var fetch_default = isFetchSupported && (async (config) => {
            let {
              url,
              method,
              data,
              signal,
              cancelToken,
              timeout,
              onDownloadProgress,
              onUploadProgress,
              responseType,
              headers,
              withCredentials = "same-origin",
              fetchOptions
            } = resolveConfig_default(config);
            responseType = responseType ? (responseType + "").toLowerCase() : "text";
            let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
            let request;
            const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
              composedSignal.unsubscribe();
            });
            let requestContentLength;
            try {
              if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
                let _request = new Request(url, {
                  method: "POST",
                  body: data,
                  duplex: "half"
                });
                let contentTypeHeader;
                if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
                  headers.setContentType(contentTypeHeader);
                }
                if (_request.body) {
                  const [onProgress, flush] = progressEventDecorator(
                    requestContentLength,
                    progressEventReducer(asyncDecorator(onUploadProgress))
                  );
                  data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
                }
              }
              if (!utils_default.isString(withCredentials)) {
                withCredentials = withCredentials ? "include" : "omit";
              }
              const isCredentialsSupported = "credentials" in Request.prototype;
              request = new Request(url, {
                ...fetchOptions,
                signal: composedSignal,
                method: method.toUpperCase(),
                headers: headers.normalize().toJSON(),
                body: data,
                duplex: "half",
                credentials: isCredentialsSupported ? withCredentials : void 0
              });
              let response = await fetch(request);
              const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
              if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
                const options = {};
                ["status", "statusText", "headers"].forEach((prop) => {
                  options[prop] = response[prop];
                });
                const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
                const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
                  responseContentLength,
                  progressEventReducer(asyncDecorator(onDownloadProgress), true)
                ) || [];
                response = new Response(
                  trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
                    flush && flush();
                    unsubscribe && unsubscribe();
                  }),
                  options
                );
              }
              responseType = responseType || "text";
              let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
              !isStreamResponse && unsubscribe && unsubscribe();
              return await new Promise((resolve, reject) => {
                settle(resolve, reject, {
                  data: responseData,
                  headers: AxiosHeaders_default.from(response.headers),
                  status: response.status,
                  statusText: response.statusText,
                  config,
                  request
                });
              });
            } catch (err) {
              unsubscribe && unsubscribe();
              if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
                throw Object.assign(
                  new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
                  {
                    cause: err.cause || err
                  }
                );
              }
              throw AxiosError_default.from(err, err && err.code, config, request);
            }
          });

          // node_modules/axios/lib/adapters/adapters.js
          var knownAdapters = {
            http: null_default,
            xhr: xhr_default,
            fetch: fetch_default
          };
          utils_default.forEach(knownAdapters, (fn, value) => {
            if (fn) {
              try {
                Object.defineProperty(fn, "name", { value });
              } catch (e) {
              }
              Object.defineProperty(fn, "adapterName", { value });
            }
          });
          var renderReason = (reason) => `- ${reason}`;
          var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
          var adapters_default = {
            getAdapter: (adapters) => {
              adapters = utils_default.isArray(adapters) ? adapters : [adapters];
              const { length } = adapters;
              let nameOrAdapter;
              let adapter;
              const rejectedReasons = {};
              for (let i = 0; i < length; i++) {
                nameOrAdapter = adapters[i];
                let id;
                adapter = nameOrAdapter;
                if (!isResolvedHandle(nameOrAdapter)) {
                  adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
                  if (adapter === void 0) {
                    throw new AxiosError_default(`Unknown adapter '${id}'`);
                  }
                }
                if (adapter) {
                  break;
                }
                rejectedReasons[id || "#" + i] = adapter;
              }
              if (!adapter) {
                const reasons = Object.entries(rejectedReasons).map(
                  ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
                );
                let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
                throw new AxiosError_default(
                  `There is no suitable adapter to dispatch the request ` + s,
                  "ERR_NOT_SUPPORT"
                );
              }
              return adapter;
            },
            adapters: knownAdapters
          };

          // node_modules/axios/lib/core/dispatchRequest.js
          function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
              config.cancelToken.throwIfRequested();
            }
            if (config.signal && config.signal.aborted) {
              throw new CanceledError_default(null, config);
            }
          }
          function dispatchRequest(config) {
            throwIfCancellationRequested(config);
            config.headers = AxiosHeaders_default.from(config.headers);
            config.data = transformData.call(
              config,
              config.transformRequest
            );
            if (["post", "put", "patch"].indexOf(config.method) !== -1) {
              config.headers.setContentType("application/x-www-form-urlencoded", false);
            }
            const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
            return adapter(config).then(function onAdapterResolution(response) {
              throwIfCancellationRequested(config);
              response.data = transformData.call(
                config,
                config.transformResponse,
                response
              );
              response.headers = AxiosHeaders_default.from(response.headers);
              return response;
            }, function onAdapterRejection(reason) {
              if (!isCancel(reason)) {
                throwIfCancellationRequested(config);
                if (reason && reason.response) {
                  reason.response.data = transformData.call(
                    config,
                    config.transformResponse,
                    reason.response
                  );
                  reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
                }
              }
              return Promise.reject(reason);
            });
          }

          // node_modules/axios/lib/env/data.js
          var VERSION = "1.9.0";

          // node_modules/axios/lib/helpers/validator.js
          var validators = {};
          ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
            validators[type] = function validator(thing) {
              return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
            };
          });
          var deprecatedWarnings = {};
          validators.transitional = function transitional(validator, version, message) {
            function formatMessage(opt, desc) {
              return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
            }
            return (value, opt, opts) => {
              if (validator === false) {
                throw new AxiosError_default(
                  formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
                  AxiosError_default.ERR_DEPRECATED
                );
              }
              if (version && !deprecatedWarnings[opt]) {
                deprecatedWarnings[opt] = true;
                console.warn(
                  formatMessage(
                    opt,
                    " has been deprecated since v" + version + " and will be removed in the near future"
                  )
                );
              }
              return validator ? validator(value, opt, opts) : true;
            };
          };
          validators.spelling = function spelling(correctSpelling) {
            return (value, opt) => {
              console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
              return true;
            };
          };
          function assertOptions(options, schema, allowUnknown) {
            if (typeof options !== "object") {
              throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
            }
            const keys = Object.keys(options);
            let i = keys.length;
            while (i-- > 0) {
              const opt = keys[i];
              const validator = schema[opt];
              if (validator) {
                const value = options[opt];
                const result = value === void 0 || validator(value, opt, options);
                if (result !== true) {
                  throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
                }
                continue;
              }
              if (allowUnknown !== true) {
                throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
              }
            }
          }
          var validator_default = {
            assertOptions,
            validators
          };

          // node_modules/axios/lib/core/Axios.js
          var validators2 = validator_default.validators;
          var Axios = class {
            constructor(instanceConfig) {
              this.defaults = instanceConfig || {};
              this.interceptors = {
                request: new InterceptorManager_default(),
                response: new InterceptorManager_default()
              };
            }
            /**
             * Dispatch a request
             *
             * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
             * @param {?Object} config
             *
             * @returns {Promise} The Promise to be fulfilled
             */
            async request(configOrUrl, config) {
              try {
                return await this._request(configOrUrl, config);
              } catch (err) {
                if (err instanceof Error) {
                  let dummy = {};
                  Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
                  const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
                  try {
                    if (!err.stack) {
                      err.stack = stack;
                    } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                      err.stack += "\n" + stack;
                    }
                  } catch (e) {
                  }
                }
                throw err;
              }
            }
            _request(configOrUrl, config) {
              if (typeof configOrUrl === "string") {
                config = config || {};
                config.url = configOrUrl;
              } else {
                config = configOrUrl || {};
              }
              config = mergeConfig(this.defaults, config);
              const { transitional: transitional2, paramsSerializer, headers } = config;
              if (transitional2 !== void 0) {
                validator_default.assertOptions(transitional2, {
                  silentJSONParsing: validators2.transitional(validators2.boolean),
                  forcedJSONParsing: validators2.transitional(validators2.boolean),
                  clarifyTimeoutError: validators2.transitional(validators2.boolean)
                }, false);
              }
              if (paramsSerializer != null) {
                if (utils_default.isFunction(paramsSerializer)) {
                  config.paramsSerializer = {
                    serialize: paramsSerializer
                  };
                } else {
                  validator_default.assertOptions(paramsSerializer, {
                    encode: validators2.function,
                    serialize: validators2.function
                  }, true);
                }
              }
              if (config.allowAbsoluteUrls !== void 0) {
              } else if (this.defaults.allowAbsoluteUrls !== void 0) {
                config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
              } else {
                config.allowAbsoluteUrls = true;
              }
              validator_default.assertOptions(config, {
                baseUrl: validators2.spelling("baseURL"),
                withXsrfToken: validators2.spelling("withXSRFToken")
              }, true);
              config.method = (config.method || this.defaults.method || "get").toLowerCase();
              let contextHeaders = headers && utils_default.merge(
                headers.common,
                headers[config.method]
              );
              headers && utils_default.forEach(
                ["delete", "get", "head", "post", "put", "patch", "common"],
                (method) => {
                  delete headers[method];
                }
              );
              config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
              const requestInterceptorChain = [];
              let synchronousRequestInterceptors = true;
              this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
                  return;
                }
                synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
                requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
              });
              const responseInterceptorChain = [];
              this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
              });
              let promise;
              let i = 0;
              let len;
              if (!synchronousRequestInterceptors) {
                const chain = [dispatchRequest.bind(this), void 0];
                chain.unshift.apply(chain, requestInterceptorChain);
                chain.push.apply(chain, responseInterceptorChain);
                len = chain.length;
                promise = Promise.resolve(config);
                while (i < len) {
                  promise = promise.then(chain[i++], chain[i++]);
                }
                return promise;
              }
              len = requestInterceptorChain.length;
              let newConfig = config;
              i = 0;
              while (i < len) {
                const onFulfilled = requestInterceptorChain[i++];
                const onRejected = requestInterceptorChain[i++];
                try {
                  newConfig = onFulfilled(newConfig);
                } catch (error) {
                  onRejected.call(this, error);
                  break;
                }
              }
              try {
                promise = dispatchRequest.call(this, newConfig);
              } catch (error) {
                return Promise.reject(error);
              }
              i = 0;
              len = responseInterceptorChain.length;
              while (i < len) {
                promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
              }
              return promise;
            }
            getUri(config) {
              config = mergeConfig(this.defaults, config);
              const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
              return buildURL(fullPath, config.params, config.paramsSerializer);
            }
          };
          utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
            Axios.prototype[method] = function (url, config) {
              return this.request(mergeConfig(config || {}, {
                method,
                url,
                data: (config || {}).data
              }));
            };
          });
          utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
            function generateHTTPMethod(isForm) {
              return function httpMethod(url, data, config) {
                return this.request(mergeConfig(config || {}, {
                  method,
                  headers: isForm ? {
                    "Content-Type": "multipart/form-data"
                  } : {},
                  url,
                  data
                }));
              };
            }
            Axios.prototype[method] = generateHTTPMethod();
            Axios.prototype[method + "Form"] = generateHTTPMethod(true);
          });
          var Axios_default = Axios;

          // node_modules/axios/lib/cancel/CancelToken.js
          var CancelToken = class {
            constructor(executor) {
              if (typeof executor !== "function") {
                throw new TypeError("executor must be a function.");
              }
              let resolvePromise;
              this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
              });
              const token = this;
              this.promise.then((cancel) => {
                if (!token._listeners)
                  return;
                let i = token._listeners.length;
                while (i-- > 0) {
                  token._listeners[i](cancel);
                }
                token._listeners = null;
              });
              this.promise.then = (onfulfilled) => {
                let _resolve;
                const promise = new Promise((resolve) => {
                  token.subscribe(resolve);
                  _resolve = resolve;
                }).then(onfulfilled);
                promise.cancel = function reject() {
                  token.unsubscribe(_resolve);
                };
                return promise;
              };
              executor(function cancel(message, config, request) {
                if (token.reason) {
                  return;
                }
                token.reason = new CanceledError_default(message, config, request);
                resolvePromise(token.reason);
              });
            }
            /**
             * Throws a `CanceledError` if cancellation has been requested.
             */
            throwIfRequested() {
              if (this.reason) {
                throw this.reason;
              }
            }
            /**
             * Subscribe to the cancel signal
             */
            subscribe(listener) {
              if (this.reason) {
                listener(this.reason);
                return;
              }
              if (this._listeners) {
                this._listeners.push(listener);
              } else {
                this._listeners = [listener];
              }
            }
            /**
             * Unsubscribe from the cancel signal
             */
            unsubscribe(listener) {
              if (!this._listeners) {
                return;
              }
              const index = this._listeners.indexOf(listener);
              if (index !== -1) {
                this._listeners.splice(index, 1);
              }
            }
            toAbortSignal() {
              const controller = new AbortController();
              const abort = (err) => {
                controller.abort(err);
              };
              this.subscribe(abort);
              controller.signal.unsubscribe = () => this.unsubscribe(abort);
              return controller.signal;
            }
            /**
             * Returns an object that contains a new `CancelToken` and a function that, when called,
             * cancels the `CancelToken`.
             */
            static source() {
              let cancel;
              const token = new CancelToken(function executor(c) {
                cancel = c;
              });
              return {
                token,
                cancel
              };
            }
          };
          var CancelToken_default = CancelToken;

          // node_modules/axios/lib/helpers/spread.js
          function spread(callback) {
            return function wrap(arr) {
              return callback.apply(null, arr);
            };
          }

          // node_modules/axios/lib/helpers/isAxiosError.js
          function isAxiosError(payload) {
            return utils_default.isObject(payload) && payload.isAxiosError === true;
          }

          // node_modules/axios/lib/helpers/HttpStatusCode.js
          var HttpStatusCode = {
            Continue: 100,
            SwitchingProtocols: 101,
            Processing: 102,
            EarlyHints: 103,
            Ok: 200,
            Created: 201,
            Accepted: 202,
            NonAuthoritativeInformation: 203,
            NoContent: 204,
            ResetContent: 205,
            PartialContent: 206,
            MultiStatus: 207,
            AlreadyReported: 208,
            ImUsed: 226,
            MultipleChoices: 300,
            MovedPermanently: 301,
            Found: 302,
            SeeOther: 303,
            NotModified: 304,
            UseProxy: 305,
            Unused: 306,
            TemporaryRedirect: 307,
            PermanentRedirect: 308,
            BadRequest: 400,
            Unauthorized: 401,
            PaymentRequired: 402,
            Forbidden: 403,
            NotFound: 404,
            MethodNotAllowed: 405,
            NotAcceptable: 406,
            ProxyAuthenticationRequired: 407,
            RequestTimeout: 408,
            Conflict: 409,
            Gone: 410,
            LengthRequired: 411,
            PreconditionFailed: 412,
            PayloadTooLarge: 413,
            UriTooLong: 414,
            UnsupportedMediaType: 415,
            RangeNotSatisfiable: 416,
            ExpectationFailed: 417,
            ImATeapot: 418,
            MisdirectedRequest: 421,
            UnprocessableEntity: 422,
            Locked: 423,
            FailedDependency: 424,
            TooEarly: 425,
            UpgradeRequired: 426,
            PreconditionRequired: 428,
            TooManyRequests: 429,
            RequestHeaderFieldsTooLarge: 431,
            UnavailableForLegalReasons: 451,
            InternalServerError: 500,
            NotImplemented: 501,
            BadGateway: 502,
            ServiceUnavailable: 503,
            GatewayTimeout: 504,
            HttpVersionNotSupported: 505,
            VariantAlsoNegotiates: 506,
            InsufficientStorage: 507,
            LoopDetected: 508,
            NotExtended: 510,
            NetworkAuthenticationRequired: 511
          };
          Object.entries(HttpStatusCode).forEach(([key, value]) => {
            HttpStatusCode[value] = key;
          });
          var HttpStatusCode_default = HttpStatusCode;

          // node_modules/axios/lib/axios.js
          function createInstance(defaultConfig) {
            const context = new Axios_default(defaultConfig);
            const instance = bind(Axios_default.prototype.request, context);
            utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
            utils_default.extend(instance, context, null, { allOwnKeys: true });
            instance.create = function create(instanceConfig) {
              return createInstance(mergeConfig(defaultConfig, instanceConfig));
            };
            return instance;
          }
          var axios = createInstance(defaults_default);
          axios.Axios = Axios_default;
          axios.CanceledError = CanceledError_default;
          axios.CancelToken = CancelToken_default;
          axios.isCancel = isCancel;
          axios.VERSION = VERSION;
          axios.toFormData = toFormData_default;
          axios.AxiosError = AxiosError_default;
          axios.Cancel = axios.CanceledError;
          axios.all = function all(promises) {
            return Promise.all(promises);
          };
          axios.spread = spread;
          axios.isAxiosError = isAxiosError;
          axios.mergeConfig = mergeConfig;
          axios.AxiosHeaders = AxiosHeaders_default;
          axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
          axios.getAdapter = adapters_default.getAdapter;
          axios.HttpStatusCode = HttpStatusCode_default;
          axios.default = axios;
          var axios_default = axios;

          // node_modules/axios/index.js
          var {
            Axios: Axios2,
            AxiosError: AxiosError2,
            CanceledError: CanceledError2,
            isCancel: isCancel2,
            CancelToken: CancelToken2,
            VERSION: VERSION2,
            all: all2,
            Cancel,
            isAxiosError: isAxiosError2,
            spread: spread2,
            toFormData: toFormData2,
            AxiosHeaders: AxiosHeaders2,
            HttpStatusCode: HttpStatusCode2,
            formToJSON,
            getAdapter,
            mergeConfig: mergeConfig2
          } = axios_default;

          // src/client/base-api-client.ts
          var BaseApiClient = class {
            constructor(options) {
              this.network = options.network;
              this.basePath = (options == null ? void 0 : options.basePath) || "/";
            }
            _makeRequest(_0) {
              return __async(this, arguments, function* (path, method = "GET", params = {}) {
                const url = `${this.network == "testnet" /* Testnet */ ? VFX_API_BASE_URL_TESTNET : VFX_API_BASE_URL_MAINNET}${this.basePath}${path}`;
                let config = {
                  url,
                  method
                };
                if (method === "GET") {
                  config.params = params;
                } else {
                  config.headers = { "Content-Type": "application/json" };
                  config.data = params;
                }
                const response = yield axios_default(config);
                return response;
              });
            }
            makeJsonRequest(_0) {
              return __async(this, arguments, function* (path, method = "GET", params = {}) {
                const response = yield this._makeRequest(path, method, params);
                return response.data;
              });
            }
            makeTextRequest(_0) {
              return __async(this, arguments, function* (path, method = "GET", params = {}) {
                const response = yield this._makeRequest(path, method, params);
                return typeof response.data === "string" ? response.data : JSON.stringify(response.data);
              });
            }
            makeBoolRequest(_0) {
              return __async(this, arguments, function* (path, method = "GET", params = {}) {
                const text = yield this.makeTextRequest(path, method, params);
                return text.trim() === "true";
              });
            }
            makeMultipartRequest(path, files) {
              return __async(this, null, function* () {
                const url = `${this.network == "testnet" /* Testnet */ ? VFX_API_BASE_URL_TESTNET : VFX_API_BASE_URL_MAINNET}${this.basePath}${path}`;
                const response = yield axios_default.post(url, files, {
                  headers: {
                    "Content-Type": "multipart/form-data"
                  }
                });
                return response.data;
              });
            }
          };

          // src/client/raw-transaction-api-client.ts
          var RawTransactionApiClient = class extends BaseApiClient {
            constructor(network) {
              super({ basePath: "/raw", network });
            }
            getTimestamp() {
              return __async(this, null, function* () {
                const text = yield this.makeTextRequest("/timestamp/", "POST");
                return Number(text);
              });
            }
            getNonce(address) {
              return __async(this, null, function* () {
                const text = yield this.makeTextRequest(`/nonce/${address}/`, "POST");
                return Number(text);
              });
            }
            getFee(txData) {
              return __async(this, null, function* () {
                const params = { transaction: txData };
                const response = yield this.makeJsonRequest("/fee/", "POST", params);
                if ((response == null ? void 0 : response.Result) === "Success" && (response == null ? void 0 : response.Fee) != null) {
                  return Number(response.Fee);
                }
                throw new Error(`Unexpected getFee() result: ${JSON.stringify(response)}`);
              });
            }
            getHash(txData) {
              return __async(this, null, function* () {
                const params = { transaction: txData };
                const response = yield this.makeJsonRequest("/hash/", "POST", params);
                if ((response == null ? void 0 : response.Result) === "Success" && (response == null ? void 0 : response.Hash) != null) {
                  return response.Hash;
                }
                throw new Error(`Unexpected getHash() result: ${JSON.stringify(response)}`);
              });
            }
            validateSignature(message, address, signature) {
              return __async(this, null, function* () {
                return this.makeBoolRequest(`/validate-signature/${message}/${address}/${signature}/`, "POST");
              });
            }
            verifyTransaction(txData) {
              return __async(this, null, function* () {
                const params = { transaction: txData };
                const response = yield this.makeJsonRequest("/verify/", "POST", params);
                return (response == null ? void 0 : response.Result) === "Success";
              });
            }
            sendTransaction(txData) {
              return __async(this, null, function* () {
                const params = { transaction: txData };
                const response = yield this.makeJsonRequest("/send/", "POST", params);
                return (response == null ? void 0 : response.Result) === "Success";
              });
            }
          };

          // src/services/keypair-service.ts
          var import_crypto_js2 = __toESM(require_crypto_js());
          var import_bs58 = __toESM(require_bs58());
          var import_elliptic = __toESM(require_elliptic());
          var ecc = __toESM(require_js());
          var bip39 = __toESM(require_src2());
          var import_bip32 = __toESM(require_src4());
          var import_secp256k1 = __toESM(require_elliptic3());

          // src/utils.ts
          var import_crypto_js = __toESM(require_crypto_js());
          function wordArrayToByteArray(wordArray) {
            const len = wordArray.words.length;
            const u8_array = new Uint8Array(len << 2);
            let offset = 0;
            for (let i = 0; i < len; i++) {
              const word = wordArray.words[i];
              u8_array[offset++] = word >> 24;
              u8_array[offset++] = word >> 16 & 255;
              u8_array[offset++] = word >> 8 & 255;
              u8_array[offset++] = word & 255;
            }
            return u8_array;
          }
          function byteArrayToWordArray(ba) {
            const wa = [];
            for (let i = 0; i < ba.length; i++) {
              wa[i / 4 | 0] |= ba[i] << 24 - 8 * i;
            }
            return import_crypto_js.default.lib.WordArray.create(wa, ba.length);
          }
          function hexStringToByteArray(hexString) {
            if (hexString.length % 2 !== 0) {
              throw "Must have an even number of hex digits to convert to bytes";
            }
            const numBytes = hexString.length / 2;
            const byteArray = new Uint8Array(numBytes);
            for (let i = 0; i < numBytes; i++) {
              byteArray[i] = parseInt(hexString.substr(i * 2, 2), 16);
            }
            return byteArray;
          }
          function concatArrays(arrays) {
            const totalLength = arrays.reduce((acc, value) => acc + value.length, 0);
            const result = new Uint8Array(totalLength);
            let length = 0;
            for (const array of arrays) {
              result.set(array, length);
              length += array.length;
            }
            return result;
          }
          function hexToString(hex) {
            return import_crypto_js.default.enc.Hex.parse(hex);
          }
          function arrayToHex(uint8) {
            return Buffer.from(uint8.buffer, uint8.byteOffset, uint8.byteLength).toString(
              "hex"
            );
          }
          var big0 = BigInt(0);
          var big1 = BigInt(1);
          var big8 = BigInt(8);
          function isValidPrivateKey(privateKey) {
            const order = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
            const privateKeyHex = privateKey.toString(import_crypto_js.default.enc.Hex);
            return privateKeyHex < order && privateKeyHex.length === 64;
          }
          function isValidVfxDomain(domain) {
            const domainRegex = /^[a-z0-9]+\.vfx$/;
            return domainRegex.test(domain.trim().toLowerCase());
          }
          function cleanVfxDomain(domain) {
            let cleaned = domain.trim().toLowerCase();
            if (!cleaned.endsWith(".vfx")) {
              cleaned += ".vfx";
            }
            return cleaned;
          }
          function domainWithoutSuffix(domain) {
            if (domain.includes(".vfx") || domain.includes(".btc") || domain.includes(".rbx")) {
              return domain.split(".")[0];
            }
            return domain;
          }

          // src/services/keypair-service.ts
          var KeypairService = class {
            constructor(network) {
              this.network = network;
            }
            generatePrivateKey() {
              let privateKey;
              do {
                privateKey = import_crypto_js2.default.lib.WordArray.random(32);
              } while (!isValidPrivateKey(privateKey));
              return privateKey.toString(import_crypto_js2.default.enc.Hex);
            }
            generateMnemonic(words = 12) {
              return bip39.generateMnemonic(words == 12 ? 128 : 256);
            }
            privateKeyFromMneumonic(mnemonic, index) {
              const seed = bip39.mnemonicToSeedSync(mnemonic);
              const bip32 = (0, import_bip32.default)(ecc);
              const root = bip32.fromSeed(seed);
              const account = root.derivePath(`m/0'/0'/${index}'`);
              if (account.privateKey) {
                return account.privateKey.toString("hex");
              }
              return "";
            }
            publicFromPrivate(privateKey) {
              const curve = new import_elliptic.default.ec("secp256k1");
              const buffer = Buffer.from(privateKey.toLowerCase(), "hex");
              const keyPair = curve.keyFromPrivate(buffer);
              return keyPair.getPublic("hex");
            }
            addressFromPrivate(privateKey) {
              const curve = new import_elliptic.default.ec("secp256k1");
              const buffer = Buffer.from(privateKey.toLowerCase(), "hex");
              const keyPair = curve.keyFromPrivate(buffer);
              const publicKey = keyPair.getPublic("hex");
              const pubKeySha = import_crypto_js2.default.SHA256(hexToString(publicKey));
              const pubKeyShaRipe = import_crypto_js2.default.RIPEMD160(pubKeySha);
              const preHashWNetworkData = concatArrays([
                new Uint8Array(this.network == "testnet" /* Testnet */ ? [137] : [60]),
                wordArrayToByteArray(pubKeyShaRipe)
              ]);
              const publicHash = import_crypto_js2.default.SHA256(byteArrayToWordArray(preHashWNetworkData));
              const publicHashHash = import_crypto_js2.default.SHA256(publicHash);
              const checksum = publicHashHash.toString(import_crypto_js2.default.enc.Hex).slice(0, 8);
              const address = `${arrayToHex(preHashWNetworkData)}${checksum}`;
              const base54Address = import_bs58.default.encode(hexStringToByteArray(address));
              return base54Address;
            }
            getSignature(message, privateKeyHex) {
              const data = import_crypto_js2.default.SHA256(message).toString(import_crypto_js2.default.enc.Hex);
              const privateKey = Buffer.from(privateKeyHex, "hex");
              const dataBuffer = Buffer.from(data, "hex");
              const { signature } = import_secp256k1.default.ecdsaSign(dataBuffer, privateKey);
              const derEncodedSignature = import_secp256k1.default.signatureExport(signature);
              const signatureBase64 = Buffer.from(derEncodedSignature).toString("base64");
              let publicKeyHex = this.publicFromPrivate(privateKeyHex);
              if (publicKeyHex.substring(0, 2) === "04") {
                publicKeyHex = publicKeyHex.substring(2);
              }
              const publicKeyBuffer = Buffer.from(publicKeyHex, "hex");
              const publicKeyBufferBase58 = import_bs58.default.encode(publicKeyBuffer);
              const fullSignature = `${signatureBase64}.${publicKeyBufferBase58}`;
              return fullSignature;
            }
          };
          var keypair_service_default = KeypairService;

          // src/services/raw-transaction-service.ts
          var RawTransactionService = class {
            constructor(options) {
              this.hash = null;
              this.nonce = null;
              this.fee = null;
              this.timestamp = null;
              this.signature = null;
              var _a, _b, _c;
              this.network = options.network;
              this.keypair = options.keypair;
              this.toAddress = options.toAddress;
              this.txType = (_a = options.txType) != null ? _a : 0;
              this.amount = (_b = options.amount) != null ? _b : 0;
              this.data = (_c = options.data) != null ? _c : null;
              this.fromAddress = this.keypair.address;
            }
            updateTransactionData() {
              return {
                Hash: this.hash || "",
                ToAddress: this.toAddress,
                FromAddress: this.fromAddress,
                TransactionType: this.txType,
                Amount: this.amount,
                Nonce: this.nonce,
                Fee: this.fee || 0,
                Timestamp: this.timestamp,
                Signature: this.signature || "",
                Height: 0,
                Data: this.data,
                UnlockTime: null
              };
            }
            process(dryRun = false) {
              return __async(this, null, function* () {
                const client = new RawTransactionApiClient(this.network);
                const keypairService = new keypair_service_default(this.network);
                try {
                  this.timestamp = yield client.getTimestamp();
                  this.nonce = yield client.getNonce(this.fromAddress);
                  let txData = this.updateTransactionData();
                  this.fee = yield client.getFee(txData);
                  txData = this.updateTransactionData();
                  this.hash = yield client.getHash(txData);
                  this.signature = keypairService.getSignature(
                    this.hash,
                    this.keypair.privateKey
                  );
                  if (this.signature == null) {
                    throw new Error("Signature was null");
                  }
                  const signatureIsValid = yield client.validateSignature(
                    this.hash,
                    this.fromAddress,
                    this.signature
                  );
                  if (!signatureIsValid) {
                    throw new Error("Invalid Signature");
                  }
                  txData = this.updateTransactionData();
                  const txIsValid = yield client.verifyTransaction(txData);
                  if (!txIsValid) {
                    throw new Error("Invalid Transaction");
                  }
                  if (dryRun) {
                    return this.hash;
                  }
                  const success = yield client.sendTransaction(txData);
                  if (!success) {
                    throw new Error("Transaction failed to send");
                  }
                  return this.hash;
                } catch (error) {
                  console.error(`Error in process():`, error);
                  return null;
                }
              });
            }
          };

          // src/client/address-api-client.ts
          var AddressApiClient = class extends BaseApiClient {
            constructor(network) {
              super({ basePath: "/addresses", network });
              this.getAddressDetails = (address) => __async(this, null, function* () {
                try {
                  const result = yield this.makeJsonRequest(`/${address}`);
                  if (result) {
                    const address2 = {
                      address: result.address,
                      balance: result.balance,
                      balanceTotal: result.balance_total,
                      balanceLocked: result.balance_locked,
                      adnr: result.adnr,
                      activated: result.activated
                    };
                    return address2;
                  }
                  return null;
                } catch (e) {
                  return null;
                }
              });
              this.domainAvailable = (domain) => __async(this, null, function* () {
                try {
                  yield this.makeJsonRequest(`/adnr/${domain}/`);
                  return false;
                } catch (e) {
                  return true;
                }
              });
            }
          };

          // src/client/vfx-client.ts
          var VfxClient = class {
            constructor(network, dryRun = false) {
              this.sendCoin = (keypair, toAddress, amount) => __async(this, null, function* () {
                const txBuilder = new RawTransactionService({ network: this.network, keypair, toAddress, amount });
                return yield txBuilder.process(this.dryRun);
              });
              this.buyVfxDomain = (keypair, domain) => __async(this, null, function* () {
                domain = cleanVfxDomain(domain);
                if (!isValidVfxDomain(domain)) {
                  throw new Error(`Invalid vfx domain: ${domain}`);
                }
                const addressApiClient = new AddressApiClient(this.network);
                const addressDetails = yield addressApiClient.getAddressDetails(keypair.address);
                if (addressDetails && addressDetails.adnr != null) {
                  throw new Error(`Address already has a domain: ${addressDetails.adnr}`);
                }
                const available = yield addressApiClient.domainAvailable(domain);
                if (!available) {
                  throw new Error(`Domain already exists: ${domain}`);
                }
                const data = {
                  "Function": "AdnrCreate()",
                  "Name": domainWithoutSuffix(domain)
                };
                const txBuilder = new RawTransactionService({
                  network: this.network,
                  keypair,
                  toAddress: "Adnr_Base",
                  amount: DOMAIN_PURCHASE_COST,
                  txType: 6 /* Adnr */,
                  data
                });
                return yield txBuilder.process(this.dryRun);
              });
              this.network = network;
              this.dryRun = dryRun;
            }
          };

          // src/browser.ts
          window.vfx = { KeypairService: keypair_service_default, VfxClient };
        })();
        /*! Bundled license information:
        
        crypto-js/ripemd160.js:
          (** @preserve
            (c) 2012 by Cédric Mesnil. All rights reserved.
          
            Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
          
                - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
                - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
          
            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
            *)
        
        crypto-js/mode-ctr-gladman.js:
          (** @preserve
           * Counter block mode compatible with  Dr Brian Gladman fileenc.c
           * derived from CryptoJS.mode.CTR
           * Jan Hruby jhruby.web@gmail.com
           *)
        
        ieee754/index.js:
          (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
        
        buffer/index.js:
          (*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <https://feross.org>
           * @license  MIT
           *)
        
        safe-buffer/index.js:
          (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
        */

      }).call(this)
    }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], require("timers").setImmediate)
  }, { "_process": 5, "buffer": 3, "timers": 6 }], 2: [function (require, module, exports) {
    'use strict'

    exports.byteLength = byteLength
    exports.toByteArray = toByteArray
    exports.fromByteArray = fromByteArray

    var lookup = []
    var revLookup = []
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i]
      revLookup[code.charCodeAt(i)] = i
    }

    // Support decoding URL-safe base64 strings, as Node.js does.
    // See: https://en.wikipedia.org/wiki/Base64#URL_applications
    revLookup['-'.charCodeAt(0)] = 62
    revLookup['_'.charCodeAt(0)] = 63

    function getLens(b64) {
      var len = b64.length

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // Trim off extra bytes after placeholder bytes are found
      // See: https://github.com/beatgammit/base64-js/issues/42
      var validLen = b64.indexOf('=')
      if (validLen === -1) validLen = len

      var placeHoldersLen = validLen === len
        ? 0
        : 4 - (validLen % 4)

      return [validLen, placeHoldersLen]
    }

    // base64 is 4/3 + up to two characters of the original data
    function byteLength(b64) {
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function _byteLength(b64, validLen, placeHoldersLen) {
      return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
    }

    function toByteArray(b64) {
      var tmp
      var lens = getLens(b64)
      var validLen = lens[0]
      var placeHoldersLen = lens[1]

      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

      var curByte = 0

      // if there are placeholders, only get up to the last complete 4 chars
      var len = placeHoldersLen > 0
        ? validLen - 4
        : validLen

      var i
      for (i = 0; i < len; i += 4) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 18) |
          (revLookup[b64.charCodeAt(i + 1)] << 12) |
          (revLookup[b64.charCodeAt(i + 2)] << 6) |
          revLookup[b64.charCodeAt(i + 3)]
        arr[curByte++] = (tmp >> 16) & 0xFF
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }

      if (placeHoldersLen === 2) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 2) |
          (revLookup[b64.charCodeAt(i + 1)] >> 4)
        arr[curByte++] = tmp & 0xFF
      }

      if (placeHoldersLen === 1) {
        tmp =
          (revLookup[b64.charCodeAt(i)] << 10) |
          (revLookup[b64.charCodeAt(i + 1)] << 4) |
          (revLookup[b64.charCodeAt(i + 2)] >> 2)
        arr[curByte++] = (tmp >> 8) & 0xFF
        arr[curByte++] = tmp & 0xFF
      }

      return arr
    }

    function tripletToBase64(num) {
      return lookup[num >> 18 & 0x3F] +
        lookup[num >> 12 & 0x3F] +
        lookup[num >> 6 & 0x3F] +
        lookup[num & 0x3F]
    }

    function encodeChunk(uint8, start, end) {
      var tmp
      var output = []
      for (var i = start; i < end; i += 3) {
        tmp =
          ((uint8[i] << 16) & 0xFF0000) +
          ((uint8[i + 1] << 8) & 0xFF00) +
          (uint8[i + 2] & 0xFF)
        output.push(tripletToBase64(tmp))
      }
      return output.join('')
    }

    function fromByteArray(uint8) {
      var tmp
      var len = uint8.length
      var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
      var parts = []
      var maxChunkLength = 16383 // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1]
        parts.push(
          lookup[tmp >> 2] +
          lookup[(tmp << 4) & 0x3F] +
          '=='
        )
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1]
        parts.push(
          lookup[tmp >> 10] +
          lookup[(tmp >> 4) & 0x3F] +
          lookup[(tmp << 2) & 0x3F] +
          '='
        )
      }

      return parts.join('')
    }

  }, {}], 3: [function (require, module, exports) {
    (function (Buffer) {
      (function () {
        /*!
         * The buffer module from node.js, for the browser.
         *
         * @author   Feross Aboukhadijeh <https://feross.org>
         * @license  MIT
         */
        /* eslint-disable no-proto */

        'use strict'

        var base64 = require('base64-js')
        var ieee754 = require('ieee754')

        exports.Buffer = Buffer
        exports.SlowBuffer = SlowBuffer
        exports.INSPECT_MAX_BYTES = 50

        var K_MAX_LENGTH = 0x7fffffff
        exports.kMaxLength = K_MAX_LENGTH

        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */
        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
          typeof console.error === 'function') {
          console.error(
            'This browser lacks typed array (Uint8Array) support which is required by ' +
            '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
          )
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            var arr = new Uint8Array(1)
            arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
            return arr.foo() === 42
          } catch (e) {
            return false
          }
        }

        Object.defineProperty(Buffer.prototype, 'parent', {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined
            return this.buffer
          }
        })

        Object.defineProperty(Buffer.prototype, 'offset', {
          enumerable: true,
          get: function () {
            if (!Buffer.isBuffer(this)) return undefined
            return this.byteOffset
          }
        })

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError('The value "' + length + '" is invalid for option "size"')
          }
          // Return an augmented `Uint8Array` instance
          var buf = new Uint8Array(length)
          buf.__proto__ = Buffer.prototype
          return buf
        }

        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */

        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new TypeError(
                'The "string" argument must be of type string. Received type number'
              )
            }
            return allocUnsafe(arg)
          }
          return from(arg, encodingOrOffset, length)
        }

        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
        if (typeof Symbol !== 'undefined' && Symbol.species != null &&
          Buffer[Symbol.species] === Buffer) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
          })
        }

        Buffer.poolSize = 8192 // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === 'string') {
            return fromString(value, encodingOrOffset)
          }

          if (ArrayBuffer.isView(value)) {
            return fromArrayLike(value)
          }

          if (value == null) {
            throw TypeError(
              'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
              'or Array-like Object. Received type ' + (typeof value)
            )
          }

          if (isInstance(value, ArrayBuffer) ||
            (value && isInstance(value.buffer, ArrayBuffer))) {
            return fromArrayBuffer(value, encodingOrOffset, length)
          }

          if (typeof value === 'number') {
            throw new TypeError(
              'The "value" argument must not be of type number. Received type number'
            )
          }

          var valueOf = value.valueOf && value.valueOf()
          if (valueOf != null && valueOf !== value) {
            return Buffer.from(valueOf, encodingOrOffset, length)
          }

          var b = fromObject(value)
          if (b) return b

          if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
            typeof value[Symbol.toPrimitive] === 'function') {
            return Buffer.from(
              value[Symbol.toPrimitive]('string'), encodingOrOffset, length
            )
          }

          throw new TypeError(
            'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
            'or Array-like Object. Received type ' + (typeof value)
          )
        }

        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/
        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length)
        }

        // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148
        Buffer.prototype.__proto__ = Uint8Array.prototype
        Buffer.__proto__ = Uint8Array

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be of type number')
          } else if (size < 0) {
            throw new RangeError('The value "' + size + '" is invalid for option "size"')
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size)
          if (size <= 0) {
            return createBuffer(size)
          }
          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string'
              ? createBuffer(size).fill(fill, encoding)
              : createBuffer(size).fill(fill)
          }
          return createBuffer(size)
        }

        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/
        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding)
        }

        function allocUnsafe(size) {
          assertSize(size)
          return createBuffer(size < 0 ? 0 : checked(size) | 0)
        }

        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */
        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size)
        }
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */
        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size)
        }

        function fromString(string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8'
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('Unknown encoding: ' + encoding)
          }

          var length = byteLength(string, encoding) | 0
          var buf = createBuffer(length)

          var actual = buf.write(string, encoding)

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual)
          }

          return buf
        }

        function fromArrayLike(array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0
          var buf = createBuffer(length)
          for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255
          }
          return buf
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('"offset" is outside of buffer bounds')
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('"length" is outside of buffer bounds')
          }

          var buf
          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array)
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset)
          } else {
            buf = new Uint8Array(array, byteOffset, length)
          }

          // Return an augmented `Uint8Array` instance
          buf.__proto__ = Buffer.prototype
          return buf
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0
            var buf = createBuffer(len)

            if (buf.length === 0) {
              return buf
            }

            obj.copy(buf, 0, 0, len)
            return buf
          }

          if (obj.length !== undefined) {
            if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
              return createBuffer(0)
            }
            return fromArrayLike(obj)
          }

          if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
            return fromArrayLike(obj.data)
          }
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
              'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
          }
          return length | 0
        }

        function SlowBuffer(length) {
          if (+length != length) { // eslint-disable-line eqeqeq
            length = 0
          }
          return Buffer.alloc(+length)
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true &&
            b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
        }

        Buffer.compare = function compare(a, b) {
          if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
          if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError(
              'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
            )
          }

          if (a === b) return 0

          var x = a.length
          var y = b.length

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i]
              y = b[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true
            default:
              return false
          }
        }

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers')
          }

          if (list.length === 0) {
            return Buffer.alloc(0)
          }

          var i
          if (length === undefined) {
            length = 0
            for (i = 0; i < list.length; ++i) {
              length += list[i].length
            }
          }

          var buffer = Buffer.allocUnsafe(length)
          var pos = 0
          for (i = 0; i < list.length; ++i) {
            var buf = list[i]
            if (isInstance(buf, Uint8Array)) {
              buf = Buffer.from(buf)
            }
            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }
            buf.copy(buffer, pos)
            pos += buf.length
          }
          return buffer
        }

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length
          }
          if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
            return string.byteLength
          }
          if (typeof string !== 'string') {
            throw new TypeError(
              'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
              'Received type ' + typeof string
            )
          }

          var len = string.length
          var mustMatch = (arguments.length > 2 && arguments[2] === true)
          if (!mustMatch && len === 0) return 0

          // Use a for loop to avoid recursion
          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len
              case 'utf8':
              case 'utf-8':
                return utf8ToBytes(string).length
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2
              case 'hex':
                return len >>> 1
              case 'base64':
                return base64ToBytes(string).length
              default:
                if (loweredCase) {
                  return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                }
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }
        Buffer.byteLength = byteLength

        function slowToString(encoding, start, end) {
          var loweredCase = false

          // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.

          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
          if (start === undefined || start < 0) {
            start = 0
          }
          // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.
          if (start > this.length) {
            return ''
          }

          if (end === undefined || end > this.length) {
            end = this.length
          }

          if (end <= 0) {
            return ''
          }

          // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
          end >>>= 0
          start >>>= 0

          if (end <= start) {
            return ''
          }

          if (!encoding) encoding = 'utf8'

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end)

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end)

              case 'ascii':
                return asciiSlice(this, start, end)

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end)

              case 'base64':
                return base64Slice(this, start, end)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = (encoding + '').toLowerCase()
                loweredCase = true
            }
          }
        }

        // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154
        Buffer.prototype._isBuffer = true

        function swap(b, n, m) {
          var i = b[n]
          b[n] = b[m]
          b[m] = i
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length
          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits')
          }
          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1)
          }
          return this
        }

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length
          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits')
          }
          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3)
            swap(this, i + 1, i + 2)
          }
          return this
        }

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length
          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits')
          }
          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7)
            swap(this, i + 1, i + 6)
            swap(this, i + 2, i + 5)
            swap(this, i + 3, i + 4)
          }
          return this
        }

        Buffer.prototype.toString = function toString() {
          var length = this.length
          if (length === 0) return ''
          if (arguments.length === 0) return utf8Slice(this, 0, length)
          return slowToString.apply(this, arguments)
        }

        Buffer.prototype.toLocaleString = Buffer.prototype.toString

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
          if (this === b) return true
          return Buffer.compare(this, b) === 0
        }

        Buffer.prototype.inspect = function inspect() {
          var str = ''
          var max = exports.INSPECT_MAX_BYTES
          str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
          if (this.length > max) str += ' ... '
          return '<Buffer ' + str + '>'
        }

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (isInstance(target, Uint8Array)) {
            target = Buffer.from(target, target.offset, target.byteLength)
          }
          if (!Buffer.isBuffer(target)) {
            throw new TypeError(
              'The "target" argument must be one of type Buffer or Uint8Array. ' +
              'Received type ' + (typeof target)
            )
          }

          if (start === undefined) {
            start = 0
          }
          if (end === undefined) {
            end = target ? target.length : 0
          }
          if (thisStart === undefined) {
            thisStart = 0
          }
          if (thisEnd === undefined) {
            thisEnd = this.length
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index')
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0
          }
          if (thisStart >= thisEnd) {
            return -1
          }
          if (start >= end) {
            return 1
          }

          start >>>= 0
          end >>>= 0
          thisStart >>>= 0
          thisEnd >>>= 0

          if (this === target) return 0

          var x = thisEnd - thisStart
          var y = end - start
          var len = Math.min(x, y)

          var thisCopy = this.slice(thisStart, thisEnd)
          var targetCopy = target.slice(start, end)

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i]
              y = targetCopy[i]
              break
            }
          }

          if (x < y) return -1
          if (y < x) return 1
          return 0
        }

        // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf
        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1

          // Normalize byteOffset
          if (typeof byteOffset === 'string') {
            encoding = byteOffset
            byteOffset = 0
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000
          }
          byteOffset = +byteOffset // Coerce to Number.
          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : (buffer.length - 1)
          }

          // Normalize byteOffset: negative offsets start from the end of the buffer
          if (byteOffset < 0) byteOffset = buffer.length + byteOffset
          if (byteOffset >= buffer.length) {
            if (dir) return -1
            else byteOffset = buffer.length - 1
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0
            else return -1
          }

          // Normalize val
          if (typeof val === 'string') {
            val = Buffer.from(val, encoding)
          }

          // Finally, search either indexOf (if dir is true) or lastIndexOf
          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1
            }
            return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
          } else if (typeof val === 'number') {
            val = val & 0xFF // Search for a byte value [0-255]
            if (typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
              }
            }
            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
          }

          throw new TypeError('val must be string, number or Buffer')
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1
          var arrLength = arr.length
          var valLength = val.length

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase()
            if (encoding === 'ucs2' || encoding === 'ucs-2' ||
              encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1
              }
              indexSize = 2
              arrLength /= 2
              valLength /= 2
              byteOffset /= 2
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i]
            } else {
              return buf.readUInt16BE(i * indexSize)
            }
          }

          var i
          if (dir) {
            var foundIndex = -1
            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
              } else {
                if (foundIndex !== -1) i -= i - foundIndex
                foundIndex = -1
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
            for (i = byteOffset; i >= 0; i--) {
              var found = true
              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false
                  break
                }
              }
              if (found) return i
            }
          }

          return -1
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1
        }

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
        }

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
        }

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0
          var remaining = buf.length - offset
          if (!length) {
            length = remaining
          } else {
            length = Number(length)
            if (length > remaining) {
              length = remaining
            }
          }

          var strLen = string.length

          if (length > strLen / 2) {
            length = strLen / 2
          }
          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16)
            if (numberIsNaN(parsed)) return i
            buf[offset + i] = parsed
          }
          return i
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length)
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length)
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length)
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8'
            length = this.length
            offset = 0
            // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset
            length = this.length
            offset = 0
            // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0
            if (isFinite(length)) {
              length = length >>> 0
              if (encoding === undefined) encoding = 'utf8'
            } else {
              encoding = length
              length = undefined
            }
          } else {
            throw new Error(
              'Buffer.write(string, encoding, offset[, length]) is no longer supported'
            )
          }

          var remaining = this.length - offset
          if (length === undefined || length > remaining) length = remaining

          if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds')
          }

          if (!encoding) encoding = 'utf8'

          var loweredCase = false
          for (; ;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length)

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length)

              case 'ascii':
                return asciiWrite(this, string, offset, length)

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length)

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length)

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length)

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                encoding = ('' + encoding).toLowerCase()
                loweredCase = true
            }
          }
        }

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          }
        }

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf)
          } else {
            return base64.fromByteArray(buf.slice(start, end))
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end)
          var res = []

          var i = start
          while (i < end) {
            var firstByte = buf[i]
            var codePoint = null
            var bytesPerSequence = (firstByte > 0xEF) ? 4
              : (firstByte > 0xDF) ? 3
                : (firstByte > 0xBF) ? 2
                  : 1

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte
                  }
                  break
                case 2:
                  secondByte = buf[i + 1]
                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 3:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint
                    }
                  }
                  break
                case 4:
                  secondByte = buf[i + 1]
                  thirdByte = buf[i + 2]
                  fourthByte = buf[i + 3]
                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint
                    }
                  }
              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD
              bytesPerSequence = 1
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000
              res.push(codePoint >>> 10 & 0x3FF | 0xD800)
              codePoint = 0xDC00 | codePoint & 0x3FF
            }

            res.push(codePoint)
            i += bytesPerSequence
          }

          return decodeCodePointsArray(res)
        }

        // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety
        var MAX_ARGUMENTS_LENGTH = 0x1000

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length
          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
          }

          // Decode in chunks to avoid "call stack size exceeded".
          var res = ''
          var i = 0
          while (i < len) {
            res += String.fromCharCode.apply(
              String,
              codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
            )
          }
          return res
        }

        function asciiSlice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F)
          }
          return ret
        }

        function latin1Slice(buf, start, end) {
          var ret = ''
          end = Math.min(buf.length, end)

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i])
          }
          return ret
        }

        function hexSlice(buf, start, end) {
          var len = buf.length

          if (!start || start < 0) start = 0
          if (!end || end < 0 || end > len) end = len

          var out = ''
          for (var i = start; i < end; ++i) {
            out += toHex(buf[i])
          }
          return out
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end)
          var res = ''
          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
          }
          return res
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length
          start = ~~start
          end = end === undefined ? len : ~~end

          if (start < 0) {
            start += len
            if (start < 0) start = 0
          } else if (start > len) {
            start = len
          }

          if (end < 0) {
            end += len
            if (end < 0) end = 0
          } else if (end > len) {
            end = len
          }

          if (end < start) end = start

          var newBuf = this.subarray(start, end)
          // Return an augmented `Uint8Array` instance
          newBuf.__proto__ = Buffer.prototype
          return newBuf
        }

        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */
        function checkOffset(offset, ext, length) {
          if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }

          return val
        }

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length)
          }

          var val = this[offset + --byteLength]
          var mul = 1
          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul
          }

          return val
        }

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 1, this.length)
          return this[offset]
        }

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          return this[offset] | (this[offset + 1] << 8)
        }

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          return (this[offset] << 8) | this[offset + 1]
        }

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return ((this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16)) +
            (this[offset + 3] * 0x1000000)
        }

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] * 0x1000000) +
            ((this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              this[offset + 3])
        }

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var val = this[offset]
          var mul = 1
          var i = 0
          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) checkOffset(offset, byteLength, this.length)

          var i = byteLength
          var mul = 1
          var val = this[offset + --i]
          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul
          }
          mul *= 0x80

          if (val >= mul) val -= Math.pow(2, 8 * byteLength)

          return val
        }

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 1, this.length)
          if (!(this[offset] & 0x80)) return (this[offset])
          return ((0xff - this[offset] + 1) * -1)
        }

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset] | (this[offset + 1] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 2, this.length)
          var val = this[offset + 1] | (this[offset] << 8)
          return (val & 0x8000) ? val | 0xFFFF0000 : val
        }

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset]) |
            (this[offset + 1] << 8) |
            (this[offset + 2] << 16) |
            (this[offset + 3] << 24)
        }

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)

          return (this[offset] << 24) |
            (this[offset + 1] << 16) |
            (this[offset + 2] << 8) |
            (this[offset + 3])
        }

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, true, 23, 4)
        }

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 4, this.length)
          return ieee754.read(this, offset, false, 23, 4)
        }

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, true, 52, 8)
        }

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          offset = offset >>> 0
          if (!noAssert) checkOffset(offset, 8, this.length)
          return ieee754.read(this, offset, false, 52, 8)
        }

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var mul = 1
          var i = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          byteLength = byteLength >>> 0
          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1
            checkInt(this, value, offset, byteLength, maxBytes, 0)
          }

          var i = byteLength - 1
          var mul = 1
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = (value / mul) & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
          this[offset] = (value & 0xff)
          return offset + 1
        }

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          return offset + 2
        }

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
          this[offset] = (value >>> 8)
          this[offset + 1] = (value & 0xff)
          return offset + 2
        }

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          this[offset + 3] = (value >>> 24)
          this[offset + 2] = (value >>> 16)
          this[offset + 1] = (value >>> 8)
          this[offset] = (value & 0xff)
          return offset + 4
        }

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
          this[offset] = (value >>> 24)
          this[offset + 1] = (value >>> 16)
          this[offset + 2] = (value >>> 8)
          this[offset + 3] = (value & 0xff)
          return offset + 4
        }

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = 0
          var mul = 1
          var sub = 0
          this[offset] = value & 0xFF
          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            var limit = Math.pow(2, (8 * byteLength) - 1)

            checkInt(this, value, offset, byteLength, limit - 1, -limit)
          }

          var i = byteLength - 1
          var mul = 1
          var sub = 0
          this[offset + i] = value & 0xFF
          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1
            }
            this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
          }

          return offset + byteLength
        }

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
          if (value < 0) value = 0xff + value + 1
          this[offset] = (value & 0xff)
          return offset + 1
        }

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          return offset + 2
        }

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
          this[offset] = (value >>> 8)
          this[offset + 1] = (value & 0xff)
          return offset + 2
        }

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          this[offset] = (value & 0xff)
          this[offset + 1] = (value >>> 8)
          this[offset + 2] = (value >>> 16)
          this[offset + 3] = (value >>> 24)
          return offset + 4
        }

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
          if (value < 0) value = 0xffffffff + value + 1
          this[offset] = (value >>> 24)
          this[offset + 1] = (value >>> 16)
          this[offset + 2] = (value >>> 8)
          this[offset + 3] = (value & 0xff)
          return offset + 4
        }

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range')
          if (offset < 0) throw new RangeError('Index out of range')
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
          }
          ieee754.write(buf, value, offset, littleEndian, 23, 4)
          return offset + 4
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert)
        }

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value
          offset = offset >>> 0
          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
          }
          ieee754.write(buf, value, offset, littleEndian, 52, 8)
          return offset + 8
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert)
        }

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert)
        }

        // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
          if (!start) start = 0
          if (!end && end !== 0) end = this.length
          if (targetStart >= target.length) targetStart = target.length
          if (!targetStart) targetStart = 0
          if (end > 0 && end < start) end = start

          // Copy 0 bytes; we're done
          if (end === start) return 0
          if (target.length === 0 || this.length === 0) return 0

          // Fatal error conditions
          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds')
          }
          if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
          if (end < 0) throw new RangeError('sourceEnd out of bounds')

          // Are we oob?
          if (end > this.length) end = this.length
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start
          }

          var len = end - start

          if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
            // Use built-in when available, missing from IE11
            this.copyWithin(targetStart, start, end)
          } else if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (var i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start]
            }
          } else {
            Uint8Array.prototype.set.call(
              target,
              this.subarray(start, end),
              targetStart
            )
          }

          return len
        }

        // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])
        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start
              start = 0
              end = this.length
            } else if (typeof end === 'string') {
              encoding = end
              end = this.length
            }
            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string')
            }
            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding)
            }
            if (val.length === 1) {
              var code = val.charCodeAt(0)
              if ((encoding === 'utf8' && code < 128) ||
                encoding === 'latin1') {
                // Fast path: If `val` fits into a single byte, use that numeric value.
                val = code
              }
            }
          } else if (typeof val === 'number') {
            val = val & 255
          }

          // Invalid ranges are not set to a default, so can range check early.
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index')
          }

          if (end <= start) {
            return this
          }

          start = start >>> 0
          end = end === undefined ? this.length : end >>> 0

          if (!val) val = 0

          var i
          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val
            }
          } else {
            var bytes = Buffer.isBuffer(val)
              ? val
              : Buffer.from(val, encoding)
            var len = bytes.length
            if (len === 0) {
              throw new TypeError('The value "' + val +
                '" is invalid for argument "value"')
            }
            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len]
            }
          }

          return this
        }

        // HELPER FUNCTIONS
        // ================

        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

        function base64clean(str) {
          // Node takes equal signs as end of the Base64 encoding
          str = str.split('=')[0]
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = str.trim().replace(INVALID_BASE64_RE, '')
          // Node converts strings with length < 2 to ''
          if (str.length < 2) return ''
          // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
          while (str.length % 4 !== 0) {
            str = str + '='
          }
          return str
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16)
          return n.toString(16)
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity
          var codePoint
          var length = string.length
          var leadSurrogate = null
          var bytes = []

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i)

            // is surrogate component
            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  continue
                }

                // valid lead
                leadSurrogate = codePoint

                continue
              }

              // 2 leads in a row
              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                leadSurrogate = codePoint
                continue
              }

              // valid surrogate pair
              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            }

            leadSurrogate = null

            // encode utf8
            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break
              bytes.push(codePoint)
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break
              bytes.push(
                codePoint >> 0x6 | 0xC0,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break
              bytes.push(
                codePoint >> 0xC | 0xE0,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break
              bytes.push(
                codePoint >> 0x12 | 0xF0,
                codePoint >> 0xC & 0x3F | 0x80,
                codePoint >> 0x6 & 0x3F | 0x80,
                codePoint & 0x3F | 0x80
              )
            } else {
              throw new Error('Invalid code point')
            }
          }

          return bytes
        }

        function asciiToBytes(str) {
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF)
          }
          return byteArray
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo
          var byteArray = []
          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break

            c = str.charCodeAt(i)
            hi = c >> 8
            lo = c % 256
            byteArray.push(lo)
            byteArray.push(hi)
          }

          return byteArray
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str))
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if ((i + offset >= dst.length) || (i >= src.length)) break
            dst[i + offset] = src[i]
          }
          return i
        }

        // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
        // the `instanceof` check but they should be treated as of that type.
        // See: https://github.com/feross/buffer/issues/166
        function isInstance(obj, type) {
          return obj instanceof type ||
            (obj != null && obj.constructor != null && obj.constructor.name != null &&
              obj.constructor.name === type.name)
        }
        function numberIsNaN(obj) {
          // For IE11 support
          return obj !== obj // eslint-disable-line no-self-compare
        }

      }).call(this)
    }).call(this, require("buffer").Buffer)
  }, { "base64-js": 2, "buffer": 3, "ieee754": 4 }], 4: [function (require, module, exports) {
    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
    exports.read = function (buffer, offset, isLE, mLen, nBytes) {
      var e, m
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var nBits = -7
      var i = isLE ? (nBytes - 1) : 0
      var d = isLE ? -1 : 1
      var s = buffer[offset + i]

      i += d

      e = s & ((1 << (-nBits)) - 1)
      s >>= (-nBits)
      nBits += eLen
      for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

      m = e & ((1 << (-nBits)) - 1)
      e >>= (-nBits)
      nBits += mLen
      for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

      if (e === 0) {
        e = 1 - eBias
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen)
        e = e - eBias
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c
      var eLen = (nBytes * 8) - mLen - 1
      var eMax = (1 << eLen) - 1
      var eBias = eMax >> 1
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
      var i = isLE ? 0 : (nBytes - 1)
      var d = isLE ? 1 : -1
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

      value = Math.abs(value)

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0
        e = eMax
      } else {
        e = Math.floor(Math.log(value) / Math.LN2)
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--
          c *= 2
        }
        if (e + eBias >= 1) {
          value += rt / c
        } else {
          value += rt * Math.pow(2, 1 - eBias)
        }
        if (value * c >= 2) {
          e++
          c /= 2
        }

        if (e + eBias >= eMax) {
          m = 0
          e = eMax
        } else if (e + eBias >= 1) {
          m = ((value * c) - 1) * Math.pow(2, mLen)
          e = e + eBias
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
          e = 0
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

      e = (e << mLen) | m
      eLen += mLen
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

      buffer[offset + i - d] |= s * 128
    }

  }, {}], 5: [function (require, module, exports) {
    // shim for using process in browser
    var process = module.exports = {};

    // cached from whatever global is present so that test runners that stub it
    // don't break things.  But we need to wrap it in a try catch in case it is
    // wrapped in strict mode code which doesn't define any globals.  It's inside a
    // function because try/catches deoptimize in certain engines.

    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout() {
      throw new Error('clearTimeout has not been defined');
    }
    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    }())
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
          return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
          return cachedSetTimeout.call(this, fun, 0);
        }
      }


    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
      } catch (e) {
        try {
          // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
          return cachedClearTimeout.call(null, marker);
        } catch (e) {
          // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
          // Some versions of I.E. have different rules for clearTimeout vs setTimeout
          return cachedClearTimeout.call(this, marker);
        }
      }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() { }

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] }

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function () { return 0; };

  }, {}], 6: [function (require, module, exports) {
    (function (setImmediate, clearImmediate) {
      (function () {
        var nextTick = require('process/browser.js').nextTick;
        var apply = Function.prototype.apply;
        var slice = Array.prototype.slice;
        var immediateIds = {};
        var nextImmediateId = 0;

        // DOM APIs, for completeness

        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
        };
        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
        };
        exports.clearTimeout =
          exports.clearInterval = function (timeout) { timeout.close(); };

        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }
        Timeout.prototype.unref = Timeout.prototype.ref = function () { };
        Timeout.prototype.close = function () {
          this._clearFn.call(window, this._id);
        };

        // Does not start the time, just sets up the members needed.
        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };

        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };

        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);

          var msecs = item._idleTimeout;
          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function onTimeout() {
              if (item._onTimeout)
                item._onTimeout();
            }, msecs);
          }
        };

        // That's not how node.js implements it but the exposed api is the same.
        exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function (fn) {
          var id = nextImmediateId++;
          var args = arguments.length < 2 ? false : slice.call(arguments, 1);

          immediateIds[id] = true;

          nextTick(function onNextTick() {
            if (immediateIds[id]) {
              // fn.call() is faster so we optimize for the common use-case
              // @see http://jsperf.com/call-apply-segu
              if (args) {
                fn.apply(null, args);
              } else {
                fn.call(null);
              }
              // Prevent ids from leaking
              exports.clearImmediate(id);
            }
          });

          return id;
        };

        exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function (id) {
          delete immediateIds[id];
        };
      }).call(this)
    }).call(this, require("timers").setImmediate, require("timers").clearImmediate)
  }, { "process/browser.js": 5, "timers": 6 }]
}, {}, [1]);
